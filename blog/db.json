{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/ayer/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":1,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":1,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":1,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover9.jpg","path":"images/cover9.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":1,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fd55ebb4265f1fc8dd24b6700dba92aa46f67b23","modified":1588575703724},{"_id":"themes/ayer/.postcssrc","hash":"1dd8ddbf9ba6fd3748d0b93c1f0f3d95ec918bf0","modified":1588487051080},{"_id":"themes/ayer/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1588487051080},{"_id":"themes/ayer/LICENSE","hash":"064037836065f908ffa619cbdae26dea2989ebeb","modified":1588487051080},{"_id":"themes/ayer/.travis.yml","hash":"c4bbefb55e020855b98b59657ef0a2816aa97add","modified":1588487051080},{"_id":"themes/ayer/README.md","hash":"02e86adf578f0b54971eb7c094199004786dba20","modified":1588487051080},{"_id":"themes/ayer/_config.yml","hash":"06a4c323dc015e48b4962c0d0c9183c4f8492450","modified":1588490509804},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1588487051084},{"_id":"themes/ayer/package.json","hash":"f790b903bfa4074d124c715278b8a037bd008027","modified":1588487051084},{"_id":"source/_posts/Git.md","hash":"6969c3bc1300f04f935a633c6da2d506b422c7bf","modified":1588474502789},{"_id":"source/_posts/Linux.md","hash":"c5f645f8744d2060a0c674daf5684aa8ef55b136","modified":1588474502789},{"_id":"source/_posts/mongod_note.md","hash":"473778d8529f2d36c7e91fbd31db878d168dc3f2","modified":1588474502789},{"_id":"source/_posts/spider.md","hash":"f92790e0a8b74cf4cdc4c5740ca0e76c787cd8ea","modified":1588474502789},{"_id":"source/_posts/博客搭建.md","hash":"3066236334d43d19d1d991a5788df9716b3c2327","modified":1588575092652},{"_id":"source/_posts/正则.md","hash":"baa3f757e0bc9b5252ac6d04f093e5e789c4aa7e","modified":1588300095000},{"_id":"source/_posts/管理学.md","hash":"0cb680ebcc2d6a11696c414e32de0e0d727227a3","modified":1588474502789},{"_id":"source/_posts/网络协议.md","hash":"52ff2b2a994611368d520d736e0cf27d2c003fe1","modified":1588474502789},{"_id":"source/about/index.md","hash":"e796de30d08cbc3a35722a9080f6e94094673c02","modified":1588490826776},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1588488357580},{"_id":"source/photos/index.md","hash":"8d55abb69a4189fdb29d238c7dfb959b40d07002","modified":1588489513724},{"_id":"source/tags/index.md","hash":"111aa0bd8f22b1ebbdf50eaa76b9dbfe31b52c49","modified":1588471970553},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"85381e9e2d3b868fb4a8a4339bcb7531690d073e","modified":1588487051080},{"_id":"themes/ayer/languages/de.yml","hash":"f1391e17d0422e6050171bfbc1780b4b01df4c55","modified":1588487051080},{"_id":"themes/ayer/languages/default.yml","hash":"cc74124ebfe5b673de248f6379153261b5371b43","modified":1588487051080},{"_id":"themes/ayer/languages/en.yml","hash":"cc74124ebfe5b673de248f6379153261b5371b43","modified":1588487051080},{"_id":"themes/ayer/languages/es.yml","hash":"2eaa4085a31960536bf603f0a86ea7fb58467b0a","modified":1588487051080},{"_id":"themes/ayer/languages/fr.yml","hash":"78ed4392ac0cbdc8d2b64d1d9ecba2daa31bdb8d","modified":1588487051084},{"_id":"themes/ayer/languages/ja.yml","hash":"6a77987d7f406c14d85c8a1fd20484af5a1da5c3","modified":1588487051084},{"_id":"themes/ayer/languages/ko.yml","hash":"e0b760d295cb00fe6c10e12db1d1a0b3f74f7244","modified":1588487051084},{"_id":"themes/ayer/languages/nl.yml","hash":"4ca66bec40af5fc9e06b3a1090c2c0962710ad66","modified":1588487051084},{"_id":"themes/ayer/languages/no.yml","hash":"cacdfe2df667f2b62ac425ff2fa7db7e4fdb6ec3","modified":1588487051084},{"_id":"themes/ayer/languages/pt.yml","hash":"16ac6324fd43939ff6f1264d82b90c1ce06e7912","modified":1588487051084},{"_id":"themes/ayer/languages/ru.yml","hash":"c829c571bbb14f2f523417e11d08cbcff2470e88","modified":1588487051084},{"_id":"themes/ayer/languages/vi.yml","hash":"2f31424cf9ed431a252e1dd3a3907e6a5bacbe75","modified":1588487051084},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"1eb3233b86f9ac34798f9e3ad286b53e1c90f094","modified":1588487051084},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"9341ba22128facea892ef91d5204db689c05bc7d","modified":1588487051084},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588487051084},{"_id":"themes/ayer/layout/categories.ejs","hash":"345c50927af20b85af933641ade389ce52e03811","modified":1588487051084},{"_id":"themes/ayer/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1588487051084},{"_id":"themes/ayer/layout/layout.ejs","hash":"ad0d04b0d5322ccb6f371f8c9cd62d2ab87f4bca","modified":1588487051084},{"_id":"themes/ayer/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588487051084},{"_id":"themes/ayer/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1588487051084},{"_id":"themes/ayer/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1588487051084},{"_id":"themes/ayer/scripts/default_config.js","hash":"70d6ee032d75410d540b6789b5949739a47f0125","modified":1588487051084},{"_id":"themes/ayer/source/404.html","hash":"6e56aa9341d0443521851b0c7803e3471e30e635","modified":1588487051088},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1588487051088},{"_id":"themes/ayer/source-src/main.js","hash":"77e753cd66579316c8c9e07e673c31ddb6e8e7f2","modified":1588487051088},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"73b5cb5d6e1411ff7ac161f2a15a2e288931e869","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"a7065fad7532c5f727e8d0e18771616fea662944","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"4556d3a4bfcd8cba596adc11e7097d3d5be1de55","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"ca75120c1b9f9c3d3bd88287c70258a0eb081f83","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"a8dcd61156d35cb8b270870b2e65d56c60c4dd38","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"26dceb25434ee7bf8f6ce01b58daafe2a482ab53","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"5b389110f4d3b727c33c48f088a8bc7f8b577d19","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"ff2822fd2f6e8a02ce781aecf5bb031db076e882","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"4d633c6cc375a0c81fe0ed2a114b1ac4c3cec2d9","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"cde5caf73f120b1300ec7539bbf675597688c734","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"43ba0cd1f9e898bcbd873b1e9a2d47249d6aaf77","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"6663c30882e2b375b15c147080c70d0dcce54a6f","modified":1588487051084},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1588487051084},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"58f4c93d22e4eb9743915223444335fb6fe06d21","modified":1588487051084},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1588487051084},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1588487051084},{"_id":"themes/ayer/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1588487051084},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"017f9b628806eeb199da2e77485cd9ac8e2117b3","modified":1588487051088},{"_id":"themes/ayer/source/css/custom.styl","hash":"19c274cd268e72af427a5937deaf43296b64ec9f","modified":1588487051088},{"_id":"themes/ayer/source/dist/main.css","hash":"a50bb7b312a6b5d53e193e269cd2400595311a90","modified":1588487051088},{"_id":"themes/ayer/source/dist/main.js","hash":"eac86de3ed854247e50b04d6908816b1837e08cf","modified":1588487051088},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1588487051088},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1588487051088},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1588487051088},{"_id":"themes/ayer/source/images/cover9.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1588487051096},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1588487051096},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"b3efa167f50cad85404c83f21dec2be570ed21dc","modified":1588487051100},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588487051100},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1588487051100},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1588487051100},{"_id":"themes/ayer/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1588487051100},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1588487051100},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"ddb61f23b078101ae8ecad32972155147585eb8c","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"4980e6333c9e28408b65fcd9d89e1cddfa4508dc","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"630e719b9e805a26182a37152435d4787c0f1734","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"138284a4842820a7f2bf38c26d3d5c5b0e2219e9","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1588487051088},{"_id":"themes/ayer/source-src/css/style.styl","hash":"f9ae046355867c3e87c4aef309d1fc50aa493e0d","modified":1588487051088},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"531f881d513e5be1119670db5334d3e2e6bf0194","modified":1588487051088},{"_id":"themes/ayer/source-src/js/share.js","hash":"a65e4645818e4eb8d4a40d0499e1d04b6ee224bd","modified":1588487051088},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1588487051084},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1588487051088},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1588487051088},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1588487051088},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1588487051100},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1588487051100},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"cfb16c9dda7a609776a28702e0c3854a52e422a7","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4a6b6300284876a2008f2b13067d2c77cd41e26e","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"d6f82b35bbb060ec22c5facf0eea67cf44c396f6","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"917ef5daea9c926aea4703ab3e9911c9f6d16b64","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"4a21fd3d7335ffcd0661036fee81a927c125e2e2","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"4c0558f3f27c1f6d9daeed13d31eb8678d3a551e","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"3b076a65b9847cd6e0d424f5c2874046ef51d4d9","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"fea793e132f627a8148059a9aee8bc33550506d1","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"6250f3c87a4bf3d437291128c7e60608cf807e10","modified":1588487051084},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"4b8e8455709debd73fba6bf3aad63378c4156dc1","modified":1588487051084},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1588487051096},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"3e61c25e6ae9a25196c6d904731cf6821c950341","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"682931771663f8ee23e44176b58af3a9a5aa3745","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"da46e69f7ecc779ec137deb601c3524524fd758d","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"67f4824419c497e54469094f239978dd888a9706","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"1a4576c38ef19834a4d0a8ac887e7b55d21f2f13","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1588487051084},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"f2f43ae9831c3df017b35c68caa94f5eb911f697","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"b1bcdd213115c2fa8331d4e0f620dc7bcad64dc5","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"bc477e4905ab88da711e0049ac3866dd1f88f80a","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"9d06ee41617f5979fa378c6ebfacf394e58f9628","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"b4b6f02d4028ad602cf860d1c530d2e38bd4be75","modified":1588487051088},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"9e9d8dc167ed2c332e4520cbf41244c34c1ebf64","modified":1588487051088},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1588487051088},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1588487051092},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1588487051092},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"ced2b163d0ed542c494a45d5ccd072e57a5f4211","modified":1588484204000},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1588487051096},{"_id":"public/search.xml","hash":"02ce80671d55138cbe21a50cb7051401af62b73e","modified":1588575718861},{"_id":"public/atom.xml","hash":"e433d35965d97271b1505443079908d4b171e38d","modified":1588575718861},{"_id":"public/categories/index.html","hash":"2ea420910027fa2658e6b31b79d9652cc4a6f6f1","modified":1588575718861},{"_id":"public/photos/index.html","hash":"0aac3a9d289c17e15dea671bce47e8110a391c6f","modified":1588575718861},{"_id":"public/tags/index.html","hash":"f3e0f2e4c20eb10c394a1075da68b3759cb4c4b7","modified":1588575718861},{"_id":"public/categories/Git/index.html","hash":"2534684cbb9201f6c33208fdebf263d30bdd11a2","modified":1588575718861},{"_id":"public/categories/mongodb/index.html","hash":"3e15073a2a7155eb48764f5f6fa70b64bb20a03d","modified":1588575718861},{"_id":"public/categories/blog/index.html","hash":"951466932d954bd59c4fd8a375e0e15b0fe231b3","modified":1588575718861},{"_id":"public/categories/管理学/index.html","hash":"15bf28e886ab9c08370930f540259233f47a5aff","modified":1588575718861},{"_id":"public/categories/linux/index.html","hash":"87bf075d774ef4d12d4b05ce38080055bad3e543","modified":1588575718861},{"_id":"public/categories/网络协议/index.html","hash":"b07545c48baf8c0fff60a71602d1ebcd0118bfe0","modified":1588575718861},{"_id":"public/categories/爬虫/index.html","hash":"e956e79042f7d2eb7b5be7b82882415c7ffee748","modified":1588575718861},{"_id":"public/categories/爬虫/python/index.html","hash":"c03a6c6604768887886b71699ae3d3f4f0d41795","modified":1588575718861},{"_id":"public/tags/Git/index.html","hash":"5e839a5075affb1ac7e6238236820f146af2c953","modified":1588575718861},{"_id":"public/tags/mongodb/index.html","hash":"fef997cae5c1c1c77a88dc59328ba5fd11c170f5","modified":1588575718861},{"_id":"public/tags/blog/index.html","hash":"65331296e484e677ed1f196a3dcddfcea8dcb8a2","modified":1588575718861},{"_id":"public/tags/管理学/index.html","hash":"ed51948072d17c7fbdcc95c008ada7ad520c798a","modified":1588575718861},{"_id":"public/tags/Linux/index.html","hash":"2e9abad6d2b4b6cc01c2bb5a89ee680fe2909ef8","modified":1588575718861},{"_id":"public/tags/网络协议/index.html","hash":"aeaa3e2c1c78d0cf5fcbf1089a85cdcd244c0840","modified":1588575718861},{"_id":"public/tags/爬虫/index.html","hash":"b487047f4e4df9c0a055ee6eb243ba4cd77c7f1f","modified":1588575718861},{"_id":"public/tags/python/index.html","hash":"d5f3b423d3efd237fa10a1bcf4879143fb6bc249","modified":1588575718861},{"_id":"public/archives/index.html","hash":"cca373f0a0b34c1e18b73585b11451cc25fbfb91","modified":1588575718861},{"_id":"public/archives/2020/index.html","hash":"49457175249134716ee4a57de5e026cd58955b40","modified":1588575718861},{"_id":"public/archives/2020/05/index.html","hash":"eaa0415bfee1d6b929af987a06875d227eaf352a","modified":1588575718861},{"_id":"public/about/index.html","hash":"aea409b30c7517c9548162cc7bd70ba1f84a0ebc","modified":1588575718861},{"_id":"public/2020/05/03/Git/index.html","hash":"31f762110bca5dce77742487ff8066d0055e2a1c","modified":1588575718861},{"_id":"public/2020/05/03/mongod_note/index.html","hash":"7e9011c21d8c658c86a837bce846bb93a99a1780","modified":1588575718861},{"_id":"public/2020/05/03/Linux/index.html","hash":"d6064d09f862391185ede7c0ce12d9efce196a72","modified":1588575718861},{"_id":"public/2020/05/03/网络协议/index.html","hash":"d74045040440e852e1af58af12a7bd2023e5b65e","modified":1588575718861},{"_id":"public/2020/05/03/spider/index.html","hash":"693aa58740b6e0b646e334f5f50b75d4305c712d","modified":1588575718861},{"_id":"public/2020/05/03/管理学/index.html","hash":"e92b80d5178a9166602502879f498a8454f7d94e","modified":1588575718861},{"_id":"public/2020/05/03/博客搭建/index.html","hash":"a925d2038404c5900adf975e5b1c0cdfcb8be4ed","modified":1588575718861},{"_id":"public/2020/05/02/正则/index.html","hash":"bf344029fc7219480ee213855a26b515ba7ea90b","modified":1588575718861},{"_id":"public/index.html","hash":"43944152d10f7851de208196673318ce94bde68e","modified":1588575718861},{"_id":"public/CNAME","hash":"fd55ebb4265f1fc8dd24b6700dba92aa46f67b23","modified":1588575718861},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1588575718861},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1588575718861},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1588575718861},{"_id":"public/images/cover9.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1588575718861},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1588575718861},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1588575718861},{"_id":"public/images/sponsor.jpg","hash":"b3efa167f50cad85404c83f21dec2be570ed21dc","modified":1588575718861},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1588575718861},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1588575718861},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1588575718861},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1588575718861},{"_id":"public/css/custom.css","hash":"78b13bf5b98278ff65cdb0a731f2a1c98b2324a5","modified":1588575718861},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1588575718861},{"_id":"public/dist/main.js","hash":"eac86de3ed854247e50b04d6908816b1837e08cf","modified":1588575718861},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1588575718861},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588575718861},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1588575718861},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1588575718861},{"_id":"public/404.html","hash":"1730868038a3112a5a68c255837706f616efffdd","modified":1588575718861},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1588575718861},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1588575718861},{"_id":"public/images/cover7.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1588575718861},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1588575718861},{"_id":"public/dist/main.css","hash":"a50bb7b312a6b5d53e193e269cd2400595311a90","modified":1588575718861},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1588575718861},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1588575718861},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1588575718861},{"_id":"public/images/cover1.jpg","hash":"ced2b163d0ed542c494a45d5ccd072e57a5f4211","modified":1588575718861}],"Category":[{"name":"Git","_id":"ck9s4ytpx0004wov8bdm60voh"},{"name":"mongodb","_id":"ck9s4ytq10009wov8ad2uecwx"},{"name":"blog","_id":"ck9s4ytq2000dwov8bm61f75z"},{"name":"管理学","_id":"ck9s4ytq3000hwov83sxx7n1n"},{"name":"linux","_id":"ck9s4ytqn000rwov834wparn0"},{"name":"网络协议","_id":"ck9s4ytqo000twov8ciuebxe2"},{"name":"爬虫","_id":"ck9s4ytrc0010wov85yjx190k"},{"name":"python","parent":"ck9s4ytrc0010wov85yjx190k","_id":"ck9s4ytrc0013wov8ewkog43g"}],"Data":[],"Page":[{"title":"About me","_content":"# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n - [主题链接点此处](https://github.com/markyong/hexo-theme-stage)","source":"about/index.md","raw":"title: \"About me\"\n---\n# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n - [主题链接点此处](https://github.com/markyong/hexo-theme-stage)","date":"2020-05-03T07:27:06.776Z","updated":"2020-05-03T07:27:06.776Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9s4ytpu0001wov8fguxbapl","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:heroli520@outlook.com\">heroli520@outlook.com</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者<ul>\n<li><a href=\"https://github.com/markyong/hexo-theme-stage\" target=\"_blank\" rel=\"noopener\">主题链接点此处</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:heroli520@outlook.com\">heroli520@outlook.com</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者<ul>\n<li><a href=\"https://github.com/markyong/hexo-theme-stage\" target=\"_blank\" rel=\"noopener\">主题链接点此处</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2020-05-03T06:45:57.580Z","updated":"2020-05-03T06:45:57.580Z","path":"categories/index.html","comments":1,"_id":"ck9s4ytpw0003wov85s7b5664","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Gallery","albums":[["img_url","img_caption"],["img_url","img_caption"]],"_content":"","source":"photos/index.md","raw":"---\ntitle: Gallery\n\nalbums: [\n        [\"img_url\",\"img_caption\"],\n        [\"img_url\",\"img_caption\"]\n        ]\n---","date":"2020-05-03T07:05:13.724Z","updated":"2020-05-03T07:05:13.724Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ck9s4ytqk000owov80ktk7aro","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\ntype: \"tags\"\n---","date":"2020-05-03T02:12:50.553Z","updated":"2020-05-03T02:12:50.553Z","path":"tags/index.html","comments":1,"_id":"ck9s4ytqm000qwov8g4628o24","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git & Github","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n# Git & Github\n\n\n\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n<!--more-->\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失，网上的教程都他妈的是骗人的\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. 以后clone仓库地址时就可以直接使用\n","source":"_posts/Git.md","raw":"---\ntitle: Git & Github\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- Git\ntags:\n- Git\n---\n\n# Git & Github\n\n\n\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n<!--more-->\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失，网上的教程都他妈的是骗人的\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. 以后clone仓库地址时就可以直接使用\n","slug":"Git","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytpp0000wov8d35xdrmq","content":"<h1 id=\"Git-amp-Github\"><a href=\"#Git-amp-Github\" class=\"headerlink\" title=\"Git &amp; Github\"></a>Git &amp; Github</h1><ul>\n<li><p>Git 初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 设置github昵称<br>git config --global user.name &#39;mxrmiss&#39;<br># 设置github邮箱<br>git config --global user.email &#39;heroli520@outlook.com&#39;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>git status 无法显示中文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">git config --global core.quotepath false<br></code></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失，网上的教程都他妈的是骗人的</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">git config --list<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git-amp-Github\"><a href=\"#Git-amp-Github\" class=\"headerlink\" title=\"Git &amp; Github\"></a>Git &amp; Github</h1><ul>\n<li><p>Git 初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 设置github昵称<br>git config --global user.name &#39;mxrmiss&#39;<br># 设置github邮箱<br>git config --global user.email &#39;heroli520@outlook.com&#39;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>git status 无法显示中文</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">git config --global core.quotepath false<br></code></pre></td></tr></table></figure>","more":"</li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失，网上的教程都他妈的是骗人的</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">git config --list<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n</ul>"},{"title":"MongoDB","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n#关于MongoDB\n    -安装\n    -配置环境变量\n        C:\\Program Files\\MongoDB\\Server\\4.2\\bin\n    -在C盘中创建一个文件夹 data\n    -在data中创建1一个文件夹db\n    \n    -打开cmd命令行窗口\n        -输入 mongod启动mongodb服务器\n        -32位注意：\n            启动服务器时，需要输入如下内容：\n                mongod --storageEngine=mmapv1\n            **注意！此内容32位用户只需在第一次使用mongodb时输入\n        \n        -  mongod --dbpath数据库路径 --port 端口号        \n     \n<!--more-->\n    -再打开一个cmd窗口\n        -输入mongo 连接mongodb， 出现 > 便为成功\n        \n    -数据库（database）\n        -数据库的服务器\n            -服务器用来保存数据\n            -mongod 用来启动服务器\n            \n        -数据库的客户端\n            -客户端用来操作服务器， 对数据进行增删改查的操作\n            -mongo 用来启动服务器\n            \n        -将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动\n            1、在C盘根目录创建data（前面步骤已创建）\n                在data下创建db和log文件夹\n            2、创建配置文件\n                在目录 C:\\Program Files\\MongoDB\\Server\\4.2下添加一个配置","source":"_posts/mongod_note.md","raw":"---\ntitle: MongoDB\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- mongodb\ntags:\n- mongodb\n---\n\n#关于MongoDB\n    -安装\n    -配置环境变量\n        C:\\Program Files\\MongoDB\\Server\\4.2\\bin\n    -在C盘中创建一个文件夹 data\n    -在data中创建1一个文件夹db\n    \n    -打开cmd命令行窗口\n        -输入 mongod启动mongodb服务器\n        -32位注意：\n            启动服务器时，需要输入如下内容：\n                mongod --storageEngine=mmapv1\n            **注意！此内容32位用户只需在第一次使用mongodb时输入\n        \n        -  mongod --dbpath数据库路径 --port 端口号        \n     \n<!--more-->\n    -再打开一个cmd窗口\n        -输入mongo 连接mongodb， 出现 > 便为成功\n        \n    -数据库（database）\n        -数据库的服务器\n            -服务器用来保存数据\n            -mongod 用来启动服务器\n            \n        -数据库的客户端\n            -客户端用来操作服务器， 对数据进行增删改查的操作\n            -mongo 用来启动服务器\n            \n        -将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动\n            1、在C盘根目录创建data（前面步骤已创建）\n                在data下创建db和log文件夹\n            2、创建配置文件\n                在目录 C:\\Program Files\\MongoDB\\Server\\4.2下添加一个配置","slug":"mongod_note","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytpv0002wov89dc5fsem","content":"<p>#关于MongoDB<br>    -安装<br>    -配置环境变量<br>        C:\\Program Files\\MongoDB\\Server\\4.2\\bin<br>    -在C盘中创建一个文件夹 data<br>    -在data中创建1一个文件夹db</p>\n<pre><code>-打开cmd命令行窗口\n    -输入 mongod启动mongodb服务器\n    -32位注意：\n        启动服务器时，需要输入如下内容：\n            mongod --storageEngine=mmapv1\n        **注意！此内容32位用户只需在第一次使用mongodb时输入\n\n    -  mongod --dbpath数据库路径 --port 端口号        </code></pre><a id=\"more\"></a>\n<pre><code>-再打开一个cmd窗口\n    -输入mongo 连接mongodb， 出现 &gt; 便为成功\n\n-数据库（database）\n    -数据库的服务器\n        -服务器用来保存数据\n        -mongod 用来启动服务器\n\n    -数据库的客户端\n        -客户端用来操作服务器， 对数据进行增删改查的操作\n        -mongo 用来启动服务器\n\n    -将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动\n        1、在C盘根目录创建data（前面步骤已创建）\n            在data下创建db和log文件夹\n        2、创建配置文件\n            在目录 C:\\Program Files\\MongoDB\\Server\\4.2下添加一个配置</code></pre>","site":{"data":{}},"excerpt":"<p>#关于MongoDB<br>    -安装<br>    -配置环境变量<br>        C:\\Program Files\\MongoDB\\Server\\4.2\\bin<br>    -在C盘中创建一个文件夹 data<br>    -在data中创建1一个文件夹db</p>\n<pre><code>-打开cmd命令行窗口\n    -输入 mongod启动mongodb服务器\n    -32位注意：\n        启动服务器时，需要输入如下内容：\n            mongod --storageEngine=mmapv1\n        **注意！此内容32位用户只需在第一次使用mongodb时输入\n\n    -  mongod --dbpath数据库路径 --port 端口号        </code></pre>","more":"<pre><code>-再打开一个cmd窗口\n    -输入mongo 连接mongodb， 出现 &gt; 便为成功\n\n-数据库（database）\n    -数据库的服务器\n        -服务器用来保存数据\n        -mongod 用来启动服务器\n\n    -数据库的客户端\n        -客户端用来操作服务器， 对数据进行增删改查的操作\n        -mongo 用来启动服务器\n\n    -将MongoDB设置为系统服务，可以自动在后台启动，不需要每次都手动启动\n        1、在C盘根目录创建data（前面步骤已创建）\n            在data下创建db和log文件夹\n        2、创建配置文件\n            在目录 C:\\Program Files\\MongoDB\\Server\\4.2下添加一个配置</code></pre>"},{"title":"搭建个人博客","date":"2020-05-03T00:46:40.000Z","comments":1,"_content":"# 搭建静态页面个人博客\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.","source":"_posts/博客搭建.md","raw":"---\ntitle: 搭建个人博客\ndate: 2020/5/3 8:46:40\ncomments: ture\ncategories:\n- blog\ntags:\n- blog\n---\n# 搭建静态页面个人博客\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.","slug":"博客搭建","published":1,"updated":"2020-05-04T06:51:32.652Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytpy0006wov8al08b6in","content":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br></code></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n</li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo-cli<br>这样会报错<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">mkdir ~&#x2F;.npm-global<br></code></pre></td></tr></table></figure>\n\n\n\n<p>设置npm全局包的安装路径:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm config set prefix &#39;~&#x2F;.npm-global&#39;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">export PATH&#x3D;~&#x2F;.npm-global&#x2F;bin:$PATH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>回到终端运行以下命令, 让配置生效:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">source &#x2F;etc&#x2F;profile<br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后全局安装npm包就可以了.</p>\n<p><a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 选择一个地方新建博客目录<br>npx hexo init blog<br><br># 生成博客文件夹中的moudle文件夹<br>npx hexo g<br><br># 进行本机器运行测试<br>npx hexo server<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>\ttype: git<br>\trepo: 仓库名称.git  (.git不能少)<br>\tbranch： master<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npx hexo clean<br>npx hexo g<br># 进行网站部署<br>npx hexo d<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n</li>\n</ol>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npx hexo clean<br>npx hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">node -v<br></code></pre></td></tr></table></figure>","more":"</li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install -g hexo-cli<br>这样会报错<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n</li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">mkdir ~&#x2F;.npm-global<br></code></pre></td></tr></table></figure>\n\n\n\n<p>设置npm全局包的安装路径:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm config set prefix &#39;~&#x2F;.npm-global&#39;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">export PATH&#x3D;~&#x2F;.npm-global&#x2F;bin:$PATH<br></code></pre></td></tr></table></figure>\n\n\n\n<p>回到终端运行以下命令, 让配置生效:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">source &#x2F;etc&#x2F;profile<br></code></pre></td></tr></table></figure>\n\n\n\n<p>然后全局安装npm包就可以了.</p>\n<p><a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"># 选择一个地方新建博客目录<br>npx hexo init blog<br><br># 生成博客文件夹中的moudle文件夹<br>npx hexo g<br><br># 进行本机器运行测试<br>npx hexo server<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">deploy:<br>\ttype: git<br>\trepo: 仓库名称.git  (.git不能少)<br>\tbranch： master<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>之后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npx hexo clean<br>npx hexo g<br># 进行网站部署<br>npx hexo d<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n</li>\n</ol>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">npx hexo clean<br>npx hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成.</li>\n</ol>"},{"_content":"#正则\n-关于贪婪与非贪婪\n    .*? 非贪婪，匹配到需要的就结束，不管后面是否有符合的\n    .*  贪婪，会一直匹配所有的符合项，直到匹配结束\n    \ncompile 最好不要使用，这是多此一举，直接re.findall进行正则匹配","source":"_posts/正则.md","raw":"#正则\n-关于贪婪与非贪婪\n    .*? 非贪婪，匹配到需要的就结束，不管后面是否有符合的\n    .*  贪婪，会一直匹配所有的符合项，直到匹配结束\n    \ncompile 最好不要使用，这是多此一举，直接re.findall进行正则匹配","slug":"正则","published":1,"date":"2020-05-02T01:12:47.705Z","updated":"2020-05-01T02:28:15.000Z","title":"正则","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9s4ytpz0007wov80fox0b87","content":"<p>#正则<br>-关于贪婪与非贪婪<br>    .<em>? 非贪婪，匹配到需要的就结束，不管后面是否有符合的<br>    .</em>  贪婪，会一直匹配所有的符合项，直到匹配结束</p>\n<p>compile 最好不要使用，这是多此一举，直接re.findall进行正则匹配</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#正则<br>-关于贪婪与非贪婪<br>    .<em>? 非贪婪，匹配到需要的就结束，不管后面是否有符合的<br>    .</em>  贪婪，会一直匹配所有的符合项，直到匹配结束</p>\n<p>compile 最好不要使用，这是多此一举，直接re.findall进行正则匹配</p>\n"},{"title":"管理学","date":"2020-05-03T01:07:30.000Z","comments":1,"_content":"\n\n## 绪论\n\n1. 管理学的产生与发展。\n\n2. 学习管理学的意义、理论指导、科学思维以及基本方法。\n\n   ### \n\n## 第一章 管理学导论\n\n1. 理解组织与管理的内涵。\n\n2. 认识组织的特征、企业的特征。\n\n3. 管理工作的主要内容。\n\n4. 理解管理的本质。\n\n5. 如何理解管理的科学性与艺术性。\n\n6. 管理的基本原理、基本方法与工具。\n\n7. 认识理性分析与直觉判断的关系。\n<!--more-->\n\n###   \n\n## 第二章 管理理论的历史演变\n\n1. 理解泰勒科学管理的基本思想。\n\n2. 理解法约尔的一般管理理论的主要思想。\n\n3. 理解韦伯组织理论在管理实践中的意义。\n\n4. 组织协调机制主要有哪些形式？\n\n5. 理解组织合法性的内涵以及对组织结构变化的影响。\n\n6. 现代系统与权变管理理论的主要思想。\n\n7. 理解西蒙决策理论的主要观点。 \n\n\n\n## 第三章 决策与决策过程\n\n1. 如何理解决策，决策有哪些基本特征？\n\n2. 理解决策与计划之间的关系。\n\n3. 不同的决策类型及其异同之处。\n\n4. 理解一般的决策过程是如何制定的。\n\n5. 决策的影响因素有哪些？\n\n6. 按照不同准则分别选择最优决策方案。\n\n\n\n## 第四章 环境分析于理性决策\n\n1. 理解组织与环境的关系。\n\n2. 环境分析有哪些主要方法？\n\n3. 理性决策、非理性决策和行为决策。\n\n4. 决策方案生成的主要方法是什么？\n\n5. 用决策树方法来评价和选择一个具体的决策方案。\n\n6. 用蒂蒙斯教授的机会评价框架评价一个创新或创业机会。\n\n\n\n## 第五章 决策的事实与调整\n\n1. 理解计划与决策的区别。 \n\n2. 掌握目标管理的基本主张和特点。\n\n\n\n## 第六章 组织与设计\n\n1. 理解组织结构设计包括哪些内容。\n\n2. 理解机械式组织与有机式组织的区别。\n\n3. 理解正式组织与非正式组织的整合。\n\n### \n\n","source":"_posts/管理学.md","raw":"---\ntitle: 管理学\ndate: 2020/5/3 9:07:30\ncomments: ture\ncategories:\n- 管理学\ntags:\n- 管理学\n---\n\n\n## 绪论\n\n1. 管理学的产生与发展。\n\n2. 学习管理学的意义、理论指导、科学思维以及基本方法。\n\n   ### \n\n## 第一章 管理学导论\n\n1. 理解组织与管理的内涵。\n\n2. 认识组织的特征、企业的特征。\n\n3. 管理工作的主要内容。\n\n4. 理解管理的本质。\n\n5. 如何理解管理的科学性与艺术性。\n\n6. 管理的基本原理、基本方法与工具。\n\n7. 认识理性分析与直觉判断的关系。\n<!--more-->\n\n###   \n\n## 第二章 管理理论的历史演变\n\n1. 理解泰勒科学管理的基本思想。\n\n2. 理解法约尔的一般管理理论的主要思想。\n\n3. 理解韦伯组织理论在管理实践中的意义。\n\n4. 组织协调机制主要有哪些形式？\n\n5. 理解组织合法性的内涵以及对组织结构变化的影响。\n\n6. 现代系统与权变管理理论的主要思想。\n\n7. 理解西蒙决策理论的主要观点。 \n\n\n\n## 第三章 决策与决策过程\n\n1. 如何理解决策，决策有哪些基本特征？\n\n2. 理解决策与计划之间的关系。\n\n3. 不同的决策类型及其异同之处。\n\n4. 理解一般的决策过程是如何制定的。\n\n5. 决策的影响因素有哪些？\n\n6. 按照不同准则分别选择最优决策方案。\n\n\n\n## 第四章 环境分析于理性决策\n\n1. 理解组织与环境的关系。\n\n2. 环境分析有哪些主要方法？\n\n3. 理性决策、非理性决策和行为决策。\n\n4. 决策方案生成的主要方法是什么？\n\n5. 用决策树方法来评价和选择一个具体的决策方案。\n\n6. 用蒂蒙斯教授的机会评价框架评价一个创新或创业机会。\n\n\n\n## 第五章 决策的事实与调整\n\n1. 理解计划与决策的区别。 \n\n2. 掌握目标管理的基本主张和特点。\n\n\n\n## 第六章 组织与设计\n\n1. 理解组织结构设计包括哪些内容。\n\n2. 理解机械式组织与有机式组织的区别。\n\n3. 理解正式组织与非正式组织的整合。\n\n### \n\n","slug":"管理学","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytq00008wov84elh1z7h","content":"<h2 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h2><ol>\n<li><p>管理学的产生与发展。</p>\n</li>\n<li><p>学习管理学的意义、理论指导、科学思维以及基本方法。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3></li>\n</ol>\n<h2 id=\"第一章-管理学导论\"><a href=\"#第一章-管理学导论\" class=\"headerlink\" title=\"第一章 管理学导论\"></a>第一章 管理学导论</h2><ol>\n<li><p>理解组织与管理的内涵。</p>\n</li>\n<li><p>认识组织的特征、企业的特征。</p>\n</li>\n<li><p>管理工作的主要内容。</p>\n</li>\n<li><p>理解管理的本质。</p>\n</li>\n<li><p>如何理解管理的科学性与艺术性。</p>\n</li>\n<li><p>管理的基本原理、基本方法与工具。</p>\n</li>\n<li><p>认识理性分析与直觉判断的关系。</p>\n<a id=\"more\"></a>\n\n</li>\n</ol>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"第二章-管理理论的历史演变\"><a href=\"#第二章-管理理论的历史演变\" class=\"headerlink\" title=\"第二章 管理理论的历史演变\"></a>第二章 管理理论的历史演变</h2><ol>\n<li><p>理解泰勒科学管理的基本思想。</p>\n</li>\n<li><p>理解法约尔的一般管理理论的主要思想。</p>\n</li>\n<li><p>理解韦伯组织理论在管理实践中的意义。</p>\n</li>\n<li><p>组织协调机制主要有哪些形式？</p>\n</li>\n<li><p>理解组织合法性的内涵以及对组织结构变化的影响。</p>\n</li>\n<li><p>现代系统与权变管理理论的主要思想。</p>\n</li>\n<li><p>理解西蒙决策理论的主要观点。 </p>\n</li>\n</ol>\n<h2 id=\"第三章-决策与决策过程\"><a href=\"#第三章-决策与决策过程\" class=\"headerlink\" title=\"第三章 决策与决策过程\"></a>第三章 决策与决策过程</h2><ol>\n<li><p>如何理解决策，决策有哪些基本特征？</p>\n</li>\n<li><p>理解决策与计划之间的关系。</p>\n</li>\n<li><p>不同的决策类型及其异同之处。</p>\n</li>\n<li><p>理解一般的决策过程是如何制定的。</p>\n</li>\n<li><p>决策的影响因素有哪些？</p>\n</li>\n<li><p>按照不同准则分别选择最优决策方案。</p>\n</li>\n</ol>\n<h2 id=\"第四章-环境分析于理性决策\"><a href=\"#第四章-环境分析于理性决策\" class=\"headerlink\" title=\"第四章 环境分析于理性决策\"></a>第四章 环境分析于理性决策</h2><ol>\n<li><p>理解组织与环境的关系。</p>\n</li>\n<li><p>环境分析有哪些主要方法？</p>\n</li>\n<li><p>理性决策、非理性决策和行为决策。</p>\n</li>\n<li><p>决策方案生成的主要方法是什么？</p>\n</li>\n<li><p>用决策树方法来评价和选择一个具体的决策方案。</p>\n</li>\n<li><p>用蒂蒙斯教授的机会评价框架评价一个创新或创业机会。</p>\n</li>\n</ol>\n<h2 id=\"第五章-决策的事实与调整\"><a href=\"#第五章-决策的事实与调整\" class=\"headerlink\" title=\"第五章 决策的事实与调整\"></a>第五章 决策的事实与调整</h2><ol>\n<li><p>理解计划与决策的区别。 </p>\n</li>\n<li><p>掌握目标管理的基本主张和特点。</p>\n</li>\n</ol>\n<h2 id=\"第六章-组织与设计\"><a href=\"#第六章-组织与设计\" class=\"headerlink\" title=\"第六章 组织与设计\"></a>第六章 组织与设计</h2><ol>\n<li><p>理解组织结构设计包括哪些内容。</p>\n</li>\n<li><p>理解机械式组织与有机式组织的区别。</p>\n</li>\n<li><p>理解正式组织与非正式组织的整合。</p>\n</li>\n</ol>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h3>","site":{"data":{}},"excerpt":"<h2 id=\"绪论\"><a href=\"#绪论\" class=\"headerlink\" title=\"绪论\"></a>绪论</h2><ol>\n<li><p>管理学的产生与发展。</p>\n</li>\n<li><p>学习管理学的意义、理论指导、科学思维以及基本方法。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3></li>\n</ol>\n<h2 id=\"第一章-管理学导论\"><a href=\"#第一章-管理学导论\" class=\"headerlink\" title=\"第一章 管理学导论\"></a>第一章 管理学导论</h2><ol>\n<li><p>理解组织与管理的内涵。</p>\n</li>\n<li><p>认识组织的特征、企业的特征。</p>\n</li>\n<li><p>管理工作的主要内容。</p>\n</li>\n<li><p>理解管理的本质。</p>\n</li>\n<li><p>如何理解管理的科学性与艺术性。</p>\n</li>\n<li><p>管理的基本原理、基本方法与工具。</p>\n</li>\n<li><p>认识理性分析与直觉判断的关系。</p>","more":"</li>\n</ol>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"第二章-管理理论的历史演变\"><a href=\"#第二章-管理理论的历史演变\" class=\"headerlink\" title=\"第二章 管理理论的历史演变\"></a>第二章 管理理论的历史演变</h2><ol>\n<li><p>理解泰勒科学管理的基本思想。</p>\n</li>\n<li><p>理解法约尔的一般管理理论的主要思想。</p>\n</li>\n<li><p>理解韦伯组织理论在管理实践中的意义。</p>\n</li>\n<li><p>组织协调机制主要有哪些形式？</p>\n</li>\n<li><p>理解组织合法性的内涵以及对组织结构变化的影响。</p>\n</li>\n<li><p>现代系统与权变管理理论的主要思想。</p>\n</li>\n<li><p>理解西蒙决策理论的主要观点。 </p>\n</li>\n</ol>\n<h2 id=\"第三章-决策与决策过程\"><a href=\"#第三章-决策与决策过程\" class=\"headerlink\" title=\"第三章 决策与决策过程\"></a>第三章 决策与决策过程</h2><ol>\n<li><p>如何理解决策，决策有哪些基本特征？</p>\n</li>\n<li><p>理解决策与计划之间的关系。</p>\n</li>\n<li><p>不同的决策类型及其异同之处。</p>\n</li>\n<li><p>理解一般的决策过程是如何制定的。</p>\n</li>\n<li><p>决策的影响因素有哪些？</p>\n</li>\n<li><p>按照不同准则分别选择最优决策方案。</p>\n</li>\n</ol>\n<h2 id=\"第四章-环境分析于理性决策\"><a href=\"#第四章-环境分析于理性决策\" class=\"headerlink\" title=\"第四章 环境分析于理性决策\"></a>第四章 环境分析于理性决策</h2><ol>\n<li><p>理解组织与环境的关系。</p>\n</li>\n<li><p>环境分析有哪些主要方法？</p>\n</li>\n<li><p>理性决策、非理性决策和行为决策。</p>\n</li>\n<li><p>决策方案生成的主要方法是什么？</p>\n</li>\n<li><p>用决策树方法来评价和选择一个具体的决策方案。</p>\n</li>\n<li><p>用蒂蒙斯教授的机会评价框架评价一个创新或创业机会。</p>\n</li>\n</ol>\n<h2 id=\"第五章-决策的事实与调整\"><a href=\"#第五章-决策的事实与调整\" class=\"headerlink\" title=\"第五章 决策的事实与调整\"></a>第五章 决策的事实与调整</h2><ol>\n<li><p>理解计划与决策的区别。 </p>\n</li>\n<li><p>掌握目标管理的基本主张和特点。</p>\n</li>\n</ol>\n<h2 id=\"第六章-组织与设计\"><a href=\"#第六章-组织与设计\" class=\"headerlink\" title=\"第六章 组织与设计\"></a>第六章 组织与设计</h2><ol>\n<li><p>理解组织结构设计包括哪些内容。</p>\n</li>\n<li><p>理解机械式组织与有机式组织的区别。</p>\n</li>\n<li><p>理解正式组织与非正式组织的整合。</p>\n</li>\n</ol>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a></h3>"},{"title":"Linux","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  ","source":"_posts/Linux.md","raw":"---\ntitle: Linux\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- linux\ntags:\n- Linux\n---\n\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  ","slug":"Linux","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytqj000nwov88zu03nt6","content":"<p><a href=\"https://book.apeland.cn/details/189/\" target=\"_blank\" rel=\"noopener\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件<a id=\"more\"></a></li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\" target=\"_blank\" rel=\"noopener\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>%%blacksheep为用户名，应选择自己的路                            径配置环境变量</code></pre></li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">channels:<br>https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;<br>https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;<br>https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;<br>defaults<br>show_channel_urls: true<br></code></pre></td></tr></table></figure></code></pre><h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">apt-get install xfonts-intl-chinese<br>apt-get install ttf-wqy-microhei<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo apt update<br>sudo apt install manpages-zh<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">pacman -Syu<br>pacman -S man-pages-zh_cn man-pages-zh_tw<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">yum update<br>yum install man-pages-zh-CN<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">dnf update<br>dnf install man-pages-zh-CN<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li>vim简单配置：</li>\n</ul>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-string\">\"===================</span><br><span class=\"hljs-string\">\"</span>适合自己用的vimrc配置文件<br><span class=\"hljs-string\">\"===================</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>设置编码<br><span class=\"hljs-built_in\">set</span> fileencodings=utf<span class=\"hljs-number\">-8</span>,ucs-bom,gb18030,gbk,gb2312,cp936<br><span class=\"hljs-built_in\">set</span> termencoding=utf<span class=\"hljs-number\">-8</span><br><span class=\"hljs-built_in\">set</span> encoding=utf<span class=\"hljs-number\">-8</span><br><br><span class=\"hljs-string\">\"保存.vimrc文件时自动重启加载，即让此文件立即生效</span><br><span class=\"hljs-string\">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>语法高亮<br>syntax on<br><br><span class=\"hljs-string\">\"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> ruler<br><br><span class=\"hljs-string\">\"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]</span><br><span class=\"hljs-string\">\"</span>%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.<br><span class=\"hljs-string\">\"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.</span><br><span class=\"hljs-string\">set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\\"%H:%M\\\")&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>显示行号<br><span class=\"hljs-built_in\">set</span> nu <span class=\"hljs-string\">\"等同于 set number</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>突出显示当前行<br><span class=\"hljs-built_in\">set</span> cursorline <span class=\"hljs-string\">\"等同于 set cul</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>突出显示当前列<br><span class=\"hljs-built_in\">set</span> cursorcolumn <span class=\"hljs-string\">\"等同于 set cuc</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>共享剪贴板  <br><span class=\"hljs-built_in\">set</span> clipboard+=unnamed <br><br><span class=\"hljs-string\">\"从不备份  </span><br><span class=\"hljs-string\">set nobackup</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>自动保存<br><span class=\"hljs-built_in\">set</span> autowrite<br><br><span class=\"hljs-string\">\"隐藏工具栏</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> guioptions-=T<br><span class=\"hljs-string\">\"隐藏菜单栏</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> guioptions-=m<br><br><span class=\"hljs-string\">\"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> hlsearch<br><br><span class=\"hljs-string\">\"光标立刻跳转到搜索到内容</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> incsearch<br><br><span class=\"hljs-string\">\"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> nowrapscan<br><br><span class=\"hljs-string\">\"去掉输入错误时的提示声音</span><br><span class=\"hljs-string\">set noeb</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span> 默认按下Esc后,需要等待<span class=\"hljs-number\">1</span>秒才生效,设置Esc超时时间为<span class=\"hljs-number\">100</span>ms,尽快生效<br><span class=\"hljs-built_in\">set</span> ttimeout<br><span class=\"hljs-built_in\">set</span> ttimeoutlen=<span class=\"hljs-number\">100</span><br><br><span class=\"hljs-string\">\"在处理未保存或只读文件的时候，弹出确认</span><br><span class=\"hljs-string\">set confirm</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>让Backspace键可以往前删除字符.<br><span class=\"hljs-string\">\"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,</span><br><span class=\"hljs-string\">\"</span>可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,<br><span class=\"hljs-string\">\"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.</span><br><span class=\"hljs-string\">\"</span>使回格键（backspace）正常处理indent, eol, start等<br><span class=\"hljs-built_in\">set</span> backspace=indent,eol,start<br><br><span class=\"hljs-string\">\"允许backspace和光标键跨越行边界</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> whichwrap+=&lt;,&gt;,h,l<br><br><span class=\"hljs-string\">\"去掉有关vi一致性模式,避免操作习惯上的局限.</span><br><span class=\"hljs-string\">set nocompatible</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置<br><span class=\"hljs-string\">\"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.</span><br><span class=\"hljs-string\">\"</span>但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现<br><span class=\"hljs-string\">\"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.</span><br><span class=\"hljs-string\">\"</span> mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a<br><span class=\"hljs-built_in\">set</span> mouse=n<br><span class=\"hljs-string\">\"set selection=exclusive</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> selectmode=mouse,key<br><br><span class=\"hljs-string\">\"高亮显示括号匹配</span><br><span class=\"hljs-string\">set showmatch</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>设置Tab长度为<span class=\"hljs-number\">4</span>空格<br><span class=\"hljs-built_in\">set</span> tabstop=<span class=\"hljs-number\">4</span><br><span class=\"hljs-string\">\"设置自动缩进长度为4空格</span><br><span class=\"hljs-string\">set shiftwidth=4</span><br><span class=\"hljs-string\">\"</span>自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置<br><span class=\"hljs-string\">\"set autoindent</span><br><span class=\"hljs-string\">\"</span>不要用空格代替制表符<br><span class=\"hljs-built_in\">set</span> noexpandtab<br><span class=\"hljs-string\">\"输入tab制表符时，自动替换成空格</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> expandtab<br><span class=\"hljs-string\">\"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.</span><br><span class=\"hljs-string\">\"</span>softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.<br><span class=\"hljs-string\">\"set softtabstop=4</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>显示空格和tab键<br><span class=\"hljs-built_in\">set</span> listchars=tab:&gt;-,trail:-<br><br><span class=\"hljs-string\">\"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名</span><br><span class=\"hljs-string\">set laststatus=2</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>自动补全<br>:inoremap ( ()&lt;ESC&gt;i<br>:inoremap ) &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">')'</span>)&lt;CR&gt;<br>:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O<br>:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">'&#125;'</span>)&lt;CR&gt;<br>:inoremap [ []&lt;ESC&gt;i<br>:inoremap ] &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">']'</span>)&lt;CR&gt;<br>:inoremap <span class=\"hljs-string\">\" \"</span><span class=\"hljs-string\">\"&lt;ESC&gt;i</span><br><span class=\"hljs-string\">:inoremap ' ''&lt;ESC&gt;i</span><br><span class=\"hljs-string\">function! ClosePair(char)</span><br><span class=\"hljs-string\">    if getline('.')[col('.') - 1] == a:char</span><br><span class=\"hljs-string\">        return \"</span>\\&lt;Right&gt;<span class=\"hljs-string\">\"</span><br><span class=\"hljs-string\">    else</span><br><span class=\"hljs-string\">        return a:char</span><br><span class=\"hljs-string\">    endif</span><br><span class=\"hljs-string\">endfunction </span><br><span class=\"hljs-string\">\"</span>打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文<br>filetype plugin indent on<br><span class=\"hljs-string\">\" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过</span><br><span class=\"hljs-string\">\"</span> CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.<br><span class=\"hljs-string\">\" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较</span><br><span class=\"hljs-string\">\"</span> 麻烦,不做设置,保持默认设置,vim默认没有设置longest.<br><span class=\"hljs-string\">\"set completeopt=longest,menu \"</span>启用这句才会开启自动补全<br><br><br><span class=\"hljs-string\">\"=============显示中文帮助</span><br><span class=\"hljs-string\">if version &gt;= 603</span><br><span class=\"hljs-string\">    set helplang=cn</span><br><span class=\"hljs-string\">    set encoding=utf-8</span><br><span class=\"hljs-string\">endif</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>=============新建.c,.h,.sh,.java文件，自动插入文件头 <br>autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec <span class=\"hljs-string\">\":call SetTitle()\"</span> <br><span class=\"hljs-string\">\"\"</span>定义函数SetTitle，自动插入文件头 <br>func SetTitle() <br>    <span class=\"hljs-string\">\"如果文件类型为.sh文件 </span><br><span class=\"hljs-string\">    if &amp;filetype == 'sh' </span><br><span class=\"hljs-string\">        call setline(1,\"</span>\\############################<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\"), \"</span>\\# <span class=\"hljs-built_in\">File</span> Name: <span class=\"hljs-string\">\".expand(\"</span>%<span class=\"hljs-string\">\")) </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+1, \"</span>\\# Author: Li Ziqiang<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+2, \"</span>\\# mail: <span class=\"hljs-number\">2296557984</span>@qq.com<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+3, \"</span>\\# Created Time: <span class=\"hljs-string\">\".strftime(\"</span>%c<span class=\"hljs-string\">\"))</span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+4, \"</span>\\############################<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+5, \"</span>\\#!/bin/bash<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+6, \"</span><span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">    else </span><br><span class=\"hljs-string\">        call setline(1, \"</span><span class=\"hljs-comment\">/******************************\") </span><br><span class=\"hljs-comment\">        call append(line(\".\"), \"    &gt; File Name: \".expand(\"%\")) </span><br><span class=\"hljs-comment\">        call append(line(\".\")+1, \"    &gt; Author:Li Ziqiang\") </span><br><span class=\"hljs-comment\">        call append(line(\".\")+2, \"    &gt; Mail: 2296557984@qq.com \") </span><br><span class=\"hljs-comment\">        call append(line(\".\")+3, \"    &gt; Created Time: \".strftime(\"%c\")) </span><br><span class=\"hljs-comment\">        call append(line(\".\")+4, \" *****************************/</span><span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+5, \"</span><span class=\"hljs-string\">\")</span><br><span class=\"hljs-string\">    endif</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    \"</span>新建文件后，自动定位到文件末尾<br>    autocmd BufNewFile * normal G<br>endfunc<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><a href=\"https://book.apeland.cn/details/189/\" target=\"_blank\" rel=\"noopener\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件","more":"</li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\" target=\"_blank\" rel=\"noopener\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>%%blacksheep为用户名，应选择自己的路                            径配置环境变量</code></pre></li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">channels:<br>https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;<br>https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;<br>https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;<br>defaults<br>show_channel_urls: true<br></code></pre></td></tr></table></figure></code></pre><h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">apt-get install xfonts-intl-chinese<br>apt-get install ttf-wqy-microhei<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">sudo apt update<br>sudo apt install manpages-zh<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">pacman -Syu<br>pacman -S man-pages-zh_cn man-pages-zh_tw<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">yum update<br>yum install man-pages-zh-CN<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">dnf update<br>dnf install man-pages-zh-CN<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li>vim简单配置：</li>\n</ul>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-string\">\"===================</span><br><span class=\"hljs-string\">\"</span>适合自己用的vimrc配置文件<br><span class=\"hljs-string\">\"===================</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>设置编码<br><span class=\"hljs-built_in\">set</span> fileencodings=utf<span class=\"hljs-number\">-8</span>,ucs-bom,gb18030,gbk,gb2312,cp936<br><span class=\"hljs-built_in\">set</span> termencoding=utf<span class=\"hljs-number\">-8</span><br><span class=\"hljs-built_in\">set</span> encoding=utf<span class=\"hljs-number\">-8</span><br><br><span class=\"hljs-string\">\"保存.vimrc文件时自动重启加载，即让此文件立即生效</span><br><span class=\"hljs-string\">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>语法高亮<br>syntax on<br><br><span class=\"hljs-string\">\"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> ruler<br><br><span class=\"hljs-string\">\"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]</span><br><span class=\"hljs-string\">\"</span>%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.<br><span class=\"hljs-string\">\"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.</span><br><span class=\"hljs-string\">set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\\"%H:%M\\\")&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>显示行号<br><span class=\"hljs-built_in\">set</span> nu <span class=\"hljs-string\">\"等同于 set number</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>突出显示当前行<br><span class=\"hljs-built_in\">set</span> cursorline <span class=\"hljs-string\">\"等同于 set cul</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>突出显示当前列<br><span class=\"hljs-built_in\">set</span> cursorcolumn <span class=\"hljs-string\">\"等同于 set cuc</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>共享剪贴板  <br><span class=\"hljs-built_in\">set</span> clipboard+=unnamed <br><br><span class=\"hljs-string\">\"从不备份  </span><br><span class=\"hljs-string\">set nobackup</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>自动保存<br><span class=\"hljs-built_in\">set</span> autowrite<br><br><span class=\"hljs-string\">\"隐藏工具栏</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> guioptions-=T<br><span class=\"hljs-string\">\"隐藏菜单栏</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> guioptions-=m<br><br><span class=\"hljs-string\">\"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> hlsearch<br><br><span class=\"hljs-string\">\"光标立刻跳转到搜索到内容</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> incsearch<br><br><span class=\"hljs-string\">\"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> nowrapscan<br><br><span class=\"hljs-string\">\"去掉输入错误时的提示声音</span><br><span class=\"hljs-string\">set noeb</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span> 默认按下Esc后,需要等待<span class=\"hljs-number\">1</span>秒才生效,设置Esc超时时间为<span class=\"hljs-number\">100</span>ms,尽快生效<br><span class=\"hljs-built_in\">set</span> ttimeout<br><span class=\"hljs-built_in\">set</span> ttimeoutlen=<span class=\"hljs-number\">100</span><br><br><span class=\"hljs-string\">\"在处理未保存或只读文件的时候，弹出确认</span><br><span class=\"hljs-string\">set confirm</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>让Backspace键可以往前删除字符.<br><span class=\"hljs-string\">\"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,</span><br><span class=\"hljs-string\">\"</span>可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,<br><span class=\"hljs-string\">\"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.</span><br><span class=\"hljs-string\">\"</span>使回格键（backspace）正常处理indent, eol, start等<br><span class=\"hljs-built_in\">set</span> backspace=indent,eol,start<br><br><span class=\"hljs-string\">\"允许backspace和光标键跨越行边界</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> whichwrap+=&lt;,&gt;,h,l<br><br><span class=\"hljs-string\">\"去掉有关vi一致性模式,避免操作习惯上的局限.</span><br><span class=\"hljs-string\">set nocompatible</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置<br><span class=\"hljs-string\">\"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.</span><br><span class=\"hljs-string\">\"</span>但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现<br><span class=\"hljs-string\">\"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.</span><br><span class=\"hljs-string\">\"</span> mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a<br><span class=\"hljs-built_in\">set</span> mouse=n<br><span class=\"hljs-string\">\"set selection=exclusive</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> selectmode=mouse,key<br><br><span class=\"hljs-string\">\"高亮显示括号匹配</span><br><span class=\"hljs-string\">set showmatch</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>设置Tab长度为<span class=\"hljs-number\">4</span>空格<br><span class=\"hljs-built_in\">set</span> tabstop=<span class=\"hljs-number\">4</span><br><span class=\"hljs-string\">\"设置自动缩进长度为4空格</span><br><span class=\"hljs-string\">set shiftwidth=4</span><br><span class=\"hljs-string\">\"</span>自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置<br><span class=\"hljs-string\">\"set autoindent</span><br><span class=\"hljs-string\">\"</span>不要用空格代替制表符<br><span class=\"hljs-built_in\">set</span> noexpandtab<br><span class=\"hljs-string\">\"输入tab制表符时，自动替换成空格</span><br><span class=\"hljs-string\">\"</span><span class=\"hljs-built_in\">set</span> expandtab<br><span class=\"hljs-string\">\"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.</span><br><span class=\"hljs-string\">\"</span>softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.<br><span class=\"hljs-string\">\"set softtabstop=4</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>显示空格和tab键<br><span class=\"hljs-built_in\">set</span> listchars=tab:&gt;-,trail:-<br><br><span class=\"hljs-string\">\"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名</span><br><span class=\"hljs-string\">set laststatus=2</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>自动补全<br>:inoremap ( ()&lt;ESC&gt;i<br>:inoremap ) &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">')'</span>)&lt;CR&gt;<br>:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O<br>:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">'&#125;'</span>)&lt;CR&gt;<br>:inoremap [ []&lt;ESC&gt;i<br>:inoremap ] &lt;c-r&gt;=ClosePair(<span class=\"hljs-string\">']'</span>)&lt;CR&gt;<br>:inoremap <span class=\"hljs-string\">\" \"</span><span class=\"hljs-string\">\"&lt;ESC&gt;i</span><br><span class=\"hljs-string\">:inoremap ' ''&lt;ESC&gt;i</span><br><span class=\"hljs-string\">function! ClosePair(char)</span><br><span class=\"hljs-string\">    if getline('.')[col('.') - 1] == a:char</span><br><span class=\"hljs-string\">        return \"</span>\\&lt;Right&gt;<span class=\"hljs-string\">\"</span><br><span class=\"hljs-string\">    else</span><br><span class=\"hljs-string\">        return a:char</span><br><span class=\"hljs-string\">    endif</span><br><span class=\"hljs-string\">endfunction </span><br><span class=\"hljs-string\">\"</span>打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文<br>filetype plugin indent on<br><span class=\"hljs-string\">\" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过</span><br><span class=\"hljs-string\">\"</span> CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.<br><span class=\"hljs-string\">\" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较</span><br><span class=\"hljs-string\">\"</span> 麻烦,不做设置,保持默认设置,vim默认没有设置longest.<br><span class=\"hljs-string\">\"set completeopt=longest,menu \"</span>启用这句才会开启自动补全<br><br><br><span class=\"hljs-string\">\"=============显示中文帮助</span><br><span class=\"hljs-string\">if version &gt;= 603</span><br><span class=\"hljs-string\">    set helplang=cn</span><br><span class=\"hljs-string\">    set encoding=utf-8</span><br><span class=\"hljs-string\">endif</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">\"</span>=============新建.c,.h,.sh,.java文件，自动插入文件头 <br>autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec <span class=\"hljs-string\">\":call SetTitle()\"</span> <br><span class=\"hljs-string\">\"\"</span>定义函数SetTitle，自动插入文件头 <br>func SetTitle() <br>    <span class=\"hljs-string\">\"如果文件类型为.sh文件 </span><br><span class=\"hljs-string\">    if &amp;filetype == 'sh' </span><br><span class=\"hljs-string\">        call setline(1,\"</span>\\############################<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\"), \"</span>\\# <span class=\"hljs-built_in\">File</span> Name: <span class=\"hljs-string\">\".expand(\"</span>%<span class=\"hljs-string\">\")) </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+1, \"</span>\\# Author: Li Ziqiang<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+2, \"</span>\\# mail: <span class=\"hljs-number\">2296557984</span>@qq.com<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+3, \"</span>\\# Created Time: <span class=\"hljs-string\">\".strftime(\"</span>%c<span class=\"hljs-string\">\"))</span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+4, \"</span>\\############################<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+5, \"</span>\\#!/bin/bash<span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+6, \"</span><span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">    else </span><br><span class=\"hljs-string\">        call setline(1, \"</span><span class=\"hljs-comment\">/******************************\") </span><br><span class=\"hljs-comment\">        call append(line(\".\"), \"    &gt; File Name: \".expand(\"%\")) </span><br><span class=\"hljs-comment\">        call append(line(\".\")+1, \"    &gt; Author:Li Ziqiang\") </span><br><span class=\"hljs-comment\">        call append(line(\".\")+2, \"    &gt; Mail: 2296557984@qq.com \") </span><br><span class=\"hljs-comment\">        call append(line(\".\")+3, \"    &gt; Created Time: \".strftime(\"%c\")) </span><br><span class=\"hljs-comment\">        call append(line(\".\")+4, \" *****************************/</span><span class=\"hljs-string\">\") </span><br><span class=\"hljs-string\">        call append(line(\"</span>.<span class=\"hljs-string\">\")+5, \"</span><span class=\"hljs-string\">\")</span><br><span class=\"hljs-string\">    endif</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    \"</span>新建文件后，自动定位到文件末尾<br>    autocmd BufNewFile * normal G<br>endfunc<br></code></pre></td></tr></table></figure>"},{"title":"tcp/ip","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"# 网络协议\n\n[相关博客](http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html)\n\n## 以太网\n\n### 以太网术语\n\n以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 \n\n1. 介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 \n2. 网段——我们将单个共享介质称作一个以太网段。 \n3. 节点——连接到网段的设备称作站点或节点。 \n4. 帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。\n<!--more-->\n####TCP/IP协议原理图及解释\n\n[原理图链接](http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690)\n\n**应用层（FTP协议）:**\n\n首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。\n\n**传输层(TCP):**\n\n用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。\n\n**网络层(IP):**\n\n邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。\n\n**链路层（以太网）:**\n\n重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。\n所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。\n\n- 知名端口号一般都低于1024，客户端端口号是临时的\n- TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输\n- UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输\n\n- 以太网的类型：0800  IP数据  （记）\n\n  ​\t\t\t\t\t\t 0806  ARP请求/应答   (记)\n\n  ​\t\t\t\t\t\t 8035  RARP请求/应答\n\n- 以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理\n\n## 关于IP首部\n\n[IP首部链接](https://blog.csdn.net/Wu000999/article/details/88617237)\n\n![img](https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70)\n\n- 详情点击上方链接（太难了。。。）\n\n## MAC 地址与 IP 地址区别\n\n- IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：\n\n1. 对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。\n2. 长度不同。IP 地址为 32 位，MAC 地址为 48 位。\n3. 分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。\n4. 寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。\n5. **MAC地址其实是可以修改的，网上能搜到**\n\n\n\n### 数据传输时\n\n- IP视为标记，原IP和目的IP再数据传输的过程中是不变的\n- MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变\n\n##### 基于TCP的应用层协议：\n\n- HTTP：80\n- HTTPS：443\n- FTP：20/21\n- SSH：22\n- TELNET：23\n- SMTP/POP：25/110\n\n\n\n### 通过tcp包中flags的值来判断tcp的状态\n\n\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n其中，对于我们日常的分析有用的就是前面的五个字段。\n它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\nTCP三次握手：\nTCP(Transmission Control Protocol)传输控制协议\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n三次握手详解如下：\n一个虚拟连接的建立是通过三次握手来实现的\n\n(B) –> [SYN] –> (A)\n假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.\n注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。\n(B) <– [SYN /ACK] <–(A)\n接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.\n注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.\n(B) –> [ACK] –> (A)\nB收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成\nNote: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位\n握手阶段：\n序号 方向 seq ack\n\n1. A->B 10000 0\n2. B->A 20000 10000+1=10001\n3. A->B 10001 20000+1=20001\n   解释：\n   1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0\n   2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001\n   3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001\n   数据传输阶段：\n   序号　　方向　　　　　　seq ack size\n   23 A->B 40000 70000 1514\n   24 B->A 70000 40000+1514-54=41460 54\n   25 A->B 41460 70000+54-54=70000 1514\n   26 B->A 70000 41460+1514-54=42920 54\n   解释：\n   23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包\n   24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。\n   25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。\n   其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.\n   另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.\n\n![img](https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1)\n\n\n\n[原文链接](https://blog.csdn.net/hushengqiang/article/details/44180557)\n\n\n\n### TCP/IP的四元组、五元组、七元组\n\n1. 四元组是：源IP地址、目的IP地址、源端口、目的端口\n\n2. 五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口\n\n3. 七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引\n\n","source":"_posts/网络协议.md","raw":"---\ntitle: tcp/ip\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- 网络协议\ntags:\n- 网络协议\n---\n# 网络协议\n\n[相关博客](http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html)\n\n## 以太网\n\n### 以太网术语\n\n以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 \n\n1. 介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 \n2. 网段——我们将单个共享介质称作一个以太网段。 \n3. 节点——连接到网段的设备称作站点或节点。 \n4. 帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。\n<!--more-->\n####TCP/IP协议原理图及解释\n\n[原理图链接](http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690)\n\n**应用层（FTP协议）:**\n\n首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。\n\n**传输层(TCP):**\n\n用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。\n\n**网络层(IP):**\n\n邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。\n\n**链路层（以太网）:**\n\n重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。\n所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。\n\n- 知名端口号一般都低于1024，客户端端口号是临时的\n- TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输\n- UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输\n\n- 以太网的类型：0800  IP数据  （记）\n\n  ​\t\t\t\t\t\t 0806  ARP请求/应答   (记)\n\n  ​\t\t\t\t\t\t 8035  RARP请求/应答\n\n- 以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理\n\n## 关于IP首部\n\n[IP首部链接](https://blog.csdn.net/Wu000999/article/details/88617237)\n\n![img](https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70)\n\n- 详情点击上方链接（太难了。。。）\n\n## MAC 地址与 IP 地址区别\n\n- IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：\n\n1. 对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。\n2. 长度不同。IP 地址为 32 位，MAC 地址为 48 位。\n3. 分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。\n4. 寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。\n5. **MAC地址其实是可以修改的，网上能搜到**\n\n\n\n### 数据传输时\n\n- IP视为标记，原IP和目的IP再数据传输的过程中是不变的\n- MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变\n\n##### 基于TCP的应用层协议：\n\n- HTTP：80\n- HTTPS：443\n- FTP：20/21\n- SSH：22\n- TELNET：23\n- SMTP/POP：25/110\n\n\n\n### 通过tcp包中flags的值来判断tcp的状态\n\n\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n其中，对于我们日常的分析有用的就是前面的五个字段。\n它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\nTCP三次握手：\nTCP(Transmission Control Protocol)传输控制协议\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n三次握手详解如下：\n一个虚拟连接的建立是通过三次握手来实现的\n\n(B) –> [SYN] –> (A)\n假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.\n注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。\n(B) <– [SYN /ACK] <–(A)\n接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.\n注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.\n(B) –> [ACK] –> (A)\nB收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成\nNote: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位\n握手阶段：\n序号 方向 seq ack\n\n1. A->B 10000 0\n2. B->A 20000 10000+1=10001\n3. A->B 10001 20000+1=20001\n   解释：\n   1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0\n   2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001\n   3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001\n   数据传输阶段：\n   序号　　方向　　　　　　seq ack size\n   23 A->B 40000 70000 1514\n   24 B->A 70000 40000+1514-54=41460 54\n   25 A->B 41460 70000+54-54=70000 1514\n   26 B->A 70000 41460+1514-54=42920 54\n   解释：\n   23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包\n   24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。\n   25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。\n   其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.\n   另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.\n\n![img](https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1)\n\n\n\n[原文链接](https://blog.csdn.net/hushengqiang/article/details/44180557)\n\n\n\n### TCP/IP的四元组、五元组、七元组\n\n1. 四元组是：源IP地址、目的IP地址、源端口、目的端口\n\n2. 五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口\n\n3. 七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引\n\n","slug":"网络协议","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytql000pwov86na39ign","content":"<h1 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议\"></a>网络协议</h1><p><a href=\"http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html\" target=\"_blank\" rel=\"noopener\">相关博客</a></p>\n<h2 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h2><h3 id=\"以太网术语\"><a href=\"#以太网术语\" class=\"headerlink\" title=\"以太网术语\"></a>以太网术语</h3><p>以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 </p>\n<ol>\n<li>介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 </li>\n<li>网段——我们将单个共享介质称作一个以太网段。 </li>\n<li>节点——连接到网段的设备称作站点或节点。 </li>\n<li>帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。<a id=\"more\"></a>\n####TCP/IP协议原理图及解释</li>\n</ol>\n<p><a href=\"http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690\" target=\"_blank\" rel=\"noopener\">原理图链接</a></p>\n<p><strong>应用层（FTP协议）:</strong></p>\n<p>首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。</p>\n<p><strong>传输层(TCP):</strong></p>\n<p>用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。</p>\n<p><strong>网络层(IP):</strong></p>\n<p>邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。</p>\n<p><strong>链路层（以太网）:</strong></p>\n<p>重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。<br>所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。</p>\n<ul>\n<li><p>知名端口号一般都低于1024，客户端端口号是临时的</p>\n</li>\n<li><p>TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输</p>\n</li>\n<li><p>UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输</p>\n</li>\n<li><p>以太网的类型：0800  IP数据  （记）</p>\n<p>​                         0806  ARP请求/应答   (记)</p>\n<p>​                         8035  RARP请求/应答</p>\n</li>\n<li><p>以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理</p>\n</li>\n</ul>\n<h2 id=\"关于IP首部\"><a href=\"#关于IP首部\" class=\"headerlink\" title=\"关于IP首部\"></a>关于IP首部</h2><p><a href=\"https://blog.csdn.net/Wu000999/article/details/88617237\" target=\"_blank\" rel=\"noopener\">IP首部链接</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<ul>\n<li>详情点击上方链接（太难了。。。）</li>\n</ul>\n<h2 id=\"MAC-地址与-IP-地址区别\"><a href=\"#MAC-地址与-IP-地址区别\" class=\"headerlink\" title=\"MAC 地址与 IP 地址区别\"></a>MAC 地址与 IP 地址区别</h2><ul>\n<li>IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：</li>\n</ul>\n<ol>\n<li>对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。</li>\n<li>长度不同。IP 地址为 32 位，MAC 地址为 48 位。</li>\n<li>分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。</li>\n<li>寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。</li>\n<li><strong>MAC地址其实是可以修改的，网上能搜到</strong></li>\n</ol>\n<h3 id=\"数据传输时\"><a href=\"#数据传输时\" class=\"headerlink\" title=\"数据传输时\"></a>数据传输时</h3><ul>\n<li>IP视为标记，原IP和目的IP再数据传输的过程中是不变的</li>\n<li>MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变</li>\n</ul>\n<h5 id=\"基于TCP的应用层协议：\"><a href=\"#基于TCP的应用层协议：\" class=\"headerlink\" title=\"基于TCP的应用层协议：\"></a>基于TCP的应用层协议：</h5><ul>\n<li>HTTP：80</li>\n<li>HTTPS：443</li>\n<li>FTP：20/21</li>\n<li>SSH：22</li>\n<li>TELNET：23</li>\n<li>SMTP/POP：25/110</li>\n</ul>\n<h3 id=\"通过tcp包中flags的值来判断tcp的状态\"><a href=\"#通过tcp包中flags的值来判断tcp的状态\" class=\"headerlink\" title=\"通过tcp包中flags的值来判断tcp的状态\"></a>通过tcp包中flags的值来判断tcp的状态</h3><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。<br>它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</p>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。<br>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>TCP三次握手：<br>TCP(Transmission Control Protocol)传输控制协议<br>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<p>三次握手详解如下：<br>一个虚拟连接的建立是通过三次握手来实现的</p>\n<p>(B) –&gt; [SYN] –&gt; (A)<br>假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.<br>注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。<br>(B) &lt;– [SYN /ACK] &lt;–(A)<br>接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.<br>注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.<br>(B) –&gt; [ACK] –&gt; (A)<br>B收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成<br>Note: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位<br>握手阶段：<br>序号 方向 seq ack</p>\n<ol>\n<li>A-&gt;B 10000 0</li>\n<li>B-&gt;A 20000 10000+1=10001</li>\n<li>A-&gt;B 10001 20000+1=20001<br>解释：<br>1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0<br>2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001<br>3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001<br>数据传输阶段：<br>序号　　方向　　　　　　seq ack size<br>23 A-&gt;B 40000 70000 1514<br>24 B-&gt;A 70000 40000+1514-54=41460 54<br>25 A-&gt;B 41460 70000+54-54=70000 1514<br>26 B-&gt;A 70000 41460+1514-54=42920 54<br>解释：<br>23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包<br>24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。<br>25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。<br>其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.<br>另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.</li>\n</ol>\n<p><img src=\"https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1\" alt=\"img\"></p>\n<p><a href=\"https://blog.csdn.net/hushengqiang/article/details/44180557\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"TCP-IP的四元组、五元组、七元组\"><a href=\"#TCP-IP的四元组、五元组、七元组\" class=\"headerlink\" title=\"TCP/IP的四元组、五元组、七元组\"></a>TCP/IP的四元组、五元组、七元组</h3><ol>\n<li><p>四元组是：源IP地址、目的IP地址、源端口、目的端口</p>\n</li>\n<li><p>五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口</p>\n</li>\n<li><p>七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议\"></a>网络协议</h1><p><a href=\"http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html\" target=\"_blank\" rel=\"noopener\">相关博客</a></p>\n<h2 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h2><h3 id=\"以太网术语\"><a href=\"#以太网术语\" class=\"headerlink\" title=\"以太网术语\"></a>以太网术语</h3><p>以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 </p>\n<ol>\n<li>介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 </li>\n<li>网段——我们将单个共享介质称作一个以太网段。 </li>\n<li>节点——连接到网段的设备称作站点或节点。 </li>\n<li>帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。","more":"####TCP/IP协议原理图及解释</li>\n</ol>\n<p><a href=\"http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690\" target=\"_blank\" rel=\"noopener\">原理图链接</a></p>\n<p><strong>应用层（FTP协议）:</strong></p>\n<p>首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。</p>\n<p><strong>传输层(TCP):</strong></p>\n<p>用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。</p>\n<p><strong>网络层(IP):</strong></p>\n<p>邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。</p>\n<p><strong>链路层（以太网）:</strong></p>\n<p>重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。<br>所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。</p>\n<ul>\n<li><p>知名端口号一般都低于1024，客户端端口号是临时的</p>\n</li>\n<li><p>TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输</p>\n</li>\n<li><p>UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输</p>\n</li>\n<li><p>以太网的类型：0800  IP数据  （记）</p>\n<p>​                         0806  ARP请求/应答   (记)</p>\n<p>​                         8035  RARP请求/应答</p>\n</li>\n<li><p>以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理</p>\n</li>\n</ul>\n<h2 id=\"关于IP首部\"><a href=\"#关于IP首部\" class=\"headerlink\" title=\"关于IP首部\"></a>关于IP首部</h2><p><a href=\"https://blog.csdn.net/Wu000999/article/details/88617237\" target=\"_blank\" rel=\"noopener\">IP首部链接</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<ul>\n<li>详情点击上方链接（太难了。。。）</li>\n</ul>\n<h2 id=\"MAC-地址与-IP-地址区别\"><a href=\"#MAC-地址与-IP-地址区别\" class=\"headerlink\" title=\"MAC 地址与 IP 地址区别\"></a>MAC 地址与 IP 地址区别</h2><ul>\n<li>IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：</li>\n</ul>\n<ol>\n<li>对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。</li>\n<li>长度不同。IP 地址为 32 位，MAC 地址为 48 位。</li>\n<li>分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。</li>\n<li>寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。</li>\n<li><strong>MAC地址其实是可以修改的，网上能搜到</strong></li>\n</ol>\n<h3 id=\"数据传输时\"><a href=\"#数据传输时\" class=\"headerlink\" title=\"数据传输时\"></a>数据传输时</h3><ul>\n<li>IP视为标记，原IP和目的IP再数据传输的过程中是不变的</li>\n<li>MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变</li>\n</ul>\n<h5 id=\"基于TCP的应用层协议：\"><a href=\"#基于TCP的应用层协议：\" class=\"headerlink\" title=\"基于TCP的应用层协议：\"></a>基于TCP的应用层协议：</h5><ul>\n<li>HTTP：80</li>\n<li>HTTPS：443</li>\n<li>FTP：20/21</li>\n<li>SSH：22</li>\n<li>TELNET：23</li>\n<li>SMTP/POP：25/110</li>\n</ul>\n<h3 id=\"通过tcp包中flags的值来判断tcp的状态\"><a href=\"#通过tcp包中flags的值来判断tcp的状态\" class=\"headerlink\" title=\"通过tcp包中flags的值来判断tcp的状态\"></a>通过tcp包中flags的值来判断tcp的状态</h3><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。<br>它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</p>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。<br>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>TCP三次握手：<br>TCP(Transmission Control Protocol)传输控制协议<br>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<p>三次握手详解如下：<br>一个虚拟连接的建立是通过三次握手来实现的</p>\n<p>(B) –&gt; [SYN] –&gt; (A)<br>假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.<br>注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。<br>(B) &lt;– [SYN /ACK] &lt;–(A)<br>接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.<br>注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.<br>(B) –&gt; [ACK] –&gt; (A)<br>B收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成<br>Note: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位<br>握手阶段：<br>序号 方向 seq ack</p>\n<ol>\n<li>A-&gt;B 10000 0</li>\n<li>B-&gt;A 20000 10000+1=10001</li>\n<li>A-&gt;B 10001 20000+1=20001<br>解释：<br>1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0<br>2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001<br>3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001<br>数据传输阶段：<br>序号　　方向　　　　　　seq ack size<br>23 A-&gt;B 40000 70000 1514<br>24 B-&gt;A 70000 40000+1514-54=41460 54<br>25 A-&gt;B 41460 70000+54-54=70000 1514<br>26 B-&gt;A 70000 41460+1514-54=42920 54<br>解释：<br>23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包<br>24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。<br>25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。<br>其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.<br>另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.</li>\n</ol>\n<p><img src=\"https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1\" alt=\"img\"></p>\n<p><a href=\"https://blog.csdn.net/hushengqiang/article/details/44180557\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h3 id=\"TCP-IP的四元组、五元组、七元组\"><a href=\"#TCP-IP的四元组、五元组、七元组\" class=\"headerlink\" title=\"TCP/IP的四元组、五元组、七元组\"></a>TCP/IP的四元组、五元组、七元组</h3><ol>\n<li><p>四元组是：源IP地址、目的IP地址、源端口、目的端口</p>\n</li>\n<li><p>五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口</p>\n</li>\n<li><p>七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引</p>\n</li>\n</ol>"},{"title":"python爬虫实战","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n  - BOT_NAME = 爬虫的名字\n\n  - ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n  - CONCURRENT_REQUESTS = 爬虫的并发量\n\n  - DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n  - COOKLES_ENABLED = cookiede的使用，布尔\n\n  - DEFAULT_REQUEST_HEADERS = 默认请求头\n\n  - ITEM_PIPELINES = 管道文件\n\n    \n\n    ### setting文件详解\n\n    ```python\n    # -*- coding: utf-8 -*-\n     \n    # Scrapy settings for TestSpider project\n    #\n    # For simplicity, this file contains only settings considered important or\n    # commonly used. You can find more settings consulting the documentation:\n    #\n    #     https://doc.scrapy.org/en/latest/topics/settings.html\n    #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n     \n    BOT_NAME = 'TestSpider'\n     \n    SPIDER_MODULES = ['TestSpider.spiders']\n    NEWSPIDER_MODULE = 'TestSpider.spiders'\n     \n     \n    # Crawl responsibly by identifying yourself (and your website) on the user-agent\n    #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n     \n    USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n     \n    # Obey robots.txt rules\n    # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n    # 默认是True，设置为False不遵守这个协议。\n    ROBOTSTXT_OBEY = False\n     \n     \n    # Configure maximum concurrent requests performed by Scrapy (default: 16)\n    # 配置scrapy的请求连接数，默认会同时并发16个请求。\n    # CONCURRENT_REQUESTS = 10\n     \n    # Configure a delay for requests for the same website (default: 0)\n    # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n    # See also autothrottle settings and docs\n     \n    # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n    # DOWNLOAD_DELAY = 3\n     \n     \n    # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n    # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n    # The download delay setting will honor only one of:\n    # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n    # CONCURRENT_REQUESTS_PER_IP = 16\n     \n     \n    # Disable cookies (enabled by default)\n    # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n    # COOKIES_ENABLED = False\n     \n    # Disable Telnet Console (enabled by default)\n    #TELNETCONSOLE_ENABLED = False\n     \n     \n    # Override the default request headers:\n     \n    # 配置默认的请求头Headers.\n    # DEFAULT_REQUEST_HEADERS = {\n    #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    #   'Accept-Language': 'en',\n    # }\n     \n     \n    # Enable or disable spider middlewares\n    # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n     \n    # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n    # SPIDER_MIDDLEWARES = {\n    #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n    # }\n     \n     \n    # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n    # Enable or disable downloader middlewares\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    # DOWNLOADER_MIDDLEWARES = {\n    #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n    # }\n     \n     \n    # Enable or disable extensions\n    # See https://doc.scrapy.org/en/latest/topics/extensions.html\n    # EXTENSIONS = {\n    #    'scrapy.extensions.telnet.TelnetConsole': None,\n    # }\n     \n     \n    # Configure item pipelines\n    # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n     \n    # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n    # ITEM_PIPELINES = {\n    #    'TestSpider.pipelines.TestspiderPipeline': 300,\n    # }\n     \n     \n    # 限速配置\n    # Enable and configure the AutoThrottle extension (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n     \n    # 是否开启自动限速\n    # AUTOTHROTTLE_ENABLED = True\n     \n     \n    # The initial download delay\n    # 配置初始url的下载延时\n    # AUTOTHROTTLE_START_DELAY = 5\n     \n     \n    # The maximum download delay to be set in case of high latencies\n    # 配置最大请求时间\n    # AUTOTHROTTLE_MAX_DELAY = 60\n     \n     \n    # 配置请求和请求之间的下载间隔，单位是秒\n    # The average number of requests Scrapy should be sending in parallel to\n    # each remote server\n    # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n     \n     \n    # Enable showing throttling stats for every response received:\n    # AUTOTHROTTLE_DEBUG = False\n     \n     \n    # 关于Http缓存的配置，默认是不启用。\n    # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n    # Enable and configure HTTP caching (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n    #HTTPCACHE_ENABLED = True\n    #HTTPCACHE_EXPIRATION_SECS = 0\n    #HTTPCACHE_DIR = 'httpcache'\n    #HTTPCACHE_IGNORE_HTTP_CODES = []\n    #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n    ```\n\n    \n\n    ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n    - 创建爬虫项目：scrapy startproject xiushi\n    - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n    #### item 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Define here the models for your scraped items\n    #\n    # See documentation in:\n    # https://doc.scrapy.org/en/latest/topics/items.html\n    \n    import scrapy\n    \n    \n    class XiushiItem(scrapy.Item):\n        # define the fields for your item here like:\n        # name = scrapy.Field()\n        title = scrapy.Field()\n        text = scrapy.Field()\n    \n    ```\n\n    #### setting 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Scrapy settings for xiushi project\n    #\n    # For simplicity, this file contains only settings considered important or\n    # commonly used. You can find more settings consulting the documentation:\n    #\n    #     https://doc.scrapy.org/en/latest/topics/settings.html\n    #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n    \n    BOT_NAME = 'xiushi'\n    \n    SPIDER_MODULES = ['xiushi.spiders']\n    NEWSPIDER_MODULE = 'xiushi.spiders'\n    \n    # Crawl responsibly by identifying yourself (and your website) on the user-agent\n    # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n    \n    # Obey robots.txt rules\n    ROBOTSTXT_OBEY = False\n    \n    # Configure maximum concurrent requests performed by Scrapy (default: 16)\n    # CONCURRENT_REQUESTS = 32\n    \n    # Configure a delay for requests for the same website (default: 0)\n    # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n    # See also autothrottle settings and docs\n    DOWNLOAD_DELAY = 1\n    # The download delay setting will honor only one of:\n    # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n    # CONCURRENT_REQUESTS_PER_IP = 16\n    \n    # Disable cookies (enabled by default)\n    # COOKIES_ENABLED = False\n    \n    # Disable Telnet Console (enabled by default)\n    # TELNETCONSOLE_ENABLED = False\n    \n    # Override the default request headers:\n    DEFAULT_REQUEST_HEADERS = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                      'Chrome/80.0.3987.163 Safari/537.36 '\n    }\n    \n    # Enable or disable spider middlewares\n    # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n    # SPIDER_MIDDLEWARES = {\n    #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n    # }\n    \n    # Enable or disable downloader middlewares\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    # DOWNLOADER_MIDDLEWARES = {\n    #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n    # }\n    \n    # Enable or disable extensions\n    # See https://doc.scrapy.org/en/latest/topics/extensions.html\n    # EXTENSIONS = {\n    #    'scrapy.extensions.telnet.TelnetConsole': None,\n    # }\n    \n    # Configure item pipelines\n    # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n    ITEM_PIPELINES = {\n       'xiushi.pipelines.XiushiPipeline': 300,\n    }\n    \n    # Enable and configure the AutoThrottle extension (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n    # AUTOTHROTTLE_ENABLED = True\n    # The initial download delay\n    # AUTOTHROTTLE_START_DELAY = 5\n    # The maximum download delay to be set in case of high latencies\n    # AUTOTHROTTLE_MAX_DELAY = 60\n    # The average number of requests Scrapy should be sending in parallel to\n    # each remote server\n    # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n    # Enable showing throttling stats for every response received:\n    # AUTOTHROTTLE_DEBUG = False\n    \n    # Enable and configure HTTP caching (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n    # HTTPCACHE_ENABLED = True\n    # HTTPCACHE_EXPIRATION_SECS = 0\n    # HTTPCACHE_DIR = 'httpcache'\n    # HTTPCACHE_IGNORE_HTTP_CODES = []\n    # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n    \n    ```\n\n    #### spider 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    import scrapy\n    from xiushi.items import XiushiItem\n    \n    \n    class XiushispiderSpider(scrapy.Spider):\n        name = 'xiushiSpider'\n        allowed_domains = ['qiushidabaike.com']\n        start_urls = ['http://qiushidabaike.com/index_1.html']\n        base_domain = 'http://qiushidabaike.com'\n    \n        def parse(self, response):\n            duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n            for it in duanzi:\n                title = it.xpath('./dt/span/a/text()').get().strip()\n                text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n                text = \"\".join(text).strip()\n                item = XiushiItem(title=title, text=text)\n                yield item\n            # 进行翻页操作\n            next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n            if not next_url:\n                return\n            else:\n                yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n    \n    ```\n\n    #### pipelines 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Define your item pipelines here\n    #\n    # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n    # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n    \"\"\"\n    # 第一种方法，没进行json优化，但是看起来简单易操作\n    import json\n    \n    \n    class XiushiPipeline(object):\n        def __init__(self):\n            self.fp = open('duanzi.json', 'w', encoding='utf-8')\n    \n        def open_spider(self, spider):\n            print('爬虫开始了...')\n    \n        def process_item(self, item, spider):\n            item_json = json.dumps(dict(item),  ensure_ascii=False)\n            self.fp.write(item_json+'\\n')\n            return item\n    \n        def close_spider(self, spider):\n            self.fp.close()\n            print(\"爬虫结束了...\")\n    \"\"\"\n    # 方案二，json优化，结果是每个字典存储在列表中\n    #        好处是满足json规则，坏处是数据量较大时比较耗内存\n    # ''' 自我感觉这种方法不咋地 '''\n    # from scrapy.exporters import JsonItemExporter\n    #\n    #\n    # class XiushiPipeline(object):\n    #     def __init__(self):\n    #         # 注意此时以二进制形式写入\n    #         self.fp = open('duanzi.json', 'wb')\n    #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n    #         self.exporter.start_exporting()\n    #\n    #     def open_spider(self, spider):\n    #         print('爬虫开始了...')\n    #\n    #     def process_item(self, item, spider):\n    #         self.exporter.export_item(item)\n    #         return item\n    #\n    #     def close_spider(self, spider):\n    #         self.exporter.finish_exporting()\n    #         self.fp.close()\n    #         print(\"爬虫结束了...\")\n    \n    '''方案三'''\n    from scrapy.exporters import JsonLinesItemExporter\n    \n    \n    class XiushiPipeline(object):\n        def __init__(self):\n            # 注意此时以二进制形式写入\n            self.fp = open('duanzi.json', 'wb')\n            self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n    \n        def open_spider(self, spider):\n            print('爬虫开始了...')\n    \n        def process_item(self, item, spider):\n            self.exporter.export_item(item)\n            return item\n    \n        def close_spider(self, spider):\n            self.fp.close()\n            print(\"爬虫结束了...\")\n    \n    ```\n\n    * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n      * ```python\n        from scrapy import cmdline\n        \n        cmdline.execute(\"scrapy crawl xiushiSpider\".split())\n        # cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n        ```\n\n        \n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","source":"_posts/spider.md","raw":"---\ntitle: python爬虫实战\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- 爬虫\n- python\ntags:\n- 爬虫\n- python\n---\n\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n  - BOT_NAME = 爬虫的名字\n\n  - ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n  - CONCURRENT_REQUESTS = 爬虫的并发量\n\n  - DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n  - COOKLES_ENABLED = cookiede的使用，布尔\n\n  - DEFAULT_REQUEST_HEADERS = 默认请求头\n\n  - ITEM_PIPELINES = 管道文件\n\n    \n\n    ### setting文件详解\n\n    ```python\n    # -*- coding: utf-8 -*-\n     \n    # Scrapy settings for TestSpider project\n    #\n    # For simplicity, this file contains only settings considered important or\n    # commonly used. You can find more settings consulting the documentation:\n    #\n    #     https://doc.scrapy.org/en/latest/topics/settings.html\n    #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n     \n    BOT_NAME = 'TestSpider'\n     \n    SPIDER_MODULES = ['TestSpider.spiders']\n    NEWSPIDER_MODULE = 'TestSpider.spiders'\n     \n     \n    # Crawl responsibly by identifying yourself (and your website) on the user-agent\n    #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n     \n    USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n     \n    # Obey robots.txt rules\n    # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n    # 默认是True，设置为False不遵守这个协议。\n    ROBOTSTXT_OBEY = False\n     \n     \n    # Configure maximum concurrent requests performed by Scrapy (default: 16)\n    # 配置scrapy的请求连接数，默认会同时并发16个请求。\n    # CONCURRENT_REQUESTS = 10\n     \n    # Configure a delay for requests for the same website (default: 0)\n    # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n    # See also autothrottle settings and docs\n     \n    # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n    # DOWNLOAD_DELAY = 3\n     \n     \n    # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n    # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n    # The download delay setting will honor only one of:\n    # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n    # CONCURRENT_REQUESTS_PER_IP = 16\n     \n     \n    # Disable cookies (enabled by default)\n    # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n    # COOKIES_ENABLED = False\n     \n    # Disable Telnet Console (enabled by default)\n    #TELNETCONSOLE_ENABLED = False\n     \n     \n    # Override the default request headers:\n     \n    # 配置默认的请求头Headers.\n    # DEFAULT_REQUEST_HEADERS = {\n    #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    #   'Accept-Language': 'en',\n    # }\n     \n     \n    # Enable or disable spider middlewares\n    # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n     \n    # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n    # SPIDER_MIDDLEWARES = {\n    #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n    # }\n     \n     \n    # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n    # Enable or disable downloader middlewares\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    # DOWNLOADER_MIDDLEWARES = {\n    #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n    # }\n     \n     \n    # Enable or disable extensions\n    # See https://doc.scrapy.org/en/latest/topics/extensions.html\n    # EXTENSIONS = {\n    #    'scrapy.extensions.telnet.TelnetConsole': None,\n    # }\n     \n     \n    # Configure item pipelines\n    # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n     \n    # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n    # ITEM_PIPELINES = {\n    #    'TestSpider.pipelines.TestspiderPipeline': 300,\n    # }\n     \n     \n    # 限速配置\n    # Enable and configure the AutoThrottle extension (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n     \n    # 是否开启自动限速\n    # AUTOTHROTTLE_ENABLED = True\n     \n     \n    # The initial download delay\n    # 配置初始url的下载延时\n    # AUTOTHROTTLE_START_DELAY = 5\n     \n     \n    # The maximum download delay to be set in case of high latencies\n    # 配置最大请求时间\n    # AUTOTHROTTLE_MAX_DELAY = 60\n     \n     \n    # 配置请求和请求之间的下载间隔，单位是秒\n    # The average number of requests Scrapy should be sending in parallel to\n    # each remote server\n    # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n     \n     \n    # Enable showing throttling stats for every response received:\n    # AUTOTHROTTLE_DEBUG = False\n     \n     \n    # 关于Http缓存的配置，默认是不启用。\n    # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n    # Enable and configure HTTP caching (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n    #HTTPCACHE_ENABLED = True\n    #HTTPCACHE_EXPIRATION_SECS = 0\n    #HTTPCACHE_DIR = 'httpcache'\n    #HTTPCACHE_IGNORE_HTTP_CODES = []\n    #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n    ```\n\n    \n\n    ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n    - 创建爬虫项目：scrapy startproject xiushi\n    - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n    #### item 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Define here the models for your scraped items\n    #\n    # See documentation in:\n    # https://doc.scrapy.org/en/latest/topics/items.html\n    \n    import scrapy\n    \n    \n    class XiushiItem(scrapy.Item):\n        # define the fields for your item here like:\n        # name = scrapy.Field()\n        title = scrapy.Field()\n        text = scrapy.Field()\n    \n    ```\n\n    #### setting 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Scrapy settings for xiushi project\n    #\n    # For simplicity, this file contains only settings considered important or\n    # commonly used. You can find more settings consulting the documentation:\n    #\n    #     https://doc.scrapy.org/en/latest/topics/settings.html\n    #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n    \n    BOT_NAME = 'xiushi'\n    \n    SPIDER_MODULES = ['xiushi.spiders']\n    NEWSPIDER_MODULE = 'xiushi.spiders'\n    \n    # Crawl responsibly by identifying yourself (and your website) on the user-agent\n    # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n    \n    # Obey robots.txt rules\n    ROBOTSTXT_OBEY = False\n    \n    # Configure maximum concurrent requests performed by Scrapy (default: 16)\n    # CONCURRENT_REQUESTS = 32\n    \n    # Configure a delay for requests for the same website (default: 0)\n    # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n    # See also autothrottle settings and docs\n    DOWNLOAD_DELAY = 1\n    # The download delay setting will honor only one of:\n    # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n    # CONCURRENT_REQUESTS_PER_IP = 16\n    \n    # Disable cookies (enabled by default)\n    # COOKIES_ENABLED = False\n    \n    # Disable Telnet Console (enabled by default)\n    # TELNETCONSOLE_ENABLED = False\n    \n    # Override the default request headers:\n    DEFAULT_REQUEST_HEADERS = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Language': 'en',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                      'Chrome/80.0.3987.163 Safari/537.36 '\n    }\n    \n    # Enable or disable spider middlewares\n    # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n    # SPIDER_MIDDLEWARES = {\n    #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n    # }\n    \n    # Enable or disable downloader middlewares\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n    # DOWNLOADER_MIDDLEWARES = {\n    #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n    # }\n    \n    # Enable or disable extensions\n    # See https://doc.scrapy.org/en/latest/topics/extensions.html\n    # EXTENSIONS = {\n    #    'scrapy.extensions.telnet.TelnetConsole': None,\n    # }\n    \n    # Configure item pipelines\n    # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n    ITEM_PIPELINES = {\n       'xiushi.pipelines.XiushiPipeline': 300,\n    }\n    \n    # Enable and configure the AutoThrottle extension (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n    # AUTOTHROTTLE_ENABLED = True\n    # The initial download delay\n    # AUTOTHROTTLE_START_DELAY = 5\n    # The maximum download delay to be set in case of high latencies\n    # AUTOTHROTTLE_MAX_DELAY = 60\n    # The average number of requests Scrapy should be sending in parallel to\n    # each remote server\n    # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n    # Enable showing throttling stats for every response received:\n    # AUTOTHROTTLE_DEBUG = False\n    \n    # Enable and configure HTTP caching (disabled by default)\n    # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n    # HTTPCACHE_ENABLED = True\n    # HTTPCACHE_EXPIRATION_SECS = 0\n    # HTTPCACHE_DIR = 'httpcache'\n    # HTTPCACHE_IGNORE_HTTP_CODES = []\n    # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n    \n    ```\n\n    #### spider 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    import scrapy\n    from xiushi.items import XiushiItem\n    \n    \n    class XiushispiderSpider(scrapy.Spider):\n        name = 'xiushiSpider'\n        allowed_domains = ['qiushidabaike.com']\n        start_urls = ['http://qiushidabaike.com/index_1.html']\n        base_domain = 'http://qiushidabaike.com'\n    \n        def parse(self, response):\n            duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n            for it in duanzi:\n                title = it.xpath('./dt/span/a/text()').get().strip()\n                text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n                text = \"\".join(text).strip()\n                item = XiushiItem(title=title, text=text)\n                yield item\n            # 进行翻页操作\n            next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n            if not next_url:\n                return\n            else:\n                yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n    \n    ```\n\n    #### pipelines 部分\n\n    ```python\n    # -*- coding: utf-8 -*-\n    \n    # Define your item pipelines here\n    #\n    # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n    # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n    \"\"\"\n    # 第一种方法，没进行json优化，但是看起来简单易操作\n    import json\n    \n    \n    class XiushiPipeline(object):\n        def __init__(self):\n            self.fp = open('duanzi.json', 'w', encoding='utf-8')\n    \n        def open_spider(self, spider):\n            print('爬虫开始了...')\n    \n        def process_item(self, item, spider):\n            item_json = json.dumps(dict(item),  ensure_ascii=False)\n            self.fp.write(item_json+'\\n')\n            return item\n    \n        def close_spider(self, spider):\n            self.fp.close()\n            print(\"爬虫结束了...\")\n    \"\"\"\n    # 方案二，json优化，结果是每个字典存储在列表中\n    #        好处是满足json规则，坏处是数据量较大时比较耗内存\n    # ''' 自我感觉这种方法不咋地 '''\n    # from scrapy.exporters import JsonItemExporter\n    #\n    #\n    # class XiushiPipeline(object):\n    #     def __init__(self):\n    #         # 注意此时以二进制形式写入\n    #         self.fp = open('duanzi.json', 'wb')\n    #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n    #         self.exporter.start_exporting()\n    #\n    #     def open_spider(self, spider):\n    #         print('爬虫开始了...')\n    #\n    #     def process_item(self, item, spider):\n    #         self.exporter.export_item(item)\n    #         return item\n    #\n    #     def close_spider(self, spider):\n    #         self.exporter.finish_exporting()\n    #         self.fp.close()\n    #         print(\"爬虫结束了...\")\n    \n    '''方案三'''\n    from scrapy.exporters import JsonLinesItemExporter\n    \n    \n    class XiushiPipeline(object):\n        def __init__(self):\n            # 注意此时以二进制形式写入\n            self.fp = open('duanzi.json', 'wb')\n            self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n    \n        def open_spider(self, spider):\n            print('爬虫开始了...')\n    \n        def process_item(self, item, spider):\n            self.exporter.export_item(item)\n            return item\n    \n        def close_spider(self, spider):\n            self.fp.close()\n            print(\"爬虫结束了...\")\n    \n    ```\n\n    * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n      * ```python\n        from scrapy import cmdline\n        \n        cmdline.execute(\"scrapy crawl xiushiSpider\".split())\n        # cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n        ```\n\n        \n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","slug":"spider","published":1,"updated":"2020-05-03T02:55:02.789Z","layout":"post","photos":[],"link":"","_id":"ck9s4ytrb000zwov8cctmh62s","content":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>\n<a id=\"more\"></a>\n\n<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#step 1:指定url</span><br>    url = <span class=\"hljs-string\">\"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"</span><br><br>    <span class=\"hljs-comment\">#step_2:发起请求</span><br>    <span class=\"hljs-comment\">#get会返回一个响应对象</span><br>    response = requests.get(url=url)<br><br>    <span class=\"hljs-comment\">#step_3:获取相应数据(.text返回的是字符串形式的响应数据)</span><br>    page_text = response.text<br>    print(page_text)<br><br>    <span class=\"hljs-comment\">#step_4:持久化存储</span><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./lagou.html'</span>, <span class=\"hljs-string\">'w'</span>, encoding = <span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        fp.write(page_text)<br>    print(<span class=\"hljs-string\">'爬取数据结束'</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\"># UA伪装：将对应的User-Agent封装到一个字典中</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br><br>    url = <span class=\"hljs-string\">'https://www.sogou.com/web?'</span><br><br>    <span class=\"hljs-comment\">#处理url携带的参数：封装到字典中（参数为问号后面的）</span><br>    kw = input(<span class=\"hljs-string\">'enter a word:'</span>)<br>    param = &#123;<br>        <span class=\"hljs-string\">'query'</span>: kw<br>    &#125;<br><br>    <span class=\"hljs-comment\"># 需求的响应返回的是一个对象，对象应实例化</span><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    <span class=\"hljs-comment\"># 确认相应数据是txt类型的</span><br>    page_text = response.text<br>    fileName = kw+<span class=\"hljs-string\">'.html'</span><br>    <span class=\"hljs-keyword\">with</span> open(fileName, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        fp.write(page_text)<br>    print(<span class=\"hljs-string\">'保存成功。。。'</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#获取url</span><br>    post_url = <span class=\"hljs-string\">'https://fanyi.baidu.com/sug'</span><br>    <span class=\"hljs-comment\">#进行UA伪装</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    <span class=\"hljs-comment\">#post请求的参数处理（同get请求一致）</span><br>    word = input(<span class=\"hljs-string\">'输入你想翻译的东西:'</span>)<br>    data = &#123;<br>        <span class=\"hljs-string\">'kw'</span>: word<br>    &#125;<br>    <span class=\"hljs-comment\">#发送请求并生成响应</span><br>    response = requests.post(url=post_url, data=data, headers=headers)<br>    <span class=\"hljs-comment\">#获取响应数据:</span><br>    <span class=\"hljs-comment\">#json()方法返回的是obj （如果确认响应数据是json类型的）</span><br>    dic_obj = response.json()<br><br>    <span class=\"hljs-comment\">#持久化存储</span><br>    filename = word+<span class=\"hljs-string\">'.json'</span><br>    <span class=\"hljs-keyword\">with</span> open(filename, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-comment\">#将jaon格式转化成dict格式</span><br>    <span class=\"hljs-keyword\">with</span> open(filename, <span class=\"hljs-string\">'r'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        great = json.load(fp)<br><br>    <span class=\"hljs-comment\">#将字典格式化输出(此字典中存在字典与列表的嵌套现象)</span><br>    <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> great.items():<br>        <span class=\"hljs-keyword\">if</span> type(v) == list:<br>            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> v:<br>                print(i)<br>        <span class=\"hljs-keyword\">else</span>:<br>            print(k)<br>            print(v)<br><br>    print(<span class=\"hljs-string\">'end...'</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax</span><br><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    url = <span class=\"hljs-string\">'https://movie.douban.com/j/chart/top_list'</span><br>    param = &#123;<br>        <span class=\"hljs-string\">'type'</span>: <span class=\"hljs-string\">' 24'</span>,<br>        <span class=\"hljs-string\">'interval_id'</span>: <span class=\"hljs-string\">' 100:90'</span>,<br>        <span class=\"hljs-string\">'action'</span>: <span class=\"hljs-string\">''</span>,<br>        <span class=\"hljs-string\">'start'</span>: <span class=\"hljs-string\">' 1'</span>,<br>        <span class=\"hljs-string\">'limit'</span>: <span class=\"hljs-string\">' 20'</span>,<br>    &#125;<br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>:<span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    list_data = response.json()<br><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./douban.json'</span>, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(list_data, fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./douban.json'</span>, <span class=\"hljs-string\">'r'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        great = json.load(fp)<br><br>    print(great)<br></code></pre></td></tr></table></figure>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    url = <span class=\"hljs-string\">'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'</span><br>    url_2 = <span class=\"hljs-string\">'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>:<span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    <span class=\"hljs-comment\">#爬取的页数</span><br>    page_ = input(<span class=\"hljs-string\">\"请输入您想爬取的信息页数：\"</span>)<br>    <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, int(page_)+<span class=\"hljs-number\">1</span>):<br>        data = &#123;<br>            <span class=\"hljs-string\">'on'</span>: <span class=\"hljs-string\">'true'</span>,<br>            <span class=\"hljs-string\">'page'</span>: page,<br>            <span class=\"hljs-string\">'pageSize'</span>: <span class=\"hljs-string\">'15'</span>,<br>            <span class=\"hljs-string\">'productName'</span>: <span class=\"hljs-string\">''</span>,<br>            <span class=\"hljs-string\">'conditionType'</span>: <span class=\"hljs-string\">'1'</span>,<br>            <span class=\"hljs-string\">'applyname'</span>: <span class=\"hljs-string\">''</span>,<br>            <span class=\"hljs-string\">'applysn'</span>: <span class=\"hljs-string\">''</span>,<br>        &#125;<br>        <span class=\"hljs-comment\">#id_list have many ids</span><br>        id_list = []<br>        message = []<br><br>        json_list = requests.post(url=url, data=data, headers=headers).json()<br>        <span class=\"hljs-comment\">#id_a is a dict</span><br>        <span class=\"hljs-keyword\">for</span> id_a <span class=\"hljs-keyword\">in</span> json_list[<span class=\"hljs-string\">\"list\"</span>]:<br>            id_list.append(id_a[<span class=\"hljs-string\">\"ID\"</span>])<br>            <span class=\"hljs-comment\">#id_b是id号</span><br>        <span class=\"hljs-keyword\">for</span> id_b <span class=\"hljs-keyword\">in</span> id_list:<br>                data_2 = &#123;<br>                    <span class=\"hljs-string\">\"id\"</span>: str(id_b)<br>                &#125;<br>                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()<br>                print(detail_message)<br>                message.append(detail_message)<br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./药物信息.json'</span>, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(message, fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br>    print(<span class=\"hljs-string\">'end...'</span>)<br><br><span class=\"hljs-string\">'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''</span><br><span class=\"hljs-string\">'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li><p>聚焦爬虫：爬取页面中指定的页面内容</p>\n<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储</code></pre><p>-数据解析分类：</p>\n<pre><code>-正则\n-bs4\n-xpath</code></pre><p>-数据解析原理概述</p>\n<pre><code>-解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n-1、进行指定标签的定位\n-2、标签或者标签对应属性中存储的数据值进行提取（解析）</code></pre></li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-comment\">#此处url为图片地址，而非链接【地址比链接短】</span><br>url = <span class=\"hljs-string\">'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7'</span><br>headers = &#123;<br>        <span class=\"hljs-string\">'user-agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>&#125;<br><span class=\"hljs-comment\">#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存</span><br>data_pict = requests.get(url=url, headers=headers).content<br><span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./beauty_pict.jpg'</span>, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>    fp.write(data_pict)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#创建一个文件夹，存放图片</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./star_sky'</span>):<br>        os.mkdir(<span class=\"hljs-string\">'./star_sky'</span>)<br>        <br>    url = <span class=\"hljs-string\">'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714'</span><br>    headers = &#123;<br>            <span class=\"hljs-string\">'user-agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    data_pict = requests.get(url=url, headers=headers).text<br><br>    <span class=\"hljs-comment\">#正则匹配</span><br>    ex = <span class=\"hljs-string\">'&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;'</span><br>    star_list = re.findall(ex, data_pict, re.S)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> star_list:<br>        url_2 = i<br>        <span class=\"hljs-comment\">#请求到了图片的二进制数据</span><br>        data_2_pict = requests.get(url=url_2, headers=headers).content<br>        <span class=\"hljs-comment\">#为图片设置名称</span><br>        img_name = url_2.split(<span class=\"hljs-string\">\"/\"</span>)[<span class=\"hljs-number\">-1</span>]<br>        img_path = <span class=\"hljs-string\">'./star_sky/'</span> + img_name<br>        <span class=\"hljs-keyword\">with</span> open(img_path, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>            fp.write(data_2_pict)<br>        print(img_name + <span class=\"hljs-string\">'...successful'</span>)<br>        time.sleep(<span class=\"hljs-number\">0.1</span>)<br><br>****************************************未完，，待更新********************************************<br></code></pre></td></tr></table></figure>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&apos;page_text&apos;)###page_text就是获取的响应数据\n    - xpath(&apos;xpath表达式&apos;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName</code></pre></li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#爬取妹子图片，总共有俩千多张</span><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> os<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    ii = <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./girl'</span>):<br>        os.mkdir(<span class=\"hljs-string\">'./girl'</span>)<br>    url_list = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50</span>)]<br>    url_list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">''</span><br><br>    <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> url_list:<br>        url = <span class=\"hljs-string\">'https://www.lanvshen.com/zhongguo/'</span> + str(page) +<span class=\"hljs-string\">'.html'</span><br>        headers = &#123;<br>            <span class=\"hljs-string\">'User-Agent'</span> : <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>        &#125;<br>        get_text = requests.get(url=url, headers=headers)<br>        tree = etree.HTML(get_text.text)<br>        pict_ = tree.xpath(<span class=\"hljs-string\">'//div[@class=\"hezi\"]//li'</span>)<br>        <span class=\"hljs-keyword\">for</span> it_ <span class=\"hljs-keyword\">in</span> pict_:<br>            img_url = it_.xpath(<span class=\"hljs-string\">'./a/img/@src'</span>)[<span class=\"hljs-number\">0</span>]<br>            img_name = str(ii) + <span class=\"hljs-string\">'.jpg'</span><br>            img = requests.get(url=img_url, headers=headers).content<br>            img_path = <span class=\"hljs-string\">'./girl/'</span> + img_name<br>            <span class=\"hljs-keyword\">with</span> open(img_path, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>                fp.write(img)<br>            print(img_name + <span class=\"hljs-string\">'sccuessful...'</span>)<br>            ii = ii + <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢</span><br><span class=\"hljs-comment\">##后期将学习爬取高清图片，并进行分布式爬取</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org\" target=\"_blank\" rel=\"noopener\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">'http://httpbin.org'</span><br>headers = &#123;<br>\t<span class=\"hljs-string\">'User-Anget'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>&#125;<br><br><span class=\"hljs-comment\">#设置代理</span><br>proxy = &#123;<br>\t<span class=\"hljs-string\">'http'</span>: <span class=\"hljs-string\">'123.54.194.96:38661'</span><br>&#125;<br>get_text = requerts.get(url=url, headers=headers, proxies=proxy).text<br>print(get_text)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\" target=\"_blank\" rel=\"noopener\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\" target=\"_blank\" rel=\"noopener\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:/Users/Acer/Desktop/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB_day4_files/1.jpg\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">resp = resquests.get(url=url, vrrify=<span class=\"hljs-literal\">False</span>).content<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\">关于多线程生产者消费者模型</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> random<br><br>gMoney = <span class=\"hljs-number\">1000</span><br>gLock = threading.Lock()<br>gTotalTimes = <span class=\"hljs-number\">10</span><br>gTimes = <span class=\"hljs-number\">0</span><br><br><br><span class=\"hljs-comment\"># 生产线程Producer</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">global</span> gTimes<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgLock.acquire()<br>\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\tgLock.release()<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\tgMoney += money<br>\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱'</span><br>\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\tgTimes += <span class=\"hljs-number\">1</span><br>\t\t\tgLock.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-comment\"># 消费线程Consumer</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgLock.acquire()<br>\t\t\t<span class=\"hljs-keyword\">if</span> gMoney &gt;= money:<br>\t\t\t\tgMoney -= money<br>\t\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱'</span><br>\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\t<span class=\"hljs-comment\"># 若剩余金额不足以消费，则退出循环</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\t\tgLock.release()<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！'</span><br>\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\tgLock.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mainIt</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-comment\"># 设置3个消费线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\tt = Consumer(name=<span class=\"hljs-string\">'消费者线程&#123;&#125;'</span>.format(x))<br>\t\tt.start()<br>\t\t<span class=\"hljs-comment\"># 设置5个生产线程</span><br><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Producer(name=<span class=\"hljs-string\">'生产者线程&#123;&#125;'</span>.format(x))<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmainIt()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> time<br><br>gMoney = <span class=\"hljs-number\">1000</span><br>gCondition = threading.Condition()  <span class=\"hljs-comment\"># 等同于threading.Lock</span><br>gTimes = <span class=\"hljs-number\">0</span><br>gTotalTimes = <span class=\"hljs-number\">5</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">global</span> gCondition<br>\t\t<span class=\"hljs-keyword\">global</span> gTimes<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgCondition.acquire()  <span class=\"hljs-comment\"># 加锁（全局变量改变前（gMoney））</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\tgCondition.release()  <span class=\"hljs-comment\"># 解锁</span><br>\t\t\t\tprint(<span class=\"hljs-string\">\"当前生产者总共生产了%s次\"</span> % gTimes)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\tgMoney += money<br>\t\t\tprint(<span class=\"hljs-string\">\"%s当前存入%s元钱，剩余%s元线\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\tgTimes += <span class=\"hljs-number\">1</span><br>\t\t\tgCondition.notify_all()  <span class=\"hljs-comment\"># 通知正在等待的线程（wait）</span><br>\t\t\tgCondition.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cosumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgCondition.acquire()<br>\t\t\t<span class=\"hljs-keyword\">while</span> gMoney &lt; money:<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\t\tgCondition.release()<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t\tprint(<span class=\"hljs-string\">\"%s准备消费%d元钱，剩余%d元钱，不足\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\t\tgCondition.wait()  <span class=\"hljs-comment\"># 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）</span><br>\t\t\tgMoney -= money<br>\t\t\tprint(<span class=\"hljs-string\">\"%s消费了%d元钱，剩余%d元钱\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\tgCondition.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\tt = Cosumer(name=<span class=\"hljs-string\">\"消费者线程%s\"</span> % x)<br>\t\tt.start()<br>\t<span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt1 = Producer(name=<span class=\"hljs-string\">\"生产者线程%s\"</span> % y)<br>\t\tt1.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> threading<br><br><br><span class=\"hljs-comment\"># 在队列中放入数值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_value</span><span class=\"hljs-params\">(q)</span>:</span><br>\tindex = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\tq.put(index)<br>\t\tindex += <span class=\"hljs-number\">1</span><br>\t\ttime.sleep(<span class=\"hljs-number\">0.8</span>)<br><br><br><span class=\"hljs-comment\"># 取出队列中的数值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_value</span><span class=\"hljs-params\">(q)</span>:</span><br>\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\tprint(q.get())<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-comment\"># 产生一个队列</span><br>\tq = Queue(<span class=\"hljs-number\">1</span>)<br>\tt1 = threading.Thread(target=set_value, args=[q])<br>\tt2 = threading.Thread(target=get_value, args=[q])<br><br>\tt1.start()<br>\tt2.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading,time<br><span class=\"hljs-comment\">#python2  from Queue import Queue</span><br><span class=\"hljs-comment\">#python3</span><br><span class=\"hljs-keyword\">import</span> queue<br> <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> queue<br>\t\tcount = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-comment\">#qsize返回queue内部长度</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> queue.qsize() &lt; <span class=\"hljs-number\">1000</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">100</span>):<br>\t\t\t\t\tcount += <span class=\"hljs-number\">1</span><br>\t\t\t\t\tmsg = <span class=\"hljs-string\">'生成产量'</span>+str(count)<br>\t\t\t\t\t<span class=\"hljs-comment\">#put是往queue中放入</span><br>\t\t\t\t\tqueue.put(msg)<br>\t\t\t\t\tprint(msg)<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> queue<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> queue.qsize() &gt; <span class=\"hljs-number\">100</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\t\t\t\t<span class=\"hljs-comment\">#get从queue中取出一个值</span><br>\t\t\t\t\tmsg = self.name + <span class=\"hljs-string\">\"消费了\"</span>+queue.get()<br>\t\t\t\t\tprint(msg)<br>\t\t\ttime.sleep(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tqueue = queue.Queue()<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">500</span>):<br>\t\tqueue.put(<span class=\"hljs-string\">\"初始产品\"</span>+str(i))<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">2</span>):<br>\t\tp = Producer()<br>\t\tp.start()<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tc = Consumer()<br>\t\tc.start()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue<br><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-string\">\"\"\" </span><br><span class=\"hljs-string\">我们引入了threading这个包，我们将使用这个包中的</span><br><span class=\"hljs-string\">Thread类，并在我们自定义的类中继承这个Thread类</span><br><span class=\"hljs-string\">\"\"\"</span><br><br><br><span class=\"hljs-comment\"># 生产者线程</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Procuder</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\theaders = &#123;<br>\t\t\t<span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'... 浏览器...'</span><br>\t&#125;<br><br>\t<span class=\"hljs-string\">\"\"\" 重写继承于父类的__init__方法 \"\"\"</span><br>\t<span class=\"hljs-string\">\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, *args, **kwargs)</span>:</span><br>\t\tsuper(Procuder, self).__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br><br>\t<span class=\"hljs-string\">\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"</span><br>\t<span class=\"hljs-string\">\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中</span><br><span class=\"hljs-string\">\t\t获取每页的url</span><br><span class=\"hljs-string\">\t\"\"\"</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\turl = self.page_queue.get()<br>\t\t\tself.parse_page(url)<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse_page</span><span class=\"hljs-params\">(self, url)</span>:</span><br>\t\t<span class=\"hljs-string\">\"\"\" </span><br><span class=\"hljs-string\">\t\t.......</span><br><span class=\"hljs-string\">\t\t</span><br><span class=\"hljs-string\">\t\t获取每页的响应数据，并从中提取出每张图片的</span><br><span class=\"hljs-string\">\t\turl和name，并放入队列中</span><br><span class=\"hljs-string\">\t\t\"\"\"</span><br><br><br><span class=\"hljs-comment\"># 消费者线程</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, *args, **kwargs)</span>:</span><br>\t\tsuper(Procuder, self).__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.img_queue.empty() <span class=\"hljs-keyword\">and</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t<span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\">\t\t\t\t......</span><br><span class=\"hljs-string\">\t\t\t\t</span><br><span class=\"hljs-string\">\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存</span><br><span class=\"hljs-string\">\t\t\t\t\"\"\"</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-string\">\"\"\" 设置页数和图片的url队列\"\"\"</span><br>\tpage_queue = Queue()<br>\timg_queue = Queue()<br><br>\t<span class=\"hljs-comment\"># 将每页的url放到页数队列中</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>):<br>\t\turl = <span class=\"hljs-string\">'http://........ %d'</span> % x<br>\t\tpage_queue.put(url)<br><br>\t<span class=\"hljs-comment\"># 设置5个生产者线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Procuder(page_queue, img_queue)<br>\t\tt.start()<br><br>\t<span class=\"hljs-comment\"># 设置5个消费者线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Consumer(page_queue, img_queue)<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> queue<br><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> request<br><br><span class=\"hljs-comment\"># 生产图片的url和name</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProimgUrl</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, headers, *args, **kwargs)</span>:</span><br>\t\tsuper().__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br>\t\tself.headers = headers<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\turl = self.page_queue.get()<br>\t\t\t\tself.parse_page(url)<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse_page</span><span class=\"hljs-params\">(self, url)</span>:</span><br>\t\timg_get = requests.get(url=url, headers=self.headers).text<br>\t\ttree = etree.HTML(img_get)<br>\t\timg_it = tree.xpath(<span class=\"hljs-string\">'//div[@class=\"page-content text-center\"]//a'</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> img_it:<br>\t\t\timg_url = it.xpath(<span class=\"hljs-string\">'./img[@class!=\"gif\"]/@data-original'</span>)[<span class=\"hljs-number\">0</span>]<br>\t\t\talt = it.xpath(<span class=\"hljs-string\">'./img/@alt'</span>)[<span class=\"hljs-number\">0</span>]<br>\t\t\talt = re.sub(<span class=\"hljs-string\">r'[\\?？.!！，。\\/\\*]'</span>, <span class=\"hljs-string\">''</span>, alt)<br>\t\t\t<span class=\"hljs-comment\"># 利用splitext截取图片的后缀名</span><br>\t\t\tsuffix = os.path.splitext(img_url)[<span class=\"hljs-number\">1</span>]<br>\t\t\timg_name = alt + suffix<br>\t\t\tself.img_queue.put((img_url, img_name))<br><br><br><span class=\"hljs-comment\"># 获取图片并储存</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConimgName</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, headers, *args, **kwargs)</span>:</span><br>\t\tsuper().__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br>\t\tself.headers = headers<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.img_queue.empty() <span class=\"hljs-keyword\">and</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\timg_url, img_name = self.img_queue.get()<br>\t\t\t\t<span class=\"hljs-comment\"># 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片</span><br>\t\t\t\trequest.urlretrieve(img_url, <span class=\"hljs-string\">'./smile/'</span>+img_name)<br>\t\t\t\tprint(img_name + <span class=\"hljs-string\">' 下载成功...'</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./smile'</span>):<br>\t\tos.mkdir(<span class=\"hljs-string\">'./smile'</span>)<br>\theaders = &#123;<br>\t\t<span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>\t\t\t\t\t  <span class=\"hljs-string\">'Chrome/80.0.3987.149 Safari/537.36 '</span><br>\t&#125;<br>\tpage_queue = queue.Queue(<span class=\"hljs-number\">100</span>)<br>\timg_queue = queue.Queue(<span class=\"hljs-number\">1000</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>):<br>\t\turl = <span class=\"hljs-string\">'https://www.doutula.com/photo/list/?page='</span> + str(x)<br>\t\tpage_queue.put(url)<br><br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = ProimgUrl(page_queue, img_queue, headers)<br>\t\tt.start()<br><br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = ConimgName(page_queue, img_queue, headers)<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\" target=\"_blank\" rel=\"noopener\">关于xpath选择器selector的网址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200328091921480.png\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n<ul>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>### setting文件详解\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br> <br><span class=\"hljs-comment\"># Scrapy settings for TestSpider project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br> <br>BOT_NAME = <span class=\"hljs-string\">'TestSpider'</span><br> <br>SPIDER_MODULES = [<span class=\"hljs-string\">'TestSpider.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'TestSpider.spiders'</span><br> <br> <br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\">#USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'</span><br> <br>USER_AGENT = <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'</span><br> <br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br><span class=\"hljs-comment\"># Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。</span><br><span class=\"hljs-comment\"># 默认是True，设置为False不遵守这个协议。</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br> <br> <br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># 配置scrapy的请求连接数，默认会同时并发16个请求。</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 10</span><br> <br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br> <br><span class=\"hljs-comment\"># 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0</span><br><span class=\"hljs-comment\"># DOWNLOAD_DELAY = 3</span><br> <br> <br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br> <br> <br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br> <br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\">#TELNETCONSOLE_ENABLED = False</span><br> <br> <br><span class=\"hljs-comment\"># Override the default request headers:</span><br> <br><span class=\"hljs-comment\"># 配置默认的请求头Headers.</span><br><span class=\"hljs-comment\"># DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"hljs-comment\">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><br><span class=\"hljs-comment\">#   'Accept-Language': 'en',</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br> <br><span class=\"hljs-comment\"># 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。</span><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br> <br><span class=\"hljs-comment\"># 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。</span><br><span class=\"hljs-comment\"># ITEM_PIPELINES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.pipelines.TestspiderPipeline': 300,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># 限速配置</span><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br> <br><span class=\"hljs-comment\"># 是否开启自动限速</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br> <br> <br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># 配置初始url的下载延时</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br> <br> <br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># 配置最大请求时间</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br> <br> <br><span class=\"hljs-comment\"># 配置请求和请求之间的下载间隔，单位是秒</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br> <br> <br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br> <br> <br><span class=\"hljs-comment\"># 关于Http缓存的配置，默认是不启用。</span><br><span class=\"hljs-comment\"># 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。</span><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\">#HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\">#HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\">#HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\">#HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\">#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n\n\n### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n- 创建爬虫项目：scrapy startproject xiushi\n- 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n#### item 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define here the models for your scraped items</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># See documentation in:</span><br><span class=\"hljs-comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span><br><br><span class=\"hljs-keyword\">import</span> scrapy<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushiItem</span><span class=\"hljs-params\">(scrapy.Item)</span>:</span><br>    <span class=\"hljs-comment\"># define the fields for your item here like:</span><br>    <span class=\"hljs-comment\"># name = scrapy.Field()</span><br>    title = scrapy.Field()<br>    text = scrapy.Field()<br></code></pre></td></tr></table></figure>\n\n#### setting 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Scrapy settings for xiushi project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><br>BOT_NAME = <span class=\"hljs-string\">'xiushi'</span><br><br>SPIDER_MODULES = [<span class=\"hljs-string\">'xiushi.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'xiushi.spiders'</span><br><br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\"># USER_AGENT = 'xiushi (+http://www.yourdomain.com)'</span><br><br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 32</span><br><br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br>DOWNLOAD_DELAY = <span class=\"hljs-number\">1</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br><br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\"># TELNETCONSOLE_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Override the default request headers:</span><br>DEFAULT_REQUEST_HEADERS = &#123;<br>    <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,<br>    <span class=\"hljs-string\">'Accept-Language'</span>: <span class=\"hljs-string\">'en'</span>,<br>    <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>                  <span class=\"hljs-string\">'Chrome/80.0.3987.163 Safari/537.36 '</span><br>&#125;<br><br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'xiushi.middlewares.XiushiSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br>ITEM_PIPELINES = &#123;<br>   <span class=\"hljs-string\">'xiushi.pipelines.XiushiPipeline'</span>: <span class=\"hljs-number\">300</span>,<br>&#125;<br><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\"># HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\"># HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n#### spider 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-keyword\">import</span> scrapy<br><span class=\"hljs-keyword\">from</span> xiushi.items <span class=\"hljs-keyword\">import</span> XiushiItem<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushispiderSpider</span><span class=\"hljs-params\">(scrapy.Spider)</span>:</span><br>    name = <span class=\"hljs-string\">'xiushiSpider'</span><br>    allowed_domains = [<span class=\"hljs-string\">'qiushidabaike.com'</span>]<br>    start_urls = [<span class=\"hljs-string\">'http://qiushidabaike.com/index_1.html'</span>]<br>    base_domain = <span class=\"hljs-string\">'http://qiushidabaike.com'</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse</span><span class=\"hljs-params\">(self, response)</span>:</span><br>        duanzi = response.xpath(<span class=\"hljs-string\">'//div[@class=\"main-left fl\"]//dl'</span>)<br>        <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> duanzi:<br>            title = it.xpath(<span class=\"hljs-string\">'./dt/span/a/text()'</span>).get().strip()<br>            text = it.xpath(<span class=\"hljs-string\">'./dd[@class=\"content\"]//text()'</span>).getall()<br>            text = <span class=\"hljs-string\">\"\"</span>.join(text).strip()<br>            item = XiushiItem(title=title, text=text)<br>            <span class=\"hljs-keyword\">yield</span> item<br>        <span class=\"hljs-comment\"># 进行翻页操作</span><br>        next_url = response.xpath(<span class=\"hljs-string\">'//div[@class=\"page\"]//a[@class=\"next\"]/@href'</span>).get()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> next_url:<br>            <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">yield</span> scrapy.Request(self.base_domain+next_url, callback=self.parse)<br></code></pre></td></tr></table></figure>\n\n#### pipelines 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define your item pipelines here</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class=\"hljs-comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\"># 第一种方法，没进行json优化，但是看起来简单易操作</span><br><span class=\"hljs-string\">import json</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">class XiushiPipeline(object):</span><br><span class=\"hljs-string\">    def __init__(self):</span><br><span class=\"hljs-string\">        self.fp = open('duanzi.json', 'w', encoding='utf-8')</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def open_spider(self, spider):</span><br><span class=\"hljs-string\">        print('爬虫开始了...')</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def process_item(self, item, spider):</span><br><span class=\"hljs-string\">        item_json = json.dumps(dict(item),  ensure_ascii=False)</span><br><span class=\"hljs-string\">        self.fp.write(item_json+'\\n')</span><br><span class=\"hljs-string\">        return item</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def close_spider(self, spider):</span><br><span class=\"hljs-string\">        self.fp.close()</span><br><span class=\"hljs-string\">        print(\"爬虫结束了...\")</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-comment\"># 方案二，json优化，结果是每个字典存储在列表中</span><br><span class=\"hljs-comment\">#        好处是满足json规则，坏处是数据量较大时比较耗内存</span><br><span class=\"hljs-comment\"># ''' 自我感觉这种方法不咋地 '''</span><br><span class=\"hljs-comment\"># from scrapy.exporters import JsonItemExporter</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># class XiushiPipeline(object):</span><br><span class=\"hljs-comment\">#     def __init__(self):</span><br><span class=\"hljs-comment\">#         # 注意此时以二进制形式写入</span><br><span class=\"hljs-comment\">#         self.fp = open('duanzi.json', 'wb')</span><br><span class=\"hljs-comment\">#         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')</span><br><span class=\"hljs-comment\">#         self.exporter.start_exporting()</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def open_spider(self, spider):</span><br><span class=\"hljs-comment\">#         print('爬虫开始了...')</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def process_item(self, item, spider):</span><br><span class=\"hljs-comment\">#         self.exporter.export_item(item)</span><br><span class=\"hljs-comment\">#         return item</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def close_spider(self, spider):</span><br><span class=\"hljs-comment\">#         self.exporter.finish_exporting()</span><br><span class=\"hljs-comment\">#         self.fp.close()</span><br><span class=\"hljs-comment\">#         print(\"爬虫结束了...\")</span><br><br><span class=\"hljs-string\">'''方案三'''</span><br><span class=\"hljs-keyword\">from</span> scrapy.exporters <span class=\"hljs-keyword\">import</span> JsonLinesItemExporter<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushiPipeline</span><span class=\"hljs-params\">(object)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        <span class=\"hljs-comment\"># 注意此时以二进制形式写入</span><br>        self.fp = open(<span class=\"hljs-string\">'duanzi.json'</span>, <span class=\"hljs-string\">'wb'</span>)<br>        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"hljs-literal\">False</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">open_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        print(<span class=\"hljs-string\">'爬虫开始了...'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_item</span><span class=\"hljs-params\">(self, item, spider)</span>:</span><br>        self.exporter.export_item(item)<br>        <span class=\"hljs-keyword\">return</span> item<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">close_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        self.fp.close()<br>        print(<span class=\"hljs-string\">\"爬虫结束了...\"</span>)<br></code></pre></td></tr></table></figure>\n\n* 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n  * ```python\n    from scrapy import cmdline\n\n    cmdline.execute(&quot;scrapy crawl xiushiSpider&quot;.split())\n    # cmdline.execute([&quot;scrapy&quot;, &apos;crawl&apos;, &apos;xiushiSpider&apos;])\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br>        <br><br># 爬虫第六天<br><br>### scrapy 框架之spider类（示例二.爬取优美散文）<br><br>- item部分<br><br>&#96;&#96;&#96;python<br># -*- coding: utf-8 -*-<br><br># Define here the models for your scraped items<br>#<br># See documentation in:<br># https:&#x2F;&#x2F;doc.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;items.html<br><br>import scrapy<br><br><br>class ProseItem(scrapy.Item):<br>    # define the fields for your item here like:<br>    # name &#x3D; scrapy.Field()<br>    title &#x3D; scrapy.Field()<br>    text &#x3D; scrapy.Field()<br></code></pre></td></tr></table></figure></code></pre><ul>\n<li>settings部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Scrapy settings for prose project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><br>BOT_NAME = <span class=\"hljs-string\">'prose'</span><br><br>SPIDER_MODULES = [<span class=\"hljs-string\">'prose.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'prose.spiders'</span><br><br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\"># USER_AGENT = 'prose (+http://www.yourdomain.com)'</span><br><br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 32</span><br><br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br>DOWNLOAD_DELAY = <span class=\"hljs-number\">1</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br><br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\"># TELNETCONSOLE_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Override the default request headers:</span><br>DEFAULT_REQUEST_HEADERS = &#123;<br>    <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,<br>    <span class=\"hljs-string\">'Accept-Language'</span>: <span class=\"hljs-string\">'en'</span>,<br>    <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>                  <span class=\"hljs-string\">'Chrome/80.0.3987.163 Safari/537.36 '</span><br>&#125;<br><br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'prose.middlewares.ProseSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'prose.middlewares.ProseDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br>ITEM_PIPELINES = &#123;<br>   <span class=\"hljs-string\">'prose.pipelines.ProsePipeline'</span>: <span class=\"hljs-number\">300</span>,<br>&#125;<br><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\"># HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\"># HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-keyword\">import</span> scrapy<br><span class=\"hljs-keyword\">from</span> prose.items <span class=\"hljs-keyword\">import</span> ProseItem<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProsespiderSpider</span><span class=\"hljs-params\">(scrapy.Spider)</span>:</span><br>    name = <span class=\"hljs-string\">'proseSpider'</span><br>    allowed_domains = [<span class=\"hljs-string\">'duwenzhang.com'</span>]<br>    start_urls = [<span class=\"hljs-string\">'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'</span>]<br>    base_url = <span class=\"hljs-string\">'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse</span><span class=\"hljs-params\">(self, response)</span>:</span><br>        <span class=\"hljs-comment\"># xpath 选择不含有某一属性的标签</span><br>        url_list = response.xpath(<span class=\"hljs-string\">'//center//tr[2]//td[(@valign) and not(@height)]/table'</span>)<br>        <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> url_list:<br>            title = it.xpath(<span class=\"hljs-string\">'.//tr[2]//td[@height=\"26\"]/b/a/text()'</span>).getall()<br>            text = it.xpath(<span class=\"hljs-string\">'.//tr[4]/td[@style=\"padding-left:3px\"]/text()'</span>).getall()<br>            text = <span class=\"hljs-string\">\"\"</span>.join(text).strip()<br>            item = ProseItem(title=title, text=text)<br>            <span class=\"hljs-keyword\">yield</span> item<br>        <span class=\"hljs-comment\"># //a[contains(text(), \"百度搜索\")]  【可以部分检索】</span><br>        <span class=\"hljs-comment\"># //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签</span><br>        next_url = response.xpath(<span class=\"hljs-string\">'//tr//a[text()=\"下一页\"]/@href'</span>).get()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> next_url:<br>            <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">yield</span> scrapy.Request(self.base_url+next_url, callback=self.parse)<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>piplines 部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define your item pipelines here</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class=\"hljs-comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">from</span> scrapy.exporters <span class=\"hljs-keyword\">import</span> JsonLinesItemExporter<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProsePipeline</span><span class=\"hljs-params\">(object)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        self.fp = open(<span class=\"hljs-string\">'prose.json'</span>, <span class=\"hljs-string\">'wb'</span>)<br>        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"hljs-literal\">False</span>,<br>                                              encoding=<span class=\"hljs-string\">'utf-8'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">open_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        print(<span class=\"hljs-string\">'爬虫开始了...'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_item</span><span class=\"hljs-params\">(self, item, spider)</span>:</span><br>        self.exporter.export_item(item)<br>        <span class=\"hljs-keyword\">return</span> item<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">close_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        self.fp.close()<br>        print(<span class=\"hljs-string\">'爬虫结束了....'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>","more":"<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#step 1:指定url</span><br>    url = <span class=\"hljs-string\">\"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"</span><br><br>    <span class=\"hljs-comment\">#step_2:发起请求</span><br>    <span class=\"hljs-comment\">#get会返回一个响应对象</span><br>    response = requests.get(url=url)<br><br>    <span class=\"hljs-comment\">#step_3:获取相应数据(.text返回的是字符串形式的响应数据)</span><br>    page_text = response.text<br>    print(page_text)<br><br>    <span class=\"hljs-comment\">#step_4:持久化存储</span><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./lagou.html'</span>, <span class=\"hljs-string\">'w'</span>, encoding = <span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        fp.write(page_text)<br>    print(<span class=\"hljs-string\">'爬取数据结束'</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\"># UA伪装：将对应的User-Agent封装到一个字典中</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br><br>    url = <span class=\"hljs-string\">'https://www.sogou.com/web?'</span><br><br>    <span class=\"hljs-comment\">#处理url携带的参数：封装到字典中（参数为问号后面的）</span><br>    kw = input(<span class=\"hljs-string\">'enter a word:'</span>)<br>    param = &#123;<br>        <span class=\"hljs-string\">'query'</span>: kw<br>    &#125;<br><br>    <span class=\"hljs-comment\"># 需求的响应返回的是一个对象，对象应实例化</span><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    <span class=\"hljs-comment\"># 确认相应数据是txt类型的</span><br>    page_text = response.text<br>    fileName = kw+<span class=\"hljs-string\">'.html'</span><br>    <span class=\"hljs-keyword\">with</span> open(fileName, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        fp.write(page_text)<br>    print(<span class=\"hljs-string\">'保存成功。。。'</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#获取url</span><br>    post_url = <span class=\"hljs-string\">'https://fanyi.baidu.com/sug'</span><br>    <span class=\"hljs-comment\">#进行UA伪装</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    <span class=\"hljs-comment\">#post请求的参数处理（同get请求一致）</span><br>    word = input(<span class=\"hljs-string\">'输入你想翻译的东西:'</span>)<br>    data = &#123;<br>        <span class=\"hljs-string\">'kw'</span>: word<br>    &#125;<br>    <span class=\"hljs-comment\">#发送请求并生成响应</span><br>    response = requests.post(url=post_url, data=data, headers=headers)<br>    <span class=\"hljs-comment\">#获取响应数据:</span><br>    <span class=\"hljs-comment\">#json()方法返回的是obj （如果确认响应数据是json类型的）</span><br>    dic_obj = response.json()<br><br>    <span class=\"hljs-comment\">#持久化存储</span><br>    filename = word+<span class=\"hljs-string\">'.json'</span><br>    <span class=\"hljs-keyword\">with</span> open(filename, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-comment\">#将jaon格式转化成dict格式</span><br>    <span class=\"hljs-keyword\">with</span> open(filename, <span class=\"hljs-string\">'r'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        great = json.load(fp)<br><br>    <span class=\"hljs-comment\">#将字典格式化输出(此字典中存在字典与列表的嵌套现象)</span><br>    <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> great.items():<br>        <span class=\"hljs-keyword\">if</span> type(v) == list:<br>            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> v:<br>                print(i)<br>        <span class=\"hljs-keyword\">else</span>:<br>            print(k)<br>            print(v)<br><br>    print(<span class=\"hljs-string\">'end...'</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax</span><br><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    url = <span class=\"hljs-string\">'https://movie.douban.com/j/chart/top_list'</span><br>    param = &#123;<br>        <span class=\"hljs-string\">'type'</span>: <span class=\"hljs-string\">' 24'</span>,<br>        <span class=\"hljs-string\">'interval_id'</span>: <span class=\"hljs-string\">' 100:90'</span>,<br>        <span class=\"hljs-string\">'action'</span>: <span class=\"hljs-string\">''</span>,<br>        <span class=\"hljs-string\">'start'</span>: <span class=\"hljs-string\">' 1'</span>,<br>        <span class=\"hljs-string\">'limit'</span>: <span class=\"hljs-string\">' 20'</span>,<br>    &#125;<br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>:<span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br><br>    response = requests.get(url=url, params=param, headers=headers)<br><br>    list_data = response.json()<br><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./douban.json'</span>, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(list_data, fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br><br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./douban.json'</span>, <span class=\"hljs-string\">'r'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        great = json.load(fp)<br><br>    print(great)<br></code></pre></td></tr></table></figure>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> json<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    url = <span class=\"hljs-string\">'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'</span><br>    url_2 = <span class=\"hljs-string\">'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'</span><br>    headers = &#123;<br>        <span class=\"hljs-string\">'User-Agent'</span>:<span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    <span class=\"hljs-comment\">#爬取的页数</span><br>    page_ = input(<span class=\"hljs-string\">\"请输入您想爬取的信息页数：\"</span>)<br>    <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, int(page_)+<span class=\"hljs-number\">1</span>):<br>        data = &#123;<br>            <span class=\"hljs-string\">'on'</span>: <span class=\"hljs-string\">'true'</span>,<br>            <span class=\"hljs-string\">'page'</span>: page,<br>            <span class=\"hljs-string\">'pageSize'</span>: <span class=\"hljs-string\">'15'</span>,<br>            <span class=\"hljs-string\">'productName'</span>: <span class=\"hljs-string\">''</span>,<br>            <span class=\"hljs-string\">'conditionType'</span>: <span class=\"hljs-string\">'1'</span>,<br>            <span class=\"hljs-string\">'applyname'</span>: <span class=\"hljs-string\">''</span>,<br>            <span class=\"hljs-string\">'applysn'</span>: <span class=\"hljs-string\">''</span>,<br>        &#125;<br>        <span class=\"hljs-comment\">#id_list have many ids</span><br>        id_list = []<br>        message = []<br><br>        json_list = requests.post(url=url, data=data, headers=headers).json()<br>        <span class=\"hljs-comment\">#id_a is a dict</span><br>        <span class=\"hljs-keyword\">for</span> id_a <span class=\"hljs-keyword\">in</span> json_list[<span class=\"hljs-string\">\"list\"</span>]:<br>            id_list.append(id_a[<span class=\"hljs-string\">\"ID\"</span>])<br>            <span class=\"hljs-comment\">#id_b是id号</span><br>        <span class=\"hljs-keyword\">for</span> id_b <span class=\"hljs-keyword\">in</span> id_list:<br>                data_2 = &#123;<br>                    <span class=\"hljs-string\">\"id\"</span>: str(id_b)<br>                &#125;<br>                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()<br>                print(detail_message)<br>                message.append(detail_message)<br>    <span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./药物信息.json'</span>, <span class=\"hljs-string\">'w'</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>        json.dump(message, fp, ensure_ascii=<span class=\"hljs-literal\">False</span>)<br>    print(<span class=\"hljs-string\">'end...'</span>)<br><br><span class=\"hljs-string\">'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''</span><br><span class=\"hljs-string\">'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li><p>聚焦爬虫：爬取页面中指定的页面内容</p>\n<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储</code></pre><p>-数据解析分类：</p>\n<pre><code>-正则\n-bs4\n-xpath</code></pre><p>-数据解析原理概述</p>\n<pre><code>-解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n-1、进行指定标签的定位\n-2、标签或者标签对应属性中存储的数据值进行提取（解析）</code></pre></li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-comment\">#此处url为图片地址，而非链接【地址比链接短】</span><br>url = <span class=\"hljs-string\">'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7'</span><br>headers = &#123;<br>        <span class=\"hljs-string\">'user-agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>&#125;<br><span class=\"hljs-comment\">#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存</span><br>data_pict = requests.get(url=url, headers=headers).content<br><span class=\"hljs-keyword\">with</span> open(<span class=\"hljs-string\">'./beauty_pict.jpg'</span>, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>    fp.write(data_pict)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-comment\">#创建一个文件夹，存放图片</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./star_sky'</span>):<br>        os.mkdir(<span class=\"hljs-string\">'./star_sky'</span>)<br>        <br>    url = <span class=\"hljs-string\">'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714'</span><br>    headers = &#123;<br>            <span class=\"hljs-string\">'user-agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>    &#125;<br>    data_pict = requests.get(url=url, headers=headers).text<br><br>    <span class=\"hljs-comment\">#正则匹配</span><br>    ex = <span class=\"hljs-string\">'&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;'</span><br>    star_list = re.findall(ex, data_pict, re.S)<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> star_list:<br>        url_2 = i<br>        <span class=\"hljs-comment\">#请求到了图片的二进制数据</span><br>        data_2_pict = requests.get(url=url_2, headers=headers).content<br>        <span class=\"hljs-comment\">#为图片设置名称</span><br>        img_name = url_2.split(<span class=\"hljs-string\">\"/\"</span>)[<span class=\"hljs-number\">-1</span>]<br>        img_path = <span class=\"hljs-string\">'./star_sky/'</span> + img_name<br>        <span class=\"hljs-keyword\">with</span> open(img_path, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>            fp.write(data_2_pict)<br>        print(img_name + <span class=\"hljs-string\">'...successful'</span>)<br>        time.sleep(<span class=\"hljs-number\">0.1</span>)<br><br>****************************************未完，，待更新********************************************<br></code></pre></td></tr></table></figure>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&apos;page_text&apos;)###page_text就是获取的响应数据\n    - xpath(&apos;xpath表达式&apos;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName</code></pre></li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#爬取妹子图片，总共有俩千多张</span><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> os<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    ii = <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./girl'</span>):<br>        os.mkdir(<span class=\"hljs-string\">'./girl'</span>)<br>    url_list = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">50</span>)]<br>    url_list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">''</span><br><br>    <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> url_list:<br>        url = <span class=\"hljs-string\">'https://www.lanvshen.com/zhongguo/'</span> + str(page) +<span class=\"hljs-string\">'.html'</span><br>        headers = &#123;<br>            <span class=\"hljs-string\">'User-Agent'</span> : <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>        &#125;<br>        get_text = requests.get(url=url, headers=headers)<br>        tree = etree.HTML(get_text.text)<br>        pict_ = tree.xpath(<span class=\"hljs-string\">'//div[@class=\"hezi\"]//li'</span>)<br>        <span class=\"hljs-keyword\">for</span> it_ <span class=\"hljs-keyword\">in</span> pict_:<br>            img_url = it_.xpath(<span class=\"hljs-string\">'./a/img/@src'</span>)[<span class=\"hljs-number\">0</span>]<br>            img_name = str(ii) + <span class=\"hljs-string\">'.jpg'</span><br>            img = requests.get(url=img_url, headers=headers).content<br>            img_path = <span class=\"hljs-string\">'./girl/'</span> + img_name<br>            <span class=\"hljs-keyword\">with</span> open(img_path, <span class=\"hljs-string\">'wb'</span>) <span class=\"hljs-keyword\">as</span> fp:<br>                fp.write(img)<br>            print(img_name + <span class=\"hljs-string\">'sccuessful...'</span>)<br>            ii = ii + <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-comment\">##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢</span><br><span class=\"hljs-comment\">##后期将学习爬取高清图片，并进行分布式爬取</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org\" target=\"_blank\" rel=\"noopener\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><br>url = <span class=\"hljs-string\">'http://httpbin.org'</span><br>headers = &#123;<br>\t<span class=\"hljs-string\">'User-Anget'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><br>&#125;<br><br><span class=\"hljs-comment\">#设置代理</span><br>proxy = &#123;<br>\t<span class=\"hljs-string\">'http'</span>: <span class=\"hljs-string\">'123.54.194.96:38661'</span><br>&#125;<br>get_text = requerts.get(url=url, headers=headers, proxies=proxy).text<br>print(get_text)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\" target=\"_blank\" rel=\"noopener\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\" target=\"_blank\" rel=\"noopener\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:/Users/Acer/Desktop/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB_day4_files/1.jpg\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">resp = resquests.get(url=url, vrrify=<span class=\"hljs-literal\">False</span>).content<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\">关于多线程生产者消费者模型</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> random<br><br>gMoney = <span class=\"hljs-number\">1000</span><br>gLock = threading.Lock()<br>gTotalTimes = <span class=\"hljs-number\">10</span><br>gTimes = <span class=\"hljs-number\">0</span><br><br><br><span class=\"hljs-comment\"># 生产线程Producer</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">global</span> gTimes<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgLock.acquire()<br>\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\tgLock.release()<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\tgMoney += money<br>\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱'</span><br>\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\tgTimes += <span class=\"hljs-number\">1</span><br>\t\t\tgLock.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-comment\"># 消费线程Consumer</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgLock.acquire()<br>\t\t\t<span class=\"hljs-keyword\">if</span> gMoney &gt;= money:<br>\t\t\t\tgMoney -= money<br>\t\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱'</span><br>\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\t<span class=\"hljs-comment\"># 若剩余金额不足以消费，则退出循环</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\t\tgLock.release()<br>\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\tprint(<span class=\"hljs-string\">'&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！'</span><br>\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))<br>\t\t\tgLock.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mainIt</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-comment\"># 设置3个消费线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\tt = Consumer(name=<span class=\"hljs-string\">'消费者线程&#123;&#125;'</span>.format(x))<br>\t\tt.start()<br>\t\t<span class=\"hljs-comment\"># 设置5个生产线程</span><br><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Producer(name=<span class=\"hljs-string\">'生产者线程&#123;&#125;'</span>.format(x))<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmainIt()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> random<br><span class=\"hljs-keyword\">import</span> time<br><br>gMoney = <span class=\"hljs-number\">1000</span><br>gCondition = threading.Condition()  <span class=\"hljs-comment\"># 等同于threading.Lock</span><br>gTimes = <span class=\"hljs-number\">0</span><br>gTotalTimes = <span class=\"hljs-number\">5</span><br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">global</span> gCondition<br>\t\t<span class=\"hljs-keyword\">global</span> gTimes<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgCondition.acquire()  <span class=\"hljs-comment\"># 加锁（全局变量改变前（gMoney））</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\tgCondition.release()  <span class=\"hljs-comment\"># 解锁</span><br>\t\t\t\tprint(<span class=\"hljs-string\">\"当前生产者总共生产了%s次\"</span> % gTimes)<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\tgMoney += money<br>\t\t\tprint(<span class=\"hljs-string\">\"%s当前存入%s元钱，剩余%s元线\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\tgTimes += <span class=\"hljs-number\">1</span><br>\t\t\tgCondition.notify_all()  <span class=\"hljs-comment\"># 通知正在等待的线程（wait）</span><br>\t\t\tgCondition.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cosumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> gMoney<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\tmoney = random.randint(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>)<br>\t\t\tgCondition.acquire()<br>\t\t\t<span class=\"hljs-keyword\">while</span> gMoney &lt; money:<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> gTimes &gt;= gTotalTimes:<br>\t\t\t\t\tgCondition.release()<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t\t\tprint(<span class=\"hljs-string\">\"%s准备消费%d元钱，剩余%d元钱，不足\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\t\tgCondition.wait()  <span class=\"hljs-comment\"># 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）</span><br>\t\t\tgMoney -= money<br>\t\t\tprint(<span class=\"hljs-string\">\"%s消费了%d元钱，剩余%d元钱\"</span> % (threading.current_thread(), money, gMoney))<br>\t\t\tgCondition.release()<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\tt = Cosumer(name=<span class=\"hljs-string\">\"消费者线程%s\"</span> % x)<br>\t\tt.start()<br>\t<span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt1 = Producer(name=<span class=\"hljs-string\">\"生产者线程%s\"</span> % y)<br>\t\tt1.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue<br><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">import</span> threading<br><br><br><span class=\"hljs-comment\"># 在队列中放入数值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_value</span><span class=\"hljs-params\">(q)</span>:</span><br>\tindex = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\tq.put(index)<br>\t\tindex += <span class=\"hljs-number\">1</span><br>\t\ttime.sleep(<span class=\"hljs-number\">0.8</span>)<br><br><br><span class=\"hljs-comment\"># 取出队列中的数值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_value</span><span class=\"hljs-params\">(q)</span>:</span><br>\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\tprint(q.get())<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-comment\"># 产生一个队列</span><br>\tq = Queue(<span class=\"hljs-number\">1</span>)<br>\tt1 = threading.Thread(target=set_value, args=[q])<br>\tt2 = threading.Thread(target=get_value, args=[q])<br><br>\tt1.start()<br>\tt2.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> threading,time<br><span class=\"hljs-comment\">#python2  from Queue import Queue</span><br><span class=\"hljs-comment\">#python3</span><br><span class=\"hljs-keyword\">import</span> queue<br> <br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> queue<br>\t\tcount = <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-comment\">#qsize返回queue内部长度</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> queue.qsize() &lt; <span class=\"hljs-number\">1000</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">100</span>):<br>\t\t\t\t\tcount += <span class=\"hljs-number\">1</span><br>\t\t\t\t\tmsg = <span class=\"hljs-string\">'生成产量'</span>+str(count)<br>\t\t\t\t\t<span class=\"hljs-comment\">#put是往queue中放入</span><br>\t\t\t\t\tqueue.put(msg)<br>\t\t\t\t\tprint(msg)<br>\t\t\ttime.sleep(<span class=\"hljs-number\">0.5</span>)<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">global</span> queue<br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> queue.qsize() &gt; <span class=\"hljs-number\">100</span>:<br>\t\t\t\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):<br>\t\t\t\t\t<span class=\"hljs-comment\">#get从queue中取出一个值</span><br>\t\t\t\t\tmsg = self.name + <span class=\"hljs-string\">\"消费了\"</span>+queue.get()<br>\t\t\t\t\tprint(msg)<br>\t\t\ttime.sleep(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tqueue = queue.Queue()<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">500</span>):<br>\t\tqueue.put(<span class=\"hljs-string\">\"初始产品\"</span>+str(i))<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">2</span>):<br>\t\tp = Producer()<br>\t\tp.start()<br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tc = Consumer()<br>\t\tc.start()<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue<br><span class=\"hljs-keyword\">import</span> threading<br><br><span class=\"hljs-string\">\"\"\" </span><br><span class=\"hljs-string\">我们引入了threading这个包，我们将使用这个包中的</span><br><span class=\"hljs-string\">Thread类，并在我们自定义的类中继承这个Thread类</span><br><span class=\"hljs-string\">\"\"\"</span><br><br><br><span class=\"hljs-comment\"># 生产者线程</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Procuder</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\theaders = &#123;<br>\t\t\t<span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'... 浏览器...'</span><br>\t&#125;<br><br>\t<span class=\"hljs-string\">\"\"\" 重写继承于父类的__init__方法 \"\"\"</span><br>\t<span class=\"hljs-string\">\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, *args, **kwargs)</span>:</span><br>\t\tsuper(Procuder, self).__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br><br>\t<span class=\"hljs-string\">\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"</span><br>\t<span class=\"hljs-string\">\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中</span><br><span class=\"hljs-string\">\t\t获取每页的url</span><br><span class=\"hljs-string\">\t\"\"\"</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\turl = self.page_queue.get()<br>\t\t\tself.parse_page(url)<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse_page</span><span class=\"hljs-params\">(self, url)</span>:</span><br>\t\t<span class=\"hljs-string\">\"\"\" </span><br><span class=\"hljs-string\">\t\t.......</span><br><span class=\"hljs-string\">\t\t</span><br><span class=\"hljs-string\">\t\t获取每页的响应数据，并从中提取出每张图片的</span><br><span class=\"hljs-string\">\t\turl和name，并放入队列中</span><br><span class=\"hljs-string\">\t\t\"\"\"</span><br><br><br><span class=\"hljs-comment\"># 消费者线程</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, *args, **kwargs)</span>:</span><br>\t\tsuper(Procuder, self).__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.img_queue.empty() <span class=\"hljs-keyword\">and</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t<span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\">\t\t\t\t......</span><br><span class=\"hljs-string\">\t\t\t\t</span><br><span class=\"hljs-string\">\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存</span><br><span class=\"hljs-string\">\t\t\t\t\"\"\"</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-string\">\"\"\" 设置页数和图片的url队列\"\"\"</span><br>\tpage_queue = Queue()<br>\timg_queue = Queue()<br><br>\t<span class=\"hljs-comment\"># 将每页的url放到页数队列中</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>):<br>\t\turl = <span class=\"hljs-string\">'http://........ %d'</span> % x<br>\t\tpage_queue.put(url)<br><br>\t<span class=\"hljs-comment\"># 设置5个生产者线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Procuder(page_queue, img_queue)<br>\t\tt.start()<br><br>\t<span class=\"hljs-comment\"># 设置5个消费者线程</span><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = Consumer(page_queue, img_queue)<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> re<br><span class=\"hljs-keyword\">from</span> lxml <span class=\"hljs-keyword\">import</span> etree<br><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">import</span> queue<br><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> request<br><br><span class=\"hljs-comment\"># 生产图片的url和name</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProimgUrl</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, headers, *args, **kwargs)</span>:</span><br>\t\tsuper().__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br>\t\tself.headers = headers<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\turl = self.page_queue.get()<br>\t\t\t\tself.parse_page(url)<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse_page</span><span class=\"hljs-params\">(self, url)</span>:</span><br>\t\timg_get = requests.get(url=url, headers=self.headers).text<br>\t\ttree = etree.HTML(img_get)<br>\t\timg_it = tree.xpath(<span class=\"hljs-string\">'//div[@class=\"page-content text-center\"]//a'</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> img_it:<br>\t\t\timg_url = it.xpath(<span class=\"hljs-string\">'./img[@class!=\"gif\"]/@data-original'</span>)[<span class=\"hljs-number\">0</span>]<br>\t\t\talt = it.xpath(<span class=\"hljs-string\">'./img/@alt'</span>)[<span class=\"hljs-number\">0</span>]<br>\t\t\talt = re.sub(<span class=\"hljs-string\">r'[\\?？.!！，。\\/\\*]'</span>, <span class=\"hljs-string\">''</span>, alt)<br>\t\t\t<span class=\"hljs-comment\"># 利用splitext截取图片的后缀名</span><br>\t\t\tsuffix = os.path.splitext(img_url)[<span class=\"hljs-number\">1</span>]<br>\t\t\timg_name = alt + suffix<br>\t\t\tself.img_queue.put((img_url, img_name))<br><br><br><span class=\"hljs-comment\"># 获取图片并储存</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConimgName</span><span class=\"hljs-params\">(threading.Thread)</span>:</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, page_queue, img_queue, headers, *args, **kwargs)</span>:</span><br>\t\tsuper().__init__(*args, **kwargs)<br>\t\tself.page_queue = page_queue<br>\t\tself.img_queue = img_queue<br>\t\tself.headers = headers<br><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(self)</span>:</span><br>\t\t<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t\t\t<span class=\"hljs-keyword\">if</span> self.img_queue.empty() <span class=\"hljs-keyword\">and</span> self.page_queue.empty():<br>\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t<span class=\"hljs-keyword\">else</span>:<br>\t\t\t\timg_url, img_name = self.img_queue.get()<br>\t\t\t\t<span class=\"hljs-comment\"># 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片</span><br>\t\t\t\trequest.urlretrieve(img_url, <span class=\"hljs-string\">'./smile/'</span>+img_name)<br>\t\t\t\tprint(img_name + <span class=\"hljs-string\">' 下载成功...'</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">'./smile'</span>):<br>\t\tos.mkdir(<span class=\"hljs-string\">'./smile'</span>)<br>\theaders = &#123;<br>\t\t<span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>\t\t\t\t\t  <span class=\"hljs-string\">'Chrome/80.0.3987.149 Safari/537.36 '</span><br>\t&#125;<br>\tpage_queue = queue.Queue(<span class=\"hljs-number\">100</span>)<br>\timg_queue = queue.Queue(<span class=\"hljs-number\">1000</span>)<br><br>\t<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>):<br>\t\turl = <span class=\"hljs-string\">'https://www.doutula.com/photo/list/?page='</span> + str(x)<br>\t\tpage_queue.put(url)<br><br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = ProimgUrl(page_queue, img_queue, headers)<br>\t\tt.start()<br><br>\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>\t\tt = ConimgName(page_queue, img_queue, headers)<br>\t\tt.start()<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>\tmain()<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\" target=\"_blank\" rel=\"noopener\">关于xpath选择器selector的网址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200328091921480.png\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n<ul>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>### setting文件详解\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br> <br><span class=\"hljs-comment\"># Scrapy settings for TestSpider project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br> <br>BOT_NAME = <span class=\"hljs-string\">'TestSpider'</span><br> <br>SPIDER_MODULES = [<span class=\"hljs-string\">'TestSpider.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'TestSpider.spiders'</span><br> <br> <br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\">#USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'</span><br> <br>USER_AGENT = <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'</span><br> <br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br><span class=\"hljs-comment\"># Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。</span><br><span class=\"hljs-comment\"># 默认是True，设置为False不遵守这个协议。</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br> <br> <br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># 配置scrapy的请求连接数，默认会同时并发16个请求。</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 10</span><br> <br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br> <br><span class=\"hljs-comment\"># 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0</span><br><span class=\"hljs-comment\"># DOWNLOAD_DELAY = 3</span><br> <br> <br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br> <br> <br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br> <br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\">#TELNETCONSOLE_ENABLED = False</span><br> <br> <br><span class=\"hljs-comment\"># Override the default request headers:</span><br> <br><span class=\"hljs-comment\"># 配置默认的请求头Headers.</span><br><span class=\"hljs-comment\"># DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"hljs-comment\">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><br><span class=\"hljs-comment\">#   'Accept-Language': 'en',</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br> <br><span class=\"hljs-comment\"># 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。</span><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br> <br><span class=\"hljs-comment\"># 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。</span><br><span class=\"hljs-comment\"># ITEM_PIPELINES = &#123;</span><br><span class=\"hljs-comment\">#    'TestSpider.pipelines.TestspiderPipeline': 300,</span><br><span class=\"hljs-comment\"># &#125;</span><br> <br> <br><span class=\"hljs-comment\"># 限速配置</span><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br> <br><span class=\"hljs-comment\"># 是否开启自动限速</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br> <br> <br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># 配置初始url的下载延时</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br> <br> <br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># 配置最大请求时间</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br> <br> <br><span class=\"hljs-comment\"># 配置请求和请求之间的下载间隔，单位是秒</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br> <br> <br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br> <br> <br><span class=\"hljs-comment\"># 关于Http缓存的配置，默认是不启用。</span><br><span class=\"hljs-comment\"># 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。</span><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\">#HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\">#HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\">#HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\">#HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\">#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n\n\n### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n- 创建爬虫项目：scrapy startproject xiushi\n- 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n#### item 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define here the models for your scraped items</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># See documentation in:</span><br><span class=\"hljs-comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span><br><br><span class=\"hljs-keyword\">import</span> scrapy<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushiItem</span><span class=\"hljs-params\">(scrapy.Item)</span>:</span><br>    <span class=\"hljs-comment\"># define the fields for your item here like:</span><br>    <span class=\"hljs-comment\"># name = scrapy.Field()</span><br>    title = scrapy.Field()<br>    text = scrapy.Field()<br></code></pre></td></tr></table></figure>\n\n#### setting 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Scrapy settings for xiushi project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><br>BOT_NAME = <span class=\"hljs-string\">'xiushi'</span><br><br>SPIDER_MODULES = [<span class=\"hljs-string\">'xiushi.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'xiushi.spiders'</span><br><br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\"># USER_AGENT = 'xiushi (+http://www.yourdomain.com)'</span><br><br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 32</span><br><br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br>DOWNLOAD_DELAY = <span class=\"hljs-number\">1</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br><br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\"># TELNETCONSOLE_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Override the default request headers:</span><br>DEFAULT_REQUEST_HEADERS = &#123;<br>    <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,<br>    <span class=\"hljs-string\">'Accept-Language'</span>: <span class=\"hljs-string\">'en'</span>,<br>    <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>                  <span class=\"hljs-string\">'Chrome/80.0.3987.163 Safari/537.36 '</span><br>&#125;<br><br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'xiushi.middlewares.XiushiSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br>ITEM_PIPELINES = &#123;<br>   <span class=\"hljs-string\">'xiushi.pipelines.XiushiPipeline'</span>: <span class=\"hljs-number\">300</span>,<br>&#125;<br><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\"># HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\"># HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n#### spider 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-keyword\">import</span> scrapy<br><span class=\"hljs-keyword\">from</span> xiushi.items <span class=\"hljs-keyword\">import</span> XiushiItem<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushispiderSpider</span><span class=\"hljs-params\">(scrapy.Spider)</span>:</span><br>    name = <span class=\"hljs-string\">'xiushiSpider'</span><br>    allowed_domains = [<span class=\"hljs-string\">'qiushidabaike.com'</span>]<br>    start_urls = [<span class=\"hljs-string\">'http://qiushidabaike.com/index_1.html'</span>]<br>    base_domain = <span class=\"hljs-string\">'http://qiushidabaike.com'</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse</span><span class=\"hljs-params\">(self, response)</span>:</span><br>        duanzi = response.xpath(<span class=\"hljs-string\">'//div[@class=\"main-left fl\"]//dl'</span>)<br>        <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> duanzi:<br>            title = it.xpath(<span class=\"hljs-string\">'./dt/span/a/text()'</span>).get().strip()<br>            text = it.xpath(<span class=\"hljs-string\">'./dd[@class=\"content\"]//text()'</span>).getall()<br>            text = <span class=\"hljs-string\">\"\"</span>.join(text).strip()<br>            item = XiushiItem(title=title, text=text)<br>            <span class=\"hljs-keyword\">yield</span> item<br>        <span class=\"hljs-comment\"># 进行翻页操作</span><br>        next_url = response.xpath(<span class=\"hljs-string\">'//div[@class=\"page\"]//a[@class=\"next\"]/@href'</span>).get()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> next_url:<br>            <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">yield</span> scrapy.Request(self.base_domain+next_url, callback=self.parse)<br></code></pre></td></tr></table></figure>\n\n#### pipelines 部分\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define your item pipelines here</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class=\"hljs-comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-string\"># 第一种方法，没进行json优化，但是看起来简单易操作</span><br><span class=\"hljs-string\">import json</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">class XiushiPipeline(object):</span><br><span class=\"hljs-string\">    def __init__(self):</span><br><span class=\"hljs-string\">        self.fp = open('duanzi.json', 'w', encoding='utf-8')</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def open_spider(self, spider):</span><br><span class=\"hljs-string\">        print('爬虫开始了...')</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def process_item(self, item, spider):</span><br><span class=\"hljs-string\">        item_json = json.dumps(dict(item),  ensure_ascii=False)</span><br><span class=\"hljs-string\">        self.fp.write(item_json+'\\n')</span><br><span class=\"hljs-string\">        return item</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">    def close_spider(self, spider):</span><br><span class=\"hljs-string\">        self.fp.close()</span><br><span class=\"hljs-string\">        print(\"爬虫结束了...\")</span><br><span class=\"hljs-string\">\"\"\"</span><br><span class=\"hljs-comment\"># 方案二，json优化，结果是每个字典存储在列表中</span><br><span class=\"hljs-comment\">#        好处是满足json规则，坏处是数据量较大时比较耗内存</span><br><span class=\"hljs-comment\"># ''' 自我感觉这种方法不咋地 '''</span><br><span class=\"hljs-comment\"># from scrapy.exporters import JsonItemExporter</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># class XiushiPipeline(object):</span><br><span class=\"hljs-comment\">#     def __init__(self):</span><br><span class=\"hljs-comment\">#         # 注意此时以二进制形式写入</span><br><span class=\"hljs-comment\">#         self.fp = open('duanzi.json', 'wb')</span><br><span class=\"hljs-comment\">#         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')</span><br><span class=\"hljs-comment\">#         self.exporter.start_exporting()</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def open_spider(self, spider):</span><br><span class=\"hljs-comment\">#         print('爬虫开始了...')</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def process_item(self, item, spider):</span><br><span class=\"hljs-comment\">#         self.exporter.export_item(item)</span><br><span class=\"hljs-comment\">#         return item</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     def close_spider(self, spider):</span><br><span class=\"hljs-comment\">#         self.exporter.finish_exporting()</span><br><span class=\"hljs-comment\">#         self.fp.close()</span><br><span class=\"hljs-comment\">#         print(\"爬虫结束了...\")</span><br><br><span class=\"hljs-string\">'''方案三'''</span><br><span class=\"hljs-keyword\">from</span> scrapy.exporters <span class=\"hljs-keyword\">import</span> JsonLinesItemExporter<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiushiPipeline</span><span class=\"hljs-params\">(object)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        <span class=\"hljs-comment\"># 注意此时以二进制形式写入</span><br>        self.fp = open(<span class=\"hljs-string\">'duanzi.json'</span>, <span class=\"hljs-string\">'wb'</span>)<br>        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"hljs-literal\">False</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">open_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        print(<span class=\"hljs-string\">'爬虫开始了...'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_item</span><span class=\"hljs-params\">(self, item, spider)</span>:</span><br>        self.exporter.export_item(item)<br>        <span class=\"hljs-keyword\">return</span> item<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">close_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        self.fp.close()<br>        print(<span class=\"hljs-string\">\"爬虫结束了...\"</span>)<br></code></pre></td></tr></table></figure>\n\n* 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n  * ```python\n    from scrapy import cmdline\n\n    cmdline.execute(&quot;scrapy crawl xiushiSpider&quot;.split())\n    # cmdline.execute([&quot;scrapy&quot;, &apos;crawl&apos;, &apos;xiushiSpider&apos;])\n    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br>        <br><br># 爬虫第六天<br><br>### scrapy 框架之spider类（示例二.爬取优美散文）<br><br>- item部分<br><br>&#96;&#96;&#96;python<br># -*- coding: utf-8 -*-<br><br># Define here the models for your scraped items<br>#<br># See documentation in:<br># https:&#x2F;&#x2F;doc.scrapy.org&#x2F;en&#x2F;latest&#x2F;topics&#x2F;items.html<br><br>import scrapy<br><br><br>class ProseItem(scrapy.Item):<br>    # define the fields for your item here like:<br>    # name &#x3D; scrapy.Field()<br>    title &#x3D; scrapy.Field()<br>    text &#x3D; scrapy.Field()<br></code></pre></td></tr></table></figure></code></pre><ul>\n<li>settings部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Scrapy settings for prose project</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># For simplicity, this file contains only settings considered important or</span><br><span class=\"hljs-comment\"># commonly used. You can find more settings consulting the documentation:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><br>BOT_NAME = <span class=\"hljs-string\">'prose'</span><br><br>SPIDER_MODULES = [<span class=\"hljs-string\">'prose.spiders'</span>]<br>NEWSPIDER_MODULE = <span class=\"hljs-string\">'prose.spiders'</span><br><br><span class=\"hljs-comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span><br><span class=\"hljs-comment\"># USER_AGENT = 'prose (+http://www.yourdomain.com)'</span><br><br><span class=\"hljs-comment\"># Obey robots.txt rules</span><br>ROBOTSTXT_OBEY = <span class=\"hljs-literal\">False</span><br><br><span class=\"hljs-comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS = 32</span><br><br><span class=\"hljs-comment\"># Configure a delay for requests for the same website (default: 0)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span><br><span class=\"hljs-comment\"># See also autothrottle settings and docs</span><br>DOWNLOAD_DELAY = <span class=\"hljs-number\">1</span><br><span class=\"hljs-comment\"># The download delay setting will honor only one of:</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><br><span class=\"hljs-comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span><br><br><span class=\"hljs-comment\"># Disable cookies (enabled by default)</span><br><span class=\"hljs-comment\"># COOKIES_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Disable Telnet Console (enabled by default)</span><br><span class=\"hljs-comment\"># TELNETCONSOLE_ENABLED = False</span><br><br><span class=\"hljs-comment\"># Override the default request headers:</span><br>DEFAULT_REQUEST_HEADERS = &#123;<br>    <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,<br>    <span class=\"hljs-string\">'Accept-Language'</span>: <span class=\"hljs-string\">'en'</span>,<br>    <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span><br>                  <span class=\"hljs-string\">'Chrome/80.0.3987.163 Safari/537.36 '</span><br>&#125;<br><br><span class=\"hljs-comment\"># Enable or disable spider middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span><br><span class=\"hljs-comment\"># SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'prose.middlewares.ProseSpiderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable downloader middlewares</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span><br><span class=\"hljs-comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"hljs-comment\">#    'prose.middlewares.ProseDownloaderMiddleware': 543,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Enable or disable extensions</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span><br><span class=\"hljs-comment\"># EXTENSIONS = &#123;</span><br><span class=\"hljs-comment\">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><br><span class=\"hljs-comment\"># &#125;</span><br><br><span class=\"hljs-comment\"># Configure item pipelines</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br>ITEM_PIPELINES = &#123;<br>   <span class=\"hljs-string\">'prose.pipelines.ProsePipeline'</span>: <span class=\"hljs-number\">300</span>,<br>&#125;<br><br><span class=\"hljs-comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_ENABLED = True</span><br><span class=\"hljs-comment\"># The initial download delay</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_START_DELAY = 5</span><br><span class=\"hljs-comment\"># The maximum download delay to be set in case of high latencies</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span><br><span class=\"hljs-comment\"># The average number of requests Scrapy should be sending in parallel to</span><br><span class=\"hljs-comment\"># each remote server</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span><br><span class=\"hljs-comment\"># Enable showing throttling stats for every response received:</span><br><span class=\"hljs-comment\"># AUTOTHROTTLE_DEBUG = False</span><br><br><span class=\"hljs-comment\"># Enable and configure HTTP caching (disabled by default)</span><br><span class=\"hljs-comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span><br><span class=\"hljs-comment\"># HTTPCACHE_ENABLED = True</span><br><span class=\"hljs-comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span><br><span class=\"hljs-comment\"># HTTPCACHE_DIR = 'httpcache'</span><br><span class=\"hljs-comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class=\"hljs-comment\"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><span class=\"hljs-keyword\">import</span> scrapy<br><span class=\"hljs-keyword\">from</span> prose.items <span class=\"hljs-keyword\">import</span> ProseItem<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProsespiderSpider</span><span class=\"hljs-params\">(scrapy.Spider)</span>:</span><br>    name = <span class=\"hljs-string\">'proseSpider'</span><br>    allowed_domains = [<span class=\"hljs-string\">'duwenzhang.com'</span>]<br>    start_urls = [<span class=\"hljs-string\">'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'</span>]<br>    base_url = <span class=\"hljs-string\">'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse</span><span class=\"hljs-params\">(self, response)</span>:</span><br>        <span class=\"hljs-comment\"># xpath 选择不含有某一属性的标签</span><br>        url_list = response.xpath(<span class=\"hljs-string\">'//center//tr[2]//td[(@valign) and not(@height)]/table'</span>)<br>        <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> url_list:<br>            title = it.xpath(<span class=\"hljs-string\">'.//tr[2]//td[@height=\"26\"]/b/a/text()'</span>).getall()<br>            text = it.xpath(<span class=\"hljs-string\">'.//tr[4]/td[@style=\"padding-left:3px\"]/text()'</span>).getall()<br>            text = <span class=\"hljs-string\">\"\"</span>.join(text).strip()<br>            item = ProseItem(title=title, text=text)<br>            <span class=\"hljs-keyword\">yield</span> item<br>        <span class=\"hljs-comment\"># //a[contains(text(), \"百度搜索\")]  【可以部分检索】</span><br>        <span class=\"hljs-comment\"># //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签</span><br>        next_url = response.xpath(<span class=\"hljs-string\">'//tr//a[text()=\"下一页\"]/@href'</span>).get()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> next_url:<br>            <span class=\"hljs-keyword\">return</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">yield</span> scrapy.Request(self.base_url+next_url, callback=self.parse)<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>piplines 部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span><br><br><span class=\"hljs-comment\"># Define your item pipelines here</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span><br><span class=\"hljs-comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span><br><br><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">from</span> scrapy.exporters <span class=\"hljs-keyword\">import</span> JsonLinesItemExporter<br><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProsePipeline</span><span class=\"hljs-params\">(object)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        self.fp = open(<span class=\"hljs-string\">'prose.json'</span>, <span class=\"hljs-string\">'wb'</span>)<br>        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"hljs-literal\">False</span>,<br>                                              encoding=<span class=\"hljs-string\">'utf-8'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">open_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        print(<span class=\"hljs-string\">'爬虫开始了...'</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_item</span><span class=\"hljs-params\">(self, item, spider)</span>:</span><br>        self.exporter.export_item(item)<br>        <span class=\"hljs-keyword\">return</span> item<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">close_spider</span><span class=\"hljs-params\">(self, spider)</span>:</span><br>        self.fp.close()<br>        print(<span class=\"hljs-string\">'爬虫结束了....'</span>)<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9s4ytpp0000wov8d35xdrmq","category_id":"ck9s4ytpx0004wov8bdm60voh","_id":"ck9s4ytq2000cwov82bfcda0e"},{"post_id":"ck9s4ytpv0002wov89dc5fsem","category_id":"ck9s4ytq10009wov8ad2uecwx","_id":"ck9s4ytq3000gwov83iik6jm5"},{"post_id":"ck9s4ytpy0006wov8al08b6in","category_id":"ck9s4ytq2000dwov8bm61f75z","_id":"ck9s4ytq4000kwov8cypye130"},{"post_id":"ck9s4ytq00008wov84elh1z7h","category_id":"ck9s4ytq3000hwov83sxx7n1n","_id":"ck9s4ytq4000mwov8bmyw4kac"},{"post_id":"ck9s4ytqj000nwov88zu03nt6","category_id":"ck9s4ytqn000rwov834wparn0","_id":"ck9s4ytqp000wwov8h1jsdfy6"},{"post_id":"ck9s4ytql000pwov86na39ign","category_id":"ck9s4ytqo000twov8ciuebxe2","_id":"ck9s4ytqq000ywov8a8vv8o9i"},{"post_id":"ck9s4ytrb000zwov8cctmh62s","category_id":"ck9s4ytrc0010wov85yjx190k","_id":"ck9s4ytrd0016wov8cdx62sh8"},{"post_id":"ck9s4ytrb000zwov8cctmh62s","category_id":"ck9s4ytrc0013wov8ewkog43g","_id":"ck9s4ytrd0017wov852jg07ec"}],"PostTag":[{"post_id":"ck9s4ytpp0000wov8d35xdrmq","tag_id":"ck9s4ytpy0005wov82pzme88w","_id":"ck9s4ytq1000bwov84wby02zk"},{"post_id":"ck9s4ytpv0002wov89dc5fsem","tag_id":"ck9s4ytq1000awov8fw2qdk40","_id":"ck9s4ytq3000fwov85pshcfv5"},{"post_id":"ck9s4ytpy0006wov8al08b6in","tag_id":"ck9s4ytq2000ewov88631el8w","_id":"ck9s4ytq4000jwov86h2adq1g"},{"post_id":"ck9s4ytq00008wov84elh1z7h","tag_id":"ck9s4ytq3000iwov815tn37zd","_id":"ck9s4ytq4000lwov86euvf7lr"},{"post_id":"ck9s4ytqj000nwov88zu03nt6","tag_id":"ck9s4ytqn000swov822glepve","_id":"ck9s4ytqp000vwov8723b84y7"},{"post_id":"ck9s4ytql000pwov86na39ign","tag_id":"ck9s4ytqo000uwov8bw9tboox","_id":"ck9s4ytqp000xwov84qgd756a"},{"post_id":"ck9s4ytrb000zwov8cctmh62s","tag_id":"ck9s4ytrc0011wov83ffpcupj","_id":"ck9s4ytrd0014wov87lbud1xt"},{"post_id":"ck9s4ytrb000zwov8cctmh62s","tag_id":"ck9s4ytrc0012wov8ebje7im7","_id":"ck9s4ytrd0015wov8h4mzffrr"}],"Tag":[{"name":"Git","_id":"ck9s4ytpy0005wov82pzme88w"},{"name":"mongodb","_id":"ck9s4ytq1000awov8fw2qdk40"},{"name":"blog","_id":"ck9s4ytq2000ewov88631el8w"},{"name":"管理学","_id":"ck9s4ytq3000iwov815tn37zd"},{"name":"Linux","_id":"ck9s4ytqn000swov822glepve"},{"name":"网络协议","_id":"ck9s4ytqo000uwov8bw9tboox"},{"name":"爬虫","_id":"ck9s4ytrc0011wov83ffpcupj"},{"name":"python","_id":"ck9s4ytrc0012wov8ebje7im7"}]}}